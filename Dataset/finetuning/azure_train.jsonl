{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for files with common web page content extensions created by IIS or Apache that could run arbitrary code. It includes a throttling mechanism to reduce false positive detections for web-based content management.\n Topic: Web Shells Threat Protection"}, {"role": "assistant", "content": "let MaxFileOperations = 3; // This will attempt to hide WebDAV publish operations by looking for file operations less than 'x' in a 5 minute period\nlet MaxAge = ago(7d); // This is how far back the query will search\nlet ExtensionList = pack_array('asp','aspx','aar','ascx','ashx','asmx','c','cfm','cgi','jsp','jspx','php','pl');//,'exe','dll','js','jar','py','ps1','psm1','cmd','psd1','java','wsf','vbs') Commented ones may cause false positive detection - add at will\nlet IncludeTemp = false; // whether to include files that contain \\temp\\ in their path\nlet PossibleShells = DeviceFileEvents \n| where Timestamp  > MaxAge \n    and InitiatingProcessFileName in~('w3wp.exe','httpd.exe') \n    and (IncludeTemp or FolderPath  !contains @'\\temp\\')\n    and ActionType in ('FileCreated', 'FileRenamed', 'FileModified')\n| extend extension = tolower(tostring(split(FileName,'.')[-1]))\n    , TimeBin = bin(Timestamp, 5m)\n| where extension in (ExtensionList);\nPossibleShells\n| summarize count() by DeviceId, TimeBin\n| where MaxFileOperations == -1 or count_ < MaxFileOperations\n| join kind=rightsemi PossibleShells on DeviceId, TimeBin\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies malicious file verdicts from the SonicWall Capture ATP service. This analytic rule leverages the SonicWall Firewall ASIM Network Session parser (ASimNetworkSessionSonicWallFirewall).\n  Ref: https://www.sonicwall.com/products/capture-advanced-threat-protection/\n  Ref: https://www.sonicwall.com/support/knowledge-base/how-to-view-threat-reports-capture-atp/170505384715913/\n Topic: SonicWall Firewall"}, {"role": "assistant", "content": "CommonSecurityLog\n| where DeviceEventClassID == 1631\n| extend CaptureATPVerdict = extract(@'Gateway Anti-Virus Status: (.*)\\. ', 1, Message)\n| where CaptureATPVerdict == \"BAD\"\n| parse-kv AdditionalExtensions as (['susr']:string, ['fileid']:string) with (pair_delimiter=\";\", kv_delimiter=\"=\")\n| extend\n    NetworkProtocol = toupper(iff(Protocol contains \"-\" and Protocol !contains \"/\", toupper(trim_start(@\".*-\", Protocol)), toupper(trim_end(@\"/.*\", Protocol)))),\n    NetworkApplicationProtocol = tostring(toupper(trim_start(@\".*/\", Protocol)))\n| project\n    TimeGenerated,\n    DeviceModel = DeviceProduct,\n    SerialNumber = Computer,\n    SrcIpAddr = SourceIP,\n    SrcUsername = coalesce(susr, SourceUserName),\n    NetworkProtocol,\n    NetworkApplicationProtocol,\n    RequestURL,\n    File = url_decode(tostring(split(RequestURL, '/')[-1])),\n    Hash = fileid,\n    Verdict = CaptureATPVerdict\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Triggers on admin permissions granted.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports \n| where EventMessage =~ 'grant_admin_privilege'\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple server errors from one source in short timeframe\n Topic: Tomcat"}, {"role": "assistant", "content": "let threshold = 100;\nTomcatEvent\n| where HttpStatusCode >= 500 and HttpStatusCode <= 599 \n| summarize MultipleServerErrors = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleServerErrors > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for sources of network scans.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where TimeGenerated > ago(24h)\n| where EventOriginalType has_any ('Network Scan', 'TCP Scan', 'UDP Scan') or EventType has_any ('Network Scan', 'TCP Scan', 'UDP Scan')\n| project TimeGenerated, SrcIpAddr\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies Office365 Sharepoint File Transfers above certain threshold in a 15min time period.\n Please note that entity mapping for arrays is not supported, so when there is a single value in an array, we will pull that value from the array as a single string to populate the entity to support entity mapping features within Sentinel. Additionally, if the array is multivalued, we will input a string to indicate this with a unique hash so that matching will not occur.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let threshold = 5000;\nOfficeActivity\n| where EventSource == \"SharePoint\" and OfficeWorkload has_any(\"SharePoint\", \"OneDrive\") and Operation has_any (\"FileDownloaded\", \"FileSyncDownloadedFull\", \"FileSyncUploadedFull\", \"FileUploaded\")\n| summarize count_distinct_OfficeObjectId=dcount(OfficeObjectId), fileslist=make_set(OfficeObjectId, 10000) by UserId,ClientIP,bin(TimeGenerated, 15m)\n| where count_distinct_OfficeObjectId >= threshold\n| extend FileSample = iff(array_length(fileslist) == 1, tostring(fileslist[0]), strcat(\"SeeFilesListField\",\"_\", tostring(hash(tostring(fileslist)))))\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for removal of build checks from the Azure DevOps pipeline. Removal of build checks are rare and may be indication of build pipeline compromise.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n  | where OperationName =~ \"CheckConfiguration.Deleted\"\n  | extend ResourceName = tostring(Data.ResourceName)\n  | extend Type = tostring(Data.Type)\n  | project-reorder TimeGenerated, OperationName, ResourceName, Type, ActorUPN, IpAddress, UserAgent\n  | extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The rule detects empty groups with entitlements. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"Empty group with entitlements\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is desinged to monitor Azure policies aligned with the Maturity Model for Event Log Management (M-21-31) standard. The alert triggers when EL1 policy compliance falls below 70% within a 1 week timeframe.\n Topic: MaturityModelForEventLogManagementM2131"}, {"role": "assistant", "content": "SecurityRecommendation\n| where RecommendationDisplayName <> \"\"\n| extend MaturityLevel=iff(RecommendationDisplayName has_any(\"agent\",\"extension\",\"retention\",\"logs encryption\",\"collect\",\"retained\",\"log profile\",\"CloudTrail\",\"metric\",\"AWS\",\"GCP\",\"DNS\",\"Auditing\",\"Flow\",\"logging\",\"usage\"), \"Event Logging (EL0)\",\niff(RecommendationDisplayName has_any(\"container registries\",\"logic apps\",\"Enhanced monitoring\",\"IoT Hub\",\"Event Hub\",\"App Service\", \"Kubernetes\",\"updates\",\"email\", \"automation\", \"adaptive\"), \"Advanced Event Logging (EL3)\",\niff(RecommendationDisplayName has_any(\"signatures\",\"CMK\",\"CMEK\",\"double encryption\",\"managed key\",\"KMS\",\"container\",\"Watcher\"), \"Intermediate Event Logging (EL2)\",\niff(RecommendationDisplayName has_any(\"Exploit Guard\",\"endpoint protection\",\"Antimalware\",\"health\",\"VPC\",\"Defender\",\"Vulnerabilities\",\"vulnerability\",\"diagnostic\",\"Key\",\"activity log alert\",\"\"), \"Basic Event Logging (EL1)\",\"Other\"))))\n| summarize arg_max(TimeGenerated, *) by RecommendationDisplayName, AssessedResourceId, MaturityLevel\n| summarize Failed = countif(RecommendationState == \"Unhealthy\"), Passed = countif(RecommendationState == \"Healthy\"), Total = countif(RecommendationState == \"Healthy\" or RecommendationState == \"Unhealthy\") by MaturityLevel\n| extend PassedControls = (Passed/todouble(Total))*100\n| extend RemediationLink = strcat('https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/22')\n| project MaturityLevel, Total, PassedControls, Passed, Failed, RemediationLink, LastObserved=now()\n| where MaturityLevel <> ''\n| where MaturityLevel == \"Basic Event Logging (EL1)\"\n| where PassedControls < 70 \n//Adjust Either FailedRatePercentage or PasedRatePercentage Thresholds within   Organizational Needs\n| sort by PassedControls desc\n| extend URLCustomEntity = RemediationLink\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for multi-factor authentication (MFA) helps protect devices and data that are accessible to these users. Adding more authentication methods, such as the Microsoft Authenticator app or a phone number, increases the level of protection if one factor is compromised.\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'AzureSecureScoreMFARegistrationV2'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies logons from IPv4 addresses not matching IPv4 subnets maintained on an allow list. This analytics rule uses the NetworkAddresses watchlist template. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// Use static IP address or CIDR list specified in the\n// NetworkAddresses watchlist template with tag \"AllowDataverse\"\nlet allowed_networks = MSBizAppsNetworkAddresses()\n    | where Tags has \"AllowDataverse\"\n    | summarize by IPSubnet;\nlet query_frequency = 1h;\nlet watchlist_entries_count = toscalar (allowed_networks\n    | summarize count());\nlet dataverse_signin_activity = materialize(\n    DataverseActivity\n    | where watchlist_entries_count > 0\n    | where TimeGenerated >= ago (query_frequency)\n    | where Message == \"UserSignIn\" and isnotempty(ClientIp)\n    | summarize FirstEvent = arg_min(TimeGenerated, *) by UserId, ClientIp, InstanceUrl\n    );\nlet authorized_ip_addresses = dataverse_signin_activity\n    | evaluate ipv4_lookup(allowed_networks, ClientIp, IPSubnet);\ndataverse_signin_activity\n| join kind=leftanti(authorized_ip_addresses) on ClientIp\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    FirstEvent,\n    UserId,\n    ClientIp,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Recorded Future Threat Hunting hash correlation for all actors.\n Topic: Recorded Future"}, {"role": "assistant", "content": "imFileEvent\n| where isnotempty(Hash)\n| join kind=inner (\nThreatIntelligenceIndicator\n// Only look for IOCs\n| where isnotempty(FileHashValue)\n// Only look at Recorded Future Threat Hunt Indicators.\n| where Description startswith \"Recorded Future - Threat Hunt\"\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n) on $left.Hash == $right.FileHashValue\n| project Hash, HashType\n| extend FileHash_0_Value = Hash\n| extend FileHash_0_Algorithm = HashType\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates an incident when a CrowdStrike Falcon sensor detection is triggered with a Critical Severity\n Topic: CrowdStrike Falcon Endpoint Protection"}, {"role": "assistant", "content": "let timeframe = 1h;\nCrowdStrikeFalconEventStream\n| where TimeGenerated > ago(timeframe)\n| where EventType == \"DetectionSummaryEvent\"\n| where Severity == \"Critical\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Total = count() by DstHostName, SrcIpAddr, DstUserName, Activity, Technique, FileName, FilePath, FileHash, Message\n| extend timestamp = StartTimeUtc, AccountCustomEntity = DstUserName, HostCustomEntity = DstHostName, IPCustomEntity = SrcIpAddr, FileHashCustomEntity = FileHash, FileHashAlgo = \"MD5\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible misconfiguration for bucket policy making it publicly available.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where PayloadMethodname =~ 'google.iam.v1.IAMPolicy.SetIamPolicy'\n| where ResourceType has 'bucket'\n| extend members = parse_json(todynamic(PayloadRequestPolicyBindings))[0]['members']\n| extend action = parse_json(todynamic(PayloadRequestPolicyBindings))[0]['action']\n| where members in~ ('allUsers', 'allAuthenticatedUsers')\n| where action =~ 'ADD'\n| extend AccountName = tostring(split(PayloadAuthenticationinfoPrincipalemail, \"@\")[0]), AccountUPNSuffix = tostring(split(PayloadAuthenticationinfoPrincipalemail, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses AzureActivity logs (Security category) to identify when a subscription is moved to another tenant.\nA threat actor may move a subscription into their own tenant to circumvent local resource deployment and logging policies.\nOnce moved, threat actors may deploy resources and perform malicious activities such as crypto mining.\nThis is a technique known as \"subscription hijacking\". More information can be found here: https://techcommunity.microsoft.com/t5/microsoft-365-defender-blog/hunt-for-compromised-azure-subscriptions-using-microsoft/ba-p/3607121\n Topic: Azure Activity"}, {"role": "assistant", "content": "let queryFrequency = 5m;\nlet eventCapture = \"moved from tenant ([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}) to tenant ([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\";\nAzureActivity\n| where ingestion_time() > ago(queryFrequency)\n| where CategoryValue =~ \"Security\"\n| where OperationNameValue =~ \"Microsoft.Subscription/updateTenant/action\"\n| extend Properties_d = coalesce(parse_json(Properties), Properties_d)\n| where isnotempty(Properties_d)\n| extend Summary = tostring(Properties_d.message)\n| extend EventCapture = extract_all(eventCapture, Summary)\n| extend SourceTenantId = iff(isnotempty(EventCapture), EventCapture[0][0], \"\")\n| extend DestinationTenantId = iff(isnotempty(EventCapture), EventCapture[0][1], \"\")\n| extend \n    Name = split(Caller, \"@\", 0)[0],\n    UPNSuffix = split(Caller, \"@\", 1)[0]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects XSS probing patterns.\n Topic: Cloudflare"}, {"role": "assistant", "content": "let s_threshold = 3;\nCloudflare\n| where HttpRequestMethod in~ ('POST', 'PUT')\n| extend susp_ch = countof(ClientRequestURI, '%00')\n| where ClientRequestURI matches regex @'(alert\\()|(alert\\%28)|(String\\.fromCharCode\\()|(expression\\(alert)' or susp_ch > s_threshold\n| extend IPCustomEntity = SrcIpAddr\n| extend UrlCustomEntity = ClientRequestURI\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This Analytics rule provides notifications when a VMware CWS policy has been modified. These alerts serve audit purposes. Policy changes might lower the level of security controls. Topic: VMware SD-WAN and SASE"}, {"role": "assistant", "content": "VMware_VECO_EventLogs_CL\n| where event == \"CWS_EVENT\"\n| extend cwsPolicyAction = todynamic(detail).subEvent\n| where cwsPolicyAction contains \"SECURITY_RULE\"\n| extend cwsRuleName = todynamic(detail).name\n| extend cwsRuleType = todynamic(detail).data.ruleType\n| extend cwsPolicyName = todynamic(detail).policyName\n\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query hunts through EXECVE syslog data generated by AUOMS to find instances of crypto currency miners being\n downloaded.It returns a table of suspicious command lines.\n Topic: Syslog"}, {"role": "assistant", "content": "// Extract EventType and EventData from AUOMS Syslog message\nSyslog\n| parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n| project TimeGenerated, EventType, Computer, EventData \n// Extract AUOMS_EXECVE details from EventData\n| where EventType =~ \"AUOMS_EXECVE\"\n| parse EventData with * \"syscall=\" syscall \" syscall_r=\" * \" success=\" success \" exit=\" exit \" a0\" * \" ppid=\" ppid \" pid=\" pid \" audit_user=\" audit_user \" auid=\" auid \" user=\" user \" uid=\" uid \" group=\" group \" gid=\" gid \"effective_user=\" effective_user \" euid=\" euid \" set_user=\" set_user \" suid=\" suid \" filesystem_user=\" filesystem_user \" fsuid=\" fsuid \" effective_group=\" effective_group \" egid=\" egid \" set_group=\" set_group \" sgid=\" sgid \" filesystem_group=\" filesystem_group \" fsgid=\" fsgid \" tty=\" tty \" ses=\" ses \" comm=\\\"\" comm \"\\\" exe=\\\"\" exe \"\\\"\" * \"cwd=\\\"\" cwd \"\\\"\" * \"name=\\\"\" name \"\\\"\" * \"cmdline=\\\"\" cmdline \"\\\" containerid=\" containerid\n// Find wget and curl commands\n| where comm in (\"wget\", \"curl\")\n// Find command lines featuring known crypto currency miner names\n| where cmdline contains \"nicehashminer\" or cmdline contains \"ethminer\" or cmdline contains \"equihash\" or cmdline contains \"NsCpuCNMiner64\" or cmdline contains \"minergate\" or cmdline contains \"minerd\" or cmdline contains \"cpuminer\" or cmdline contains \"xmr-stak-cpu\" or cmdline contains \"xmrig\" or cmdline contains \"stratum+tcp\" or cmdline contains \"cryptonight\" or cmdline contains \"monero\" or cmdline contains \"oceanhole\" or cmdline contains \"dockerminer\" or cmdline contains \"xmrdemo\"\n| project TimeGenerated, Computer, audit_user, user, cmdline\n| extend AccountCustomEntity = user, HostCustomEntity = Computer, timestamp = TimeGenerated\n| sort by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The length of a DNS query can often be an indicator of suspicious activity. Typical domain name lengths are short, whereas the domain name query used for data exfiltration or tunneling can often be very large in size. This is because they could be encoded using base 64/32 etc. The hunting query looks for Names that are more than 150 characters in length. Due to a lot of services using long DNS to communicate via procedurally generated long domain names,\nthis can be problematic, so a number of known services are excluded from this query. Additional items might need to be added to this exclusion, depending on your\nenvironment.\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "// Setting URI length threshold count, shorter URI's may cause noise, change as needed\nlet uriThreshold = 150;\nlet LocalDomains = \n(\nDnsEvents\n| summarize count() by Computer \n| extend SubDomain = tolower(strcat(tostring(split(Computer, \".\")[-2]),\".\", tostring(split(Computer, \".\")[-1])))\n| distinct SubDomain\n);\nlet DomainLookups =\n(\nDnsEvents\n| where SubType =~ \"LookupQuery\"\n| where ipv4_is_match(\"127.0.0.1\", ClientIP) == False \n| where Name !endswith \".local\" and Name !startswith \"_\" and Name !startswith \"#\"\n| where Name !contains \"::1\"\n| where Name !has \"cnr.io\" and Name !has \"kr0.io\" and Name !has \"arcticwolf.net\" and Name !has \"webcfs00.com\" and Name !has \"barracudabrts.com\"and Name !has \"trendmicro.com\" \nand Name !has \"sophosxl.net\" and Name !has \"spotify.com\" and Name !has \"e5.sk\" and Name !has \"mcafee.com\" and Name !has \"opendns.com\"  and Name !has \"spameatingmonkey.net\" \nand Name !has \"_ldap\" and Name !has \"_kerberos\" and Name !has \"modsecurity.org\" and Name !has \"fdmarc.net\" and Name !has \"ipass.com\" and Name !has \"wpad\"\nand Name !has \"cnr.io\" and Name !has \"trendmicro.com\" and Name !has \"sophosxl.net\" and Name !has \"spotify.com\" and Name !has \"e5.sk\" and Name !has \"mcafee.com\" \nand Name !has \"opendns.com\"  and Name !has \"spameatingmonkey.net\" and Name !has \"_ldap\" and Name !has \"_kerberos\" and Name !has \"modsecurity.org\" and Name !has \"fdmarc.net\" \nand Name !has \"ipass.com\"\n| extend Name = tolower(Name), Urilength = strlen(Name) \n| where Urilength >= uriThreshold\n| extend SubDomain = case(\nisempty(Name), Name,\narray_length(split(Name, \".\")) <= 2, Name,\ntostring(split(Name, \".\")[-2]) == \"corp\", strcat(tostring(split(Name, \".\")[-3]),\".\",tostring(split(Name, \".\")[-2]),\".\", tostring(split(Name, \".\")[-1])),\nstrlen(tostring(split(Name, \".\")[-1])) == 2, strcat(tostring(split(Name, \".\")[-3]),\".\",tostring(split(Name, \".\")[-2]),\".\", tostring(split(Name, \".\")[-1])),\ntostring(split(Name, \".\")[-2]) != \"corp\", strcat(tostring(split(Name, \".\")[-2]),\".\", tostring(split(Name, \".\")[-1])),\nName))\n;\nDomainLookups\n| join kind= leftanti (\n    LocalDomains\n) on SubDomain \n| summarize by TimeGenerated, Computer, ClientIP, Name, Urilength\n| extend HostName = iff(Computer has '.', substring(Computer,0,indexof(Computer,'.')),Computer)\n| extend DnsDomain = iff(Computer has '.', substring(Computer,indexof(Computer,'.')+1),\"\")\n| extend DNS_0_DomainName = Name\n| extend IP_0_Address = ClientIP\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert creates an incident when a source IP addresses attempt to communicate with a large amount of distinct ports within a short period.\n Topic: Sophos XG Firewall"}, {"role": "assistant", "content": "let threshold = 50;\nSophosXGFirewall\n| where Log_Type =~ \"Firewall\"\n| where not(ipv4_is_match(\"10.0.0.0\",Src_IP,8) or ipv4_is_match(\"172.16.0.0\",Src_IP,12) or ipv4_is_match(\"192.168.0.0\",Src_IP,16))\n| summarize dcount(Dst_Port) by Src_IP, bin(TimeGenerated, 5m)\n| where dcount_Dst_Port > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects PUT or POST of suspicious file\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "OracleWebLogicServerEvent\n| where HttpRequestMethod in~ (\"POST\", \"PUT\") \n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| where File matches regex @\"([a-zA-Z0-9-_]+\\.)([a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+)\"\n| extend IPCustomEntity = SrcIpAddr, FileCustomEntity = File, UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule triggers on multiple attack attemts triggered by same user.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where EventSubType =~ 'AttackAttempt'\n| summarize LatestAttackTime=max(EventEndTime), att=makeset(EventMessage) by ActorUsername\n| where array_length(att) > 1\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when user queries sensitive tables.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let sensitive_tbls = dynamic(['table_name1', 'table_name2']);\nOracleDatabaseAuditEvent\n| where isnotempty(DstUserName)\n| where isnotempty(Action)\n| extend TableName = replace(@'[,\\(\\)]', '', extract(@'(?i)SELECT(.*?)FROM\\s(.*?)\\s', 2, Action))\n| where isnotempty(TableName)\n| where TableName in (sensitive_tbls)\n| project TableName, DstUserName, DbAction\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection identifies anomalous spike in frequency of executions of sensitive processes which are often leveraged as attack vectors.\nThe query leverages KQLs built-in anomaly detection algorithms to find large deviations from baseline patterns.\nSudden increases in execution frequency of sensitive processes should be further investigated for malicious activity.\nTune the values from 1.5 to 3 in series_decompose_anomalies for further outliers or based on custom threshold values for score.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet TotalEventsThreshold = 5;\n// Configure the list with sensitive process names \nlet ExeList = dynamic([\"powershell.exe\",\"cmd.exe\",\"wmic.exe\",\"psexec.exe\",\"cacls.exe\",\"rundll32.exe\"]);\nlet TimeSeriesData =\nSecurityEvent\n| where EventID == 4688 | extend Process = tolower(Process)\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where Process in~ (ExeList)\n| project TimeGenerated, Computer, AccountType, Account, Process\n| make-series Total=count() on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by Process;\nlet TimeSeriesAlerts = materialize(TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, 1.5, -1, 'linefit')\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\n| where anomalies > 0\n| project Process, TimeGenerated, Total, baseline, anomalies, score\n| where Total > TotalEventsThreshold);\nlet AnomalyHours = materialize(TimeSeriesAlerts  | where TimeGenerated > ago(2d) | project TimeGenerated);\nTimeSeriesAlerts\n| where TimeGenerated > ago(2d)\n| join (\nSecurityEvent\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\n| where EventID == 4688 | extend Process = tolower(Process)\n| summarize CommandlineCount = count() by bin(TimeGenerated, 1h), Process, CommandLine, Computer, Account\n) on Process, TimeGenerated\n| project AnomalyHour = TimeGenerated, Computer, Account, Process, CommandLine, CommandlineCount, Total, baseline, anomalies, score\n| extend timestamp = AnomalyHour, NTDomain = split(Account, '\\\\', 0)[0], Name = split(Account, '\\\\', 1)[0], HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unexpected file type.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "CiscoWSAEvent\n| where isnotempty(AmpFileName)\n| where isempty(AmpThreatName)\n| where ResponseBodyMimeType =~ 'application/octet-stream'\n| where AmpFileName !endswith '.exe'\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects instances where an attacker has gained the ability to execute code on an ADFS Server through SMB and Remote Service or Scheduled Task.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let timeframe = 1d;\n// Adjust for a longer timeframe for identifying ADFS Servers\nlet lookback = 6d;\n// Identify ADFS Servers\nlet ADFS_Servers = (\nSecurityEvent\n| where TimeGenerated > ago(timeframe+lookback)\n| where EventID == 4688 and SubjectLogonId != \"0x3e4\"\n| where NewProcessName has \"Microsoft.IdentityServer.ServiceHost.exe\"\n| distinct Computer\n);\nSecurityEvent\n| where TimeGenerated > ago(timeframe)\n| where Computer in~ (ADFS_Servers)\n| where Account !endswith \"$\"\n// Check for scheduled task events\n| where EventID in (4697, 4698, 4699, 4700, 4701, 4702)\n| extend EventDataParsed = parse_xml(EventData)\n| extend SubjectLogonId = tostring(EventDataParsed.EventData.Data[3][\"#text\"])\n// Check specifically for access to IPC$ share and PIPE\\svcctl and PIPE\\atsvc for Service Control Services and Schedule Control Services\n| union (\n    SecurityEvent\n    | where TimeGenerated > ago(timeframe)\n    | where Computer in~ (ADFS_Servers)\n    | where Account !endswith \"$\"\n    | where EventID == 5145\n    | where RelativeTargetName =~ \"svcctl\" or RelativeTargetName  =~ \"atsvc\"\n)\n// Check for lateral movement\n| join kind=inner\n(SecurityEvent\n| where TimeGenerated > ago(timeframe)\n| where Account !endswith \"$\"\n| where EventID == 4624 and LogonType == 3\n) on $left.SubjectLogonId == $right.TargetLogonId\n| project TimeGenerated, Account, Computer, EventID, RelativeTargetName\n| extend timestamp = TimeGenerated\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountNTDomain = tostring(split(Account, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Looks across your environment for least common Process Command Lines, may be noisy and require allowlisting.  By ZanCo\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 7d;  \nlet Allowlist = dynamic (['foo.exe', 'baz.exe']);\nlet Sensitivity = 15;\nSecurityEvent\n| where TimeGenerated between(lookback..endtime)\n| where EventID == 4688\n| extend ProcArray = split(NewProcessName, '\\\\')\n// ProcArrayLength is Folder Depth\n| extend ProcArrayLength = array_length(ProcArray)\n| extend LastIndex = ProcArrayLength - 1\n| extend Proc = ProcArray[LastIndex]\n| where Proc !in (Allowlist)\n// ProcArray[0] is the proc's Drive\n| extend DriveDepthProc = strcat(ProcArray[0], '-', ProcArrayLength, '-', Proc)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TimesSeen = count(), HostCount = dcount(Computer), Hosts = make_set(Computer,maxSize=2000), UserCount = dcount(SubjectUserName), Users = make_set(SubjectUserName,maxSize=2000) by DriveDepthProc\n| where TimesSeen < Sensitivity\n| extend timestamp = StartTimeUtc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query will detect SQL queries that have affected an unusual number of rows for the given user and application combination.\nIt will calculate the prevalence for each row count impacted to find instances where a large number of rows is anomalously affected.\nThis hunting query is designed to detect SQL mass-deletion and mass-read events.\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let timeRange = 14d;\nlet threshold = 1; //Less than this % will be displayed\n//Count the total number of queries a user+client has accesses\n//How frequently the query averages data for an average execution time\nlet timeSliceSize = 1h;\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated > ago(timeRange)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n    ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n    IsSuccess = succeeded_s, DurationMs = duration_milliseconds_d, AffectedRows = affected_rows_d,\n    ResponseRows = response_rows_d, Statement = statement_s,\n    Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                      , 0),\n    State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                      , 0),\n    AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize));\nlet totals = processedData\n| summarize count() by PrincipalName, ApplicationName\n| extend joinKey = strcat(PrincipalName, ApplicationName)\n| project joinKey, count_;\nprocessedData\n//Count the total number of times each number of rows was accessed\n| summarize count() by AffectedRows, PrincipalName, ApplicationName\n| extend joinKey = strcat(PrincipalName, ApplicationName)\n| join kind=leftouter (\n  totals\n) on joinKey\n| extend prevalence = round(toreal(count_) / toreal(count_1) * 100, 2)\n| where prevalence <= threshold\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend CloudApplication_0_Name = ApplicationName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies any Domain indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in DeviceNetworkEvents.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet DeviceNetworkEvents_ = DeviceNetworkEvents\n  | where isnotempty(RemoteUrl)\n  | where TimeGenerated >= ago(dt_lookBack)\n  | where ActionType !has \"ConnectionFailed\"\n  | extend Domain = tostring(parse_url(tolower(RemoteUrl)).Host)\n  | where isnotempty(Domain)\n  | project-rename DeviceNetworkEvents_TimeGenerated = TimeGenerated;\nlet DeviceNetworkEventDomains = DeviceNetworkEvents_\n  | distinct Domain\n  | summarize make_list(Domain);\nThreatIntelligenceIndicator\n| where isnotempty(DomainName)\n| where TimeGenerated >= ago(ioc_lookBack)\n| extend TI_Domain = tolower(DomainName)\n| where TI_Domain in (DeviceNetworkEventDomains)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\"\n| join kind=innerunique (DeviceNetworkEvents_) on $left.TI_Domain == $right.Domain\n| where DeviceNetworkEvents_TimeGenerated < ExpirationDateTime\n| summarize DeviceNetworkEvents_TimeGenerated = arg_max(DeviceNetworkEvents_TimeGenerated, *) by IndicatorId, TI_Domain\n| project DeviceNetworkEvents_TimeGenerated, IndicatorId, TI_Domain, Url = RemoteUrl, ConfidenceScore, Description, ThreatType, Tags, TrafficLightProtocolLevel, ActionType, DeviceId, DeviceName, InitiatingProcessAccountUpn, InitiatingProcessCommandLine, RemoteIP, RemotePort\n| extend Name = tostring(split(InitiatingProcessAccountUpn, '@', 0)[0]), UPNSuffix = tostring(split(InitiatingProcessAccountUpn, '@', 1)[0])\n| extend timestamp = DeviceNetworkEvents_TimeGenerated, UserPrincipalName = InitiatingProcessAccountUpn\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for inbound block rules deleted by non AI.\n Topic: ZeroNetworks"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nZNSegmentAudit\n| where TimeGenerated > ago(endtime-starttime)\n| where AuditTypeId == 34\n| where EnforcementSource != \"AI\"\n| extend Account_0_FullName = PerformedByName\n| extend Host_0_NetBiosName = DestinationEntityName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects authentication requests from new IP address.\n Topic: PingFederate"}, {"role": "assistant", "content": "let known_src = \nPingFederateEvent\n| where TimeGenerated between (ago(14d) .. (1d))\n| where EventType in~ ('AUTHN_ATTEMPT', 'SSO')\n| where isnotempty(SrcIpAddr)\n| summarize makeset(SrcIpAddr);\nPingFederateEvent\n| where EventType in~ ('AUTHN_ATTEMPT', 'SSO')\n| where isnotempty(SrcIpAddr)\n| where SrcIpAddr !in (known_src)\n| extend AccountCustomEntity = DstUserName\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query is based on detecting incoming RPC/TCP on the SCM, followed by the start of a child process of services.exe. Remotely interacting with the SCM triggers the RPC/TCP traffic on services.exe, and the creation of the child processes is a result of starting the service. \nThe query might look intimidating given its size. Thats why weve commented the query per logic block to walk you through the details.\n Topic: FalconFriday"}, {"role": "assistant", "content": "// This rule is fairly complex, hence this documentation.\n// The rule tries to detect network activity from services.exe followed by the start of a new childvprocess of services.exe (i.e. a service start).\n// The rule tries to filter false positives as much as possible. \n// Since the FileProfile info is currently super-unreliable (unsure why), we have to work around it.\n// \n// The following list of LOLBINs is used to include all results which have a high reputation, but are LOLBINs.\nlet lolbins = dynamic([\"At.exe\", \"Atbroker.exe\", \"Bash.exe\", \"Bitsadmin.exe\", \"CertReq.exe\", \"Certutil.exe\", \"Cmd.exe\", \"Cmdkey.exe\", \"Cmstp.exe\", \"Control.exe\", \"Csc.exe\", \"Cscript.exe\", \"Desktopimgdownldr.exe\", \"Dfsvc.exe\", \"Diantz.exe\", \"Diskshadow.exe\", \"Dnscmd.exe\", \"Esentutl.exe\", \"Eventvwr.exe\", \"Expand.exe\", \"Extexport.exe\", \"Extrac32.exe\", \"Findstr.exe\", \"Forfiles.exe\", \"Ftp.exe\", \"GfxDownloadWrapper.exe\", \"Gpscript.exe\", \"Hh.exe\", \"Ie4uinit.exe\", \"Ieexec.exe\", \"Ilasm.exe\", \"Infdefaultinstall.exe\", \"Installutil.exe\", \"Jsc.exe\", \"Makecab.exe\", \"Mavinject.exe\", \"Microsoft.Workflow.Compiler.exe\", \"Mmc.exe\", \"MpCmdRun.exe\", \"Msbuild.exe\", \"Msconfig.exe\", \"Msdt.exe\", \"Mshta.exe\", \"Msiexec.exe\", \"Netsh.exe\", \"Odbcconf.exe\", \"Pcalua.exe\", \"Pcwrun.exe\", \"Pktmon.exe\", \"Presentationhost.exe\", \"Print.exe\", \"Psr.exe\", \"Rasautou.exe\", \"Reg.exe\", \"Regasm.exe\", \"Regedit.exe\", \"Regini.exe\", \"Register-cimprovider.exe\", \"Regsvcs.exe\", \"Regsvr32.exe\", \"Replace.exe\", \"Rpcping.exe\", \"Rundll32.exe\", \"Runonce.exe\", \"Runscripthelper.exe\", \"Sc.exe\", \"Schtasks.exe\", \"Scriptrunner.exe\", \"SyncAppvPublishingServer.exe\", \"Ttdinject.exe\", \"Tttracer.exe\", \"vbc.exe\", \"Verclsid.exe\", \"Wab.exe\", \"Wmic.exe\", \"Wscript.exe\", \"Wsreset.exe\", \"Xwizard.exe\", \"AgentExecutor.exe\", \"Appvlp.exe\", \"Bginfo.exe\", \"Cdb.exe\", \"csi.exe\", \"Devtoolslauncher.exe\", \"dnx.exe\", \"Dotnet.exe\", \"Dxcap.exe\", \"Excel.exe\", \"Mftrace.exe\", \"Msdeploy.exe\", \"msxsl.exe\", \"ntdsutil.exe\", \"Powerpnt.exe\", \"rcsi.exe\", \"Sqldumper.exe\", \"Sqlps.exe\", \"SQLToolsPS.exe\", \"Squirrel.exe\", \"te.exe\", \"Tracker.exe\", \"Update.exe\", \"vsjitdebugger.exe\", \"Winword.exe\", \"Wsl.exe\"]);\n// First, we want to get all the network events triggered by services.exe.\nlet networkEvents = materialize(DeviceNetworkEvents\n| where InitiatingProcessFileName in~ (\"services.exe\")\n| where ActionType == \"InboundConnectionAccepted\"\n| project-rename TimestampNetworkAct=Timestamp);\n// Next, we want to get the list of child processes created by services.exe. \nlet allServices = materialize ((\nDeviceProcessEvents \n// This is for optimization purposes, as filtering is way faster than joins.\n| where DeviceId in ((networkEvents | project DeviceId))\n//svchost and sppsvc are created very often as child processes of services.exe\n| where InitiatingProcessFileName =~ \"services.exe\" \n| project TimestampChild=Timestamp, DeviceId, DeviceName, FileName, ProcessCommandLine, SHA1, \nInitiatingProcessFileName, InitiatingProcessCommandLine, InitiatingProcessSHA1, InitiatingProcessId, TimestampServicesExe=InitiatingProcessCreationTime));\n// Now we are going to join the process creations and network events \n// and filter out all the tables _after_ the join where the child process \n// of svchost is not created shortly after the network activity (between 0 and 10 seconds). \nlet serviceNetworkEvents = materialize(\n(networkEvents \n    | join kind=inner hint.strategy=shuffle allServices on DeviceId, InitiatingProcessId, InitiatingProcessFileName\n) \n| where datetime_diff(\"Second\", TimestampChild, TimestampNetworkAct) between (0 .. 10)\n// Only get the results where the network activity occured more than 1 minute after services.exe has started (i.e. system boot).\n| where datetime_diff(\"Second\", TimestampNetworkAct, TimestampServicesExe) > 60);\n// Next, we want to check the reputation of all procssess.\n// Since FileProfile is not properly working, we use the built-in DeviceFileCertificateInfo for the AntiJoin.\n// The goal is to create a list of SHA1 hashes of the spawned processess \n// which have a low prevelance and are not in de DeviceFileCertificateInfo.\nlet serviceNetworkEventsWithSHA1 = materialize(serviceNetworkEvents\n| summarize count() by SHA1\n| join kind=leftanti hint.strategy=broadcast DeviceFileCertificateInfo on SHA1\n| where count_ < 100);\n// Finally, we need to bring everything together.\n// We take our subset of the child processess created by services.exe (serviceNetworkEvents).\n// Everything which is on our deny-list of SHA1 processess OR are LOLBINs, are filtered out.\n// Additionally, we filter out msiexec, since that appears to come very often.\nserviceNetworkEvents\n| where SHA1 in ((serviceNetworkEventsWithSHA1 | project SHA1)) or FileName in~ (lolbins) \n| where ProcessCommandLine !~ \"msiexec.exe /V\" \n// This summarize is optional if you want to group similar stuff.\n//| summarize ActionType=make_set(ActionType), RemoteIPs=make_set(strcat(RemoteIP, \":\", RemotePort, \" (\", RemoteUrl, \")\")), LocalPort=make_set(LocalPort) by bin(TimestampNetworkAct, 1m), DeviceId, DeviceName, LocalIP, Protocol, AdditionalFields, bin(TimestampChild, 1m), FileName, ProcessCommandLine, SHA1, InitiatingProcessFileName, InitiatingProcessCommandLine1, bin(TimestampServicesExe, 1m) \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for administrator issue completing secondary authentication.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where TimeGenerated > ago(24h)\n| where DvcAction =~ \"admin_2fa_error\"\n| project TimeGenerated, SrcIpAddr, DstUserName\n| extend AccountCustomEntity = DstUserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule is looking for new attacker behaviors observed by the Vectra Platform. This rule is focused on hosts detections.\n Topic: Vectra AI Detect"}, {"role": "assistant", "content": "CommonSecurityLog\n| where DeviceVendor == \"Vectra Networks\"\n| where DeviceProduct == \"X Series\"\n| where DeviceEventClassID != \"campaigns\"\n    and DeviceEventClassID != \"hsc\"\n    and DeviceEventClassID != \"audit\"\n    and DeviceEventClassID != \"health\"\n    and DeviceEventClassID != \"asc\"\n| extend Category = coalesce(\n    column_ifexists(\"DeviceEventCategory\", \"\"), \n    extract(\"cat=(.+?)(;|$)\", 1, AdditionalExtensions), \n    \"\"\n    )\n| project-rename threat_score = FlexNumber1\n| project-rename certainty_score = FlexNumber2\n| project-rename vectra_URL = DeviceCustomString4\n| project-rename detection_name = DeviceEventClassID\n| project-rename triaged = DeviceCustomString5\n| where triaged != \"True\" and AdditionalExtensions !has \"account\"\n| extend source_entity = case(isnotempty(SourceHostName), SourceHostName,\n    \"UNKNWON\")\n| extend level = case(threat_score == 0 and certainty_score == 0, \"Info\",\n    threat_score < 50 and certainty_score < 50, \"Low\",\n    threat_score < 50 and certainty_score >= 50, \"Medium\", \n    threat_score >= 50 and certainty_score <= 50, \"High\", \n    threat_score >= 50 and certainty_score >= 50, \"Critical\",\n    \"UNKNOWN\")\n| extend Severity = case(level == \"Info\", \"Informational\",level == \"Critical\", \"High\", level)\n| summarize arg_max(threat_score, *) by source_entity, Activity\n| sort by TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects users inactive for 30 days.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where Status =~ 'open'\n| where AlertMessage has 'Inactive users for more than 30 days'\n| extend AccountCustomEntity = ResourceId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "AzureDevOps retains items such as run records and produced artifacts for a configurable amount of time. An attacker looking to reduce the footprint left by their malicious activity may look to reduce the retention time for artifacts and runs.\nThis query will look for where retention has been reduced to the minimum level - 1, or reduced by more than half.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where OperationName =~ \"Pipelines.PipelineRetentionSettingChanged\"\n| where Data.SettingName in (\"PurgeArtifacts\", \"PurgeRuns\")\n| where Data.NewValue == 1 or Data.NewValue < Data.OldValue/2\n| project-reorder TimeGenerated, OperationName, ActorUPN, IpAddress, UserAgent, Data\n| extend timestamp = TimeGenerated\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Cookies: Secure Flag Not Used\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"medium\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"Cookies: Secure Flag Not Used\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when new user was created.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where EventMessage =~ 'User created'\n| where ObjectItemTypeName =~ 'USER'\n| project EventCreationTime, UserName, SrcIpAddr, ObjectItemName, AssociatedItems\n| extend AccountCustomEntity = ObjectItemName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows scripts which where executed on hosts.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where TimeGenerated > ago(24h)\n| where AppType =~ 'Script'\n| project EventStartTime, EventEndTime, EventMessage, ActingProcessFileInternalName, Hash, ActorUsername, EventSourceName\n| extend FileCustomEntity = ActingProcessFileInternalName, AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies attack pattern when attacker tries to move, or scan, from resource to resource on the network and creates an incident when a source has more than 1 registered deny action in Azure Firewall.\n Topic: Azure Firewall"}, {"role": "assistant", "content": "let threshold = 1;\nunion isfuzzy=true(\nAZFWApplicationRule\n| where Action == \"Deny\"\n| summarize StartTime = min(TimeGenerated), count() by SourceIp, Fqdn, Action, Protocol\n| where count_ >= [\"threshold\"]),\n(AZFWNetworkRule\n| where Action == \"Deny\"\n| extend Fqdn = DestinationIp\n| summarize StartTime = min(TimeGenerated), count() by SourceIp, Fqdn, Action, Protocol\n| where count_ >= [\"threshold\"]),\n(AZFWFlowTrace\n| where Action == \"Deny\"\n| extend Fqdn = DestinationIp\n| summarize StartTime = min(TimeGenerated), count() by SourceIp, Fqdn, Action, Protocol\n| where count_ >= [\"threshold\"]),\n(AZFWIdpsSignature\n| where Action == \"Deny\"\n| extend Fqdn = DestinationIp\n| summarize StartTime = min(TimeGenerated), count() by SourceIp, Fqdn, Action, Protocol\n| where count_ >= [\"threshold\"]),\n(AzureDiagnostics\n| where OperationName in (\"AzureFirewallApplicationRuleLog\",\"AzureFirewallNetworkRuleLog\")\n| extend msg_s_replaced0 = replace(@\"\\s\\s\",@\" \",msg_s)\n| extend msg_s_replaced1 = replace(@\"\\.\\s\",@\" \",msg_s_replaced0)\n| extend msg_a = split(msg_s_replaced1,\" \")\n| extend srcAddr_a = split(msg_a[3],\":\") , destAddr_a = split(msg_a[5],\":\")\n| extend Protocol = tostring(msg_a[0]), SourceIp = tostring(srcAddr_a[0]), srcPort = tostring(srcAddr_a[1]), DestinationIp = tostring(destAddr_a[0]), destPort = tostring(destAddr_a[1]), Action = tostring(msg_a[7])\n| where Action == \"Deny\"\n| extend Fqdn = iff(DestinationIp matches regex \"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\",\"\",DestinationIp)\n| summarize StartTime = min(TimeGenerated), count() by SourceIp, Fqdn, Action, Protocol\n| where count_ >= [\"threshold\"])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for writes of PE files to C:\\Windows\\System32\\spool\\drivers\\color\\.\n  This is a common directory used by malware, as well as some legitimate programs, and writes of PE files to the folder should be monitored.\n  Ref: https://www.microsoft.com/security/blog/2022/07/27/untangling-knotweed-european-private-sector-offensive-actor-using-0-day-exploits/\n Topic: Detections"}, {"role": "assistant", "content": "DeviceFileEvents\n  | where ActionType =~ \"FileCreated\"\n  | where FolderPath has \"C:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\\\\\" \n  | where FileName endswith \".exe\" or FileName endswith \".dll\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "VMware Cloud Web Security reported access events which were violating web access policy rules. Additional investigation might be required. Topic: VMware SD-WAN and SASE"}, {"role": "assistant", "content": "VMware_CWS_Weblogs_CL\n| where action == \"block\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects the use of the runas command and checks whether the account used to elevate privileges isnt the users own admin account. \nAdditionally, it will match this event to the logon events - to check whether it has been successful as well as augment the event with the new SID.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let RunAsProcess=DeviceProcessEvents\n    | where FileName =~ \"runas.exe\" \n    // You can choose to filter out the local admin account. This is based on convention. Here, we assume that localadmin accounts\n    // end with _ladmin (RID 500 / LAPS).\n    | where not(AccountName has_any(\"_ladmin\"))\n    // De-obfuscate the commandline used. \n    | extend CleanProcessCommandLine=parse_command_line(tostring(ProcessCommandLine), \"windows\")\n    // Exclude a user running something on their system through their admin account.\n    | where CleanProcessCommandLine !contains strcat(AccountName, \"_adm\") // Replace this with your admin account naming convention.\n    // Exclude local admin account activities by, for instance, the servicedesk that uses the LAPS provisioned account. This is optional. \n    // Disable the line below if the number of false positives is acceptable. \n    | where not(CleanProcessCommandLine has_any (\":_ladmin\")) // Replace this with your local RID500/LAPS account.\n    // Extract the username for the elevation action.\n    | extend ElevatedAccountName=extract(\"user:([a-zA-Z0-9\\\\\\\\]+)\",1,tostring(CleanProcessCommandLine))\n    // Strip the domain suffix.\n    | extend CleanElevatedAccountName= trim(\"(.*\\\\\\\\)\",ElevatedAccountName);\nRunAsProcess\n| join kind=leftouter ( \n    DeviceLogonEvents\n    | project-rename CleanElevatedAccountName = AccountName\n    ) on CleanElevatedAccountName,DeviceId\n| project-rename ElevatedActionType=ActionType1,ElevatedAccountSid=AccountSid1\n| project TimeGenerated,DeviceId,DeviceName,FileName,FolderPath,ProcessCommandLine,SHA256,ProcessIntegrityLevel,AccountDomain,AccountName,AccountSid, LogonId, InitiatingProcessFileName,InitiatingProcessFolderPath,InitiatingProcessCommandLine,CleanProcessCommandLine,ElevatedAccountName,CleanElevatedAccountName,ElevatedActionType,LogonType,ElevatedAccountSid\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for users with suspicious spikes in the number of files accessed that relate to topics commonly accessed as part of Business Email Compromise (BEC) attacks.\nThe query looks for access to files in AWS S3 storage that relate to topics such as invoices or payments, and then looks for users accessing these files in significantly higher numbers than in the previous 14 days. Incidents raised by this analytic should be investigated to see if the user accessing these files should be accessing them, and if the volume they accessed them at was related to a legitimate business need. \nThis query contains thresholds to reduce the chance of false positives, these can be adjusted to suit individual environments. In addition false positives could be generated by legitimate, scheduled actions that occur less often than every 14 days, additional exclusions can be added for these actions on username or IP address entities.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "let BEC_Keywords = dynamic([ 'invoice','payment','paycheck','transfer','bank statement','bank details','closing','funds','bank account','account details','remittance','purchase','deposit',\"PO#\",\"Zahlung\",\"Rechnung\",\"Paiement\", \"virement bancaire\",\"Bankuberweisung\",'hacked','phishing']);\n// Adjust this threshold based on your environment\nlet sensitivity = 2.5;\nlet Events = materialize(AWSCloudTrail\n| where TimeGenerated between (ago(14d)..ago(0d))\n| where UserIdentityAccountId != \"anonymous\"\n| where EventSource startswith \"s3.\"\n| where EventName =~ \"GetObject\"\n| extend FilePath = tostring(parse_json(RequestParameters).key)\n| where FilePath has_any(BEC_Keywords)\n);\nEvents\n| summarize dcount(FilePath) by UserIdentityPrincipalid, bin(startofday(TimeGenerated), 1d)\n| summarize CountOfDocs = make_list(dcount_FilePath, 10000), TimeStamp = make_list(TimeGenerated, 10000) by UserIdentityPrincipalid\n| extend (Anomalies, Score, Baseline) = series_decompose_anomalies(CountOfDocs, sensitivity, -1, 'linefit')\n| mv-expand CountOfDocs to typeof(double), TimeStamp to typeof(datetime), Anomalies to typeof(double),Score to typeof(double), Baseline to typeof(long)\n| where Anomalies > 0\n| project TimeStamp, CountOfDocs, Baseline, Score, Anomalies, UserIdentityPrincipalid\n| join kind=inner(Events | extend TimeStamp = startofday(TimeGenerated)) on TimeStamp, UserIdentityPrincipalid\n| extend Name = iif(UserIdentityUserName contains \"@\", split(UserIdentityUserName, \"@\")[0], UserIdentityUserName)\n| extend UPNSuffix = iif(UserIdentityUserName contains \"@\", split(UserIdentityUserName, \"@\")[1], \"\")\n| project-reorder TimeGenerated, UserIdentityType, UserIdentityPrincipalid, UserIdentityUserName, FilePath, EventName, UserAgent, SourceIpAddress, CountOfDocs, Baseline, Score\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for Password spraying attacks.\n Topic: TenableAD"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.kql parser into the workspace\n// Retrieve the parser here: https://raw.githubusercontent.com/tenable/Azure-Sentinel/Tenable.ad-connector/Solutions/TenableAD/Parsers/afad_parser.kql\n// Then, create the Kusto Function with alias afad_parser\nafad_parser\n  | where MessageType == 2 and Codename == \"Password Spraying\"\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect the aftermath of a successfully delivered and executed maldoc (Microsoft Office). Indicates an Office document was opened from an email or download/link, spawned a suspicious execution, and attempted to execute code via common Windows binaries.\n Topic: Cyborg Security HUNTER"}, {"role": "assistant", "content": "let officeProducts = dynamic([\"WINWORD.EXE\",\"EXCEL.EXE\",\"POWERPNT.EXE\",\"MSACCESS.EXE\",\"VISIO.EXE\",\"WINPROJ.EXE\"]);\nlet executionMethods = dynamic([\"powershell.exe\",\"cmd.exe\",\"WScript.exe\",\"rundll32.exe\",\"cscript.exe\",\"wmic.exe\",\"mshta.exe\",\"msiexec.exe\"]);\nSecurityEvent\n| where TimeGenerated >= ago(7d)\n| where (NewProcessName has_any (officeProducts,\"OUTLOOK.EXE\",\"explorer.exe\",executionMethods) or ParentProcessName has_any (officeProducts,\"OUTLOOK\",\"explorer\",executionMethods))\n| project TimeGenerated, Computer, Activity, EventID, CommandLine, NewProcessName, processId = tolong(NewProcessId), ParentProcessName, parentProcessId = tolong(ProcessId)\n| extend sourceAppTrue=case(NewProcessName endswith \"outlook.exe\",1,\n                            (ParentProcessName has_any(\"outlook.exe\",\"explorer.exe\") and NewProcessName has_any(officeProducts)),1,\n                            0)\n| extend officeAppTrue=case(NewProcessName has_any(officeProducts),1,\n                            ParentProcessName has_any(officeProducts),1,\n                            0)\n| extend executionTrue=case(NewProcessName has_any(executionMethods),1,\n                            ParentProcessName has_any(executionMethods),1,\n                            0)\n| summarize process=make_set(NewProcessName,10), processId=make_set(processId,10), parentProcess=make_set(ParentProcessName,10),parentProcessId=make_set(parentProcessId,10), sourceApp=sum(sourceAppTrue), officeApp=sum(officeAppTrue), execution=sum(executionTrue)\nby Computer, bin(TimeGenerated,5m)\n| where sourceApp > 0 and officeApp > 0 and execution > 0\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected Lambda function throttled. Attacker could use this technique to result in Denial of Service. More about this API at https://docs.aws.amazon.com/lambda/latest/dg/API_PutFunctionConcurrency.html \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where  EventName startswith \"PutFunctionConcurrency\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| where tostring(parse_json(RequestParameters).reservedConcurrentExecutions) == \"0\"\n| project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData,UserIdentityArn, ResponseElements, FunctionName = tostring(parse_json(RequestParameters).functionName)\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = FunctionName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Guest Accounts are added in the Organization Tenants to perform various tasks i.e projects execution, support etc.. This detection notifies when guest users are added to Microsoft Entra ID Groups other than the ones specified and poses a risk to gain access to sensitive apps or data.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "// OBJECT ID of AAD Groups can be found by navigating to Azure Active Directory then from menu on the left, select Groups and from the list shown of AAD Groups, the Second Column shows the ObjectID of each\nlet GroupIDs = dynamic([\"List with Custom AAD GROUP OBJECT ID 1\",\"Custom AAD GROUP OBJECT ID 2\"]);\nAuditLogs\n| where OperationName in ('Add member to group', 'Add owner to group')\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n// Uncomment the following line to filter events where the inviting user was a guest user\n//| where InitiatedBy has_any (\"CUSTOM DOMAIN NAME#\", \"#EXT#\")\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend InvitedUserPrincipalName = trim(@'\"',tostring(TargetResource.userPrincipalName)),\n               Properties = TargetResource.modifiedProperties\n  )\n| mv-apply Property = Properties on \n  (\n      where Property.displayName =~ \"Group.DisplayName\"\n      | extend AADGroup = trim('\"',tostring(Property.newValue))\n  )\n| where InvitedUserPrincipalName has_any (\"CUSTOM DOMAIN NAME#\", \"#EXT#\")\n| mv-apply Property = Properties on\n   (\n     where Property.displayName =~ \"Group.ObjectID\"\n     | extend AADGroupId = trim('\"',tostring(Property.newValue))\n   )\n| project-away TargetResource, Property\n| where AADGroupId !in (GroupIDs)\n| extend Name = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n| extend InvitedUserName = tostring(split(InvitedUserPrincipalName,'@',0)[0]), InvitedUPNSuffix = tostring(split(InvitedUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when user logged in as admin.\n Topic: Box"}, {"role": "assistant", "content": "let lbperiod_start = 14d;\nlet lbperiod_end = 1d;\nlet admins = BoxEvents\n| where TimeGenerated between (ago(lbperiod_start) .. ago(lbperiod_end))\n| where EventType =~ 'ADMIN_LOGIN'\n| summarize makeset(SourceLogin);\nBoxEvents\n| where EventType =~ 'ADMIN_LOGIN'\n| where SourceLogin !in (admins)\n| extend AccountCustomEntity = SourceLogin\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query searches for document copy activity from shared drive to a private drive, potential sign of data exfiltration.\nhttps://www.mitiga.io/blog/mitiga-security-advisory-lack-of-forensic-visibility-with-the-basic-license-in-google-drive\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where TimeGenerated > ago(24h)\n| where EventMessage =~ 'source_copy'\n| project TimeGenerated, ActorEmail, SrcIpAddr, DocTitle\n| extend Name = tostring(split(ActorEmail,'@',0)[0]), UPNSuffix = tostring(split(ActorEmail,'@',1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple errors to same domain.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "let threshold = 2;\nlet err = dynamic(['NXDOMAIN', 'SERVFAIL', 'REFUSED']);\nGCPCloudDNS\n| where EventResultDetails in~ (err)\n| summarize ips = makeset(SrcIpAddr) by Query, bin(TimeGenerated, 10m)\n| where array_length(ips) >= threshold\n| extend DNSCustomEntity = Query, IPCustomEntity = ips\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for deleted databases.\n Topic: Snowflake"}, {"role": "assistant", "content": "Snowflake\n| where TimeGenerated > ago(24h)\n| where QUERY_TYPE_s =~ 'DROP'\n| where QUERY_TEXT_s has 'database'\n| where EXECUTION_STATUS_s =~ 'SUCCESS'\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0035 (Theom has observed shadow (or clone) databases/tables with large financial value. As per this requirement, use this information to apply data access control lists or access permissions and enforce data retention policies)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0035\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies a web request to a URL that holds a file type, including .ps1, .bat, .vbs, and .scr that can be harmful if downloaded. This analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM WebSession schema (ASIM WebSession Schema)\n Topic: Detections"}, {"role": "assistant", "content": "let default_file_ext_blocklist = dynamic(['.ps1', '.vbs', '.bat', '.scr']); // Update this list as per your requirement\nlet custom_file_ext_blocklist=toscalar(_GetWatchlist('RiskyFileTypes')\n  | extend Extension=column_ifexists(\"Extension\", \"\")\n  | where isnotempty(Extension)\n  | summarize make_set(Extension)); // If you have an extensive list, you can also create a Watchlist that includes the file extensions you want to detect\nlet file_ext_blocklist = array_concat(default_file_ext_blocklist, custom_file_ext_blocklist);\n_Im_WebSession(starttime=ago(10min), url_has_any=file_ext_blocklist, eventresult='Success')\n| extend requestedFileName=tostring(split(tostring(parse_url(Url)[\"Path\"]), '/')[-1])\n| extend requestedFileExtension=extract(@'(\\.\\w+)$', 1, requestedFileName, typeof(string))\n| where requestedFileExtension in (file_ext_blocklist)\n| summarize\n  EventStartTime=min(TimeGenerated),\n  EventEndTime=max(TimeGenerated),\n  EventCount=count()\n  by SrcIpAddr, SrcUsername, SrcHostname, requestedFileName, Url\n| extend\n  Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n  UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert creates an incident when a client generates an excessive amounts of denied proxy traffic.\n Topic: SymantecProxySG"}, {"role": "assistant", "content": "let threshold = 100;\nSymantecProxySG\n| where sc_filter_result =~ \"DENIED\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by c_ip, cs_host\n| where count_ > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for service accounts disabled for the last 24 hours.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where TimeGenerated > ago(24h)\n| where PayloadMethodname =~ 'google.iam.admin.v1.DisableServiceAccount'\n| extend result = parse_json(todynamic(PayloadAuthorizationinfo))[0]['granted']\n| where result =~ 'true'\n| project-away result\n| extend timestamp = TimeGenerated, AccountCustomEntity = PayloadRequestAccountId, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for sign-in activity from Nord VPN providers.\nThe purpose is to identify any unfamiliar sign-in attempts from VPN providers, that are not typically observed among users in the organization.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let nord_vpn_feed = (externaldata(id:int,ip_address: string,search_keywords: dynamic,categories:dynamic,name: string,domain:string,price:int,flag:string,country:string,location:dynamic ,load: int ,features:dynamic)\n  [@\"https://raw.githubusercontent.com/microsoft/mstic/master/nordvpn-servers.csv\"] with (format=\"csv\", ignoreFirstRecord=True));\nOktaSSO\n| where eventType_s =~ \"user.session.start\"\n| where outcome_result_s =~ \"SUCCESS\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by actor_alternateId_s, actor_displayName_s, client_userAgent_os_s, client_ipAddress_s, client_geographicalContext_state_s,displayMessage_s, outcome_result_s,\n outcome_reason_s, column_ifexists('debugContext_debugData_logOnlySecurityData_s', \"\"), debugContext_debugData_threatSuspected_s, client_userAgent_rawUserAgent_s,client_userAgent_browser_s, severity_s\n| join kind= inner nord_vpn_feed on $left.client_ipAddress_s == $right.ip_address\n| extend Account_0_Name = actor_displayName_s\n| extend IP_0_Address = client_ipAddress_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule is looking for new attacker behaviors observed by the Vectra Platform. The intent is to create entries in the SecurityAlert table for every new detection attached to an entity monitored by the Vectra Platform Topic: Vectra XDR"}, {"role": "assistant", "content": "VectraDetections\n| where Type == \"account\"\n| extend\n    entity_uid = ['Entity UID'],\n    entity_id = ['Entity ID'],\n    entity_type = ['Entity Type'],\n    detection_id = ['Detection ID'],\n    detection = ['Detection Name'],\n    category = ['Detection Category'],\n    detection_url = ['Vectra Pivot'],\n    mitre = Mitre,\n    tags = Tags\n| summarize arg_max(TimeGenerated, *) by ['Detection ID'], entity_uid\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a list of IP addresses with a minimum number (default of 5) of failed logon attempts to Microsoft Entra ID.\nUses that list to identify any successful remote logons to hosts from these IPs within the same timeframe.\n Topic: Detections"}, {"role": "assistant", "content": "//Adjust this threshold to fit the environment\nlet signin_threshold = 5;\n//Make a list of all IPs with failed signins to AAD above our threshold\nlet aadFunc = (tableName:string){\nlet suspicious_signins =\ntable(tableName)\n| where ResultType !in (\"0\", \"50125\", \"50140\")\n| where IPAddress !in ('127.0.0.1', '::1', '')\n| summarize count() by IPAddress\n| where count_ > signin_threshold\n| summarize make_set(IPAddress);\n//See if any of these IPs have sucessfully logged into *nix hosts\nlet linux_logons =\nSyslog\n| where Facility contains \"auth\" and ProcessName != \"sudo\"\n| where SyslogMessage has \"Accepted\"\n| extend SourceIP = extract(\"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\",1,SyslogMessage)\n| where SourceIP in (suspicious_signins)\n| extend Reason = \"Multiple failed AAD logins from IP address\"\n| project TimeGenerated, Computer, HostIP, IpAddress = SourceIP, SyslogMessage, Facility, ProcessName, Reason;\n//See if any of these IPs have sucessfully logged into Windows hosts\nlet win_logons = (union isfuzzy=true\n(SecurityEvent\n| where EventID == 4624\n| where LogonType in (10, 7, 3)\n| where IpAddress != \"-\"\n| where IpAddress in (suspicious_signins)\n| extend Reason = \"Multiple failed AAD logins from IP address\"\n| project TimeGenerated, Account, AccountType, Computer, Activity, EventID, LogonProcessName, IpAddress, LogonTypeName, TargetUserSid, TargetUserName, TargetDomainName, _ResourceId, Reason\n),\n(WindowsEvent\n| where EventID == 4624 and has_any_ipv4(EventData, toscalar(suspicious_signins))\n| extend LogonType = tostring(EventData.LogonType)\n| where LogonType in (10, 7, 3)\n| extend  IpAddress = tostring(EventData.IpAddress)\n| where IpAddress != \"-\"\n| where IpAddress in (suspicious_signins)\n| extend Reason = \"Multiple failed AAD logins from IP address\"\n| extend Activity = \"4624 - An account was successfully logged on.\"\n| extend TargetUserName = tostring(EventData.TargetUserName), TargetDomainName = tostring(EventData.TargetDomainName)\n| extend Account =  strcat(TargetDomainName,\"\\\\\", TargetUserName)\n| extend TargetUserSid = tostring(EventData.TargetUserSid)\n| extend TargetAccount = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n| extend AccountType =case(Account endswith \"$\" or TargetUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(TargetUserSid), \"\", \"User\")\n| extend LogonProcessName = tostring(EventData.LogonProcessName)\n| project TimeGenerated, Account, AccountType, Computer, Activity, EventID, LogonProcessName, IpAddress, TargetUserSid, TargetUserName, TargetDomainName, _ResourceId, Reason\n)\n);\nunion isfuzzy=true linux_logons,win_logons\n| extend timestamp = TimeGenerated\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex+1), Computer)\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The adversary may be trying to move through the environment. APT29 and APT32, for example, have used PtH and PtT techniques to lateral move around the network. The query below generates an output of all users performing resource access (4624:3) to devices for the first time.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "BehaviorAnalytics\n| where ActivityType =~ \"LogOn\"\n| where ActionType =~ \"ResourceAccess\"\n| where ActivityInsights has \"True\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by bin(TimeGenerated,1d), UserName, UserPrincipalName, tostring(UsersInsights), ActivityType, ActionType, tostring(ActivityInsights), SourceIPAddress, SourceIPLocation, SourceDevice, tostring(DevicesInsights)\n| extend Name=split(UserPrincipalName, \"@\")[0], UPNSuffix=split(UserPrincipalName, \"@\")[1]\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SourceIPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection identifies RDP application network traffic and filters any source/destination pair generating more than 25 events hard threshold.\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "// Start of the query and  Filter events that resulted in failure\n_Im_NetworkSession(eventresult=\"Failure\")\n// Filter out private source IP addresses and focus on specific destination port (3389)\n// Also, ensure that the source and destination IP addresses are not the same\n| where not(ipv4_is_private(SrcIpAddr)) and tostring(DstPortNumber) has_any (\"3389\") and SrcIpAddr != DstIpAddr\n// Summarize the data by source and destination IP addresses, destination port number, network protocol, and event result\n// Also, bin the time generated in 5-minute intervals\n// Calculate the minimum and maximum time generated, the sum of event counts, and a set of up to 10 event vendors\n| summarize Starttime= min(TimeGenerated),EndTime= max(TimeGenerated),TargettedIPs=dcount(DstIpAddr),Eventscount=sum(EventCount),EventVendors=make_set(EventVendor,10) by SrcIpAddr,DstPortNumber,EventResult, bin(TimeGenerated, 5m)\n// Filter the summarized data to include only those with an event count of 25 or more\n| where Eventscount >= 25\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This Creates an incident when a host has a high number of Urgent, severity 5, vulnerabilities detected.\n Topic: QualysVM"}, {"role": "assistant", "content": "let threshold = 10;\nQualysHostDetectionV2_CL\n| where Severity_s == \"5\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by NetBios_s, IPAddress\n| where count_ >= threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for failed attempts to log in from more than 15 various users within a 5 minutes timeframe from the same source. This is a potential indication of a password spray attack.\n Topic: Salesforce Service Cloud"}, {"role": "assistant", "content": "let FailureThreshold = 15;  \nSalesforceServiceCloud\n| where EventType =~ 'Login' and  LoginStatus != 'LOGIN_NO_ERROR'\n| where LoginStatus  in~ ('LOGIN_ERROR_INVALID_PASSWORD', 'LOGIN_ERROR_SSO_PWD_INVALID')\n| summarize UserCount=dcount(UserId), Users = make_set(UserId,100) by ClientIp, bin(TimeGenerated, 5m)\n| where UserCount > FailureThreshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when there is a Service Principal login attempt from a country that has not seen a successful login in the previous 14 days.\n  Threat actors may attempt to authenticate with credentials from compromised accounts - monitoring attempts from anomalous locations may help identify these attempts.\n  Authentication attempts should be investigated to ensure the activity was legitimate and if there is other similar activity.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-failed-unusual-sign-ins\n Topic: Detections"}, {"role": "assistant", "content": "let known_locations = (\n  AADServicePrincipalSignInLogs\n  | where TimeGenerated between(ago(14d)..ago(1d))\n  | where ResultType == 0\n  | summarize by Location);\n  AADServicePrincipalSignInLogs\n  | where TimeGenerated > ago(1d)\n  | where ResultType != 50126\n  | where Location !in (known_locations)\n  | extend City = tostring(parse_json(LocationDetails).city)\n  | extend State = tostring(parse_json(LocationDetails).state)\n  | extend Place = strcat(City, \" - \", State)\n  | extend Result = strcat(tostring(ResultType), \" - \", ResultDescription)\n  | summarize FirstSeen=min(TimeGenerated), LastSeen=max(TimeGenerated), make_set(Result), make_set(IPAddress), make_set(Place) by ServicePrincipalName, Location\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of files with error requests.\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 400 and HttpStatusCode <= 599 \n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| summarize TotalFile = count() by File\n| top 20 by TotalFile desc\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for DCSync attacks.\n Topic: Tenable App"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.yaml parser into the workspace\n// Retrieve the parser here: https://aka.ms/sentinel-TenableApp-afad-parser\n// Then, create the Kusto Function with alias afad_parser\nafad_parser\n  | where MessageType == 2 and Codename == \"DCSync\"\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0004 (Healthcare data has been observed in unencrypted data stores. Encrypt data at rest to comply with this CIS requirement)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0004\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is designed to monitor Azure policies aligned with the Continuous Diagnostics & Mitigation (CDM) Program. The alert triggers when policy compliance falls below 70% within a 1 week timeframe.\n Topic: ContinuousDiagnostics&Mitigation"}, {"role": "assistant", "content": "SecurityRecommendation\n| where RecommendationDisplayName <> \"\"\n| extend MaturityLevel=iff(RecommendationDisplayName has_any(\"log\", \"defender\", \"asset\", \"arc\"), \"Hardware Asset Management (HWAM)\",\n    iff(RecommendationDisplayName has_any(\"allow\", \"software\", \"application\"), \"Software Asset Management (SWAM)\",\n    iff(RecommendationDisplayName has_any(\"account\", \"user\", \"identity\", \"trust\"), \"User Trust (TRUST)\",\n    iff(RecommendationDisplayName has_any(\"access\", \"auth\", \"key\", \"cert\", \"token\"), \"Credentials & Authenticators (CRED)\",\n    iff(RecommendationDisplayName has_any(\"priv\", \"admin\", \"root\"), \"Privileges (PRIV)\",\n    iff(RecommendationDisplayName has_any(\"network\", \"internet\", \"traffic\", \"firewall\", \"intrusion\", \"bound\", \"tls\", \"gateway\", \"subnet\", \"web\", \"url\", \"proxy\", \"just\", \"port\", \"JIT\", \"http\"), \"Boundary Protection (BOUND)\",\n    iff(RecommendationDisplayName has_any(\"event\", \"agent\", \"incident\", \"back\", \"privacy\", \"audit\", \"collect\"), \"Manage Events (MNGEVT)\",\n    iff(RecommendationDisplayName has_any(\"edr\", \"malware\", \"endpoint protection\", \"detect\", \"respon\"), \"Endpoint Detection & Response (EDR)\",\n    iff(RecommendationDisplayName has_any(\"aks\", \"contain\", \"kube\", \"supply\"), \"Design & Build in Security (DBS)\",\n    iff(RecommendationDisplayName has_any(\"data\", \"storage\", \"sql\", \"cmk\", \"key\"), \"Data Protection Management (DPM)\", \"Other\"))))))))))\n| where MaturityLevel in ('Hardware Asset Management (HWAM)', 'Software Asset Management (SWAM)', 'User Trust (TRUST)', 'Credentials & Authenticators (CRED)', 'Privileges (PRIV)', 'Boundary Protection (BOUND)', 'Manage Events (MNGEVT)', 'Endpoint Detection & Response (EDR)', 'Design & Build in Security (DBS)', 'Data Protection Management (DPM)')\n| summarize arg_max(TimeGenerated, *) by AssessedResourceId, RecommendationDisplayName\n| summarize\n    Failed = countif(RecommendationState == \"Unhealthy\"),\n    Passed = countif(RecommendationState == \"Healthy\"),\n    NotApplicable = countif(RecommendationState == \"NotApplicable\" or RecommendationState == \"Removed\"),\n    Applicable = countif(RecommendationState == \"Unhealthy\" or RecommendationState == \"Healthy\"),\n    Total = countif(RecommendationState == \"Unhealthy\" or RecommendationState == \"Healthy\" or RecommendationState == \"NotApplicable\" or RecommendationState == \"Removed\")\n    by MaturityLevel\n| extend PassedControls = (Passed / todouble(Applicable)) * 100\n| project MaturityLevel, Total, PassedControls, Passed, Failed, Applicable, NotApplicable\n| sort by Total, Passed desc\n| extend RemediationLink = strcat('https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/22')\n| project CapabilityArea=MaturityLevel, Total, PassedControls, Passed, Failed, RemediationLink, LastObserved=now()\n| where CapabilityArea <> ''\n| where PassedControls < 70 \n//Adjust Either FailedRatePercentage or PassedRatePercentage Thresholds within organizational requirements\n| sort by PassedControls desc\n| extend URLCustomEntity = RemediationLink\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alerts when the account setting is changed to allow either external domain access or anonymous access to meetings.\n Topic: Detections"}, {"role": "assistant", "content": "ZoomLogs\n| where Event =~ \"account.settings_updated\"\n| extend EnforceLogin = columnifexists(\"payload_object_settings_schedule_meeting_enfore_login_b\", \"\")\n| extend EnforceLoginDomain = columnifexists(\"payload_object_settings_schedule_meeting_enfore_login_b\", \"\")\n| extend GuestAlerts = columnifexists(\"payload_object_settings_in_meeting_alert_guest_join_b\", \"\")\n| where EnforceLogin == 'false' or EnforceLoginDomain == 'false' or GuestAlerts == 'false'\n| extend SettingChanged = case(EnforceLogin == 'false' and EnforceLoginDomain == 'false' and GuestAlerts == 'false', \"All settings changed\",\n                            EnforceLogin == 'false' and EnforceLoginDomain == 'false', \"Enforced Logons and Restricted Domains Changed\",\n                            EnforceLoginDomain == 'false' and GuestAlerts == 'false', \"Enforced Domains Changed\",\n                            EnforceLoginDomain == 'false', \"Enfored Domains Changed\",\n                            GuestAlerts == 'false', \"Guest Join Alerts Changed\",\n                            EnforceLogin == 'false', \"Enforced Logins Changed\",\n                            \"No Changes\")\n| extend AccountName = tostring(split(User, \"@\")[0]), AccountUPNSuffix = tostring(split(User, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection.\nAccess is usually obtained through compromising accounts used to manage cloud infrastructure.\nRefer: https://attack.mitre.org/techniques/T1535/\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\n// Generating historical table of all events per AccountId and Region\nlet EventInfo_CurrentDay =  materialize (AWSCloudTrail | where TimeGenerated between(starttime..endtime));\nlet EventInfo_historical = AWSCloudTrail  | where TimeGenerated  between (lookback..starttime) | summarize max(TimeGenerated) by AWSRegion, UserIdentityAccountId;\n// Doing Leftanti join to find new regions historically not seen for the same account.\nlet EventInfo_Unseen = materialize (\nEventInfo_CurrentDay\n| summarize max(TimeGenerated) by AWSRegion, UserIdentityAccountId\n| join kind= leftanti\n(\n  EventInfo_historical\n) on AWSRegion, UserIdentityAccountId\n);\nEventInfo_Unseen\n// Join Ununsed region seen with current data to gather context about API events seen\n| join kind= inner (\n   EventInfo_CurrentDay\n) on AWSRegion, UserIdentityAccountId\n| extend UnusedRegion = AWSRegion\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| summarize EventCount = count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), EventNameList=make_set(EventName), IPList=make_set(SourceIpAddress) by UserIdentityAccountId, UnusedRegion, UserIdentityUserName\n| extend timestamp = StartTime , AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New Leaked Credential with severity High found\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL | where severity_s == \"High\" | where type_s == \"Leaked Credential\" | where status_s != \"Closed\" or status_s != \"Resolved\" | where remarks_s == \"New Leaked Credential with severity High found\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query idenifies when rundll32.exe executes a specific set of inline VBScript commands\nReferences: https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/\nTo use this analytics rule, make sure you have deployed the [ASIM normalization parsers](https://aka.ms/ASimProcessEvent)\n Topic: Detections"}, {"role": "assistant", "content": "imProcessCreate\n| where Process hassuffix 'rundll32.exe'\n| where CommandLine  has_any ('Execute','RegRead','window.close')\n| project TimeGenerated, Dvc, User, Process, CommandLine, ActingProcessName, EventVendor, EventProduct\n| extend AccountName = tostring(split(User, @'\\')[1]), AccountNTDomain = tostring(split(User, @'\\')[0])\n| extend HostName = tostring(split(Dvc, \".\")[0]), DomainIndex = toint(indexof(Dvc, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Dvc, DomainIndex + 1), Dvc)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An attacker could modify vpc attributesin order to access resources he couldnt access before.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where  EventName == \"ModifyVpcAttribute\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, UserIdentityArn, AdditionalEventData, ResponseElements\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of top blocked connections to external services.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "UbiquitiAuditEvent\n| where TimeGenerated > ago(24h)\n| where EventCategory =~ 'firewall'\n| where DvcAction =~ 'Blocked'\n| where isnotempty(DstPortNumber)\n| where ipv4_is_private(DstIpAddr) == 'False'\n| extend svc_name = case(DstPortNumber in ('20', '21'), 'FTP',\n                        DstPortNumber == '22', 'SSH',\n                        DstPortNumber == '23', 'Telnet',\n                        DstPortNumber == '25', 'SMTP',\n                        DstPortNumber == '53', 'DNS',\n                        DstPortNumber in ('67', '68'), 'DHCP',\n                        DstPortNumber == '110', 'POP3',\n                        DstPortNumber == '123', 'NTP',\n                        DstPortNumber in ('137', '138', '139'), 'NeTBIOS',\n                        DstPortNumber == '143', 'IMAP',\n                        DstPortNumber == '220', 'IMAPv3',\n                        DstPortNumber == '389', 'LDAP',\n                        DstPortNumber == '3389', 'RDP',\n                        DstPortNumber == '514', 'Syslog',\n                        DstPortNumber == '80', 'HTTP',\n                        DstPortNumber == '443', 'HTTPS',\n                        DstPortNumber )\n| summarize count() by svc_name, SrcIpAddr\n| top 10 by count_\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches possible SCAM/SPAM or phishing via calendar.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "let OwnDomains = \nGWorkspaceActivityReports\n| where TimeGenerated > ago(30d)\n| where isnotempty(OwnerDomain) \n| summarize domain_lst = make_set(OwnerDomain);\nGWorkspaceActivityReports\n| where TimeGenerated > ago(24h)\n| where isnotempty(OrganizerCalendarId) \n| extend UserDomain = extract(@\"([a-zA-Z0-9.-_]+)@([a-zA-Z0-9.-]+)\",2,OrganizerCalendarId)\n| where UserDomain !in~ (OwnDomains)\n| where ActorCallerType has \"EXTERNAL_USER\"\n| extend AccountCustomEntity = OrganizerCalendarId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for project versions released.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where TimeGenerated > ago(24h)\n| where EventMessage =~ 'Project version released'\n| project EventCreationTime, UserName, ObjectItemName, AssociatedItems\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unexpected URL.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "let threshold = 5;\nCiscoWSAEvent\n| where UrlOriginal matches regex @'\\Ahttp(s)?[:][/][/]\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'\n| extend URLCustomEntity = UrlOriginal, AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unobstructed Web Application Firewall (WAF) activity in sessions where the WAF blocked incoming requests by computing the ratio between blocked requests and unobstructed WAF requests in these sessions (BlockvsSuccessRatio metric).\nA high ratio value for a given client IP and hostname calls for further investigation of the WAF data in that session, due to the significantly high number of blocked requests and a few unobstructed logs that may be malicious but have passed undetected through the WAF. The successCode variable defines what the detection thinks is a successful status code and should be altered to fit the environment.\n Topic: Azure Web Application Firewall (WAF)"}, {"role": "assistant", "content": "let queryperiod = 1d;\nlet mode = dynamic(['Blocked', 'Detected']);\nlet successCode = dynamic(['200', '101','204', '400','504','304','401','500']);\nlet sessionBin = 30m;\nAzureDiagnostics\n| where TimeGenerated > ago(queryperiod)\n| where ResourceProvider == 'MICROSOFT.NETWORK' and Category =~ 'ApplicationGatewayFirewallLog' and action_s in (mode)\n| sort by hostname_s asc, clientIp_s asc, TimeGenerated asc\n| extend SessionBlockedStarted = row_window_session(TimeGenerated, queryperiod, 10m, ((clientIp_s != prev(clientIp_s)) or (hostname_s != prev(hostname_s))))\n| summarize SessionBlockedEnded = max(TimeGenerated), SessionBlockedCount = count() by hostname_s, clientIp_s, SessionBlockedStarted\n| extend TimeKey = range(bin(SessionBlockedStarted, sessionBin), bin(SessionBlockedEnded, sessionBin), sessionBin)\n| mv-expand TimeKey to typeof(datetime)\n| join kind = inner(\n    AzureDiagnostics\n    | where TimeGenerated > ago(queryperiod)\n    | where Category =~ 'ApplicationGatewayAccessLog' and (isempty(httpStatus_d) or httpStatus_d in (successCode))\n    | extend TimeKey = bin(TimeGenerated, sessionBin)\n    | extend hostname_s = coalesce(hostname_s,host_s), clientIp_s = coalesce(clientIp_s,clientIP_s)\n) on TimeKey, hostname_s , clientIp_s\n| where TimeGenerated between (SessionBlockedStarted..SessionBlockedEnded)\n| extend\n    originalRequestUriWithArgs_s = column_ifexists(\"originalRequestUriWithArgs_s\", \"\"),\n    serverStatus_s = column_ifexists(\"serverStatus_s\", \"\")\n| summarize\n    SuccessfulAccessCount = count(),\n    UserAgents = make_set(userAgent_s, 250),\n    RequestURIs = make_set(requestUri_s, 250),\n    OriginalRequestURIs = make_set(originalRequestUriWithArgs_s, 250),\n    SuccessCodes = make_set(httpStatus_d, 250),\n    SuccessCodes_BackendServer = make_set(serverStatus_s, 250),\n    take_any(SessionBlockedEnded, SessionBlockedCount)\n    by hostname_s, clientIp_s, SessionBlockedStarted\n| where SessionBlockedCount > SuccessfulAccessCount\n| extend BlockvsSuccessRatio = SessionBlockedCount/toreal(SuccessfulAccessCount)\n| sort by BlockvsSuccessRatio desc, SessionBlockedStarted asc\n| project-reorder SessionBlockedStarted, SessionBlockedEnded, hostname_s, clientIp_s, SessionBlockedCount, SuccessfulAccessCount, BlockvsSuccessRatio, SuccessCodes, RequestURIs, OriginalRequestURIs, UserAgents\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies Azure DevOps activities where organization project visibility changed to public project\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where Area == \"Project\"\n| where OperationName == \"Project.UpdateVisibilityCompleted\"\n| where Data.PreviousProjectVisibility == \"private\"\n| where Data.ProjectVisibility == \"public\"\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for uncommon application behavior events.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where TimeGenerated > ago(24h)\n| where ThreatName has 'launched a shell'\n| order by TimeGenerated desc\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for new launched instances.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where TimeGenerated > ago(24h)\n| where EventType endswith 'LaunchInstance'\n| extend AccountCustomEntity = data_definedTags_Oracle_Tags_CreatedBy_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches users with several devices.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where TimeGenerated > ago(24h)\n| where isnotempty(DvcModelName)\n| summarize UserDevices = make_set(DvcModelName) by ActorEmail\n| where array_length(UserDevices) >= 5\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New phishing with severity High found\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL | where severity_s == \"High\" | where type_s == \"Phishing\" | where status_s != \"Closed\" or status_s != \"Resolved\" | where remarks_s == \"New phishing with severity High found\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for user accounts and their privileges.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let lbtime = 30d;\nOracleDatabaseAuditEvent\n| where TimeGenerated > ago(lbtime)\n| where isnotempty(DstUserName)\n| where isnotempty(Privilege)\n| summarize makeset(Privilege) by DstUserName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Attackers often try to hide their steps by deleting or stopping the collection of logs that could show their activity.\nThis alert identifies any manipulation of AWS CloudTrail, Cloudwatch/EventBridge or VPC Flow logs.\nMore Information: AWS CloudTrail API: https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_Operations.html \nAWS Cloudwatch/Eventbridge API: https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_Operations.html \nAWS DelteteFlowLogs API : https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteFlowLogs.html  \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"UpdateTrail\",\"DeleteTrail\",\"StopLogging\",\"DeleteFlowLogs\",\"DeleteEventBus\"]);\nAWSCloudTrail\n| where EventName in~ (EventNameList)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent,\nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource\n| extend timestamp = StartTimeUtc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows User-Agent values which requests were blocked\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "Cisco_Umbrella\n| where TimeGenerated > ago(24h)\n| where DvcAction =~ 'Blocked'\n| summarize count() by HttpUserAgentOriginal\n| sort by count_"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Defend has detected a user has clicked a dangerous link in their mailbox.\n Topic: Egress Defend"}, {"role": "assistant", "content": "DefendAuditData\n| where LinksClicked > 0\n| where ThreatLevel == \"dangerous\" or ThreatLevel == \"suspicious\"\n| extend Account_0_FullName = trim(@\"[^@.\\w]+\",Recipients)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when dormant VM was started.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "let vm_p_off =\nVMwareESXi\n| where TimeGenerated > ago(14d)\n| where SyslogMessage has ('VmPoweredOffEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| summarize LastPowerOffTime=max(TimeGenerated) by DstHostname\n| where datetime_diff('day',datetime(now),LastPowerOffTime) >= 20; \nlet vm_p_on =\nVMwareESXi\n| where TimeGenerated > ago(14d)\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| summarize LastPowerOnTime=max(TimeGenerated) by DstHostname\n| where datetime_diff('day',datetime(now),LastPowerOnTime) >= 20;\nlet off_vms =\nvm_p_on\n| join (vm_p_off) on DstHostname\n| where LastPowerOffTime > LastPowerOnTime\n| summarize p_off_vm = make_set(DstHostname,200)\n| extend k=1;\nVMwareESXi\n| where TimeGenerated between (ago(24h) .. datetime(now))\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| extend k=1\n| join (off_vms) on k\n| where p_off_vm !has DstHostname\n| summarize rec_p_on = make_set(DstHostname,200)\n| extend hostname = iff(array_length(rec_p_on) > 0, rec_p_on[0], \"\")\n| extend NTDomain = tostring(split(hostname, '\\\\', 1)[0]), HostName = tostring(split(hostname, '.', 0)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks at device, process, and network events from Defender for Endpoint that may be vulnerable to buffer overflow defined in CVE-2023-4863. Results are not an indicator of malicious activity.\n Topic: Microsoft Defender XDR"}, {"role": "assistant", "content": "//CVE-2023-4863 Process activity with .webp files on devices where CVE-2023-4863 is unpatched\n//This query shows all process activity with .webp files on vulnerable machines and is not an indicator of malicious activity\nlet VulnDevices = DeviceTvmSoftwareVulnerabilities\n    | where CveId == \"CVE-2023-4863\"\n    | distinct DeviceId;\nunion DeviceProcessEvents, DeviceNetworkEvents, DeviceEvents\n| where DeviceId in (VulnDevices) and (InitiatingProcessCommandLine has(\".webp\") or ProcessCommandLine has(\".webp\"))\n| extend Name = tostring(split(AccountUpn, \"@\")[0]), UPNSuffix = tostring(split(AccountUpn, \"@\")[1])\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rarely used accounts.\n Topic: Snowflake"}, {"role": "assistant", "content": "Snowflake\n| where TimeGenerated > ago(30d)\n| where EventType =~ 'LOGIN'\n| where IS_SUCCESS_s =~ 'Yes'\n| summarize last_login_time = max(TimeGenerated) by TargetUsername\n| where last_login_time < ago(20d)\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when an actor grants, or updates their own permissions via a group. Once this analytics rule is triggered it will group all related future alerts for upto an hour when all related entities are the same.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "OnePasswordEventLogs_CL\n| where log_source == \"auditevents\"\n| where action has_any(\"join\", \"role\")\n| where object_type == \"gm\"\n| where tostring(actor_details.email) == tostring(aux_details.email)\n| extend\n    TargetUsername = aux_details.email\n    , ActorUsername = actor_details.email\n    , SrcIpAddr = session.ip\n    , GroupRole = case(\n        aux_info == \"R\", \"Group member\"\n        , aux_info == \"A\", \"Group manager\"\n        , aux_info\n    )"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Looks for anomalous number of resources creation or deployment activities in azure activity log.\nIt is best to run this query on a look back period which is at least 7 days.\n Topic: Azure Activity"}, {"role": "assistant", "content": "AzureActivity\n| where OperationNameValue in~ (\"microsoft.compute/virtualMachines/write\", \"microsoft.resources/deployments/write\")\n| where ActivityStatusValue == \"Succeeded\" \n| make-series dcount(ResourceId)  default=0 on EventSubmissionTimestamp in range(ago(7d), now(), 1d) by Caller\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query alerts on attempts to terminate security monitoring processes on the host. Attackers often try to terminate such processes post-compromise to exploit the Log4j vulnerability.\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "Syslog\n| where Facility == 'user'\n| where SyslogMessage has \"AUOMS_EXECVE\"\n| parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n| where EventType =~ \"AUOMS_EXECVE\"\n| parse EventData with * \"syscall=\" syscall \" syscall_r=\" * \" success=\" success \" exit=\" exit \" a0\" * \" ppid=\" ppid \" pid=\" pid \" audit_user=\" audit_user \" auid=\" auid \" user=\" user \" uid=\" uid \" group=\" group \" gid=\" gid \"effective_user=\" effective_user \" euid=\" euid \" set_user=\" set_user \" suid=\" suid \" filesystem_user=\" filesystem_user \" fsuid=\" fsuid \" effective_group=\" effective_group \" egid=\" egid \" set_group=\" set_group \" sgid=\" sgid \" filesystem_group=\" filesystem_group \" fsgid=\" fsgid \" tty=\" tty \" ses=\" ses \" comm=\\\"\" comm \"\\\" exe=\\\"\" exe \"\\\"\" * \"cwd=\\\"\" cwd \"\\\"\" * \"name=\\\"\" name \"\\\"\" * \"cmdline=\" cmdline\n| extend cmdline = trim_end('redactors=.*',cmdline)\n| where cmdline has_any (\"service apparmor stop\",\"service aliyun.service stop\",\"systemctl disable apparmor\",\"systemctl disable aliyun.service\")\nor  (exe has \"pkill\" and cmdline has_any (\"omsagent\",\"auoms\",\"omiagent\",\"waagent\") and cmdline !has \"/omsagent/plugin/pi\"and cmdline !has \"/omsconfig/modules\")\n| project TimeGenerated, Computer, audit_user, user, cmdline\n| extend timestamp = TimeGenerated\n| extend Host_0_HostName = Computer\n| extend Account_0_Name = user\n| sort by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare URLs requested.\n Topic: Tomcat"}, {"role": "assistant", "content": "TomcatEvent\n| where TimeGenerated > ago(24h)\n| summarize count() by tostring(UrlOriginal)\n| top 20 by count_ asc\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for stale last password change\n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'UserStaleLastPasswordChange'"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects request to sensitive files.\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "let forbidden_files = dynamic(['shadow', 'passwd', 'id_rsa']);\nApacheHTTPServer\n| where isnotempty(UrlOriginal)\n| extend File = extract(@'(.*\\/)?(.*)', 2, tostring(UrlOriginal))\n| where File in~ (forbidden_files)\n| extend FileCustomEntity = File, UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rare Urls.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(http_url)\n| summarize count() by SrcUserName, http_url\n| order by count_ asc\n| top 10 by count_\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects attempts uninstalling McAfee agent on host.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "McAfeeEPOEvent\n| where EventId == '2413'\n| extend IPCustomEntity = DvcIpAddr, HostCustomEntity = DvcHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates an incident when a Symantec Endpoint Proection agent detects malware and the malware was not cleaned.\n Topic: Symantec Endpoint Protection"}, {"role": "assistant", "content": "SymantecEndpointProtection\n| where LogType == \"Agent Risk Logs\"\n| where CategorySet == \"Malware\"\n| where ActualAction !contains \"Cleaned\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SrcIpAddr, SrcHostName, UserName, FilePath, ActualAction, CategorySet, CategoryType\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for stale last password change\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'UserStaleLastPasswordChange'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows error messages.\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "OracleWebLogicServerEvent\n| where EventMessage has_any (\"error\", \"Invalid\")\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies modifications of SharePoint document management integration. Document management allows storage of data located externally to Dataverse. Combine this analytics rule with the MSBizApps-Add-SharePointSite-To-Watchlist Playbook to automatically update the Dataverse-SharePointSites watchlist. This watchlist can be used to correlate events between Dataverse and SharePoint when using the Office 365 data connector. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_frequency = 1h;\nDataverseActivity\n| where TimeGenerated >= ago(query_frequency)\n| where Message in (\"Create\", \"Update\") and EntityName == \"sharepointsite\"\n| mv-expand Fields\n| where Fields.Name == \"absoluteurl\"\n| extend\n    SharePointAppId = int(20892),\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1]),\n    SharePointUrl = tostring(Fields.Value)\n| project\n    TimeGenerated,\n    UserId,\n    ClientIp,\n    Message,\n    SharePointUrl,\n    InstanceUrl,\n    CloudAppId,\n    SharePointAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is designed to monitor data connector configurations. This alert is triggered when a data connector is added, updated, or deleted.\n Topic: MaturityModelForEventLogManagementM2131"}, {"role": "assistant", "content": "AzureActivity\n| where OperationNameValue contains \"Microsoft.SecurityInsights/dataConnectors/\"\n| where ActivityStatusValue == \"Succeeded\"\n| project OperationNameValue, Caller, CallerIpAddress, ActivityStatusValue, ActivitySubstatusValue, ResourceGroup, Properties, ResourceId, TimeGenerated\n| sort by TimeGenerated desc\n| extend Account = Caller\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected network ACL with all the ports open to a specified CIDR. This could lead to potential lateral movements or initial access attacks. Make sure to mitigate this risk.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName in ('CreateNetworkAclEntry', 'ReplaceNetworkAclEntry') and isempty(ErrorMessage) and isempty(ErrorCode)\n| extend ruleAction = tostring(parse_json(RequestParameters)['ruleAction']),\n         egress=parse_json(RequestParameters)['egress'],\n         total_ports=(toint(parse_json(parse_json(RequestParameters)['portRange'])['to']) - toint(parse_json(parse_json(RequestParameters)['portRange'])['from'])),\n         aclProtocol=parse_json(RequestParameters)['aclProtocol']\n| where isnotempty(total_ports)\n| where ruleAction == 'allow' and egress == false and (aclProtocol == '-1' or (total_ports > 1024))\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in VMConnection.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour for VMConnection events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and VMConnection events\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      VMConnection\n      | where TimeGenerated >= ago(dt_lookBack)\n      | extend VMConnection_TimeGenerated = TimeGenerated\n  )\n  on $left.TI_ipEntity == $right.RemoteIp\n  // Filter out VMConnection events that occurred after the expiration of the corresponding indicator\n  | where VMConnection_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and keep the VMConnection event with the latest timestamp\n  | summarize VMConnection_TimeGenerated = arg_max(VMConnection_TimeGenerated, *) by IndicatorId, RemoteIp\n  // Select the desired output fields\n  | project VMConnection_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\n    TI_ipEntity, Computer, Direction, ProcessName, SourceIp, DestinationIp, RemoteIp, Protocol, DestinationPort, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n  | extend timestamp = VMConnection_TimeGenerated, HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates an incident when a Symantec Endpoint Proection agent detects excessive amounts of blocked traffic generated by a single user.\n Topic: Symantec Endpoint Protection"}, {"role": "assistant", "content": "let threshold = 15;\nlet NoteableEvents = SymantecEndpointProtection\n| where LogType == \"Agent Traffic Logs\"\n| where Action =~ \"Blocked\"\n| summarize TotalBlockedEvents = count() by UserName\n| where TotalBlockedEvents > threshold;\nSymantecEndpointProtection\n| where LogType =~ \"Agent Traffic Logs\"\n| where Action =~ \"Blocked\"\n| join kind=inner (NoteableEvents) on UserName\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Total = count() by UserName, RuleName, ServerName, LocalHostIpAddr, LocalPortNumber, TrafficDirection, RemoteHostIpAddr, RemotePortNumber, ApplicationName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when alert from custom rule received.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where ActivityType == 3608\n| extend RuleName = extract(@'Custom Rule:\\s(.*?)\\sin Group', 1, EventOriginalMessage)\n| extend DstHostname = extract(@'detected on\\s(\\S+)\\.', 1, EventOriginalMessage)\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for the Sdelete process being run recursively after being deployed to a host via GPO. Attackers could use this technique to deploy Sdelete to multiple host and delete data on them.\n  This query uses the Advanced Security Information Model. Parsers will need to be deployed before use: https://docs.microsoft.com/azure/sentinel/normalization\n Topic: Detections"}, {"role": "assistant", "content": "imProcess\n| where EventType =~ \"ProcessCreated\"\n| where Process endswith \"svchost.exe\"\n| where CommandLine has \"-k GPSvcGroup\" or CommandLine has \"-s gpsvc\"\n| extend timekey = bin(TimeGenerated, 1m)\n| project timekey, ActingProcessId, Dvc\n| join kind=inner (\n  imProcess\n  | where EventType =~ \"ProcessCreated\"\n  | where Process =~ \"sdelete.exe\" or CommandLine has \"sdelete\"\n  | where ActingProcessName endswith \"svchost.exe\"\n  | where CommandLine has_all (\"-s\", \"-r\")\n  | extend timekey = bin(TimeGenerated, 1m)\n  ) \n  on $left.ActingProcessId == $right.ParentProcessId, timekey, Dvc\n| extend AccountName = tostring(split(ActorUsername, @'\\')[1]), AccountNTDomain = tostring(split(ActorUsername, @'\\')[0])\n| extend HostName = tostring(split(Dvc, \".\")[0]), DomainIndex = toint(indexof(Dvc, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Dvc, DomainIndex + 1), Dvc)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Infoblox SOC Insight detected in logs sourced via Infoblox CDC. Customize scheduling, responses and more. This rule depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC_SOCInsights**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxCDC_SOCInsights.yaml).\n Topic: Infoblox SOC Insights"}, {"role": "assistant", "content": "InfobloxCDC_SOCInsights\n| summarize arg_max(TimeGenerated, *) by InfobloxInsightID\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule helps to detect whenever there is an alert found which has urgent alert-type in Dataminr.\n Topic: Dataminr Pulse"}, {"role": "assistant", "content": "DataminrPulseAlerts\n| where EventSource in~ ('Greynoise', 'Shodan', 'VirusTotal', 'alienvault open threat exchange', 'urlscan')\n  and AlertType == \"Urgent\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query uses the Azure Defender Security Nested Recommendations data to find machines vulnerable to OMIGOD CVE-2021-38647.\nOMI is the Linux equivalent of Windows WMI and helps users manage configurations across remote and local environments. The query aims to find machines that have this OMI vulnerability (CVE-2021-38647).\n Security Nested Recommendations data is sent to Microsoft Sentinel using the continuous export feature of Azure Defender(refrence link below).\n Reference: https://www.wiz.io/blog/omigod-critical-vulnerabilities-in-omi-azure\n Reference: https://docs.microsoft.com/azure/security-center/continuous-export?tabs=azure-portal\n Topic: Detections"}, {"role": "assistant", "content": "SecurityNestedRecommendation\n| where RemediationDescription has 'CVE-2021-38647'\n| parse ResourceDetails with * 'virtualMachines/' VirtualMAchine '\"' *\n| summarize arg_min(TimeGenerated, *) by TenantId, RecommendationSubscriptionId, VirtualMAchine, RecommendationName,Description,RemediationDescription, tostring(AdditionalData),VulnerabilityId\n| extend HostName = tostring(split(VirtualMAchine, \".\")[0]), DomainIndex = toint(indexof(VirtualMAchine, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(VirtualMAchine, DomainIndex + 1), VirtualMAchine)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses AzureActivity logs (Administrative category) to identify the deletion of an Microsoft Entra ID Hybrid Health AD FS service instance in a tenant.\nA threat actor can create a new AD Health ADFS service and create a fake server to spoof AD FS signing logs.\nThe health AD FS service can then be deleted after it is no longer needed via HTTP requests to Azure.\nMore information is available in this blog https://o365blog.com/post/hybridhealthagent/\n Topic: Azure Activity"}, {"role": "assistant", "content": "AzureActivity\n| where CategoryValue =~ 'Administrative'\n| where ResourceProviderValue =~ 'Microsoft.ADHybridHealthService'\n| where _ResourceId has 'AdFederationService'\n| where OperationNameValue =~ 'Microsoft.ADHybridHealthService/services/delete'\n| extend claimsJson = parse_json(Claims)\n| extend AppId = tostring(claimsJson.appid), AccountName = tostring(claimsJson.name), Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| project-away claimsJson\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects Azure Portal brute force attacks by monitoring for multiple authentication failures and a successful login within a 20-minute window. Default settings: 10 failures, 25 deviations.\nRef: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "// Set threshold value for deviation\nlet threshold = 25;\n// Set the time range for the query\nlet timeRange = 24h;\n// Set the authentication window duration\nlet authenticationWindow = 20m;\n// Define a reusable function 'aadFunc' that takes a table name as input\nlet aadFunc = (tableName: string) {\n  // Query the specified table\n  table(tableName)\n  // Filter data within the last 24 hours\n  | where TimeGenerated > ago(1d)\n  // Filter records related to \"Azure Portal\" applications\n  | where AppDisplayName has \"Azure Portal\"\n  // Extract and transform some fields\n  | extend\n      DeviceDetail = todynamic(DeviceDetail),\n      LocationDetails = todynamic(LocationDetails)\n  | extend\n      OS = tostring(DeviceDetail.operatingSystem),\n      Browser = tostring(DeviceDetail.browser),\n      State = tostring(LocationDetails.state),\n      City = tostring(LocationDetails.city),\n      Region = tostring(LocationDetails.countryOrRegion)\n  // Categorize records as Success or Failure based on ResultType\n  | extend FailureOrSuccess = iff(ResultType in (\"0\", \"50125\", \"50140\", \"70043\", \"70044\"), \"Success\", \"Failure\")\n  // Sort and identify sessions\n  | sort by UserPrincipalName asc, TimeGenerated asc\n  | extend SessionStartedUtc = row_window_session(TimeGenerated, timeRange, authenticationWindow, UserPrincipalName != prev(UserPrincipalName) or prev(FailureOrSuccess) == \"Success\")\n  // Summarize data\n  | summarize FailureOrSuccessCount = count() by  FailureOrSuccess, UserId, UserDisplayName, AppDisplayName, IPAddress, Browser, OS, State, City, Region, Type, CorrelationId, bin(TimeGenerated, authenticationWindow), ResultType, UserPrincipalName, SessionStartedUtc\n  | summarize FailureCountBeforeSuccess = sumif(FailureOrSuccessCount, FailureOrSuccess == \"Failure\"), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), makelist(FailureOrSuccess), IPAddress = make_set(IPAddress, 15), make_set(Browser, 15), make_set(City, 15), make_set(State, 15), make_set(Region, 15), make_set(ResultType, 15) by SessionStartedUtc, UserPrincipalName, CorrelationId, AppDisplayName, UserId, Type\n  // Filter records where \"Success\" occurs in the middle of a session\n  | where array_index_of(list_FailureOrSuccess, \"Success\") != 0\n  | where array_index_of(list_FailureOrSuccess, \"Success\") == array_length(list_FailureOrSuccess) - 1\n  // Remove unnecessary columns from the output\n  | project-away SessionStartedUtc, list_FailureOrSuccess\n  // Join with another table and calculate deviation\n  | join kind=inner (\n      table(tableName)\n      | where TimeGenerated > ago(7d)\n      | where AppDisplayName has \"Azure Portal\"\n      | extend FailureOrSuccess = iff(ResultType in (\"0\", \"50125\", \"50140\", \"70043\", \"70044\"), \"Success\", \"Failure\")\n      | summarize avgFailures = avg(todouble(FailureOrSuccess == \"Failure\")) by UserPrincipalName\n  ) on UserPrincipalName\n  | extend Deviation = abs(FailureCountBeforeSuccess - avgFailures) / avgFailures\n  // Filter records based on deviation and failure count criteria\n  | where Deviation > threshold and FailureCountBeforeSuccess >= 10\n  // Expand the IPAddress array\n  | mv-expand IPAddress\n  | extend IPAddress = tostring(IPAddress)\n  | extend timestamp = StartTime\n};\n// Call 'aadFunc' with different table names and union the results\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n// Additional transformation - Split UserPrincipalName\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects Unauthorized Logins into Eaton Foreseer\n Topic: EatonForeseer"}, {"role": "assistant", "content": "SecurityEvent\n// Look for all events relating to user logins\n| where EventID in (4624,4625,4648,4675,4634,4647)\n| where AccountType == \"User\"\n// Filter for data present\n| where isnotempty(TargetUserName)\n// Look for all events that relate to the Eaton Foreseer application\n| where ProcessName has \"Foreseer\"\n// Ignore known user accounts (please edit based on your allowed users)\n| where TargetUserName !in (\"janedoe\", \"johndoe\")\n// De-duplicate multiple entries for the same user accessing a particular device\n| summarize TimeGenerated=arg_min(TimeGenerated, *) by TargetUserName, Computer\n| project\n    TimeGenerated,\n    IPCustomEntity = IpAddress,\n    HostCustomEntity = Computer,\n    UserEntity = TargetUserName,\n    Process,\n    ProcessName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows the most prevalent users who grant access to others on Azure resources. List the common source IP address for each of those accounts. If an operation is not from those IP addresses, it may be worthy of investigation.\n Topic: Azure Activity"}, {"role": "assistant", "content": "AzureActivity\n| where OperationName =~ \"Create role assignment\"\n| where ActivityStatus =~ \"Succeeded\" \n| project Caller, CallerIpAddress\n| evaluate basket()\n// Returns all the records from the left side and only matching records from the right side.\n| join kind=leftouter (AzureActivity\n| where OperationName =~ \"Create role assignment\"\n| where ActivityStatus =~ \"Succeeded\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by Caller, CallerIpAddress)\non Caller, CallerIpAddress\n| project-away Caller1, CallerIpAddress1\n| where isnotempty(StartTime)\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = CallerIpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Looks for a logon domain seen in Azure AD logs appearing in a DNS query encoded with the DGA encoding used in the Solorigate incident.\nReference: https://blogs.microsoft.com/on-the-issues/2020/12/13/customers-protect-nation-state-cyberattacks/\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "let dictionary = dynamic([\"r\",\"q\",\"3\",\"g\",\"s\",\"a\",\"l\",\"t\",\"6\",\"u\",\"1\",\"i\",\"y\",\"f\",\"z\",\"o\",\"p\",\"5\",\"7\",\"2\",\"d\",\"4\",\"9\",\"b\",\"n\",\"x\",\"8\",\"c\",\"v\",\"m\",\"k\",\"e\",\"w\",\"h\",\"j\"]);\nlet regex_bad_domains = SigninLogs\n//Collect domains from tenant from signin logs\n| extend domain = tostring(split(UserPrincipalName, \"@\", 1)[0])\n| where domain != \"\"\n| summarize by domain\n| extend split_domain = split(domain, \".\")\n//This cuts back on domains such as na.contoso.com by electing not to match on the \"na\" portion\n| extend target_string = iff(strlen(split_domain[0]) <= 2, split_domain[1], split_domain[0])\n| extend target_string = split(target_string, \"-\")\n| mv-expand target_string\n//Rip all of the alphanumeric out of the domain name\n| extend string_chars = extract_all(@\"([a-z0-9])\", tostring(target_string))\n//Guid for tracking our data\n| extend guid = new_guid()\n//Expand to get all of the individual chars from the domain\n| mv-expand string_chars\n| extend chars = tostring(string_chars)\n//Conduct computation to encode the domain as per actor spec\n| extend computed_char = array_index_of(dictionary, chars)\n| extend computed_char = dictionary[(computed_char + 4) % array_length(dictionary)]\n| summarize make_list(computed_char,250) by guid, domain\n| extend target_encoded = tostring(strcat_array(list_computed_char, \"\"))\n//These are probably too small, but can be edited (expect FP's when going too small)\n| where strlen(target_encoded) > 5\n| distinct target_encoded\n| summarize make_set(target_encoded,250)\n//Key to join to DNS\n| extend key = 1;\nDnsEvents\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by Name\n| extend key = 1\n//For each DNS query join the malicious domain list\n| join kind=inner ( \n    regex_bad_domains\n) on key\n| project-away key\n//Expand each malicious key for each DNS query observed\n| mv-expand set_target_encoded\n//IndexOf allows us to fuzzy match on the substring\n| extend match = indexof(Name, set_target_encoded)\n| where match > -1\n| extend DNS_0_DomainName = Name\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies an export of the ADFS DKM Master Key from Active Directory.\nReferences: https://blogs.microsoft.com/on-the-issues/2020/12/13/customers-protect-nation-state-cyberattacks/, \nhttps://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html?1\nTo understand further the details behind this detection, please review the details in the original PR and subequent PR update to this:\nhttps://github.com/Azure/Azure-Sentinel/pull/1562#issue-551542469\nhttps://github.com/Azure/Azure-Sentinel/pull/1512#issue-543053339\n\n Topic: Detections"}, {"role": "assistant", "content": "(union isfuzzy=true \n(SecurityEvent \n| where EventID == 4662 // You need to create a SACL on the ADFS Policy Store DKM group for this event to be created. \n| where ObjectServer == 'DS'\n| where OperationType == 'Object Access'\n//| where ObjectName contains '<GUID of ADFS Policy Store DKM Group object' This is unique to the domain. Check description for more details.\n| where ObjectType contains '5cb41ed0-0e4c-11d0-a286-00aa003049e2' // Contact Class\n| where Properties contains '8d3bca50-1d7e-11d0-a081-00aa006c33ed' // Picture Attribute - Ldap-Display-Name: thumbnailPhoto\n| extend AccountName = SubjectUserName, AccountDomain = SubjectDomainName\n| extend timestamp = TimeGenerated, DeviceName = Computer\n),\n( WindowsEvent \n| where EventID == 4662 // You need to create a SACL on the ADFS Policy Store DKM group for this event to be created. \n| where EventData has_all('Object Access', '5cb41ed0-0e4c-11d0-a286-00aa003049e2','8d3bca50-1d7e-11d0-a081-00aa006c33ed') \n| extend ObjectServer = tostring(EventData.ObjectServer)\n| where ObjectServer == 'DS'\n| extend OperationType = tostring(EventData.OperationType)\n| where OperationType == 'Object Access'\n//| where ObjectName contains '<GUID of ADFS Policy Store DKM Group object' This is unique to the domain. Check description for more details.\n| extend ObjectType = tostring(EventData.ObjectType)\n| where ObjectType contains '5cb41ed0-0e4c-11d0-a286-00aa003049e2' // Contact Class\n| extend Properties = tostring(EventData.Properties)\n| where Properties contains '8d3bca50-1d7e-11d0-a081-00aa006c33ed' // Picture Attribute - Ldap-Display-Name: thumbnailPhoto\n| extend AccountName = tostring(EventData.SubjectUserName), AccountDomain = tostring(EventData.SubjectDomainName)\n| extend timestamp = TimeGenerated, DeviceName = Computer\n),\n(DeviceEvents\n| where ActionType =~ \"LdapSearch\"\n| where AdditionalFields.AttributeList contains \"thumbnailPhoto\"\n| where AdditionalFields.DistinguishedName contains \"CN=ADFS,CN=Microsoft,CN=Program Data\" // Filter results to show only hits related to the ADFS AD container\n| extend timestamp = TimeGenerated, AccountName = InitiatingProcessAccountName, AccountDomain = InitiatingProcessAccountDomain\n)\n)\n| extend Account = strcat(AccountDomain, \"\\\\\", AccountName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for emails with NON-Ascii characters within the Subject .\n Topic: Corelight"}, {"role": "assistant", "content": "corelight_smtp\n| where subject hasprefix @'\\=?utf-16'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows new rules.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where TimeGenerated > ago(24h)\n| where ActivityType == 3600\n| order by EventCreationTime\n| project EventCreationTime, DataRuleName, DataRuleQueryDetails, DataStatus, DataUserName\n| extend AccountCustomEntity = DataUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies occurances where a user has rejected an MFA prompt. This could be an indicator that a threat actor has compromised the username and password of this user account and is using it to try and log into the account.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-failed-unusual-sign-ins\nThis query has also been updated to include UEBA logs IdentityInfo and BehaviorAnalytics for contextual information around the results. \nPlease note, MFA Failed logons from known IP ranges can be benign depending on the conditional access policies. In case of noisy behavior, consider tuning the source IP ranges or location filter after careful consideration\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let riskScoreCutoff = 3; //Adjust this score threshold based on volume of results. Activities identified as the most abnormal receive the highest scores (on a scale of 0-10)\nSigninLogs\n| where ResultType == 500121\n| extend additionalDetails_ = tostring(Status.additionalDetails)\n| extend UserPrincipalName = tolower(UserPrincipalName)\n| where additionalDetails_ =~ \"MFA denied; user declined the authentication\" or additionalDetails_ has \"fraud\"\n| summarize StartTime = min(TimeGenerated), EndTIme = max(TimeGenerated) by UserPrincipalName, UserId, AADTenantId, FailedIPAddress = IPAddress\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n) on UserPrincipalName\n//Below it will be joined with BehaviorAnalytics table to the Failed IP Addresses\n| join kind=leftouter (\n    BehaviorAnalytics\n    | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n    | where isnotempty(SourceIPAddress)\n    | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress, UserName\n    | project-rename FailedIPAddress = SourceIPAddress, Name = UserName\n    | summarize\n      MaxInvestigationScore = max(InvestigationPriority)  // Only retrieve maximum Investigation Property score for both FailedIP and User\n    by FailedIPAddress, Name)\non FailedIPAddress, Name  // Joining on both IP and User so as to only return context associated with same user\n| extend UEBARiskScore = MaxInvestigationScore\n| project-away *1 // removing duplicate columns post outer join from output\n| where  UEBARiskScore > riskScoreCutoff\n| sort by UEBARiskScore desc \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query relies on GitLab Application Logs to get failed logins to highlight brute-force attempts from different IP addresses in a short space of time.\n Topic: GitLab"}, {"role": "assistant", "content": "let LearningPeriod = 7d; \nlet EndLearningTime = now();\nlet BinTime = 1h; \nlet RunTime = 1h; \nlet MinThreshold = 3.0; \nlet GitLabFailedLogins = (GitLabApp\n| where FailedLogin == 1\n| parse kind=regex Message with \"Failed Login: username=\" User \"ip=\" IpAddress \n| project TimeGenerated, EventTime, Computer, User, HostName, HostIP, IpAddress);\nGitLabFailedLogins \n| where EventTime between (ago(LearningPeriod) .. EndLearningTime) \n| summarize FailedLoginsCountInBinTime = count() by User, bin(EventTime, BinTime) \n| summarize AvgOfFailedLoginsInLearning = avg(FailedLoginsCountInBinTime), StdOfFailedLoginsInLearning = stdev(FailedLoginsCountInBinTime) by User \n| extend LearningThreshold = max_of(AvgOfFailedLoginsInLearning, MinThreshold) \n| join kind=innerunique ( GitLabFailedLogins \n| summarize FailedLoginsCountInRunTime = count() by User, IpAddress, EventTime = bin(EventTime, BinTime) ) on User \n| where FailedLoginsCountInRunTime >= LearningThreshold\n| project User, IpAddress, EventTime, FailedLoginsCountInRunTime, LearningThreshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Finds attempts to list users or groups using the built-in Windows net tool \n Topic: Windows Security Events"}, {"role": "assistant", "content": "let ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| project TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName,AccountDomain=SubjectDomainName,\nFileName=tostring(split(NewProcessName, '\\\\')[-1]),\nProcessCommandLine = CommandLine, \nFolderPath = \"\",\nInitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\";\nprocessEvents};\nProcessCreationEvents\n| where FileName == 'net.exe' and AccountName != \"\" and ProcessCommandLine !contains '\\\\'  and ProcessCommandLine !contains '/add' \n| where (ProcessCommandLine contains ' user ' or ProcessCommandLine contains ' group ') and (ProcessCommandLine endswith ' /do' or ProcessCommandLine endswith ' /domain') \n| extend Target = extract(\"(?i)[user|group] (\\\"*[a-zA-Z0-9-_ ]+\\\"*)\", 1, ProcessCommandLine) | filter Target  != '' \n| summarize minTimeGenerated=min(TimeGenerated), maxTimeGenerated=max(TimeGenerated), count() by AccountName, Target, ProcessCommandLine, ComputerName\n| project minTimeGenerated, maxTimeGenerated, count_, AccountName, Target, ProcessCommandLine, ComputerName\n| sort by AccountName, Target\n| extend HostName = tostring(split(ComputerName, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(ComputerName, '.'), 1, -1), '.'))\n| extend Account_0_Name = AccountName\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when multiple (more than one) users mailboxes are configured to forward to the same destination. \nThis could be an attacker-controlled destination mailbox configured to collect mail from multiple compromised user accounts.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let queryfrequency = 1d;\nlet queryperiod = 7d;\n// EnrichedMicrosoft365AuditLogs Query\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated > ago(queryperiod)\n    | where Workload == \"Exchange\"\n    | where AdditionalProperties has_any (\"ForwardTo\", \"RedirectTo\", \"ForwardingSmtpAddress\")\n    | mv-apply DynamicParameters = todynamic(AdditionalProperties) on (\n        summarize ParsedParameters = make_bag(bag_pack(tostring(DynamicParameters.Name), DynamicParameters.Value))\n    )\n    | evaluate bag_unpack(ParsedParameters, columnsConflict='replace_source')\n    | extend DestinationMailAddress = tolower(case(\n        isnotempty(column_ifexists(\"ForwardTo\", \"\")), column_ifexists(\"ForwardTo\", \"\"),\n        isnotempty(column_ifexists(\"RedirectTo\", \"\")), column_ifexists(\"RedirectTo\", \"\"),\n        isnotempty(column_ifexists(\"ForwardingSmtpAddress\", \"\")), trim_start(@\"smtp:\", column_ifexists(\"ForwardingSmtpAddress\", \"\")),\n        \"\"\n    ))\n    | where isnotempty(DestinationMailAddress)\n    | mv-expand split(DestinationMailAddress, \";\")\n    | extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIp)[0]\n    | extend ClientIp = tostring(ClientIPValues[0]), Port = tostring(ClientIPValues[1])\n    | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DistinctUserCount = dcount(UserId), UserId = make_set(UserId, 250), Ports = make_set(Port, 250), EventCount = count() by tostring(DestinationMailAddress), ClientIp\n    | where DistinctUserCount > 1 and EndTime > ago(queryfrequency)\n    | mv-expand UserId to typeof(string)\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n    | where TimeGenerated > ago(queryperiod)\n    | where OfficeWorkload =~ \"Exchange\"\n    | where Parameters has_any (\"ForwardTo\", \"RedirectTo\", \"ForwardingSmtpAddress\")\n    | mv-apply DynamicParameters = todynamic(Parameters) on (\n        summarize ParsedParameters = make_bag(bag_pack(tostring(DynamicParameters.Name), DynamicParameters.Value))\n    )\n    | evaluate bag_unpack(ParsedParameters, columnsConflict='replace_source')\n    | extend DestinationMailAddress = tolower(case(\n        isnotempty(column_ifexists(\"ForwardTo\", \"\")), column_ifexists(\"ForwardTo\", \"\"),\n        isnotempty(column_ifexists(\"RedirectTo\", \"\")), column_ifexists(\"RedirectTo\", \"\"),\n        isnotempty(column_ifexists(\"ForwardingSmtpAddress\", \"\")), trim_start(@\"smtp:\", column_ifexists(\"ForwardingSmtpAddress\", \"\")),\n        \"\"\n    ))\n    | where isnotempty(DestinationMailAddress)\n    | mv-expand split(DestinationMailAddress, \";\")\n    | extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIP)[0]\n    | extend ClientIP = tostring(ClientIPValues[0]), Port = tostring(ClientIPValues[1])\n    | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DistinctUserCount = dcount(UserId), UserId = make_set(UserId, 250), Ports = make_set(Port, 250), EventCount = count() by tostring(DestinationMailAddress), ClientIP\n    | where DistinctUserCount > 1 and EndTime > ago(queryfrequency)\n    | mv-expand UserId to typeof(string)\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n    | extend Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix, IP_0_Address = ClientIP;\n// Combine Office and Enriched Logs\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize arg_min(StartTime, *) by DestinationMailAddress, ClientIp;\n// Final Output\nCombinedEvents\n    | project StartTime, EndTime, DestinationMailAddress, ClientIp, Ports, UserId, AccountName, AccountUPNSuffix\n    | order by StartTime desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies compromises and attacks and detect malicious activities in ones email entity from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 10d;\nlet ioc_lookBack = 30d;\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$';\nThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | where isnotempty(EmailSenderAddress)\n  | join kind=innerunique (CloudAppEvents\n| extend User_Id = tostring(RawEventData.UserId)\n| where isnotempty(User_Id)\n| where TimeGenerated >= ago(dt_lookBack) and isnotempty(Application)\n| extend CloudAppEvents_TimeGenerated = TimeGenerated \n| where User_Id matches regex emailregex) on $left.EmailSenderAddress == $right.User_Id\n| where CloudAppEvents_TimeGenerated < ExpirationDateTime\n| summarize CloudAppEvents_TimeGenerated = argmax(CloudAppEvents_TimeGenerated, *) by IndicatorId, User_Id\n| extend Name = tostring(split(User_Id, '@', 0)[0]), UPNSuffix = tostring(split(User_Id, '@', 1)[0])\n| extend timestamp = CloudAppEvents_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a list of internal Source IPs (10.x.x.x Hosts) that have triggered 10 or more non-graceful tcp server resets from one or more Destination IPs which results in an \"app = incomplete\" designation. The server resets coupled with an \"Incomplete\" app designation can be an indication of internal to external port scanning or probing attack.\nReferences: https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClUvCAK\nhttps://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClTaCAK\n Topic: Azure Cloud NGFW by Palo Alto Networks"}, {"role": "assistant", "content": "fluentbit_CL\n| where ident_s == \"TRAFFIC\"\n| where isnotempty(FirewallName_s)\n| extend message = parse_json(Message)\n| extend DestinationPort = tostring(message.dport)\n| extend SourceIP = tostring(message.src_ip)\n| extend DestinationIP = tostring(message.dst_ip)\n| extend Application = tostring(message.app)\n| extend Protocol = tostring(message.proto)\n| extend Action = tostring(message.action)\n| where isnotempty(DestinationPort) and message.action !in (\"reset-both\", \"deny\")\n| where DestinationPort !in (\"443\", \"53\", \"389\", \"80\", \"0\", \"880\", \"8888\", \"8080\")\n| where message.app == \"incomplete\"\n| where toint(DestinationPort) !between (49512 .. 65535)\n| where message.dst_ip !startswith \"10.\"\n| extend Reason = coalesce(column_ifexists(\"Reason\", \"\"), tostring(message.session_end_reason), \"\")\n| where Reason !has \"aged-out\"\n| where Reason !has \"tcp-fin\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by FirewallName_s, SourceIP, Application, Reason, DestinationPort, Protocol, ident_s, Action, DestinationIP\n| where count_ >= 10\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), makeset(DestinationIP), totalcount = sum(count_) by FirewallName_s, SourceIP, Application, Reason, DestinationPort, Protocol, ident_s, Action\n| extend IPAddress = SourceIP\n| extend HostName = tostring(split(FirewallName_s, \".\")[0]), DomainIndex = toint(indexof(FirewallName_s, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(FirewallName_s, DomainIndex + 1), FirewallName_s)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a new successful MFA confirmed sign-in has occurred from a location that was not seen within the last 14 days.\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "let rulefrequency = 1h;\nlet lookback = 14d;\nlet onePasswordSigninBaseline =\n    OnePasswordEventLogs_CL\n    | where TimeGenerated between (ago(lookback) .. now())\n    | where log_source == \"signinattempts\"\n    | where (category == \"success\" and action_type == \"mfa_ok\") or (category == \"success\" and action_type == \"credentials_ok\")\n    | summarize count() by tostring(target_user.uuid), tostring(target_user.email), tostring(client.ip_address), tostring(location.country)\n    | extend identifier = strcat(target_user_uuid, client_ip_address)\n    | summarize make_list(identifier)\n;\nOnePasswordEventLogs_CL\n| where TimeGenerated between (ago(rulefrequency) .. now())\n| where log_source == \"signinattempts\"\n| where (category == \"success\" and action_type == \"mfa_ok\") or (category == \"success\" and action_type == \"credentials_ok\")\n// limit the amount of incident triggers by enabling and adjusting the following in order to exclude country specific sign-ins\n// | where country !in~ (\"CA\", \"US\")\n| extend identifier = strcat(target_user.uuid, client.ip_address)\n| where identifier !in (onePasswordSigninBaseline)\n| extend\n    TargetUsername = target_user.email\n    , SrcIpAddr = client.ip_address"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query looks for unusual remote desktop activity by monitoring TCP/3389 traffic. While RDP is common, focus on atypical connections to identify potential threats.\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "// Filter events from the last day that were not failures\n_Im_NetworkSession(starttime=ago(1d))\n// Filter events where the source IP is private, the destination IP is not private, and the source and destination IPs are not the same\n| where  EventResult == \"Failure\" and ipv4_is_private(SrcIpAddr) and not(ipv4_is_private(DstIpAddr)) and SrcIpAddr != DstIpAddr\n// Filter events where the destination port number is 3389 (commonly used for Microsoft Remote Desktop (RDP))\n| where tostring(DstPortNumber) has_any (\"3389\")\n// Summarize the data by source IP, destination IP, destination port number, network protocol, and event result\n// For each group, calculate the start time, end time, event count, and a set of up to 10 event vendors\n| summarize Starttime= min(TimeGenerated),EndTime= max(TimeGenerated),Eventscount=sum(EventCount), EventVendors=make_set(EventVendor,10) by SrcIpAddr,DstIpAddr,DstPortNumber,NetworkProtocol,EventResult\n| extend IP_0_Address = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when sensitive Azure Key Vault operations are used. This includes: VaultDelete, KeyDelete, SecretDelete, SecretPurge, KeyPurge, SecretBackup, KeyBackup.\nAny Backup operations should match with expected scheduled backup activity.\n Topic: Azure Key Vault"}, {"role": "assistant", "content": "let SensitiveOperationList = dynamic(\n[\"VaultDelete\", \"KeyDelete\", \"SecretDelete\", \"SecretPurge\", \"KeyPurge\", \"SecretBackup\", \"KeyBackup\"]);\nAzureDiagnostics\n| extend ResultType = column_ifexists(\"ResultType\", \"NoResultType\"), \nrequestUri_s = column_ifexists(\"requestUri_s\", \"None\"), \nidentity_claim_oid_g = column_ifexists(\"identity_claim_oid_g\", \"None\"), CallerIPAddress = column_ifexists(\"CallerIPAddress\", \"None\"), \nclientInfo_s = column_ifexists(\"clientInfo_s\", \"None\"), \nidentity_claim_upn_s = column_ifexists(\"identity_claim_upn_s\", \"None\"),\nidentity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = column_ifexists(\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\", \"None\")\n| where ResourceType =~ \"VAULTS\" and ResultType =~ \"Success\"\n| where OperationName in~ (SensitiveOperationList)\n| summarize EventCount=count(), StartTimeUtc=min(TimeGenerated), EndTimeUtc=max(TimeGenerated), TimeTriggered=make_list(TimeGenerated),OperationNameList=make_set(OperationName), RequestURLList=make_set(requestUri_s), CallerIPList = make_set(CallerIPAddress),  CallerIPMax= arg_max(CallerIPAddress,*) by ResourceType, ResultType, Resource, identity_claim_upn_s, clientInfo_s, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\n| extend timestamp = StartTimeUtc\n| extend Name = tostring(split(identity_claim_upn_s,'@',0)[0]), UPNSuffix = tostring(split(identity_claim_upn_s,'@',1)[0]), AadUserId = identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect activities when a pull request was created. This query runs every day and its severity is Medium.\n Topic: GitHub"}, {"role": "assistant", "content": "GitHubAuditData \n| where Action == \"pull_request.create\"\n| project Actor, Action\n| extend AccountName = tostring(split(Actor, \"@\")[0]), AccountUPNSuffix = tostring(split(Actor, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when an Exchange Online transport rule is configured to forward emails.\nThis could indicate an adversary mailbox configured to collect mail from multiple user accounts.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "// OfficeActivity Query\nlet officeActivityQuery = OfficeActivity\n    | where OfficeWorkload == \"Exchange\"\n    | where Operation in~ (\"New-TransportRule\", \"Set-TransportRule\")\n    | mv-apply DynamicParameters = todynamic(Parameters) on (\n        summarize ParsedParameters = make_bag(pack(tostring(DynamicParameters.Name), DynamicParameters.Value))\n    )\n    | extend RuleName = case(\n        Operation =~ \"Set-TransportRule\", OfficeObjectId,\n        Operation =~ \"New-TransportRule\", ParsedParameters.Name,\n        \"Unknown\"\n    )\n    | mv-expand ExpandedParameters = todynamic(Parameters)\n    | where ExpandedParameters.Name in~ (\"BlindCopyTo\", \"RedirectMessageTo\") and isnotempty(ExpandedParameters.Value)\n    | extend RedirectTo = tostring(ExpandedParameters.Value)  // Cast to string\n    | extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIP)[0]\n    | extend From = ParsedParameters.From\n    | project\n        TimeGenerated,\n        RedirectTo,\n        IPAddress = tostring(ClientIPValues[0]),\n        Port = tostring(ClientIPValues[1]),\n        UserId,\n        From,\n        Operation,\n        RuleName,\n        Parameters\n    | extend\n        AccountName = tostring(split(UserId, \"@\")[0]),\n        AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n    // EnrichedMicrosoft365AuditLogs Query\n    let enrichedLogsQuery = EnrichedMicrosoft365AuditLogs\n    | where Workload == \"Exchange\"\n    | where Operation in~ (\"New-TransportRule\", \"Set-TransportRule\")\n    | extend AdditionalProps = parse_json(AdditionalProperties)\n    | mv-apply DynamicParameters = todynamic(AdditionalProps.Parameters) on (\n        summarize ParsedParameters = make_bag(pack(tostring(DynamicParameters.Name), DynamicParameters.Value))\n    )\n    | extend RuleName = case(\n        Operation =~ \"Set-TransportRule\", ObjectId,\n        Operation =~ \"New-TransportRule\", ParsedParameters.Name,\n        \"Unknown\"\n    )\n    | mv-expand ExpandedParameters = todynamic(AdditionalProps.Parameters)\n    | where ExpandedParameters.Name in~ (\"BlindCopyTo\", \"RedirectMessageTo\") and isnotempty(ExpandedParameters.Value)\n    | extend RedirectTo = tostring(ExpandedParameters.Value)  // Cast to string\n    | extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIp)[0]\n    | extend From = ParsedParameters.From\n    | extend UserAgent = tostring(AdditionalProps.UserAgent)\n    | project\n        TimeGenerated,\n        RedirectTo,\n        IPAddress = tostring(ClientIPValues[0]),\n        Port = tostring(ClientIPValues[1]),\n        UserId,\n        From,\n        Operation,\n        RuleName,\n        Parameters = tostring(AdditionalProps.Parameters),\n        UserAgent\n    | extend\n        AccountName = tostring(split(UserId, \"@\")[0]),\n        AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n    // Combine both queries\n    union isfuzzy=true officeActivityQuery, enrichedLogsQuery\n    | summarize arg_min(TimeGenerated, *) by RuleName, RedirectTo\n    | project\n        TimeGenerated,\n        RedirectTo,\n        IPAddress,\n        Port,\n        UserId,\n        From,\n        Operation,\n        RuleName,\n        Parameters,\n        AccountName,\n        AccountUPNSuffix\n        | order by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects remote to local (R2L) RDP connection.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "UbiquitiAuditEvent\n| where EventCategory =~ 'firewall'\n| where ipv4_is_private(SrcIpAddr) == 'False'\n| where ipv4_is_private(DstIpAddr)\n| where DstPortNumber == '3389'\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which medium sensitivity HR information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let mediumRisk = 2;\nlet hr = 'HR Information';\nCognniIncidents_CL \n| where Severity == mediumRisk\n| where informationType_s == hr\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert evaluates Microsoft Entra ID Sign in risk via Machine Learning correlations in the basket operator. The basket threshold is adjustable, and the default is set to .01. There is an optional configuration to configure the percentage rates. The correlations are designed to leverage machine learning to identify patterns of risky user application access. There is an option for configuration of correlations against Microsoft Sentinel watchlists. For more information, see [Tutorial: Use risk detections for user sign-ins to trigger Microsoft Entra ID Multi-Factor Authentication or password changes](https://docs.microsoft.com/azure/active-directory/authentication/tutorial-risk-based-sspr-mfa)\n Topic: MicrosoftPurviewInsiderRiskManagement"}, {"role": "assistant", "content": "SigninLogs\n| where RiskState == \"atRisk\"\n| project UserPrincipalName, Location, AppDisplayName, RiskState\n| evaluate basket(0.01) // Adjust & Tune Thresholds within Organzational Requirements\n// | where Percent > 50 // Adjust & Tune Thresholds within Organzational Requirements\n| where UserPrincipalName <> \"\"\n| where AppDisplayName <> \"\"\n| project Percent, UserPrincipalName, Location, AppDisplayName, RiskState\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UserPrincipalName == $right.SearchKey\n| sort by Percent desc\n| extend AccountName = tostring(split(UserPrincipalName, \"@\")[0]), AccountUPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection focuses on identifying user-related events involving IAM roles, groups, user access, and password changes. It examines instances where the users IP address matches and alerts generated by Identity Protection share the same IP address. The analysis occurs within a time window of 1 hour, helping to flag potential cases of user impersonation.\n Topic: Multi Cloud Attack Coverage Essentials - Resource Abuse"}, {"role": "assistant", "content": "// Retrieve SecurityAlerts generated within the last day\n SecurityAlert \n // Filter alerts for Azure Active Directory Identity Protection and High severity\n | where ProductName has \"Azure Active Directory Identity Protection\"\n | where AlertSeverity == \"High\"\n // Extract IP address entities from the 'Entities' field\n | extend ipAddress = extract(@'\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b', 0, Entities)\n // Filter out alerts without IP address entities\n | where isnotempty(ipAddress)\n // Summarize entities per unique combination of attributes\n | summarize make_set(Entities)\n     by\n     AlertTime = TimeGenerated,\n     ipAddress,\n     AlertName,\n     ProductName,\n     AlertSeverity\n // Perform an inner join with AWS CloudTrail events\n | join kind=inner (\n     AWSCloudTrail\n     | where isempty(ErrorMessage)\n     | extend UserType = tostring(parse_json(RequestParameters).userType) \n     | where EventName in~ (\"CreateRole\", \"DeleteRole\", \"CreateUser\", \"CreateAccessKey\", \"DeleteAccessKey\", \"CreateGroup\", \"AddUserToGroup\", \"ChangePassword\", \"DeleteGroup\", \"DeleteUser\", \"RemoveUserFromGroup\", \"CreateVirtualMFADevice\", \"DeleteLoginProfile\") \n     | summarize\n         make_set(RequestParameters),\n         make_set(ResponseElements)\n         by\n         SourceIpAddress,\n         UserIdentityArn,\n         UserIdentityType,\n         EventName,\n         EventTime = TimeGenerated\n     )\n     on $left.ipAddress == $right.SourceIpAddress  \n // Filter results based on temporal correlation\n | where AlertTime between ((EventTime - 1h) .. (EventTime + 1h))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "42Crunch API protection against JWT validation\n Topic: 42Crunch API Protection"}, {"role": "assistant", "content": "apifirewall_log_1_CL \n| where TimeGenerated >= ago(5m) \n| where Error_Message_s has \"missing [\\\"x-access-token\\\"]\" \n| project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Response_Header_s, Request_Header_s, Errors_s, Type, UUID_g \n| sort by TimeGenerated desc \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Exposed Admin Login Page\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"medium\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"Exposed Admin Login Page\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for powered on VMs.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "VMwareESXi\n| where TimeGenerated > ago(24h)\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend SrcUsername = extract(@'\\[info\\]\\s+\\[(.*?)\\]', 1, SyslogMessage)\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| project TimeGenerated, SrcUsername, DstHostname\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "InfobloxCDC Lookalike Domain match found in your Infoblox TIDE Threat Intelligence. Customize query count, scheduling, responses and more. Modify data sources, types and threat properties as desired. This rule depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC**](https://aka.ms/sentinel-InfobloxCloudDataConnector-parser).\n Topic: Infoblox Cloud Data Connector"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet TI = ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()  \n| where Description == \"Infoblox - HOST - Policy\"\n| where Tags has_cs \"Property: Policy_LookalikeDomains\" \n| where isnotempty(DomainName)\n;\nlet Data = InfobloxCDC\n| extend HitTime = TimeGenerated\n| where TimeGenerated >= ago(dt_lookBack)\n| where isnotempty(DestinationDnsDomain)\n//Remove trailing period at end of domain\n| extend DestinationDnsDomain = trim_end(@\"\\.$\", DestinationDnsDomain)\n;\nTI | join kind=innerunique Data on $left.DomainName == $right.DestinationDnsDomain\n| where HitTime >= TimeGenerated and HitTime < ExpirationDateTime\n| project LatestIndicatorTime, HitTime, DeviceEventClassID, ThreatLevel, ThreatLevel_Score, ThreatConfidence, DestinationDnsDomain, InfobloxB1FeedName, ThreatClass, ThreatProperty, InfobloxB1PolicyAction, DeviceAction, InfobloxB1PolicyName, SourceIP, DeviceName, SourceMACAddress, SourceUserName, InfobloxB1SrcOSVersion, InfobloxB1ConnectionType, InfobloxB1Network, AdditionalExtensionsParsedNested, \nAdditionalInformation, Description, ThreatType, TrafficLightProtocolLevel, Type, ConfidenceScore, ExpirationDateTime, SourceSystem, Action, IndicatorId, ExternalIndicatorId, Tags\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects suspicious user agent strings used by known hack tools\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "let user_agents=dynamic([\n                          '(hydra)',\n                          ' arachni/',\n                          ' BFAC ',\n                          ' brutus ',\n                          ' cgichk ',\n                          'core-project/1.0',\n                          ' crimscanner/',\n                          'datacha0s',\n                          'dirbuster',\n                          'domino hunter',\n                          'dotdotpwn',\n                          'FHScan Core',\n                          'floodgate',\n                          'get-minimal',\n                          'gootkit auto-rooter scanner',\n                          'grendel-scan',\n                          ' inspath ',\n                          'internet ninja',\n                          'jaascois',\n                          ' zmeu ',\n                          'masscan',\n                          ' metis ',\n                          'morfeus fucking scanner',\n                          'n-stealth',\n                          'nsauditor',\n                          'pmafind',\n                          'security scan',\n                          'springenwerk',\n                          'teh forest lobster',\n                          'toata dragostea',\n                          ' vega/',\n                          'voideye',\n                          'webshag',\n                          'webvulnscan',\n                          ' whcc/',\n                          ' Havij',\n                          'absinthe',\n                          'bsqlbf',\n                          'mysqloit',\n                          'pangolin',\n                          'sql power injector',\n                          'sqlmap',\n                          'sqlninja',\n                          'uil2pn',\n                          'ruler',\n                          'Mozilla/5.0 (Windows; U; Windows NT 5.1; pt-PT; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2 (.NET CLR 3.5.30729)'\n                          ]);\nCisco_Umbrella\n| where EventType == \"proxylogs\"\n| where HttpUserAgentOriginal has_any (user_agents)\n| extend Message = \"Hack Tool User Agent\"\n| project TimeGenerated, Message, SrcIpAddr, DstIpAddr, UrlOriginal, HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected usage of AttachUserPolicy/AttachGroupPolicy/AttachRolePolicy on Lambda policy. Attackers could use these operations for privilege escalation. Verify these actions with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n  | where EventName in (\"PutUserPolicy\",\"PutRolePolicy\",\"PutGroupPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n  | extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n  | extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n  | mvexpand Statement\n  | extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n  | extend Action = tostring(Action)\n  | where Effect =~ \"Allow\" and ((((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"lambda:*\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"lambda:CreateFunction\" and Action contains \"lambda:InvokeFunction\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"lambda:Create*\" and Action contains \"lambda:Invoke*\")) or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"lambda:*\" and Action contains \"dynamodb:*\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"lambda:CreateFunction\" and Action contains \"lambda:CreateEventSourceMapping\" and Action contains \"dynamodb:PutItem\" and Action contains \"dynamodb:CreateTable\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"lambda:Create*\" and Action contains \"dynamodb:Put*\" and Action contains \"dynamodb:Create*\")) and Resource == \"*\" and Condition == \"\"\n  | extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n  | extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n  | extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n  | extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n    AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n  | distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, UserIdentityUserName\n  | extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "User explicitly denies MFA push, indicating that login was not expected and the accounts password may be compromised.\nThis rule is deprecated as of July-2024. Alternative rule with similar logic and contex from more data source \nis available at https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Microsoft%20Entra%20ID/Analytic%20Rules/MFARejectedbyUser.yaml\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let aadFunc = (tableName: string) {\n    table(tableName)\n    | where ResultType == 500121\n    | where Status has \"MFA Denied; user declined the authentication\" or Status has \"MFA denied; Phone App Reported Fraud\"\n    | extend Type = Type, PublicIP = IPAddress\n    | extend\n        Name = tostring(split(UserPrincipalName, '@', 0)[0]),\n        UPNSuffix = tostring(split(UserPrincipalName, '@', 1)[0])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet dvcInfo = DeviceInfo\n    | extend SensorHealthState = column_ifexists(\"SensorHealthState\", \"\")\n    | where OnboardingStatus == \"Onboarded\" and SensorHealthState == \"Active\"\n    | project PublicIP, AadDeviceId;\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n| join kind=leftouter dvcInfo on PublicIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule will check if there is an unnormal activity of sites that are deleted or changed per user.\n The normal amount of actions is calculated based on the previous 14 days of activity. If there is a significant increase, an incident will be created.\n Topic: LastPass"}, {"role": "assistant", "content": "let threshold = toscalar (LastPassNativePoller_CL\n| where todatetime(Time_s) >= startofday(ago(14d)) and todatetime(Time_s) < startofday(ago(1d))\n| where Action_s == \"Site Changed\" or Action_s == \"Deleted Sites\" \n| summarize count() by Username_s, bin(todatetime(Time_s),1d)\n| summarize avg(count_), stdev(count_)\n| project threshold = avg_count_+stdev_count_*2);\nLastPassNativePoller_CL\n| where Username_s != \"API\"\n| where Action_s == \"Site Changed\" or Action_s == \"Deleted Sites\" and todatetime(Time_s) >= startofday(ago(1d))\n| summarize count() by Username_s, IP_Address_s\n| where count_ > ['threshold']\n| extend AccountCustomEntity = Username_s, IPCustomEntity = IP_Address_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query monitors for users running Log Analytics queries that contain filters for specific, defined VIP user accounts or the VIPUser watchlist template.\nUse this detection to alert for users specifically searching for activity of sensitive users.\n Topic: Detections"}, {"role": "assistant", "content": "// Replace these with the username or emails of your VIP users you wish to monitor for.\nlet vips = dynamic(['vip1@email.com','vip2@email.com']);\n// Add users who are allowed to conduct these searches - this could be specific SOC team members\nlet allowed_users = dynamic([]);\nLAQueryLogs\n| where QueryText has_any (vips) or QueryText has_any ('_GetWatchlist(\"VIPUsers\")', \"_GetWatchlist('VIPUsers')\")\n| where AADEmail !in (allowed_users)\n| project TimeGenerated, AADEmail, RequestClientApp, QueryText, ResponseRowCount, RequestTarget\n| extend timestamp = TimeGenerated, AccountName = tostring(split(AADEmail, \"@\")[0]), AccountUPNSuffix = tostring(split(AADEmail, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies accounts that were created or deleted by a defined list of non-approved user principal names. Add to this list before running the query for accurate results.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "// Add non-approved user principal names or apps to the list below to search for their account creation/deletion activity\n// ex: dynamic([\"UPN1\", \"upn123\"])\nlet nonapproved_users = dynamic([]);\nlet nonapproved_apps = dynamic([]);\nAuditLogs\n| where OperationName =~ \"Add user\" or OperationName =~ \"Delete user\"\n| where Result =~ \"success\"\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| where InitiatingUserPrincipalName has_any (nonapproved_users) or InitiatingAppName has_any (nonapproved_apps)\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates an incident in the event a Client has an excessive amounts of denied access requests.\n Topic: Symantec VIP"}, {"role": "assistant", "content": "let threshold = 15;\nlet rejectedAccess = SymantecVIP\n| where isnotempty(RADIUSAuth)\n| where RADIUSAuth =~ \"Reject\"\n| summarize Total = count() by ClientIP, bin(TimeGenerated, 15m)\n| where Total > threshold\n| project ClientIP;\nSymantecVIP\n| where isnotempty(RADIUSAuth)\n| where RADIUSAuth =~ \"Reject\"\n| join kind=inner rejectedAccess on ClientIP\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by ClientIP, User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Domain Infringement\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL | where severity_s == \"Low\" | where type_s == \"Domain Infringement\" | where status_s != \"Closed\" or status_s != \"Resolved\" | where remarks_s == \"New Domain Infringement with severity Low found\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Alerts when there are critical notifications fired in the DSP system.\n Topic: Semperis Directory Services Protector"}, {"role": "assistant", "content": "SecurityEvent\n| where EventSourceName == 'Semperis-DSP-Notifications' and EventID == 30001\n| extend p1Xml = parse_xml(EventData).EventData.Data\n| mv-expand bagexpansion=array p1Xml\n| evaluate bag_unpack(p1Xml)\n| extend Name=column_ifexists('@Name', ''), Value=column_ifexists('#text', '')\n| evaluate pivot(Name, any(Value), TimeGenerated, EventSourceName, Channel, Computer, Level, EventLevelName, EventID, Task, Type, _ResourceId)\n| parse column_ifexists('objectDN', '') with * \"CN=\" cnName \",\" *\n| where \"Critical\" == column_ifexists('severity', \"\")\n| extend NTDomain = tostring(split(changedBy, '\\\\', 0)[0]), LoginUser = tostring(split(changedBy, '\\\\', 1)[0])\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies sucessful sign-in events to Finance & Operations and Lifecycle Services using single factor/password authentication. Sign-in events from tenants not using MFA, coming from a Microsoft Entra trusted network location, or from geolocations seen previously in the last 14 days are excluded. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// Dynamics Lifecycle services: 913c6de4-2a4a-4a61-a9ce-945d2b2ce2e0\n// Microsoft Dynamics ERP: 00000015-0000-0000-c000-000000000000\nlet appid_list = dynamic([\"913c6de4-2a4a-4a61-a9ce-945d2b2ce2e0\", \"00000015-0000-0000-c000-000000000000\"]);\nlet query_frequency = 1h;\nlet query_lookback = 14d;\nlet historical_sign_in_activity = SigninLogs\n    | where TimeGenerated between (ago(query_lookback) .. ago(query_frequency));\nlet historical_sign_in_locations = historical_sign_in_activity\n    | summarize by Location;\nlet multifactor_sign_in_count = toscalar(historical_sign_in_activity\n    | where AppId in (appid_list) and ResultType == 0\n    | where AuthenticationRequirement == \"multiFactorAuthentication\"\n    | summarize count());\nSigninLogs\n| where TimeGenerated >= ago(query_frequency)\n| where AppId in (appid_list) and ResultType == 0\n| where multifactor_sign_in_count > 0\n| where Location !in (historical_sign_in_locations)\n| where NetworkLocationDetails !has \"trustedNamedLocation\"\n| summarize by UserPrincipalName, AppDisplayName, IPAddress, Location\n| extend\n    CloudAppId = 32780,\n    AccountName = tostring(split(UserPrincipalName, \"@\")[0]),\n    UPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n| project\n    UserPrincipalName,\n    AppDisplayName,\n    IPAddress,\n    Location,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected usage of AttachUserPolicy/AttachGroupPolicy/AttachRolePolicy on CloudFormation policy. Attackers could use these events for privilege escalation. Verify these actions with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n  | where EventName in (\"PutUserPolicy\",\"PutRolePolicy\",\"PutGroupPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n  | extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n  | extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n  | mvexpand Statement\n  | extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n  | extend Action = tostring(Action)\n  | where Effect =~ \"Allow\" and (((Action has \"iam:*\" or Action has \"iam:PassRole\") and Action has \"cloudformation:*\") or ((Action has \"iam:*\" or Action has \"iam:PassRole\") and Action contains \"cloudformation:DescribeStacks\" and Action contains \"cloudformation:CreateStack\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"cloudformation:Describe*\" and Action contains \"cloudformation:Create*\")) and Resource == \"*\" and Condition == \"\"\n  | extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n  | extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n  | extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n  | extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n    AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n  | distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, UserIdentityUserName\n  | extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows request to forbidden files.\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "OracleWebLogicServerEvent\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode == 403\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. APT19, for example, used PowerShell commands to execute payloads. The query below generates an output of all users performing an \"action\" operation regarding \"runCommand\" in virtual machines, where one or more features of the activity deviate from the user, his peers, or the tenant profile.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "let operations = dynamic(['Run Command on Virtual Machine']);\nBehaviorAnalytics\n| where ActionType in~ (operations)\n| where ActivityInsights has \"True\"\n| project TimeGenerated, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights\n| extend Name=split(UserPrincipalName, \"@\")[0], UPNSuffix=split(UserPrincipalName, \"@\")[1]\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SourceIPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": " Identifies spike in failed sign-ins from Privileged accounts. Privileged accounts list can be based on IdentityInfo UEBA table.\nSpike is determined based on Time series anomaly which will look at historical baseline values.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#things-to-monitor\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let starttime = 14d;\nlet timeframe = 1d;\nlet scorethreshold = 3;\nlet baselinethreshold = 5;\nlet aadFunc = (tableName:string){\n    IdentityInfo\n    | where TimeGenerated > ago(starttime)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    | mv-expand AssignedRoles\n    | where AssignedRoles contains 'Admin' or GroupMembership has \"Admin\"\n    | summarize Roles = make_list(AssignedRoles) by AccountUPN = tolower(AccountUPN)\n    | join kind=inner (\n        table(tableName)\n        | where TimeGenerated between (startofday(ago(starttime))..startofday(now()))\n        | where ResultType != 0\n        | extend UserPrincipalName = tolower(UserPrincipalName)\n    ) on $left.AccountUPN == $right.UserPrincipalName\n    | extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, Roles = tostring(Roles)\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nlet allSignins = union isfuzzy=true aadSignin, aadNonInt;\nlet TimeSeriesAlerts = \n    allSignins\n    | make-series HourlyCount=count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step 1h by UserPrincipalName, Roles\n    | extend (anomalies, score, baseline) = series_decompose_anomalies(HourlyCount, scorethreshold, -1, 'linefit')\n    | mv-expand HourlyCount to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\n    // Filtering low count events per baselinethreshold\n    | where anomalies > 0 and baseline > baselinethreshold\n    | extend AnomalyHour = TimeGenerated\n    | project UserPrincipalName, Roles, AnomalyHour, TimeGenerated, HourlyCount, baseline, anomalies, score;\n// Filter the alerts for specified timeframe\nTimeSeriesAlerts\n| where TimeGenerated > startofday(ago(timeframe))\n| join kind=inner ( \n    allSignins\n    | where TimeGenerated > startofday(ago(timeframe))\n    // create a new column and round to hour\n    | extend DateHour = bin(TimeGenerated, 1h)\n    | summarize PartialFailedSignins = count(), LatestAnomalyTime = arg_max(TimeGenerated, *) by bin(TimeGenerated, 1h), OperationName, Category, ResultType, ResultDescription, UserPrincipalName, Roles, UserDisplayName, AppDisplayName, ClientAppUsed, IPAddress, ResourceDisplayName\n) on UserPrincipalName, $left.AnomalyHour == $right.DateHour\n| project LatestAnomalyTime, OperationName, Category, UserPrincipalName, Roles = todynamic(Roles), UserDisplayName, ResultType, ResultDescription, AppDisplayName, ClientAppUsed, UserAgent, IPAddress, Location, AuthenticationRequirement, ConditionalAccessStatus, ResourceDisplayName, PartialFailedSignins, TotalFailedSignins = HourlyCount, baseline, anomalies, score\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies GitHub activites where there are a large number of deletions that may be a sign of compromise.\n Topic: GitHub"}, {"role": "assistant", "content": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet LearningPeriod = 7d;\nlet BinTime = 1h;\nlet EndLearningTime = starttime - LearningPeriod;\nlet NumberOfStds = 3;\nlet MinThreshold = 10.0;\nlet GitHubRepositoryDestroyEvents = (GitHubAuditData\n| where Action == \"repo.destroy\");\nGitHubRepositoryDestroyEvents\n| where TimeGenerated between (EndLearningTime .. starttime)\n| summarize count() by bin(TimeGenerated, BinTime)\n| summarize AvgInLearning = avg(count_), StdInLearning = stdev(count_)\n| extend LearningThreshold = max_of(AvgInLearning + StdInLearning * NumberOfStds, MinThreshold)\n| extend Dummy = 1\n| join kind=innerunique (\n  GitHubRepositoryDestroyEvents\n  | where TimeGenerated between (starttime..endtime)\n  | summarize CountInRunTime = count() by bin(TimeGenerated, BinTime)\n  | extend Dummy = 1\n) on Dummy\n| project-away Dummy\n| where CountInRunTime > LearningThreshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query looks for source code files being modified immediately after a build process is started. The purpose of this is to look for malicious code injection during the build process.\nMore details: https://techcommunity.microsoft.com/t5/azure-sentinel/monitoring-the-software-supply-chain-with-azure-sentinel/ba-p/2176463\n Topic: Detections"}, {"role": "assistant", "content": "// How far back to look for events from\nlet timeframe = 1d;\n// How close together build events and file modifications should occur to alert (make this smaller to reduce FPs)\nlet time_window = 5m;\n// Edit this to include build processes used\nlet build_processes = dynamic([\"MSBuild.exe\", \"dotnet.exe\", \"VBCSCompiler.exe\"]);\n// Include any processes that you want to allow to edit files during/around the build process\nlet allow_list = dynamic([\"\"]);\n(union isfuzzy=true\n(SecurityEvent\n| where TimeGenerated > ago(timeframe)\n// Look for build process starts\n| where EventID == 4688\n| where Process has_any (build_processes)\n| summarize by BuildParentProcess=ParentProcessName, BuildProcess=Process, BuildAccount = Account, Computer, BuildCommand=CommandLine, timekey= bin(TimeGenerated, time_window), BuildProcessTime=TimeGenerated\n| join kind=inner(\nSecurityEvent\n| where TimeGenerated > ago(timeframe)\n// Look for file modifications to code file\n| where EventID == 4663\n| where Process !in (allow_list)\n// Look for code files, edit this to include file extensions used in build.\n| where ObjectName endswith \".cs\" or ObjectName endswith \".cpp\"\n// 0x6 and 0x4 for file append, 0x100 for file replacements\n| where AccessMask == \"0x6\"  or AccessMask == \"0x4\" or AccessMask == \"0X100\"\n| summarize by FileEditParentProcess=ParentProcessName, FileEditAccount = Account, Computer, FileEdited=ObjectName, FileEditProcess=ProcessName, timekey= bin(TimeGenerated, time_window), FileEditTime=TimeGenerated)\n// join where build processes and file modifications seen at same time on same host\non timekey, Computer\n// Limit to only where the file edit happens after the build process starts\n| where BuildProcessTime <= FileEditTime\n| summarize make_set(FileEdited), make_set(FileEditProcess), make_set(FileEditAccount) by timekey, Computer, BuildParentProcess, BuildProcess\n),\n(WindowsEvent\n| where TimeGenerated > ago(timeframe)\n// Look for build process starts\n| where EventID == 4688 and EventData has_any (build_processes)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1])\n| where Process has_any (build_processes)\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend CommandLine = tostring(EventData.CommandLine) \n| summarize by BuildParentProcess=ParentProcessName, BuildProcess=Process, BuildAccount = Account, Computer, BuildCommand=CommandLine, timekey= bin(TimeGenerated, time_window), BuildProcessTime=TimeGenerated\n| join kind=inner(\nWindowsEvent\n| where TimeGenerated > ago(timeframe)\n// Look for file modifications to code file\n| where EventID == 4663 and EventData has_any (\"0x6\", \"0x4\", \"0X100\") and EventData has_any (\".cs\", \".cpp\")\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1])\n| where Process !in (allow_list)\n// Look for code files, edit this to include file extensions used in build.\n| extend ObjectName = tostring(EventData.ObjectName)\n| where ObjectName endswith \".cs\" or ObjectName endswith \".cpp\"\n// 0x6 and 0x4 for file append, 0x100 for file replacements\n| extend AccessMask = tostring(EventData.AccessMask)  \n| where AccessMask == \"0x6\"  or AccessMask == \"0x4\" or AccessMask == \"0X100\"\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend ProcessName = tostring(EventData.ProcessName)\n| summarize by FileEditParentProcess=ParentProcessName, FileEditAccount = Account, Computer, FileEdited=ObjectName, FileEditProcess=ProcessName, timekey= bin(TimeGenerated, time_window), FileEditTime=TimeGenerated)\n// join where build processes and file modifications seen at same time on same host\non timekey, Computer\n// Limit to only where the file edit happens after the build process starts\n| where BuildProcessTime <= FileEditTime\n| summarize make_set(FileEdited), make_set(FileEditProcess), make_set(FileEditAccount) by timekey, Computer, BuildParentProcess, BuildProcess\n))\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies an attempt to Bypass conditional access rule(s) in Microsoft Entra ID.\nThe ConditionalAccessStatus column value details if there was an attempt to bypass Conditional Access or if the Conditional access rule was not satisfied (ConditionalAccessStatus == 1).\nReferences:\nhttps://docs.microsoft.com/azure/active-directory/conditional-access/overview\nhttps://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins\nhttps://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\nConditionalAccessStatus == 0 // Success\nConditionalAccessStatus == 1 // Failure\nConditionalAccessStatus == 2 // Not Applied\nConditionalAccessStatus == 3 // unknown\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let threshold = 1; // Modify this threshold value to reduce false positives based on your environment\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where ConditionalAccessStatus == 1 or ConditionalAccessStatus =~ \"failure\"\n| mv-apply CAP = parse_json(ConditionalAccessPolicies) on (\n  project ConditionalAccessPoliciesName = CAP.displayName, result = CAP.result\n  | where result =~ \"failure\"\n)\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(Status), LocationDetails = todynamic(LocationDetails)\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city), Region = tostring(LocationDetails.countryOrRegion)\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend Status = strcat(StatusCode, \": \", ResultDescription)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Status = make_list(Status,10), StatusDetails = make_list(StatusDetails,50), IPAddresses = make_list(IPAddress,100), IPAddressCount = dcount(IPAddress), CorrelationIds = make_list(CorrelationId,100), ConditionalAccessPoliciesName = make_list(ConditionalAccessPoliciesName,100)\nby UserPrincipalName, UserId, AppDisplayName, tostring(Browser), tostring(OS), City, State, Region, Type\n| where IPAddressCount > threshold and StatusDetails !has \"MFA successfully completed\"\n| mv-expand IPAddresses, Status, StatusDetails, CorrelationIds\n| extend Status = strcat(Status, \" \", StatusDetails)\n| summarize IPAddresses = make_set(IPAddresses,100), Status = make_set(Status,10), CorrelationIds = make_set(CorrelationIds,100), ConditionalAccessPoliciesName = make_set(ConditionalAccessPoliciesName,100)\nby StartTime, EndTime, UserPrincipalName, UserId, AppDisplayName, tostring(Browser), tostring(OS), City, State, Region, IPAddressCount, Type\n| extend IPAddressFirst = tostring(IPAddresses[0]), Name = tostring(split(UserPrincipalName, \"@\")[0]), UPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Looks for the DGA pattern of the domain associated with Solorigate in order to find other domains with the same activity pattern.\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "let cloudApiTerms = dynamic([\"api\", \"east\", \"west\"]);\nDnsEvents\n| where IPAddresses != \"\" and IPAddresses != \"127.0.0.1\"\n| where Name endswith \".com\" or Name endswith \".org\" or Name endswith \".net\"\n| extend domain_split = split(Name, \".\")\n| where tostring(domain_split[-5]) != \"\" and tostring(domain_split[-6]) == \"\"\n| extend sub_domain = tostring(domain_split[0])\n| where sub_domain !contains \"-\"\n| extend sub_directories = strcat(domain_split[-3], \" \", domain_split[-4])\n| where sub_directories has_any(cloudApiTerms)\n//Based on sample communications the subdomain is always between 20 and 30 bytes\n| where strlen(sub_domain) < 32 and strlen(sub_domain) > 20\n| extend domain = strcat(tostring(domain_split[-2]), \".\", tostring(domain_split[-1])) \n| extend subdomain_no = countof(sub_domain, @\"(\\d)\", \"regex\")\n| extend subdomain_ch = countof(sub_domain, @\"([a-z])\", \"regex\")\n| where subdomain_no > 1\n| extend percentage_numerical = toreal(subdomain_no) / toreal(strlen(sub_domain)) * 100\n| where percentage_numerical < 50 and percentage_numerical > 5\n| summarize count(), FirstSeen=min(TimeGenerated), LastSeen=max(TimeGenerated) by Name, IPAddresses\n| order by count_ asc\n| extend DNS_0_DomainName = Name\n| extend DNS_0_IpAddress = IPAddresses\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Indicates when an anomalous number of VM creations or deployment activities occur in Azure via the AzureActivity log. This query generates the baseline pattern of cloud resource creation by an individual and generates an anomaly when any unusual spike is detected. These anomalies from unusual or privileged users could be an indication of a cloud infrastructure takedown by an adversary.\n Topic: Azure Activity"}, {"role": "assistant", "content": "let szOperationNames = dynamic([\"microsoft.compute/virtualMachines/write\", \"microsoft.resources/deployments/write\"]);\nlet starttime = 7d;\nlet endtime = 1d;\nlet timeframe = 1d;\nlet TimeSeriesData =\nAzureActivity\n| where TimeGenerated between (startofday(ago(starttime)) .. startofday(now()))\n| where OperationNameValue in~ (szOperationNames)\n| project TimeGenerated, Caller \n| make-series Total = count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step timeframe by Caller; \nTimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, 3, -1, 'linefit')\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long) \n| where TimeGenerated >= startofday(ago(endtime))\n| where anomalies > 0 and baseline > 0\n| project Caller, TimeGenerated, Total, baseline, anomalies, score\n| join (AzureActivity\n| where TimeGenerated > startofday(ago(endtime)) \n| where OperationNameValue in~ (szOperationNames)\n| summarize make_set(OperationNameValue,100), make_set(_ResourceId,100), make_set(CallerIpAddress,100) by bin(TimeGenerated, timeframe), Caller\n) on TimeGenerated, Caller\n| mv-expand CallerIpAddress=set_CallerIpAddress\n| project-away Caller1\n| extend Name = iif(Caller has '@',tostring(split(Caller,'@',0)[0]),\"\")\n| extend UPNSuffix = iif(Caller has '@',tostring(split(Caller,'@',1)[0]),\"\")\n| extend AadUserId = iif(Caller !has '@',Caller,\"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when workflow scheme was copied.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where EventMessage =~ 'Workflow scheme copied'\n| extend workflow = todynamic(AssociatedItems)[0]['name']\n| project EventCreationTime, ObjectItemName, UserName, SrcIpAddr, workflow\n| extend AccountCustomEntity = UserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects connections with unexpected HTTP request method.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "let bl_http_methods = dynamic(['PUT', 'HEAD', 'OPTIONS', 'TRACE', 'POST']);\nImpervaWAFCloud\n| where HttpRequestMethod in~ (bl_http_methods)\n| extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for infected hosts.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where TimeGenerated > ago(24h)\n| where isnotempty(ThreatName)\n| order by TimeGenerated desc\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when Azure Run command is used to execute a PowerShell script on a VM that is unique.\nThe uniqueness of the PowerShell script is determined by taking a combined hash of the cmdLets it imports and the file size of the PowerShell script. Alerts from this detection indicate a unique PowerShell was executed in your environment.\n Topic: Detections"}, {"role": "assistant", "content": "let RunCommandData = materialize ( AzureActivity\n// Isolate run command actions\n| where OperationNameValue =~ \"Microsoft.Compute/virtualMachines/runCommand/action\"\n// Confirm that the operation impacted a virtual machine\n| where Authorization has \"virtualMachines\"\n// Each runcommand operation consists of three events when successful, StartTimeed, Accepted (or Rejected), Successful (or Failed).\n| summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), max(CallerIpAddress), make_list(ActivityStatusValue) by CorrelationId, Authorization, Caller\n// Limit to Run Command executions that Succeeded\n| where list_ActivityStatusValue has_any (\"Succeeded\", \"Success\")\n// Extract data from the Authorization field, allowing us to later extract the Caller (UPN) and CallerIpAddress\n| extend Authorization_d = parse_json(Authorization)\n| extend Scope = Authorization_d.scope\n| extend Scope_s = split(Scope, \"/\")\n| extend Subscription = tostring(Scope_s[2])\n| extend VirtualMachineName = tostring(Scope_s[-1])\n| project StartTime, EndTime, Subscription, VirtualMachineName, CorrelationId, Caller, CallerIpAddress=max_CallerIpAddress, Scope\n| join kind=leftouter (\n    DeviceFileEvents\n    | where InitiatingProcessFileName == \"RunCommandExtension.exe\"\n    | extend VirtualMachineName = tostring(split(DeviceName, \".\")[0])\n    | project VirtualMachineName, PowershellFileCreatedTimestamp=TimeGenerated, FileName, FileSize, InitiatingProcessAccountName, InitiatingProcessAccountDomain, InitiatingProcessFolderPath, InitiatingProcessId\n) on VirtualMachineName\n// We need to filter by time sadly, this is the only way to link events\n| where PowershellFileCreatedTimestamp between (StartTime .. EndTime)\n| project StartTime, EndTime, PowershellFileCreatedTimestamp, VirtualMachineName, Caller, CallerIpAddress, FileName, FileSize, InitiatingProcessId, InitiatingProcessAccountDomain, InitiatingProcessFolderPath, Scope\n| join kind=inner(\n    DeviceEvents\n    | extend VirtualMachineName = tostring(split(DeviceName, \".\")[0])\n    | where InitiatingProcessCommandLine has \"-File\"\n    // Extract the script name based on the structure used by the RunCommand extension\n    | extend PowershellFileName = extract(@\"\\-File\\s(script[0-9]{1,9}\\.ps1)\", 1, InitiatingProcessCommandLine)\n    // Discard results that didn't successfully extract, these are not run command related\n    | where isnotempty(PowershellFileName)\n    | extend PSCommand = tostring(parse_json(AdditionalFields).Command)\n    // The first execution of PowerShell will be the RunCommand script itself, we can discard this as it will break our hash later\n    | where PSCommand != PowershellFileName \n    // Now we normalise the cmdlets, we're aiming to hash them to find scripts using rare combinations\n    | extend PSCommand = toupper(PSCommand)\n    | order by PSCommand asc\n    | summarize PowershellExecStartTime=min(TimeGenerated), PowershellExecEnd=max(TimeGenerated), make_list(PSCommand) by PowershellFileName, InitiatingProcessCommandLine\n) on $left.FileName == $right.PowershellFileName\n| project StartTime, EndTime, PowershellFileCreatedTimestamp, PowershellExecStartTime, PowershellExecEnd, PowershellFileName, PowershellScriptCommands=list_PSCommand, Caller, CallerIpAddress, InitiatingProcessCommandLine, PowershellFileSize=FileSize, VirtualMachineName, Scope\n| order by StartTime asc \n// We generate the hash based on the cmdlets called and the size of the powershell script\n| extend TempFingerprintString = strcat(PowershellScriptCommands, PowershellFileSize)\n| extend ScriptFingerprintHash = hash_sha256(tostring(PowershellScriptCommands)));\nlet totals = toscalar (RunCommandData\n| summarize count());\nlet hashTotals = RunCommandData\n| summarize HashCount=count() by ScriptFingerprintHash;\nRunCommandData\n| join kind=leftouter (\nhashTotals\n) on ScriptFingerprintHash\n// Calculate prevalence, while we don't need this, it may be useful for responders to know how rare this script is in relation to normal activity\n| extend Prevalence = toreal(HashCount) / toreal(totals) * 100\n// Where the hash was only ever seen once.\n| where HashCount == 1\n| extend timestamp = StartTime\n| extend CallerName = tostring(split(Caller, \"@\")[0]), CallerUPNSuffix = tostring(split(Caller, \"@\")[1])\n| project timestamp, StartTime, EndTime, PowershellFileName, VirtualMachineName, Caller, CallerName, CallerUPNSuffix, CallerIpAddress, PowershellScriptCommands, PowershellFileSize, ScriptFingerprintHash, Prevalence, Scope\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies anomalous data transfer to public networks. The query leverages built-in KQL anomaly detection algorithms that detects large deviations from a baseline pattern.\nA sudden increase in data transferred to unknown public networks is an indication of data exfiltration attempts and should be investigated.\nThe higher the score, the further it is from the baseline value.\nThe output is aggregated to provide summary view of unique source IP to destination IP address and port bytes sent traffic observed in the flagged anomaly hour.\nThe source IP addresses which were sending less than bytessentperhourthreshold have been exluded whose value can be adjusted as needed .\nYou may have to run queries for individual source IP addresses from SourceIPlist to determine if anything looks suspicious\n Topic: SecurityThreatEssentialSolution"}, {"role": "assistant", "content": "let starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet scorethreshold = 5;\nlet bytessentperhourthreshold = 10;\nlet PrivateIPregex = @'^127\\.|^10\\.|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-1]\\.|^192\\.168\\.';\nlet TimeSeriesData = (union isfuzzy=true\n(\nVMConnection\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where isnotempty(DestinationIp) and isnotempty(SourceIp)\n| extend DestinationIpType = iff(DestinationIp matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DestinationIpType == \"public\" | extend DeviceVendor = \"VMConnection\"\n| project TimeGenerated, BytesSent, DeviceVendor\n| make-series TotalBytesSent=sum(BytesSent) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor\n),\n(\nCommonSecurityLog\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\n| extend DestinationIpType = iff(DestinationIP matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DestinationIpType == \"public\"\n| project TimeGenerated, SentBytes, DeviceVendor\n| make-series TotalBytesSent=sum(SentBytes) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor\n)\n);\n//Filter anomolies against TimeSeriesData\nlet TimeSeriesAlerts = materialize(TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalBytesSent, scorethreshold, -1, 'linefit')\n| mv-expand TotalBytesSent to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)\n| where anomalies > 0 | extend AnomalyHour = TimeGenerated\n| extend TotalBytesSentinMBperHour = round(((TotalBytesSent / 1024)/1024),2), baselinebytessentperHour = round(((baseline / 1024)/1024),2), score = round(score,2)\n| project DeviceVendor, AnomalyHour, TimeGenerated, TotalBytesSentinMBperHour, baselinebytessentperHour, anomalies, score);\nlet AnomalyHours = materialize(TimeSeriesAlerts  | where TimeGenerated > ago(2d) | project TimeGenerated);\n//Union of all BaseLogs aggregated per hour\nlet BaseLogs = (union isfuzzy=true\n(\nCommonSecurityLog\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\n| where TimeGenerated > ago(2d)\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\n| extend DestinationIpType = iff(DestinationIP matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DestinationIpType == \"public\"\n| extend SentBytesinMB = ((SentBytes / 1024)/1024), ReceivedBytesinMB = ((ReceivedBytes / 1024)/1024)\n| summarize HourlyCount = count(), TimeGeneratedMax=arg_max(TimeGenerated, *), DestinationIPList=make_set(DestinationIP, 100), DestinationPortList = make_set(DestinationPort,100), TotalSentBytesinMB = sum(SentBytesinMB), TotalReceivedBytesinMB = sum(ReceivedBytesinMB) by SourceIP, DeviceVendor, TimeGeneratedHour=bin(TimeGenerated,1h)\n| where TotalSentBytesinMB > bytessentperhourthreshold\n| sort by TimeGeneratedHour asc, TotalSentBytesinMB desc\n| extend Rank=row_number(1, prev(TimeGeneratedHour) != TimeGeneratedHour) // Ranking the dataset per Hourly Partition\n| where Rank < 10  // Selecting Top 10 records with Highest BytesSent in each Hour\n| project DeviceVendor, TimeGeneratedHour, TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, Rank\n),\n(\nVMConnection\n| where isnotempty(DestinationIp) and isnotempty(SourceIp)\n| where TimeGenerated > ago(2d)\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\n| extend SourceIP = SourceIp, DestinationIP = DestinationIp\n| extend DestinationIpType = iff(DestinationIp matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DestinationIpType == \"public\" | extend DeviceVendor = \"VMConnection\"\n| extend SentBytesinMB = ((BytesSent / 1024)/1024), ReceivedBytesinMB = ((BytesReceived / 1024)/1024)\n| summarize HourlyCount = count(),TimeGeneratedMax=arg_max(TimeGenerated, *), DestinationIPList=make_set(DestinationIP, 100), DestinationPortList = make_set(DestinationPort, 100), TotalSentBytesinMB = sum(SentBytesinMB),TotalReceivedBytesinMB = sum(ReceivedBytesinMB) by SourceIP, DeviceVendor, TimeGeneratedHour=bin(TimeGenerated,1h)\n| where TotalSentBytesinMB > bytessentperhourthreshold\n| sort by TimeGeneratedHour asc, TotalSentBytesinMB desc\n| extend Rank=row_number(1, prev(TimeGeneratedHour) != TimeGeneratedHour) // Ranking the dataset per Hourly Partition\n| where Rank < 10  // Selecting Top 10 records with Highest BytesSent in each Hour\n| project DeviceVendor, TimeGeneratedHour, TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, Rank\n)\n);\n// Join against base logs to retrive records associated with the hour of anomoly\nTimeSeriesAlerts\n| where TimeGenerated > ago(2d)\n| join (\n    BaseLogs | extend AnomalyHour = TimeGeneratedHour\n) on DeviceVendor, AnomalyHour | sort by score desc\n| project DeviceVendor, AnomalyHour,TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies\n| summarize EventCount = count(), StartTimeUtc= min(TimeGeneratedMax), EndTimeUtc= max(TimeGeneratedMax), SourceIPMax= arg_max(SourceIP,*), TotalBytesSentinMB = sum(TotalSentBytesinMB), TotalBytesReceivedinMB = sum(TotalReceivedBytesinMB), SourceIPList = make_set(SourceIP, 100), DestinationIPList = make_set(DestinationIPList, 100) by AnomalyHour,TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies\n| project DeviceVendor, AnomalyHour, StartTimeUtc, EndTimeUtc, SourceIPMax, SourceIPList, DestinationIPList, DestinationPortList, TotalBytesSentinMB, TotalBytesReceivedinMB, TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies, EventCount\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query batches of distinct SQL queries that failed with error codes that might indicate malicious attempts to gain illegitimate access to the data. When Brute Force attacks are attempted, majority of logins will use wrong credentials, thus will fail with error code 18456. Thus, if we see a large number of logins with such error codes, this could indicate Brute Force attack.\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet monitoredErrors = pack_array(18456);        // List of sql error codes relevant for this detection.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | summarize countEvents = count(), countStatements = dcount(Statement), countStatementsWithError = dcountif(Statement, Error in (monitoredErrors))\n        , anyMonitoredStatement = anyif(Statement, Error in (monitoredErrors)), anyInfo = anyif(AdditionalInfo, Error in (monitoredErrors))\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId\n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithErrors = dcountif(timeSlice, countStatementsWithError >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsErrorAnomalyOnStatement = iff(((countStatementsWithError >= monitoredStatementsThreshold) and (countSlicesWithErrors <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithError/monitoredStatementsThreshold, 0)\n| where IsErrorAnomalyOnStatement == 'true'\n| sort by anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected usage of AttachUserPolicy/AttachGroupPolicy/AttachRolePolicy by CRUD S3 Policy. Attackers could use these operations for privilege escalation. Verify these actions with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName in (\"PutUserPolicy\",\"PutRolePolicy\",\"PutGroupPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and (Action contains \"s3:Create\" and Action contains \"s3:Get\" and Action contains \"s3:Put\" and Action contains \"s3:Delete\") and Resource == \"*\" and Condition == \"\"\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, UserIdentityUserName\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects high severity alert which is opened for several days.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "let ResolvedAlerts = PaloAltoPrismaCloud\n| summarize result = make_set(Status) by AlertId\n| where result has 'resolved'\n| project AlertId;\nPaloAltoPrismaCloud\n| where Reason =~ 'NEW_ALERT'\n| where AlertSeverity =~ 'high' \n| where Status =~ 'open'\n| where AlertId !in (ResolvedAlerts)\n| extend alert_time = now() - TimeGenerated\n| where alert_time > 1d\n| extend ['Opened Days'] = strcat('Alert opened for ', strcat(toint(alert_time / 1d), ' days'))\n| distinct AlertId, AlertMessage, AlertSeverity, ['Opened Days'], ResourceId, UserName\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects allowed connections to IP addresses which are in TI list and are known to be malicious.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "let malicious_ips =\nThreatIntelligenceIndicator\n| where isnotempty(NetworkIP)\n| summarize make_list(NetworkIP);\nUbiquitiAuditEvent\n| where EventCategory =~ 'firewall'\n| where ipv4_is_private(SrcIpAddr)\n| where ipv4_is_private(DstIpAddr) == 'False'\n| where DstIpAddr in (malicious_ips)\n| where DvcAction =~ 'Accepted' or DvcAction =~ 'Other'\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects a maliciously tagged impersonation Topic: MimecastTTP"}, {"role": "assistant", "content": "MimecastTTPImpersonation_CL| where taggedMalicious_b == true;"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for an service principal is not using a client certificate or secret is not secure. \n It is recommended that you review your needs and use an Authentication method for sign-in.\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'ServicePrincipalNotUsingClientCredentials'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is desinged to monitor Azure policies aligned with the NIST SP 800-53 Regulatory Compliance initative. The alert triggers when policy compliance falls below 70% within a 1 week timeframe.\n Topic: NISTSP80053"}, {"role": "assistant", "content": "let Last_Evaluated=SecurityRecommendation | join kind=fullouter(SecurityRegulatoryCompliance| where ComplianceStandard == \"NIST-SP-800-53-R4\") on RecommendationName | summarize arg_max(TimeGenerated, *) by AssessedResourceId, RecommendationName | extend ComplianceDomain=iff(ComplianceControl contains \"AC.\", \"Access Control\", iff(ComplianceControl contains \"AT.\", \"Security Awareness & Training\", iff(ComplianceControl contains \"AU.\", \"Audit & Accountability\", iff(ComplianceControl contains \"CA.\", \"Security Assessment\", iff(ComplianceControl contains \"CM.\", \"Configuration Management\", iff(ComplianceControl contains \"CP.\", \"Contingency Planning\", iff(ComplianceControl contains \"IA.\", \"Identification & Authentication\", iff(ComplianceControl contains \"IR.\", \"Incident Response\", iff(ComplianceControl contains \"MA.\", \"System Maintenance\", iff(ComplianceControl contains \"MP.\", \"Media Protection\", iff(ComplianceControl contains \"PE.\", \"Physical Protection\", iff(ComplianceControl contains \"PL.\", \"Security Planning\", iff(ComplianceControl contains \"PS.\", \"Personnel Security\",iff(ComplianceControl contains \"RA.\", \"Risk Assessment\",iff(ComplianceControl contains \"SA.\", \"System & Services Acquisition\",iff(ComplianceControl contains \"SC.\", \"System & Communications Protection\",iff(ComplianceControl contains \"SI.\", \"System & Information Integrity\",\"Other\"))))))))))))))))) | summarize Failed = countif(RecommendationState == \"Unhealthy\"), Passed = countif(RecommendationState == \"Healthy\"), Total = countif(RecommendationState == \"Healthy\" or RecommendationState == \"Unhealthy\") by ComplianceDomain, TimeGenerated; SecurityRecommendation | join kind=fullouter(SecurityRegulatoryCompliance| where ComplianceStandard == \"NIST-SP-800-53-R4\") on RecommendationName | summarize arg_max(TimeGenerated, *) by AssessedResourceId, RecommendationName | extend ComplianceDomain=iff(ComplianceControl contains \"AC.\", \"Access Control\", iff(ComplianceControl contains \"AT.\", \"Security Awareness & Training\", iff(ComplianceControl contains \"AU.\", \"Audit & Accountability\", iff(ComplianceControl contains \"CA.\", \"Security Assessment\", iff(ComplianceControl contains \"CM.\", \"Configuration Management\", iff(ComplianceControl contains \"CP.\", \"Contingency Planning\", iff(ComplianceControl contains \"IA.\", \"Identification & Authentication\", iff(ComplianceControl contains \"IR.\", \"Incident Response\", iff(ComplianceControl contains \"MA.\", \"System Maintenance\", iff(ComplianceControl contains \"MP.\", \"Media Protection\", iff(ComplianceControl contains \"PE.\", \"Physical Protection\", iff(ComplianceControl contains \"PL.\", \"Security Planning\", iff(ComplianceControl contains \"PS.\", \"Personnel Security\",iff(ComplianceControl contains \"RA.\", \"Risk Assessment\",iff(ComplianceControl contains \"SA.\", \"System & Services Acquisition\",iff(ComplianceControl contains \"SC.\", \"System & Communications Protection\",iff(ComplianceControl contains \"SI.\", \"System & Information Integrity\",\"Other\"))))))))))))))))) | summarize Failed = countif(RecommendationState == \"Unhealthy\"), Passed = countif(RecommendationState == \"Healthy\"), Total = countif(RecommendationState == \"Healthy\" or RecommendationState == \"Unhealthy\") by ComplianceDomain | extend PassedControlsPercentage = (Passed/todouble(Total))*100 | join (Last_Evaluated) on ComplianceDomain | project ComplianceDomain, Total, PassedControlsPercentage, Passed, Failed, LastEvaluated=TimeGenerated | summarize arg_max(LastEvaluated, *) by ComplianceDomain, Total, PassedControlsPercentage, Passed, Failed | where PassedControlsPercentage < 70 | sort by PassedControlsPercentage, Passed desc | extend RemediationLink = strcat('https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/22') | extend URLCustomEntity = RemediationLink"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unexpected filename.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where isnotempty(SrcFileName)\n| where SrcFileName matches regex @'\\A[a-zA-Z0-9_\\-.]{1,3}\\.\\w+$'\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Generates an incident when an alert raised by Radiflows iSID is not contemplated by any of the other analytic rules Topic: Radiflow"}, {"role": "assistant", "content": "RadiflowEvent\n| where DeviceProduct =~ 'iSID'\n| where EventClassID !in ('User Activity', 100, 200, 300, 15500, 500, 15600, 16100, 16900, 17100, 18200, 18300, 18400, 18500, 5200, 10500, 15000, 15100, 15200, 15300, 15800, 16600, 17500, 11400, 11500, 11600, 11700, 11800, 11900, 16200, 5500, 14700, 19300, 19400, 2200, 2300, 2400, 2500, 2600, 2700, 14500, 3400, 5300, 6700, 6800, 6900, 7000, 7100, 17900, 5700, 5800, 5800, 6000, 17600, 17800, 18100)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows requests to rare files\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "let lb_period_start = 14d;\nlet lb_period_end = 1d;\nlet known_files = ApacheHTTPServer\n| where TimeGenerated between (ago(lb_period_start) .. ago(lb_period_end))\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| summarize makeset(File);\nApacheHTTPServer\n| where TimeGenerated > ago(24h)\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where File in~ (known_files)\n| extend FileCustomEntity = File, UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Customized query used to identify specific classifications and parameters that have been discovered on assets in the last 24 hours by Microsoft Purview. By default, the query identifies Social Security Numbers detected, but the specific classification monitored along with other data fields can be adjusted. A list of supported Microsoft Purview classifications can be found here: https://docs.microsoft.com/azure/purview/supported-classifications\n Topic: Microsoft Purview"}, {"role": "assistant", "content": "PurviewDataSensitivityLogs\n| where Classification contains \"Social Security Number\"\n//| where SourceRegion == \"westeurope\"\n//| where SourceType contains \"Amazon\"\n| where TimeGenerated > ago(24h)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps any GreyNoise IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in OfficeActivity.\n Topic: GreyNoiseThreatIntelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour for OfficeActivity events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | where SourceSystem == 'GreyNoise'\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\";\n// Perform a join between IP indicators and OfficeActivity events\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      OfficeActivity\n      | where TimeGenerated >= ago(dt_lookBack)\n      | where isnotempty(ClientIP)\n      | extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]%]+)(%\\d+)?\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIP)[0]\n      | extend IPAddress = iff(array_length(ClientIPValues) > 0, tostring(ClientIPValues[0]), '')\n      | extend OfficeActivity_TimeGenerated = TimeGenerated\n  )\n  on $left.TI_ipEntity == $right.IPAddress\n  // Filter out OfficeActivity events that occurred after the expiration of the corresponding indicator\n  | where OfficeActivity_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and keep the OfficeActivity event with the latest timestamp\n  | summarize OfficeActivity_TimeGenerated = arg_max(OfficeActivity_TimeGenerated, *) by IndicatorId\n  // Select the desired output fields\n  | project OfficeActivity_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\n    TI_ipEntity, ClientIP, UserId, Operation, ResultStatus, RecordType, OfficeObjectId, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n  | extend timestamp = OfficeActivity_TimeGenerated, Name = tostring(split(UserId, '@', 0)[0]), UPNSuffix = tostring(split(UserId, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects abnormal password reset attempts for user in short period of time.\n Topic: PingFederate"}, {"role": "assistant", "content": "let threshold = 10;\nPingFederateEvent\n| where EventType =~ 'PWD_RESET_REQUEST'\n| summarize count() by DstUserName, bin(TimeGenerated, 30m)\n| where count_ > threshold\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a secret extraction has occurred after an administrator has changed their own vault access permissions within that same vault.\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "let lookback = 1h;\nlet secretExtractionActivity =\n    OnePasswordEventLogs_CL\n    | where TimeGenerated between (ago(lookback) .. now())\n    | where log_source == \"itemusages\"\n    | where action has_any(\"server-fetch\", \"reveal\", \"secure-copy\")\n;\nOnePasswordEventLogs_CL\n| where log_source == \"auditevents\"\n| where (action == \"grant\" and object_type  == \"uva\") or (action == \"update\" and object_type  == \"uva\")\n| where tostring(actor_details.uuid) == tostring(aux_details.uuid)\n| extend\n    userUuid = tostring(actor_details.uuid)\n    , vaultUuid = tostring(object_uuid)\n| join (\n    secretExtractionActivity\n    | extend\n        userUuid = tostring(user.uuid)\n        , vaultUuid = tostring(vault_uuid)\n    )\n    on $left.userUuid == $right.userUuid and $left.vaultUuid == $right.vaultUuid\n| extend\n    auditevents = bag_pack(\"action\", action, \"object_type\", object_type)\n    , itemusages = bag_pack(\"action\", action1, \"object_type\", object_type1)\n    , vault_details = bag_pack(\"vault_uuid\", vault_uuid1, \"item_uuid\", item_uuid1)\n| project\n    TimeGenerated\n    , actor_details\n    , target_details = aux_details\n    , location_details = location\n    , client_details = client1\n    , auditevents\n    , itemusages\n    , vault_details\n    , TargetUsername = tostring(user1.email)\n    , SrcIpAddr = tostring(client1.ip_address)"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when rundll32 or cmd.exe is utilized to launch a malicious DLL or executable from explorer.exe. Indicative of a cmd window or LNK file executing a program or malware due to a user clicking on a file.\n Topic: Cyborg Security HUNTER"}, {"role": "assistant", "content": "SecurityEvent\n| where ParentProcessName has \"explorer.exe\" \n| where Process has_any (\n  \"wscript.exe\",\n  \"rundll32.exe\",\n  \"explorer.exe\",\n  \"cmd.exe\"\n  )\n| where (CommandLine has_any (\n  \"explorer\",\n  \"rundll32\"\n  ) and CommandLine has_any (\n  \".dll,\",\n  \".dll \"\n  )) or (CommandLine has \"cmd.exe\" and CommandLine matches regex \"\\\\/[Cc] +[Ss][Tt][Aa][Rr][Tt].*\\\\.exe\")\n| project TimeGenerated, Computer, tostring(EventID), ParentProcessName, NewProcessName, CommandLine, SubjectUserName, SourceComputerId, processID=tolong(NewProcessId), parentProcessID=tolong(ProcessId), EventData| order by TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests to unusual URL\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "NGINXHTTPServer\n| where UrlOriginal matches regex @'(10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})|(172\\.1[6-9]\\.\\d{1,3}\\.\\d{1,3})|(172\\.2[0-9]\\.\\d{1,3}\\.\\d{1,3})|(172\\.3[0-1]\\.\\d{1,3}\\.\\d{1,3})|(192\\.168\\.\\d{1,3}\\.\\d{1,3})'\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when an action was made by a user which last activity was observed more than 30 days ago.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let lbtime_14d = 14d;\nlet lbtime_7d = 7d;\nlet lbtime_24h = 24h;\nlet known_users_14d = OracleDatabaseAuditEvent\n| where TimeGenerated between (ago(lbtime_14d) .. ago(lbtime_14d))\n| where isnotempty(DstUserName)\n| where isnotempty(Action)\n| summarize makeset(DstUserName);\nlet known_users_7d = OracleDatabaseAuditEvent\n| where TimeGenerated between (ago(lbtime_7d) .. ago(lbtime_24h))\n| where isnotempty(DstUserName)\n| where isnotempty(Action)\n| summarize makeset(DstUserName);\nOracleDatabaseAuditEvent\n| where isnotempty(DstUserName)\n| where isnotempty(Action)\n| where DstUserName !in (known_users_7d)\n| where DstUserName in (known_users_14d)\n| project DstUserName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "When Security Log is full on a Knox device.\n Topic: Samsung Knox Asset Intelligence"}, {"role": "assistant", "content": "Samsung_Knox_Audit_CL\n| where Name == \"LOG_IS_FULL\" \nand MitreTtp has \"KNOX.1\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Alerts when there are RBAC changes in the DSP system.\n Topic: Semperis Directory Services Protector"}, {"role": "assistant", "content": "SecurityEvent\n| where EventSourceName == 'Semperis-Operation-Log' and EventID == 20012 \n| order by TimeGenerated desc\n| extend p1Xml = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array p1Xml\n| evaluate bag_unpack(p1Xml)\n| extend Name=column_ifexists('@Name', ''), Value=column_ifexists('#text', '')\n| evaluate pivot(Name, any(Value), TimeGenerated, Computer, Level, EventLevelName, EventID, Type, _ResourceId)\n| extend det = column_ifexists('details', '')\n| parse det with \"Occured at (UTC): \" OccurredAt \"Session ID: \" SessionID \"Trustee Name: \" TrusteeName \"Correlation ID: \" CorrelationID \"Source: \" Source \"WebSite Target: \" WebSiteTarget \"Product: \" Product \"Component: \" Component \"AD Information: \" ADInformation \"Object GUID: \" ObjectGUID \"Attribute: \" Attribute \"Distinguished Name: \" DistinguishedName \"Additional Information: \"AdditionalInformation \"Operation Detail: \" OperationDetail \"operationName: \" operationName \"trustee: \" trustee \"personas: \" personas \"Status: \" status \"Granted: \" Granted \"Result: \" Result\n| extend _AccessGranted = iif(operationName contains \"CreateRbacIdentity\", \"Added\", \"Removed\")\n| extend _Identity = iif(operationName contains \"CreateRbacIdentity\", trustee, tostring(substring(trustee, 1, strlen(trustee))))\n| extend _Identity = iif(operationName contains \"CreateRbacIdentity\", _Identity, replace_string(_Identity, \"'\", \"\"))\n| extend add_personas = replace_string(replace_string(replace_string(personas, \"{ Name = \", \"\"), \" }\", \"\"), \";\", \",\")\n| extend remove_personas = replace_string(personas, \";\", \",\")\n| extend grid_personas = iif(operationName contains \"CreateRbacIdentity\", add_personas, remove_personas)\n| extend date_to_sort = format_datetime(TimeGenerated, \"yyyy-mm-dd   HH:mm:ss\")\n| order by date_to_sort desc\n| extend NTDomain = tostring(split(TrusteeName, '\\\\', 0)[0]), LoginUser = tostring(split(TrusteeName, '\\\\', 1)[0])\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies potential phishing or spoofing attempts originating from specific domains with authentication failures.\n Topic: Microsoft Defender XDR"}, {"role": "assistant", "content": "// Add the list of domains to search for.\nlet DomainList = dynamic([\"contoso.com\"]); \nEmailEvents \n| where TimeGenerated > ago (1d) and DetectionMethods has \"spoof\" and SenderFromDomain in~ (DomainList)\n| project TimeGenerated, AR=parse_json(AuthenticationDetails) , NetworkMessageId, EmailDirection, Subject, SenderFromAddress, SenderIPv4, ThreatTypes, DetectionMethods, ThreatNames  \n| evaluate bag_unpack(AR)  \n| where column_ifexists('SPF','') =~ \"fail\" or  column_ifexists('DMARC','') =~ \"fail\" or column_ifexists('DKIM','') =~ \"fail\" or column_ifexists('CompAuth','') =~ \"fail\"\n| extend Name = tostring(split(SenderFromAddress, '@', 0)[0]), UPNSuffix = tostring(split(SenderFromAddress, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SenderIPv4\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies an interrupted sign-in session from a country the user has not sign-in before in the last 7 days, where the password was correct. Although the session is interrupted by other controls such as multi factor authentication or conditional access policies, the user credentials should be reset due to logs indicating a correct password was observed during sign-in.\n Topic: Detections"}, {"role": "assistant", "content": "// Creating a list of successful sign-in by users in the last 7 days.\nlet KnownUserCountry = (\nSigninLogs\n| where TimeGenerated between (ago(7d) .. ago(1d) ) \n| where ResultType == 0\n| summarize KnownCountry = make_set(Location,1048576) by UserPrincipalName\n);\n// Identify sign-ins that are no successful but have the auth details indicating a correct password.\nSigninLogs\n| where TimeGenerated >= ago(1d)\n| where ResultType != 0\n| extend ParseAuth = parse_json(AuthenticationDetails)\n| extend AuthMethod = tostring(ParseAuth.[0].authenticationMethod),\n    PasswordResult = tostring(ParseAuth.[0].authenticationStepResultDetail),\n    AuthSucceeded = tostring(ParseAuth.[0].succeeded)\n| where PasswordResult == \"Correct Password\" or AuthSucceeded == \"true\"\n| where AuthMethod == \"Password\"\n| extend failureReason = tostring(Status.failureReason)\n| summarize NewCountry = make_set(Location,1048576), LastObservedTime = max(TimeGenerated), AppName = make_set(AppDisplayName,1048576) by UserPrincipalName, PasswordResult, AuthSucceeded, failureReason\n// Combining both tables by user\n| join kind=inner KnownUserCountry on UserPrincipalName\n// Compare both arrays and identify if the country has been observed in the past.\n| extend CountryDiff = set_difference(NewCountry,KnownCountry)\n| extend CountryDiffCount = array_length(CountryDiff)\n// Count the new column to only alert if there is a difference between both arrays\n| where CountryDiffCount != 0\n| extend NewCountryEvent = CountryDiff\n// Getting UserName and Domain\n| extend Name = split(UserPrincipalName,\"@\",0),\n    Domain = split(UserPrincipalName,\"@\",1)\n| mv-expand Name,Domain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for malicious files.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where TimeGenerated > ago(24h)\n| where IndicatorThreatType =~ 'Malicious'\n| order by TimeGenerated desc\n| extend FileCustomEntity = SrcFileName, HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query uses Sysmon Image Load (Event ID 7) and Process Create (Event ID 1) data to look for COM Event System being used to load a newly seen DLL.\n Topic: Detections"}, {"role": "assistant", "content": "let lookback_start = 7d;\nlet lookback_end = 1d;\nlet timedelta = 5s;\n// Get a list of previously seen DLLs being loaded\nlet known_dlls = (Event\n| where TimeGenerated between(ago(lookback_start)..ago(lookback_end))\n| where EventID == 7\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend LoadedItems = parse_json(tostring(parse_json(tostring(EvData.DataItem)).EventData)).[\"Data\"]\n| mv-expand LoadedItems\n| where tostring(LoadedItems.[\"@Name\"]) =~ \"ImageLoaded\"\n| extend DLL = tostring(LoadedItems.[\"#text\"])\n| summarize by DLL);\n// Get Image Load events related to svchost.exe\nEvent\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n// Image Load Event in Sysmon\n| where EventID == 7\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend Images = parse_json(tostring(parse_json(tostring(EvData.DataItem)).EventData)).[\"Data\"]\n| mv-expand Images\n// Parse out executing process\n| where tostring(Images.[\"@Name\"]) =~ \"Image\"\n| extend Image = tostring(Images.[\"#text\"])\n| where Image endswith \"\\\\svchost.exe\"\n// Parse out loaded DLLs\n| extend LoadedItems = parse_json(tostring(parse_json(tostring(EvData.DataItem)).EventData)).[\"Data\"]\n| mv-expand LoadedItems\n| where tostring(LoadedItems.[\"@Name\"]) =~ \"ImageLoaded\"\n| extend DLL = tostring(LoadedItems.[\"#text\"])\n| extend Image = tostring(Image)\n| extend ImageLoadTime = TimeGenerated\n// Join with processes with a command line related to COM Event System\n| join kind = inner(Event\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n// Sysmon process execution events\n| where EventID == 1\n| extend RenderedDescription = tostring(split(RenderedDescription, \":\")[0])\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| extend ParentImage = tostring(column_ifexists(\"ParentImage\", \"NotAvailable\"))\n// Command line related to COM Event System\n| where ParentImage endswith \"\\\\svchost.exe\"\n//| where ParentCommandLine has_all (\" -k LocalService\",\" -p\",\" -s EventSystem\")\n| extend ProcessExecutionTime = TimeGenerated) on $left.Image == $right.ParentImage\n// Check timespan between DLL load and process creation\n| extend delta =  ProcessExecutionTime - ImageLoadTime\n| where ImageLoadTime <= ProcessExecutionTime and delta <= timedelta\n// Filter to only newly seen DLLs\n| where DLL !in (known_dlls)\n| extend ParentCommandLine = tostring(column_ifexists(\"ParentCommandLine\", \"NotAvailable\"))\n| project-reorder ImageLoadTime, ProcessExecutionTime , Image, ParentCommandLine, DLL\n| extend Hashes = tostring(column_ifexists(\"Hashes\", \"NotAvailable, NotAvailable\"))\n| extend Hashes = split(Hashes, \",\")\n| mv-apply Hashes on (summarize FileHashes = make_bag(pack(tostring(split(Hashes, \"=\")[0]), tostring(split(Hashes, \"=\")[1]))))\n| extend SHA1 = tostring(FileHashes.SHA1)\n| extend HashAlgo = \"SHA1\"\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend Name = tostring(split(UserName, \"\\\\\")[1]), NTDomain = tostring(split(UserName, \"\\\\\")[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for user errors during accessing resource.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "CiscoWSAEvent\n| where TimeGenerated > ago(24h)\n| where DvcAction =~ 'OTHER'\n| summarize count() by UrlOriginal, SrcUserName\n| extend URLCustomEntity = UrlOriginal, AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "High severity virtual machine alerts found by Prancer.\n Topic: Prancer PenSuiteAI Integration"}, {"role": "assistant", "content": "union prancer_CL\n| where deviceProduct_s == 'azure'\n| where parse_json(data_data_snapshots_s)[0].type == 'Microsoft.Compute/virtualMachines'\n| where data_data_severity_s == 'High' and data_data_result_s == 'failed'\n| extend snapshot = parse_json(data_data_snapshots_s)\n| mv-expand snapshot \n| extend\n    id = tostring(snapshot.id),\n    structure = tostring(snapshot.structure),\n    reference = tostring(snapshot.reference),\n    source = tostring(snapshot.source),\n    collection = tostring(snapshot.collection),\n    type = tostring(snapshot.type),\n    region = tostring(snapshot.region),\n    resourceTypes = tostring(snapshot.resourceTypes),\n    path = tostring(snapshot.path)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Two-factor authentication is a process where a user is prompted during the sign-in process for an additional form of identification, such as to enter a code on their cellphone or to provide a fingerprint scan. Two factor authentication reduces the risk of account takeover. Attacker will want to disable such security tools in order to go undetected. \n Topic: GitHub"}, {"role": "assistant", "content": "GitHubAuditData\n| where Action == \"org.disable_two_factor_requirement\"\n| project TimeGenerated, Action, Actor, Country, Repository\n| extend Name = iif(Actor contains \"@\", split(Actor, \"@\")[0], Actor)\n| extend UPNSuffix = iif(Actor contains \"@\", split(Actor, \"@\")[1], \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "High severity registry alerts found by Prancer.\n Topic: Prancer PenSuiteAI Integration"}, {"role": "assistant", "content": "union prancer_CL\n| where deviceProduct_s == 'azure'\n| where parse_json(data_data_snapshots_s)[0].type == 'Microsoft.ContainerRegistry/registries'\n| where data_data_severity_s == 'High' and data_data_result_s == 'failed'\n| extend snapshot = parse_json(data_data_snapshots_s)\n| mv-expand snapshot \n| extend\n    id = tostring(snapshot.id),\n    structure = tostring(snapshot.structure),\n    reference = tostring(snapshot.reference),\n    source = tostring(snapshot.source),\n    collection = tostring(snapshot.collection),\n    type = tostring(snapshot.type),\n    region = tostring(snapshot.region),\n    resourceTypes = tostring(snapshot.resourceTypes),\n    path = tostring(snapshot.path)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects ZAP connections outside operational hours.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "ZPAEvent \n| where DvcAction == 'open'\n| where datetime_part(\"Hour\", todatetime(LogTimestamp)) between (datetime_part(\"Hour\", todatetime('19:01:00.7654321')) .. datetime_part(\"Hour\", todatetime('08:01:00.7654321')))\n| summarize count() by DstUserName \n| project DstUserName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies evidence of password spray activity against Connect Health for AD FS sign-in events by looking for failures from multiple accounts from the same IP address within a time window.\nReference: https://adfshelp.microsoft.com/References/ConnectHealthErrorCodeReference\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let queryfrequency = 30m;\nlet accountthreshold = 10;\nlet successCodes = dynamic([0, 50144]);\nADFSSignInLogs\n| extend IngestionTime = ingestion_time()\n| where IngestionTime > ago(queryfrequency)\n| where not(todynamic(AuthenticationDetails)[0].authenticationMethod == \"Integrated Windows Authentication\")\n| summarize\n    DistinctFailureCount = dcountif(UserPrincipalName, ResultType !in (successCodes)),\n    DistinctSuccessCount = dcountif(UserPrincipalName, ResultType in (successCodes)),\n    SuccessAccounts = make_set_if(UserPrincipalName, ResultType in (successCodes), 250),\n    arg_min(TimeGenerated, *)\n    by IPAddress\n| where DistinctFailureCount > DistinctSuccessCount and DistinctFailureCount >= accountthreshold\n//| extend SuccessAccounts = iff(array_length(SuccessAccounts) != 0, SuccessAccounts, dynamic([\"null\"]))\n//| mv-expand SuccessAccounts\n| project TimeGenerated, Category, OperationName, IPAddress, DistinctFailureCount, DistinctSuccessCount, SuccessAccounts, AuthenticationRequirement, ConditionalAccessStatus, IsInteractive, UserAgent, NetworkLocationDetails, DeviceDetail, TokenIssuerType, TokenIssuerName, ResourceIdentity\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New Suspicious Mobile App with severity High found\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL | where severity_s == \"High\" | where type_s == \"Suspicious Mobile App\" | where status_s != \"Closed\" or status_s != \"Resolved\" | where remarks_s == \"New Suspicious Mobile App with severity High found\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A successful API execution was detected from an IP address categorized as a TOR exit node by Threat Intelligence.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let TorNodes = (\nexternaldata (TorIP:string)\n[h@'https://firewalliplists.gypthecat.com/lists/kusto/kusto-tor-exit.csv.zip']\nwith (ignoreFirstRecord=true));\nAWSCloudTrail\n| where SourceIpAddress in (TorNodes) and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n    AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Malware can use IP address to communicate with C2.\n Topic: Detections"}, {"role": "assistant", "content": "let lbtime = 10m;\nCisco_Umbrella\n| where TimeGenerated > ago(lbtime)\n| where EventType == 'proxylogs'\n| where DvcAction =~ 'Allowed'\n| where UrlOriginal matches regex @'\\Ahttp:\\/\\/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}.*'\n| project TimeGenerated, SrcIpAddr, Identities\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection will identify network requests in HTTP proxy data that contains Base64 encoded usernames from machines in the DeviceEvents table.\nThis technique was seen usee by POLONIUM in their RunningRAT tool.\n Topic: Detections"}, {"role": "assistant", "content": "let accountLookback = 3d;\nlet requestLookback = 3d;\nlet extraction_regex = @\"(?:\\?|&)[a-zA-Z0-9\\%]*=([a-zA-Z0-9\\/\\+\\=]*)\";\n// Collect account names and base64 encode them\nDeviceEvents\n| where TimeGenerated > ago(accountLookback)\n| summarize make_set(DeviceId), make_set(DeviceName) by InitiatingProcessAccountName\n| where isnotempty(InitiatingProcessAccountName)\n| extend base64_user = base64_encode_tostring(InitiatingProcessAccountName)\n| join (\n    // Collect requests and extract base64 parameters\n    CommonSecurityLog\n    | where TimeGenerated > ago(requestLookback)\n    | where isnotempty(RequestURL)\n    // Summarize early on the RequestURL\n    | summarize FirstRequest=min(TimeGenerated), LastRequest=max(TimeGenerated), NumberOfRequests=count() by RequestURL\n    | extend base64_candidate = extract_all(extraction_regex, RequestURL)\n    | mv-expand base64_candidate  to typeof(string)\n) on $left.base64_user == $right.base64_candidate\n| project FirstRequest, LastRequest, NumberOfRequests, RequestURL, DeviceIds=set_DeviceId, DeviceNames=set_DeviceName, UserName=InitiatingProcessAccountName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when an admin or app owner account adds a new credential to an Application or Service Principal where a verify KeyCredential was already present for the app.\nIf a threat actor obtains access to an account with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.\nAdditional information on OAuth Credential Grants can be found in RFC 6749 Section 4.4 or https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where OperationName has_any (\"Add service principal\", \"Certificates and secrets management\") // captures \"Add service principal\", \"Add service principal credentials\", and \"Update application - Certificates and secrets management\" events\n| where Result =~ \"success\"\n| where tostring(InitiatedBy.user.userPrincipalName) has \"@\" or tostring(InitiatedBy.app.displayName) has \"@\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"Application\"\n      | extend targetDisplayName = tostring(TargetResource.displayName),\n               targetId = tostring(TargetResource.id),\n               targetType = tostring(TargetResource.type),\n               keyEvents = TargetResource.modifiedProperties\n  )\n| mv-apply Property = keyEvents on \n  (\n      where Property.displayName =~ \"KeyDescription\"\n      | extend new_value_set = parse_json(tostring(Property.newValue)),\n               old_value_set = parse_json(tostring(Property.oldValue))\n  )\n| where old_value_set != \"[]\"\n| extend diff = set_difference(new_value_set, old_value_set)\n| where diff != \"[]\"\n| parse diff with * \"KeyIdentifier=\" keyIdentifier:string \",KeyType=\" keyType:string \",KeyUsage=\" keyUsage:string \",DisplayName=\" keyDisplayName:string \"]\" *\n| where keyUsage =~ \"Verify\"\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend UserAgent = tostring(AdditionalDetail.value)\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n// The below line is currently commented out but Microsoft Sentinel users can modify this query to show only Application or only Service Principal events in their environment\n//| where targetType =~ \"Application\" // or targetType =~ \"ServicePrincipal\"\n| project-away diff, new_value_set, old_value_set\n| project-reorder TimeGenerated, OperationName, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, UserAgent, targetDisplayName, targetId, targetType, keyDisplayName, keyType, keyUsage, keyIdentifier, CorrelationId, TenantId\n| extend InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "CreepyDrive uses OneDrive for command and control, however, it makes regular requests to predicatable paths.\nThis detecton will alert when over 20 sequences are observed in a single day.\n Topic: Detections"}, {"role": "assistant", "content": "let eventsThreshold = 20;\nCommonSecurityLog\n| where isnotempty(RequestURL)\n| project TimeGenerated, RequestURL, RequestMethod, SourceIP, SourceHostName\n| evaluate sequence_detect(TimeGenerated, 5s, 8s, login=(RequestURL has \"login.microsoftonline.com/consumers/oauth2/v2.0/token\"), graph=(RequestURL has \"graph.microsoft.com/v1.0/me/drive/\"), SourceIP, SourceHostName)\n| summarize Events=count() by SourceIP, SourceHostName\n| where Events >= eventsThreshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert creates an incident when Timeseries Forecasting AI Model extraction high suspicious, high severity vulnerability detected from the AIShield.\n Topic: AIShield AI Security Monitoring"}, {"role": "assistant", "content": "AIShield\n| where Message has 'Timeseries Forecasting AI Model Extraction Attack Identified'\n| where Severity =~ 'High'\n| where SuspiciousLevel =~ 'high suspicious attack'\n| extend NTDomain = tostring(split(Computer, '\\\\')[0]), HostName = tostring(split(Computer, '.')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects cases in which Okta FastPass effectively prevented access to a known phishing website.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "OktaSSO\n| where eventType_s == 'user.authentication.auth_via_mfa'\n| where outcome_result_s == 'FAILURE'\n| where outcome_reason_s == 'FastPass declined phishing attempt'\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by actor_alternateId_s, actor_displayName_s, client_userAgent_os_s, client_ipAddress_s, client_geographicalContext_state_s,displayMessage_s, outcome_result_s,\n outcome_reason_s, column_ifexists('debugContext_debugData_logOnlySecurityData_s', \"\"), debugContext_debugData_threatSuspected_s, client_userAgent_rawUserAgent_s,client_userAgent_browser_s, severity_s, client_geographicalContext_city_s, client_geographicalContext_country_s\n| extend Location = strcat(client_geographicalContext_city_s, \"-\", client_geographicalContext_country_s)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create alert on web sites blocked by Eset.\n Topic: Eset Security Management Center"}, {"role": "assistant", "content": "eset_CL\n| where event_type_s == 'FilteredWebsites_Event'\n| extend AccountCustomEntity = username_s, URLCustomEntity = object_uri_s, HostCustomEntity = hostname_s, IPCustomEntity = ipv4_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects a privileged role being added to a Service Principal.\n  Ensure that any assignment to a Service Principal is valid and appropriate - Service Principals should not be assigned to very highly privileged roles such as Global Admin.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#changes-to-privileged-accounts\n Topic: Detections"}, {"role": "assistant", "content": "AuditLogs\n  | where OperationName has_all (\"member to role\", \"add\")\n  | where Result =~ \"Success\"\n  | extend type_ = tostring(TargetResources[0].type)\n  | where type_ =~ \"ServicePrincipal\"\n  | where isnotempty(TargetResources)\n  | extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n  | extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n  | extend InitiatedBy = tostring(iff(isnotempty(InitiatingUserPrincipalName),InitiatingUserPrincipalName, InitiatingAppName))\n  | extend ServicePrincipalName = tostring(TargetResources[0].displayName)\n  | extend ServicePrincipalId = tostring(TargetResources[0].id)\n  | mv-expand TargetResources[0].modifiedProperties\n  | extend TargetResources_0_modifiedProperties = columnifexists(\"TargetResources_0_modifiedProperties\", '')\n  | where isnotempty(TargetResources_0_modifiedProperties)\n  | extend displayName = tostring(TargetResources_0_modifiedProperties.displayName), newValue = tostring(parse_json(tostring(TargetResources_0_modifiedProperties.newValue)))\n  | where displayName == \"Role.DisplayName\" and newValue contains \"admin\"\n  | extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n  | extend TargetRole = newValue\n  | project-reorder TimeGenerated, ServicePrincipalName, ServicePrincipalId, InitiatedBy, TargetRole, InitiatingIPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a list of internal Source IPs (10.x.x.x Hosts) that have triggered 10 or more non-graceful tcp server resets from one or more Destination IPs which results in an \"ApplicationProtocol = incomplete\" designation. The server resets coupled with an \"Incomplete\" ApplicationProtocol designation can be an indication of internal to external port scanning or probing attack.\nReferences: https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClUvCAK and\nhttps://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClTaCAK\n Topic: PaloAlto-PAN-OS"}, {"role": "assistant", "content": "CommonSecurityLog\n| where isnotempty(DestinationPort) and DeviceAction !in (\"reset-both\", \"deny\")\n// filter out common usage ports. Add ports that are legitimate for your environment\n| where DestinationPort !in (\"443\", \"53\", \"389\", \"80\", \"0\", \"880\", \"8888\", \"8080\")\n| where ApplicationProtocol == \"incomplete\"\n// filter out IANA ephemeral or negotiated ports as per https://en.wikipedia.org/wiki/Ephemeral_port\n| where DestinationPort !between (toint(49512) .. toint(65535))\n| where Computer != \"\"\n| where ipv4_is_private(DestinationIP) == false\n| extend Reason = coalesce(\n                              column_ifexists(\"Reason\", \"\"),\n                              extract(\"reason=(.+?)(;|$)\", 1, AdditionalExtensions),\n                              \"\"\n                          )\n// Filter out any graceful reset reasons of AGED OUT which occurs when a TCP session closes with a FIN due to aging out.\n| where Reason !has \"aged-out\"\n// Filter out any TCP FIN which occurs when a TCP FIN is used to gracefully close half or both sides of a connection.\n| where Reason !has \"tcp-fin\"\n// Uncomment one of the following where clauses to trigger on specific TCP reset reasons\n// See Palo Alto article for details - https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClUvCAK\n// TCP RST-server - Occurs when the server sends a TCP reset to the client\n// | where AdditionalExtensions has \"reason=tcp-rst-from-server\"\n// TCP RST-client - Occurs when the client sends a TCP reset to the server\n// | where AdditionalExtensions has \"reason=tcp-rst-from-client\"\n// Already performed\n//| extend reason = tostring(split(AdditionalExtensions, \";\")[3])\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by DeviceName, SourceUserID, SourceIP, ApplicationProtocol, Reason, DestinationPort, Protocol, DeviceVendor, DeviceProduct, DeviceAction, DestinationIP\n| where count_ >= 10\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), makeset(DestinationIP), totalcount = sum(count_) by DeviceName, SourceUserID, SourceIP, ApplicationProtocol, Reason, DestinationPort, Protocol, DeviceVendor, DeviceProduct, DeviceAction\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for user source IP addresses.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where TimeGenerated > ago(24h)\n| where data_eventName_s startswith 'InteractiveLogin'\n| summarize makeset(SrcIpAddr) by data_definedTags_Oracle_Tags_CreatedBy_s\n| extend AccountCustomEntity = data_definedTags_Oracle_Tags_CreatedBy_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "It is possible that a disabled user account is compromised and another account on the same IP is used to perform operations that are not typical for that user.\n The query filters the SigninLogs for entries where ResultType is indicates a disabled account and the TimeGenerated is within a defined time range.\n It then summarizes these entries by IPAddress and AppId, calculating various statistics such as number of login attempts, distinct UPNs, App IDs etc and joins these results with another set of results from SigninLogs, filtering for entries with less than normal number of successful sign-ins.\n It then filters out entries where there were no successful sign-ins or where successful sign-ins did not occur within the same lookback period as the failed sign-ins, later projecting relevant fields by the count of login attempts, and expands the set of successful sign-ins into individual events.\n Finally, it joins these results with entries from OfficeActivity where certain operations deemed rare and high risk have been performed, ensuring their occurrance within a certain time range of the successful sign-ins.\n Topic: Detections"}, {"role": "assistant", "content": "let threshold = 100;\nlet timeRange = ago(7d);\nlet timeBuffer = 1;\nSigninLogs \n| where TimeGenerated > timeRange\n| where ResultType == \"50057\" \n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), disabledAccountLoginAttempts = count(), \ndisabledAccountsTargeted = dcount(UserPrincipalName), applicationsTargeted = dcount(AppDisplayName), disabledAccountSet = make_set(UserPrincipalName), \napplicationSet = make_set(AppDisplayName) by IPAddress, AppId\n| order by disabledAccountLoginAttempts desc\n| join kind=inner (\n    // IPs are considered suspicious - and any related successful sign-ins are detected\n    SigninLogs\n    | where TimeGenerated > timeRange\n    | where ResultType == 0\n    | summarize successSigninStart = min(TimeGenerated), successSigninEnd = max(TimeGenerated), successfulAccountSigninCount = dcount(UserPrincipalName), successfulAccountSigninSet = make_set(UserPrincipalName, 15) by IPAddress\n    // Assume IPs associated with sign-ins from 100+ distinct user accounts are safe\n    | where successfulAccountSigninCount < threshold\n) on IPAddress  \n// IPs where attempts to authenticate as disabled user accounts originated, and had a non-zero success rate for some other account\n| where successfulAccountSigninCount != 0\n// Successful Account Signins occur within the same lookback period as the failed \n| extend SuccessBeforeFailure = iff(successSigninStart >= StartTime and successSigninEnd <= EndTime, true, false)  \n| project StartTime, EndTime, IPAddress, disabledAccountLoginAttempts, disabledAccountsTargeted, disabledAccountSet, applicationSet, \nsuccessfulAccountSigninCount, successfulAccountSigninSet, successSigninStart, successSigninEnd, AppId\n| order by disabledAccountLoginAttempts\n// Break up the string of Succesfully signed into accounts into individual events\n| mvexpand successfulAccountSigninSet\n| extend JoinedOnIp = IPAddress\n| join kind = inner (\n      OfficeActivity\n    | where TimeGenerated > timeRange\n    | where Operation in~ ( \"Add-MailboxPermission\", \"Add-MailboxFolderPermission\", \"Set-Mailbox\", \"New-ManagementRoleAssignment\", \"New-InboxRule\", \"Set-InboxRule\", \"Set-TransportRule\") and not(UserId has_any ('NT AUTHORITY\\\\SYSTEM (Microsoft.Exchange.ServiceHost)', 'NT AUTHORITY\\\\SYSTEM (w3wp)', 'devilfish-applicationaccount'))\n    // Remove port from the end of the IP and/or square brackets around IP, if they exist \n    | extend JoinedOnIp = case(\n      ClientIP matches regex @'\\[((25[0-5]2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]2[0-4][0-9]|[01]?[0-9][0-9]?)\\]-\\d{1,5}', tostring(extract('\\\\[([0-9]+\\\\.[0-9]+\\\\.[0-9]+)\\\\]-[0-9]+', 1, ClientIP)),\n      ClientIP matches regex @'\\[((25[0-5]2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]2[0-4][0-9]|[01]?[0-9][0-9]?)\\]', tostring(extract('\\\\[([0-9]+\\\\.[0-9]+\\\\.[0-9]+)\\\\]', 1, ClientIP)),  \n      ClientIP matches regex @'(((25[0-5]2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]2[0-4][0-9]|[01]?[0-9][0-9]?))-\\d{1,5}', tostring(extract('([0-9]+\\\\.[0-9]+\\\\.[0-9]+)-[0-9]+', 1, ClientIP)),\n      ClientIP matches regex @'((25[0-5]2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]2[0-4][0-9]|[01]?[0-9][0-9]?)', ClientIP,       \n      ClientIP matches regex @'\\[((?:[0-9a-fA-F]{1,4}::?){1,8}[0-9a-fA-F]{1,4}|\\d{1,3}(?:\\.\\d{1,3}){3})\\]-\\d{1,5}', tostring(extract('\\\\[((?:[0-9a-fA-F]{1,4}::?){1,8}[0-9a-fA-F]{1,4}|\\\\d{1,3}(?:\\\\.\\\\d{1,3}){3})\\\\]-[0-9]+', 1, ClientIP)),\n      ClientIP matches regex @'\\[((?:[0-9a-fA-F]{1,4}::?){1,8}[0-9a-fA-F]{1,4}|\\d{1,3}(?:\\.\\d{1,3}){3})\\]', tostring(extract('\\\\[((?:[0-9a-fA-F]{1,4}::?){1,8}[0-9a-fA-F]{1,4}|\\\\d{1,3}(?:\\\\.\\\\d{1,3}){3})\\\\]', 1, ClientIP)),  \n      ClientIP matches regex @'((?:[0-9a-fA-F]{1,4}::?){1,8}[0-9a-fA-F]{1,4}|\\d{1,3}(?:\\.\\d{1,3}){3})-\\d{1,5}', tostring(extract('((?:[0-9a-fA-F]{1,4}::?){1,8}[0-9a-fA-F]{1,4}|\\\\d{1,3}(?:\\\\.\\\\d{1,3}){3})-[0-9]+', 1, ClientIP)),\n      ClientIP matches regex @'((?:[0-9a-fA-F]{1,4}::?){1,8}[0-9a-fA-F]{1,4}|\\d{1,3}(?:\\.\\d{1,3}){3})', ClientIP,\n      \"\")\n    | where isnotempty(JoinedOnIp)\n    | extend OfficeTimeStamp = ElevationTime, UserPrincipalName = UserId\n) on JoinedOnIp\n// Rare and risky operations only happen within a certain time range of the successful sign-in\n| where OfficeTimeStamp >= successSigninStart and datetime_diff('day', OfficeTimeStamp, successSigninEnd) <= timeBuffer\n| extend AccountName = tostring(split(UserPrincipalName, \"@\")[0]), AccountUPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for root logins.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "VMwareESXi\n| where TimeGenerated > ago(24h)\n| where SyslogMessage has_all ('UserLoginSessionEvent', 'root', 'logged in')\n| extend SrcIpAddr = extract(@'root@(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, SyslogMessage)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New Compromised Cards with severity High found\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL | where severity_s == \"High\" | where type_s == \"Compromised Cards\" | where status_s != \"Closed\" or status_s != \"Resolved\" | where remarks_s == \"New Compromised Cards with severity High found\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert leverages Defender for IoT to detect excessive login attempts that may indicate improper service configuration, human error, or malicious activity on the network such as a cyber threat attempting to manipulate the SCADA network.\n Topic: IoTOTThreatMonitoringwithDefenderforIoT"}, {"role": "assistant", "content": "SecurityAlert\n| where ProviderName == \"IoTSecurity\"\n| where AlertName in (\"Excessive Login Attempts\",\"Excessive SMB login attempts\",\"Password Guessing Attempt Detected\",\"Excessive Number of Sessions\") \n| extend ExtendedProperties = parse_json(ExtendedProperties)\n| where tostring(ExtendedProperties.isNew) == \"True\"\n| extend DeviceId = tostring(ExtendedProperties.DeviceId), \n         SourceDeviceAddress = tostring(ExtendedProperties.SourceDeviceAddress), \n         DestDeviceAddress = tostring(ExtendedProperties.DestinationDeviceAddress), \n         RemediationSteps = tostring(parse_json(RemediationSteps)[0]), \n         Protocol = tostring(ExtendedProperties.Protocol), \n         AlertManagementUri = tostring(ExtendedProperties.AlertManagementUri)\n| project\n  TimeGenerated,\n  DeviceId,\n  ProductName,\n  ProductComponentName,\n  AlertSeverity,\n  AlertName,\n  Description,\n  Protocol,\n  SourceDeviceAddress,\n  DestDeviceAddress,\n  RemediationSteps,\n  Tactics,\n  Entities,\n  VendorOriginalId,\n  AlertLink,\n  AlertManagementUri,\n  Techniques\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0032 (Theom has observed data with a large financial value, but that has not been accessed recently. Use this information to enforce data retention policies)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0032\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checks for an anomalous increase in DNS activity per client in the last 24 hours as compared to the last 14 days. Please note: To enhance performance, this query uses summarized data if available.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let threshold = 2.5;\nlet min_t = ago(14d);\nlet max_t = now();\nlet dt = 1d;\n// calculate avg. eps(events per second)\nlet eps = materialize (_Im_Dns\n  | project TimeGenerated\n  | where TimeGenerated > ago(5m)\n  | count\n  | extend Count = Count / 300);\nlet maxSummarizedTime = toscalar (\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL \n      | where EventTime_t >= min_t\n      | summarize max_TimeGenerated=max(EventTime_t)\n      | extend max_TimeGenerated = datetime_add('hour', 1, max_TimeGenerated)\n      ),\n      (\n      print(min_t)\n      | project max_TimeGenerated = print_0\n      )\n  | summarize maxTimeGenerated = max(max_TimeGenerated) \n  );\nlet summarizationexist = materialize(\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > ago(1d) \n      | project v = int(2)\n      ),\n      (\n      print int(1) \n      | project v = print_0\n      )\n  | summarize maxv = max(v)\n  | extend sumexist = (maxv > 1)\n  );\nlet allData = union isfuzzy=true\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) > 1000\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(starttime=todatetime(ago(2d)), endtime=now())\n          | where TimeGenerated > maxSummarizedTime and isnotempty(SrcIpAddr)\n          | summarize Count=count() by SrcIpAddr, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) between (501 .. 1000)\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(starttime=todatetime(ago(3d)), endtime=now())\n          | where TimeGenerated > maxSummarizedTime and isnotempty(SrcIpAddr)\n          | summarize Count=count() by SrcIpAddr, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) <= 500\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(starttime=todatetime(ago(4d)), endtime=now())\n          | where TimeGenerated > maxSummarizedTime and isnotempty(SrcIpAddr)\n          | summarize Count=count() by SrcIpAddr, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > min_t and isnotempty(SrcIpAddr_s)\n      | summarize Count=toint(sum(count__d)) by SrcIpAddr=SrcIpAddr_s, bin(EventTime=EventTime_t, 1h)\n      );\nallData\n| make-series TotalEventCountPerDay= sum(Count) on EventTime from min_t to max_t step dt by SrcIpAddr\n| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalEventCountPerDay, threshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, EventTime, TotalEventCountPerDay\n| extend\n  anomalies = toint(anomalies),\n  score = toint(score),\n  baseline = toint(baseline),\n  EventTime = todatetime(EventTime),\n  TotalEvents = tolong(TotalEventCountPerDay)\n| where EventTime >= ago(dt)\n| where score >= threshold * 2\n| order by score\n| extend IP_0_Address = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when multiple protected messages where sent to early not seen recipient.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let lbtime = 30m;\nlet lbperiod = 14d;\nlet knownrecipients = ProofpointPOD\n| where TimeGenerated > ago(lbperiod)\n| where EventType == 'message'\n| where NetworkDirection == 'outbound'\n| where SrcUserUpn != ''\n| where array_length(todynamic(DstUserUpn)) == 1\n| summarize recipients = make_set(tostring(todynamic(DstUserUpn)[0])) by SrcUserUpn\n| extend commcol = SrcUserUpn;\nProofpointPOD\n| where TimeGenerated between (ago(lbtime) .. now())\n| where EventType == 'message'\n| where NetworkDirection == 'outbound'\n| extend isProtected = todynamic(MsgParts)[0]['isProtected']\n| extend mimePgp = todynamic(MsgParts)[0]['detectedMime']\n| where isProtected == 'true' or mimePgp == 'application/pgp-encrypted'\n| extend DstUserMail = tostring(todynamic(DstUserUpn)[0])\n| extend commcol = tostring(todynamic(DstUserUpn)[0])\n| join knownrecipients on commcol\n| where recipients !contains DstUserMail\n| project SrcUserUpn, DstUserMail\n| extend AccountCustomEntity = SrcUserUpn\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may steal the credentials of a specific user or service account using credential access techniques or capture credentials earlier in their reconnaissance process through social engineering as a means of gaining persistence.\" Umbreon, for example, creates valid users to provide access to the system.\nThe query below generates an output of successful sign-in with one or more of the following indications:-\n- performed by new or recently dormant accounts\n- where one or more features of the activity deviate from the user, his peers, or the tenants profile.\n- performed by a user with risk information from Microsoft Entra ID\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "BehaviorAnalytics\n| where ActionType =~ \"Sign-in\"\n| where UsersInsights.IsNewAccount == True or UsersInsights.IsDormantAccount == True or ActivityInsights has \"True\"\n| join kind = inner (\nSigninLogs | where  (Status.errorCode == 0 and RiskDetail !~ \"none\")\n) on $left.SourceRecordId == $right._ItemId \n| extend UserPrincipalName = iff(UserPrincipalName has \"#EXT#\",replace_string(tostring(split(UserPrincipalName, \"#\")[0]),\"_\",\"@\"),UserPrincipalName),\nUserName = iff(UserName has \"#EXT#\",replace_string(tostring(split(UserPrincipalName, \"#\")[0]),\"_\",\"@\"),UserName)\n| project TimeGenerated, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"Evidence\"]=ActivityInsights, ResourceDisplayName, AppDisplayName, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, ResourceId\n| extend Name=tostring(split(UserPrincipalName, \"@\")[0]), UPNSuffix=tostring(split(UserPrincipalName, \"@\")[1])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SourceIPAddress\n| extend AzureResource_0_ResourceId = ResourceId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule detects any registry value or key creation in the registry run keys. This could be an indication of a persistence attempt by an adversary.\n Topic: Malware Protection Essentials"}, {"role": "assistant", "content": "// List of startup registry keys to monitor\nlet startupRegistryList = dynamic([\n    'HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run',\n    'HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce',\n    'HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run',\n    'HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce',\n    'HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx',\n    'HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunServicesOnce',\n    'HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunServicesOnce',\n    'HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunServices',\n    'HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunServices',\n    'HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\Run',\n    'HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\Run',\n    'HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Userinit',\n    'HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Shell',\n    'HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows'\n  ]);\n_ASim_RegistryEvent\n| where EventType in ('RegistryValueSet', 'RegistryKeyCreated') and RegistryKey has_any (startupRegistryList)\n| project\n    TimeGenerated,\n    DvcHostname,\n    ActorUsername,\n    ActorUsernameType,\n    ActingProcessId,\n    ActingProcessName,\n    ActingProcessCommandLine,\n    RegistryKey,\n    RegistryValue,\n    RegistryValueType,\n    RegistryValueData\n| extend HostName = tostring(split(DvcHostname, '.')[0])\n| extend DnsDomain = tostring(strcat_array(array_slice(split(DvcHostname, '.'), 1, -1), '.'))\n| extend Username = iff(tostring(ActorUsernameType) == 'Windows', tostring(split(ActorUsername, '\\\\')[1]), ActorUsername)\n| extend NTDomain = iff(tostring(ActorUsernameType) == 'Windows', tostring(split(ActorUsername, '\\\\')[0]), ActorUsername)\n| extend Username = iff(tostring(ActorUsernameType) == 'UPN', tostring(split(ActorUsername, '@')[0]), Username)\n| extend UPNSuffix = iff(tostring(ActorUsernameType) == 'UPN', tostring(split(ActorUsername, '@')[1]), '')\n| extend RegHive = tostring(split(RegistryKey, '\\\\')[0]), RegKey = tostring(strcat_array(array_slice(split(RegistryKey, '\\\\'), 1, -1), '\\\\')) \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule fires when multiple threat events were detected on the same host.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "McAfeeEPOEvent\n| where isnotempty(ThreatName)\n| where ThreatName != '_'\n| summarize th_cnt = dcount(ThreatName), th_list = makeset(ThreatName) by DvcIpAddr\n| where th_cnt > 1\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Emotet, for example, has been observed using a hard-coded list of passwords to brute-force user accounts. The query below generates an output of all users with High BlastRadius that perform failed Sign-in:Invalid username or password.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "BehaviorAnalytics\n| where ActivityType =~ \"LogOn\"\n| where UsersInsights.BlastRadius =~ \"High\"\n| join kind = inner (\nSigninLogs  | where Status.errorCode == 50126\n) on $left.SourceRecordId == $right._ItemId\n| extend UserPrincipalName = iff(UserPrincipalName has \"#EXT#\",replace(\"_\",\"@\",tostring(split(UserPrincipalName, \"#\")[0])),UserPrincipalName),\nUserName = iff(UserName has \"#EXT#\",replace(\"_\",\"@\",tostring(split(UserPrincipalName, \"#\")[0])),UserName)\n| project TimeGenerated, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType,[\"Evidence\"]=ActivityInsights, ResourceDisplayName, AppDisplayName, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, ResourceId\n| extend Name=split(UserPrincipalName, \"@\")[0], UPNSuffix=split(UserPrincipalName, \"@\")[1]\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SourceIPAddress\n| extend AzureResource_0_ResourceId = ResourceId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects suspicious file transfer activity.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where EventOriginalType has 'Suspicious File Transfer' or EventType has 'Suspicious File Transfer'\n| project TimeGenerated, DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Generates an incident when the use of an exploit is detected by Radiflows iSID.\n Topic: Radiflow"}, {"role": "assistant", "content": "RadiflowEvent\n| where DeviceProduct =~ 'iSID'\n| where\n    (\n        EventClassID in (34, 53, 67, 68, 69, 70, 71, 179)\n        or EventMessage has 'Exploit'\n    )\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows URLs list with server errors.\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "OracleWebLogicServerEvent\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 500 and HttpStatusCode <= 599\n| summarize TopUrls = count() by tostring(UrlOriginal)\n| top 20 by TopUrls desc\n| extend UrlCustomEntity = TopUrls\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule makes use of the series decompose anomaly method to identify clients with high reverse DNS counts. This helps in detecting the possible initial phases of an attack, like discovery and reconnaissance. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let threshold = 2.5;\nlet SearchDomain = dynamic([\"in-addr.arpa\"]);\nlet min_t = ago(14d);\nlet max_t = now();\nlet timeframe = 1d;\nlet DNSEvents=(stime: datetime, etime: datetime) {\n  _Im_Dns(starttime=stime, endtime=etime, domain_has_any=SearchDomain)\n};\nDNSEvents(stime=min_t, etime=max_t)\n| make-series QueryCount=dcount(DnsQuery) on TimeGenerated from min_t to max_t step timeframe by SrcIpAddr\n| extend (anomalies, score, baseline) = series_decompose_anomalies(QueryCount, threshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, TimeGenerated, QueryCount\n| extend\n  anomalies = toint(anomalies),\n  score = toint(score),\n  baseline = toint(baseline),\n  EventTime = todatetime(TimeGenerated),\n  Total = tolong(QueryCount)\n| where EventTime >= ago(timeframe)\n| where score >= threshold * 2\n| join kind = inner (DNSEvents(stime=ago(timeframe), etime=max_t)\n  | summarize DNSQueries=make_set(DnsQuery, 1000) by SrcIpAddr)\n  on SrcIpAddr\n| project-away SrcIpAddr1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies authentication methods being changed for a list of VIP users watchlist. This could be an indication of an attacker adding an auth method to the account so they can have continued access.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let security_info_actions = dynamic([\"User registered security info\", \"User changed default security info\", \"User deleted security info\", \"Admin updated security info\", \"User reviewed security info\", \"Admin deleted security info\", \"Admin registered security info\"]);\nlet VIPUsers = (_GetWatchlist('VIPUsers') | distinct \"User Principal Name\");\nAuditLogs\n| where Category =~ \"UserManagement\"\n| where ActivityDisplayName in (security_info_actions)\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend Target = trim(@'\"',tolower(tostring(TargetResource.userPrincipalName)))\n  )\n| where Target in~ (VIPUsers)\n| summarize Start=min(TimeGenerated), End=max(TimeGenerated), Actions = make_set(ResultReason) by InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, Result, Target\n| extend TargetName = tostring(split(Target,'@',0)[0]), TargetUPNSuffix = tostring(split(Target,'@',1)[0])\n| extend InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Microsoft Sentinel incidents for low risk Theom alerts\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n | where priority_s == \"P4\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for scan error events.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "let lbtime = 24h;\nMcAfeeEPOEvent\n| where TimeGenerated > ago(lbtime)\n| where EventId in ('3021', '1086', '1059', '1128', '1035', '1051', '1048', '1049', '3053', '3054', '3046')\n| extend Reason = case(EventId == '3021', \"Scan engine error\",\n                              EventId == '1086', \"Scan Process Error\",\n                              EventId == '1059', \"Scan Timed Out\",\n                              EventId == '1128', \"Scan time exceeded\",\n                              EventId == '1035', \"Scan was canceled\",\n                              EventId == '1051', \"Unable to scan password protected\",\n                              EventId == '1048', \"Scan reports general system error\",\n                              EventId == '1049', \"Scan reported an internal application error\",\n                              EventId == '3053', \"Centralized Alerting - Scan reports general system error\",\n                              EventId == '3054', \"Centralized Alerting - Scan reported an internal application error\",\n                              \"Centralized Alerting - Scan reports memory allocation error\")\n| project DvcIpAddr, EventId, Reason\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in Security Event data from any File Hash IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n| where isnotempty(FileHashValue)\n| where TimeGenerated >= ago(ioc_lookBack)\n| extend FileHashValue = toupper(FileHashValue)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique ( union isfuzzy=true\n  (SecurityEvent | where TimeGenerated >= ago(dt_lookBack)\n      | where EventID in (\"8003\",\"8002\",\"8005\")\n      | where isnotempty(FileHash)\n      | extend SecurityEvent_TimeGenerated = TimeGenerated, Event = EventID, FileHash = toupper(FileHash)\n  ),\n  (WindowsEvent | where TimeGenerated >= ago(dt_lookBack)\n      | where EventID in (\"8003\",\"8002\",\"8005\")\n      | where isnotempty(EventData.FileHash)\n      | extend SecurityEvent_TimeGenerated = TimeGenerated, Event = EventID, FileHash = toupper(EventData.FileHash)\n  )\n)\non $left.FileHashValue == $right.FileHash\n| where SecurityEvent_TimeGenerated < ExpirationDateTime\n| summarize SecurityEvent_TimeGenerated = arg_max(SecurityEvent_TimeGenerated, *) by IndicatorId, FileHash\n| project SecurityEvent_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nProcess, FileHash, Computer, Account, Event, FileHashValue, FileHashType\n| extend NTDomain = tostring(split(Account, '\\\\', 0)[0]), Name = tostring(split(Account, '\\\\', 1)[0])\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')) \n| extend timestamp = SecurityEvent_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which medium sensitivity legal information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let mediumRisk = 2;\nlet legal = 'Legal Information';\nCognniIncidents_CL \n| where Severity == mediumRisk\n| where informationType_s == legal\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects a core dump of a crashing Nginx worker process, which could be a signal of a serious problem or exploitation attempts.\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "NGINXHTTPServer\n| where EventType =~ \"ErrorLog\"\n| where EventMessage contains 'exited on signal 6 (core dumped)'\n| extend ProcessIdCustomEntity = ProcessId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies users accessing Dataverse from a User Agent that has not been seen in any Dataverse instance in the last 14 days. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_lookback = 14d;\nlet query_frequency = 1h;\nlet known_useragents = dynamic([\n    // Enter known user agents to exclude.\n    // example:\n    // \"Agent1\", \"Agent2\", \"Agent3\"\n    ]);\nDataverseActivity\n| where TimeGenerated between(ago(query_lookback) .. ago(query_frequency))\n| where isnotempty(UserAgent)\n| summarize by UserAgent\n| join kind = rightanti (DataverseActivity\n    | where TimeGenerated > ago(query_frequency)\n    | where not (UserId has_any (\"@onmicrosoft.com\", \"@microsoft.com\", \"Unknown\"))\n    | where isnotempty(UserAgent)\n    | where UserAgent !in~ (known_useragents)\n    | where UserAgent !hasprefix \"azure-logic-apps\" and UserAgent !hasprefix \"PowerApps\")\n    on UserAgent\n// Exclude user agents with a render agent to reduce noise.\n| join kind = leftanti(\n    DataverseActivity\n    | where TimeGenerated > ago(query_frequency)\n    | where UserAgent has_any (\"Gecko\", \"WebKit\", \"Presto\", \"Trident\", \"EdgeHTML\", \"Blink\"))\n    on UserAgent\n| summarize\n    FirstSeen = min(TimeGenerated),\n    LatestIP = arg_max(ClientIp, TimeGenerated)\n    by UserAgent, UserId, InstanceUrl\n| extend\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1]),\n    CloudAppId = int(32780)\n| project\n    FirstSeen,\n    UserId,\n    UserAgent,\n    LatestIP,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New user agents associated with a clientIP for SharePoint file uploads/downloads.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet historicalUA=\nOfficeActivity\n| where  RecordType == \"SharePointFileOperation\"\n| where Operation in (\"FileDownloaded\", \"FileUploaded\")\n| where TimeGenerated between(lookback..starttime)\n| summarize by ClientIP, UserAgent;\nlet recentUA = OfficeActivity\n| where  RecordType == \"SharePointFileOperation\"\n| where Operation in (\"FileDownloaded\", \"FileUploaded\")\n| where TimeGenerated between(starttime..endtime)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by ClientIP, UserAgent;\nrecentUA | join kind=leftanti (\n   historicalUA\n) on ClientIP, UserAgent\n// Some OfficeActivity records do not contain ClientIP information - exclude these for fewer results\n| where not(isempty(ClientIP))\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for the top 25 clients with the most errors. This query utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let timeframe = 1d;\n_Im_Dns(starttime=ago(timeframe), endtime=now())\n| where EventSubType == 'response' and DnsResponseCodeName != 'NOERROR'\n| where isnotempty(SrcIpAddr)\n| summarize Count=count() by SrcIpAddr, DnsResponseCodeName\n| order by Count\n| take 25\n| extend IP_0_Address = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows agents which are not updated to the latest version\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "let cur_ver = dynamic(['0.1']); //put latest agent version here\nPaloAltoCDLEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(PanOSAgentVersion)\n| where PanOSAgentVersion != cur_ver\n| project SrcIpAddr, PanOSAgentVersion\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects threat from spam event thread protection logs Topic: MimecastSEG"}, {"role": "assistant", "content": "MimecastSIEM_CL| where mimecastEventId_s==\"mail_spameventthread\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected usage of AttachUserPolicy/AttachGroupPolicy/AttachRolePolicy by CRUD DynamoDB Policy. Attackers could use these operations for privilege escalation. Verify these actions with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName in (\"PutUserPolicy\",\"PutRolePolicy\",\"PutGroupPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and ((Action contains \"dynamodb:Create\" or Action contains \"dynamodb:Put\") and (Action contains \"dynamodb:Describe\" or Action contains \"dynamodb:Get\" or Action contains \"dynamodb:Scan\")  and Action contains \"dynamodb:Update\" and Action contains \"dynamodb:Delete\") and Resource == \"*\" and Condition == \"\"\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, UserIdentityUserName\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects new admin user.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where EventType =~ 'admin'\n| where EventResultDetails has_all ('User', 'Promoted to administrator')\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Organizations are added in the Cross-tenant Access Settings to control communication inbound or outbound for users and applications. This detection notifies when Organization Inbound Direct Settings are changed for \"Users & Groups\" and for \"Applications\".\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "// In User & Groups and in Applications, the following \"AccessType\" values in columns PremodifiedInboundSettings and ModifiedInboundSettings are interpreted accordingly\n// When Access Type in premodified inbound settings value was 1 that means that the initial access was allowed. When Access Type in premodified inbound settings value was 2 that means that the initial access was blocked.\n// When Access Type in modified inbound settings value is 1 that means that now access is allowed. When Access Type in modified inbound settings value is 2 that means that now access is blocked.\nAuditLogs\n| where OperationName has \"Update a partner cross-tenant access setting\"\n| mv-apply TargetResource = TargetResources on\n  (\n      where TargetResource.type =~ \"Policy\"\n      | extend Properties = TargetResource.modifiedProperties\n  )\n| mv-apply Property = Properties on\n  (\n      where Property.displayName =~ \"b2bDirectConnectInbound\"\n      | extend PremodifiedInboundSettings = trim('\"',tostring(Property.oldValue)),\n               ModifiedInboundSettings = trim(@'\"',tostring(Property.newValue))\n  )\n| where PremodifiedInboundSettings != ModifiedInboundSettings\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unexpected event count of rejects by policy.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "let threshold = 1000;\nZPAEvent\n| where EventResult has \"REJECTED_BY_POLICY\"\n| summarize rejected = count() by EventResult, DstUserName\n| where rejected > threshold\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for client TLS errors.\n Topic: Cloudflare"}, {"role": "assistant", "content": "let err_tls = dynamic(['UNKNOWN', 'INTERNAL_ERROR', 'INVALID_CONFIG', 'INVALID_SNI', 'HANDSHAKE_FAILED']);\nCloudflare\n| where TimeGenerated > ago(24h)\n| where ClientTlsStatus in~ (err_tls)\n| extend IPCustomEntity = SrcIpAddr\n| extend UrlCustomEntity = ClientRequestURI\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies where multiple Teams have been deleted by a single user in a short timeframe.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "// Adjust this value to change how many Teams should be deleted before including\nlet max_delete = 3;\nlet deleting_users = (\nOfficeActivity\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where Operation =~ \"TeamDeleted\"\n| summarize count() by UserId\n| where count_ > max_delete\n| project UserId);\nOfficeActivity\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where Operation =~ \"TeamDeleted\"\n| where UserId in (deleting_users)\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies IP addresses that may be performing DNS lookups associated with common currency mining pools.\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "DnsEvents\n| where Name contains \".\"\n| where Name has_any (\"monerohash.com\", \"do-dear.com\", \"xmrminerpro.com\", \"secumine.net\", \"xmrpool.com\", \"minexmr.org\", \"hashanywhere.com\",\n\"xmrget.com\", \"mininglottery.eu\", \"minergate.com\", \"moriaxmr.com\", \"multipooler.com\", \"moneropools.com\", \"xmrpool.eu\", \"coolmining.club\",\n\"supportxmr.com\", \"minexmr.com\", \"hashvault.pro\", \"xmrpool.net\", \"crypto-pool.fr\", \"xmr.pt\", \"miner.rocks\", \"walpool.com\", \"herominers.com\",\n\"gntl.co.uk\", \"semipool.com\", \"coinfoundry.org\", \"cryptoknight.cc\", \"fairhash.org\", \"baikalmine.com\", \"tubepool.xyz\", \"fairpool.xyz\", \"asiapool.io\",\n\"coinpoolit.webhop.me\", \"nanopool.org\", \"moneropool.com\", \"miner.center\", \"prohash.net\", \"poolto.be\", \"cryptoescrow.eu\", \"monerominers.net\", \"cryptonotepool.org\",\n\"extrmepool.org\", \"webcoin.me\", \"kippo.eu\", \"hashinvest.ws\", \"monero.farm\", \"supportxmr.com\", \"xmrpool.eu\", \"linux-repository-updates.com\", \"1gh.com\",\n\"dwarfpool.com\", \"hash-to-coins.com\", \"hashvault.pro\", \"pool-proxy.com\", \"hashfor.cash\", \"fairpool.cloud\", \"litecoinpool.org\", \"mineshaft.ml\", \"abcxyz.stream\",\n\"moneropool.ru\", \"cryptonotepool.org.uk\", \"extremepool.org\", \"extremehash.com\", \"hashinvest.net\", \"unipool.pro\", \"crypto-pools.org\", \"monero.net\",\n\"backup-pool.com\", \"mooo.com\", \"freeyy.me\", \"cryptonight.net\", \"shscrypto.net\")\n| extend HostName = iff(Computer has '.', substring(Computer,0,indexof(Computer,'.')),Computer)\n| extend DnsDomain = iff(Computer has '.', substring(Computer,indexof(Computer,'.')+1),\"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks uses Microsoft Sentinels UEBA features to look for suspicious logons followed by modifications to MFA settings by that user.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let PriorityScore = 9;\nBehaviorAnalytics\n| where ActionType == \"Sign-in\"\n| where InvestigationPriority > PriorityScore\n| extend UserPrincipalName = tolower(UserPrincipalName)\n| extend LogOnTime = TimeGenerated\n| join kind=inner (AuditLogs\n| where Category =~ \"UserManagement\" \n| where OperationName in~ (\"Admin registered security info\", \"Admin updated security info\", \"Admin deleted security info\", \"User registered security info\", \"User changed default security info\", \"User deleted security info\",\"User registered all required security info\",\"User started security info registration\") \n| extend InitiatorUPN = tolower(tostring(InitiatedBy.user.userPrincipalName))\n| extend InitiatorID = tostring(InitiatedBy.user.id)\n| extend FromIP = tostring(InitiatedBy.user.ipAddress) \n| extend TargetUPN = tolower(tostring(TargetResources[0].userPrincipalName))\n| extend TargetId = tostring(TargetResources[0].id)\n| extend MFAModTime = TimeGenerated\n| where isnotempty(InitiatorUPN)) on $left.UserPrincipalName == $right.InitiatorUPN\n| where MFAModTime between((LogOnTime-30m)..(LogOnTime+1h))\n| extend InitiatorName = tostring(split(InitiatorUPN, \"@\")[0]), InitiatorUPNSuffix = tostring(split(InitiatorUPN, \"@\")[1]), TargetName = tostring(split(TargetUPN, \"@\")[0]), TargetUPNSuffix = tostring(split(TargetUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The policy detects an administrative account where the password of the account was not updated in the last 30 days. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"Admin password wasn't updated during the last 30 days\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies anomalous increases in Exchange mail items accessed operations.\nThe query leverages KQL built-in anomaly detection algorithms to find large deviations from baseline patterns.\nSudden increases in execution frequency of sensitive actions should be further investigated for malicious activity.\nManually change scorethreshold from 1.5 to 3 or higher to reduce the noise based on outliers flagged from the query criteria.\nRead more about MailItemsAccessed- https://learn.microsoft.com/en-us/purview/audit-log-investigate-accounts\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet scorethreshold = 1.5;\nlet percentthreshold = 50;\n// Preparing the time series data aggregated hourly count of MailItemsAccessd Operation in the form of multi-value array to use with time series anomaly function.\nlet TimeSeriesData =\nOfficeActivity\n| where TimeGenerated  between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where OfficeWorkload=~ \"Exchange\" and Operation =~ \"MailItemsAccessed\" and ResultStatus =~ \"Succeeded\"\n| project TimeGenerated, Operation, MailboxOwnerUPN\n| make-series Total=count() on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe;\nlet TimeSeriesAlerts = TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, scorethreshold, -1, 'linefit')\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\n| where anomalies > 0\n| project TimeGenerated, Total, baseline, anomalies, score;\n// Joining the flagged outlier from the previous step with the original dataset to present contextual information\n// during the anomalyhour to analysts to conduct investigation or informed decisions.\nTimeSeriesAlerts | where TimeGenerated > ago(2d)\n// Join against base logs since specified timeframe to retrive records associated with the hour of anomoly\n| join kind=innerunique (\n    OfficeActivity\n    | where TimeGenerated > ago(2d)\n    | extend DateHour = bin(TimeGenerated, 1h)\n    | where OfficeWorkload=~ \"Exchange\" and Operation =~ \"MailItemsAccessed\" and ResultStatus =~ \"Succeeded\"\n    | summarize HourlyCount=count(), TimeGeneratedMax = arg_max(TimeGenerated, *), IPAdressList = make_set(Client_IPAddress, 1000), SourceIPMax= arg_max(Client_IPAddress, *), ClientInfoStringList= make_set(ClientInfoString, 1000) by MailboxOwnerUPN, Logon_Type, TenantId, UserType, TimeGenerated = bin(TimeGenerated, 1h)\n    | where HourlyCount > 25 // Only considering operations with more than 25 hourly count to reduce False Positivies\n    | order by HourlyCount desc\n) on TimeGenerated\n| extend PercentofTotal = round(HourlyCount/Total, 2) * 100\n| where PercentofTotal > percentthreshold // Filter Users with count of less than 5 percent of TotalEvents per Hour to remove FPs/ users with very low count of MailItemsAccessed events\n| order by PercentofTotal desc\n| project-reorder TimeGeneratedMax, Type, OfficeWorkload, Operation, UserId, SourceIPMax, IPAdressList, ClientInfoStringList, HourlyCount, PercentofTotal, Total, baseline, score, anomalies\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects new access device.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where EventType =~ 'authentication'\n| where EventResult =~ 'success'\n| where isnotempty(AccessDvcIpAddr)\n| summarize dvc_ip = makeset(AccessDvcIpAddr) by DstUserName\n| join (CiscoDuo\n        | where EventType =~ 'authentication'\n        | where EventResult =~ 'success') on DstUserName\n| where dvc_ip !has AccessDvcIpAddr\n| extend IPCustomEntity = AccessDvcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for users IP addresses.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where TimeGenerated > ago(24h)\n| where isnotempty(SrcIpAddr)\n| where isnotempty(UserName)\n| summarize ip_list = makeset(SrcIpAddr) by UserName\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies someone that performs a backup of they CA key.\n Topic: FalconFriday"}, {"role": "assistant", "content": "SecurityEvent\n// Fill in the machine name of your CA.\n| where EventID == 5059 and Computer contains \"<YOUR CA MACHINE NAME>\"\n| where EventData contains \"%%2499\" and EventData contains \"%%2464\"\n| extend EventData=parse_xml(EventData)\n| mv-apply d=EventData.EventData.Data on\n(\n    where d[\"@Name\"]==\"KeyName\"\n    | project KeyName=tostring(d[\"#text\"])\n)\n| mv-apply d=EventData.EventData.Data on\n(\n    where d[\"@Name\"]==\"SubjectUserName\"\n    | project SubjectUserName=tostring(d[\"#text\"])\n)\n| parse Account with \"<YOUR DOMAIN NAME>\\\\\" CleanAccount \"$\"\n| where not(Computer startswith CleanAccount)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows URLs list with client errors.\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "OracleWebLogicServerEvent\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 400 and HttpStatusCode <= 499\n| summarize TopUrls = count() by tostring(UrlOriginal)\n| top 20 by TopUrls desc\n| extend UrlCustomEntity = TopUrls\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches threats and helps to identify threats matching owaspTop10 vulnerabilities.\n Topic: Fortinet FortiWeb Cloud WAF-as-a-Service connector for Microsoft Sentinel"}, {"role": "assistant", "content": "let MinCount = 10;\nFortiweb\n| where TimeGenerated > ago(24h)\n| where isnotempty(owaspTop10)\n| summarize owaspCount=count() by owaspTop10,EventSubType , SrcIpAddr\n| where owaspCount > MinCount\n| extend IP_0_Address = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Attack.\n Topic: Tenable App"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.yaml parser into the workspace\n// Retrieve the parser here: https://aka.ms/sentinel-TenableApp-afad-parser\n// Then, create the Kusto Function with alias afad_parser\nlet SeverityTable=datatable(Severity:string,Level:int) [\n  \"low\", 1,\n  \"medium\", 2,\n  \"high\", 3,\n  \"critical\", 4\n  ];\n  afad_parser\n  | where MessageType == 2\n  | lookup kind=leftouter SeverityTable on Severity\n  | order by Level\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects post-compromise suspicious shell scripts that attackers use for downloading and executing malicious files. This technique is often used by attackers and was recently used to exploit the Log4j vulnerability.\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "Syslog\n| where Facility == 'user'\n| where SyslogMessage has \"AUOMS_EXECVE\"\n| parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n| where EventType =~ \"AUOMS_EXECVE\"\n| project TimeGenerated, EventType, Computer, EventData\n| parse EventData with * \"syscall=\" syscall \" syscall_r=\" * \" success=\" success \" exit=\" exit \" a0\" * \" ppid=\" ppid \" pid=\" pid \" audit_user=\" audit_user \" auid=\" auid \" user=\" user \" uid=\" uid \" group=\" group \" gid=\" gid \"effective_user=\" effective_user \" euid=\" euid \" set_user=\" set_user \" suid=\" suid \" filesystem_user=\" filesystem_user \" fsuid=\" fsuid \" effective_group=\" effective_group \" egid=\" egid \" set_group=\" set_group \" sgid=\" sgid \" filesystem_group=\" filesystem_group \" fsgid=\" fsgid \" tty=\" tty \" ses=\" ses \" comm=\\\"\" comm \"\\\" exe=\\\"\" exe \"\\\"\" * \"cwd=\\\"\" cwd \"\\\"\" * \"name=\\\"\" name \"\\\"\" * \"cmdline=\" cmdline\n| extend cmdline = trim_end('redactors=.*',cmdline) \n| where exe has_any (\"bash\",\"dash\")\n| where cmdline matches regex  \"[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\"\n| where cmdline has \"curl\" and cmdline has \"wget\"\n| project TimeGenerated, Computer, audit_user, user, cmdline\n| extend timestamp = TimeGenerated\n| extend Host_0_HostName = Computer\n| extend Account_0_Name = user\n| sort by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests from private IP\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where ipv4_is_private(SrcIpAddr)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule helps to detect whenever there is a compromised systems found in BitSight.\n Topic: BitSight"}, {"role": "assistant", "content": "let timeframe = 24h;\nBitSightFindingsData\n| where ingestion_time() > ago(timeframe)\n| where RiskCategory == \"Compromised Systems\"\n| extend Severity = toreal(Severity)\n| extend Severity = case( Severity <= 6.9 and Severity >= 4.0, \"Low\",\n                          Severity <= 8.9 and Severity >= 7.0, \"Medium\",\n                          Severity <= 10.0 and Severity >= 9.0, \"High\",\n                          \"Informational\")\n| project FirstSeen, CompanyName, Severity, RiskCategory, RiskVector, TemporaryId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates incidents based on behavioral detections from IronDefense.\n Topic: IronNet IronDefense"}, {"role": "assistant", "content": "CommonSecurityLog\n| where DeviceProduct == \"IronDefense\"\n| summarize arg_max(TimeGenerated, *) by DeviceCustomString4, DeviceCustomString2\n| extend Category = coalesce(column_ifexists(\"DeviceEventCategory\",\"\"),extract(@'cat=([^;]+)(\\;|$)', 1, AdditionalExtensions))\t\n| extend Subcategory = extract(@'subcat=([^;]+)(\\;|$)', 1, AdditionalExtensions)\n| extend AlertDescription = strcat(Category, ': ', Subcategory)\n| extend Status = tostring(DeviceCustomString2)\n| extend IronVueUrl = replace(@'\\\\', @'', tostring(DeviceCustomString3))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects changes to an Application ID URI.\n  Monitor these changes to make sure that they were authorized.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-applications#appid-uri-added-modified-or-removed\n Topic: Detections"}, {"role": "assistant", "content": "AuditLogs\n  | where Category == \"ApplicationManagement\"\n  | where OperationName has_any (\"Update Application\", \"Update Service principal\")\n  | where TargetResources has \"AppIdentifierUri\"\n  | extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n  | extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n  | extend mod_props = TargetResources[0].modifiedProperties\n  | extend TargetAppName = tostring(TargetResources[0].displayName)\n  | mv-expand mod_props\n  | where mod_props.displayName has \"AppIdentifierUri\"\n  | extend OldURI = tostring(mod_props.oldValue)\n  | extend NewURI = tostring(mod_props.newValue)\n  | extend UpdatedBy = iif(isnotempty(InitiatingAppName), InitiatingAppName, InitiatingUserPrincipalName)\n  | extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n  | project-reorder TimeGenerated, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingAadUserId, InitiatingUserPrincipalName, InitiatingIPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A normal user activity consists mostly of downloading data. Uploaded data is usually small unless there is a file/data upload to a website. Calculate the sum of BytesOut per Source-Destination pair over 12/24 hours.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "let timeframe = 1d;\nCisco_Umbrella \n| where EventType == \"proxylogs\"\n| where TimeGenerated > ago(timeframe)\n| summarize sum(SrcBytes) by SrcIpAddr,DstIpAddr\n| sort by sum_SrcBytes desc\n| project SrcIpAddr, DstIpAddr\n| extend IpCustomEntity = SrcIpAddr"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query detects additions and removals of variables in build processes in a short span of time, possibly indicating malicious activity. Promoting to a detection if few such events occur.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where OperationName =~ \"Library.VariableGroupModified\"\n| extend variables = Data.Variables\n| extend VariableGroupName = tostring(Data.VariableGroupName)\n| join (AzureDevOpsAuditing\n| where OperationName =~ \"Library.VariableGroupModified\"\n| extend variables = Data.Variables\n| extend VariableGroupName = tostring(Data.VariableGroupName)) on VariableGroupName\n| extend len = array_length(bag_keys(variables))\n| extend len1 = array_length(bag_keys(variables1))\n| where (TimeGenerated < TimeGenerated1 and len > len1) or (TimeGenerated1 > TimeGenerated and len1 < len)\n| project-away len, len1\n| extend VariablesRemoved = set_difference(bag_keys(variables), bag_keys(variables1)) \n| project-rename TimeCreated=TimeGenerated, TimeDeleted = TimeGenerated1, CreatingUser = ActorUPN, DeletingUser = ActorUPN1, CreatingIP = IpAddress, DeletingIP = IpAddress1, CreatingUA = UserAgent, DeletingUA = UserAgent1\n| project-reorder VariableGroupName, TimeCreated, TimeDeleted, VariablesRemoved, CreatingUser, CreatingIP, CreatingUA, DeletingUser, DeletingIP, DeletingUA\n| extend timestamp = TimeDeleted, AccountCustomEntity = DeletingUser, IPCustomEntity = DeletingIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule detects usage of recovery tools vssadmin, wbadmin, wmic and bcedit to delete backup files or change recovery configuration. Adversaries may use these tools to delete shadow copies and backup files to prevent recovery of files.\nhttps://attack.mitre.org/techniques/T1490/\n Topic: Malware Protection Essentials"}, {"role": "assistant", "content": "_ASim_ProcessEvent\n| where TargetProcessFilename has_any ('vssadmin.exe', 'wbadmin.exe', 'wmic.exe')\n| where CommandLine has_all ('delete', 'shadow')\n| union isfuzzy=True \n    (_ASim_ProcessEvent\n    | where TargetProcessFilename =~ 'bcedit.exe'\n    | where CommandLine has_all ('/set', 'recoveryenabled no')\n    )\n| project\n    TimeGenerated,\n    DvcHostname,\n    DvcIpAddr,\n    DvcDomain,\n    TargetUsername,\n    TargetUsernameType,\n    TargetProcessName,\n    TargetProcessId,\n    CommandLine\n| extend Username = iff(tostring(TargetUsernameType) == 'Windows', tostring(split(TargetUsername, '\\\\')[1]), TargetUsername)\n| extend NTDomain = iff(tostring(TargetUsernameType) == 'Windows', tostring(split(TargetUsername, '\\\\')[0]), TargetUsername)\n| extend Username = iff(tostring(TargetUsernameType) == 'UPN', tostring(split(TargetUsername, '@')[0]), Username)\n| extend UPNSuffix = iff(tostring(TargetUsernameType) == 'UPN', tostring(split(TargetUsername, '@')[1]), '')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Azure DevOps allow for audit logs to be streamed to external storage solutions such as SIEM solutions. An attacker looking to hide malicious Azure DevOps activity from defenders may look to disable data streams before conducting activity and then re-enabling the stream after (so as not to raise data threshold-based alarms). Looking for disabled audit streams can identify this activity, and due to the nature of the action its unlikely to have a high false positive rate.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where OperationName =~ \"AuditLog.StreamDisabledByUser\"\n| extend StreamType = tostring(Data.ConsumerType)\n| project-reorder TimeGenerated, Details, ActorUPN, IpAddress, UserAgent, StreamType\n| extend timestamp = TimeGenerated\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for new processes being spawned by the Exchange UM service where that process has not previously been observed before. \nReference: https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/\n Topic: Detections"}, {"role": "assistant", "content": "let lookback = 14d;\nlet timeframe = 1d;\n(union isfuzzy=true\n(SecurityEvent\n| where TimeGenerated > ago(lookback) and TimeGenerated < ago(timeframe)\n| where EventID == 4688\n| where ParentProcessName has_any (\"umworkerprocess.exe\", \"UMService.exe\")\n| join kind=rightanti (\nSecurityEvent\n| where TimeGenerated > ago(timeframe)\n| where ParentProcessName has_any (\"umworkerprocess.exe\", \"UMService.exe\")\n| where EventID == 4688) on NewProcessName\n),\n(WindowsEvent\n| where TimeGenerated > ago(lookback) and TimeGenerated < ago(timeframe)\n| where EventID == 4688 and EventData has_any (\"umworkerprocess.exe\", \"UMService.exe\")\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| where ParentProcessName has_any (\"umworkerprocess.exe\", \"UMService.exe\")\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend Account = strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend IpAddress = tostring(EventData.IpAddress)\n| join kind=rightanti (\nWindowsEvent\n| where TimeGenerated > ago(timeframe)\n| where EventID == 4688  and EventData has_any (\"umworkerprocess.exe\", \"UMService.exe\")\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| where ParentProcessName has_any (\"umworkerprocess.exe\", \"UMService.exe\")\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend Account = strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend IpAddress = tostring(EventData.IpAddress)) on NewProcessName\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend SubjectUserName = tostring(EventData.SubjectUserName), SubjectDomainName = tostring(EventData.SubjectDomainName)\n| project-away DomainIndex\n))  \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for error events from McAfee agents.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "let lbtime = 24h;\nMcAfeeEPOEvent\n| where TimeGenerated > ago(lbtime)\n| where EventId in ('2402', '2412', '1119', '1123', '2201', '2202', '2204', '2208', '3020', '3021')\n| extend EventMessage = case(EventId == '2402', \"Update Failed\",\n                              EventId == '2412', \"Deployment Failed\",\n                              EventId == '1119', \n                              \"The update failed; see event log\",\n                              EventId == '1123', \"The upgrade failed; see event log\",\n                              EventId == '2201', \"McAfee Agent: Failed to install software package\",\n                              EventId == '2202', \"McAfee Agent: Install retry limit reached for software package\",\n                              EventId == '2204', \"McAfee Agent: Insufficient disk space to install software\", \n                              EventId == '2208', \"McAfee Agent: Insufficient disk space to download software\",\n                              EventId == '3020', \"Invalid virus signature files\",\n                              \"Scan engine error\")\n| project DvcIpAddr, EventId, EventMessage\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a user is rejected for a privileged role elevation via PIM. Monitor rejections for indicators of attacker compromise of the requesting account.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-identity-management\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where ActivityDisplayName =~'Add member to role request denied (PIM activation)'\n| mv-apply ResourceItem = TargetResources on \n  (\n      where ResourceItem.type =~ \"Role\"\n      | extend Role = trim(@'\"',tostring(ResourceItem.displayName))\n  )\n| mv-apply ResourceItem = TargetResources on \n  (\n      where ResourceItem.type =~ \"User\"\n      | extend TargetUserPrincipalName = trim(@'\"',tostring(ResourceItem.userPrincipalName))\n  )\n| where isnotempty(InitiatedBy.user)\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n| extend InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n| project-reorder TimeGenerated, TargetUserPrincipalName, Role, OperationName, Result, ResultDescription\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in CommonSecurityLog.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\nlet dt_lookBack = 1h; // Look back 1 hour for CommonSecurityLog events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and CommonSecurityLog events\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      CommonSecurityLog\n      | where TimeGenerated >= ago(dt_lookBack)\n      | extend MessageIP = extract(IPRegex, 0, Message)\n      | extend CS_ipEntity = iff(isnotempty(SourceIP), SourceIP, DestinationIP)\n      | extend CS_ipEntity = iff(isempty(CS_ipEntity) and isnotempty(MessageIP), MessageIP, CS_ipEntity)\n      | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n  )\n  on $left.TI_ipEntity == $right.CS_ipEntity\n  // Filter out logs that occurred after the expiration of the corresponding indicator\n  | where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and CS_ipEntity, and keep the log entry with the latest timestamp\n  | summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, CS_ipEntity\n  // Select the desired output fields\n  | project timestamp = CommonSecurityLog_TimeGenerated, SourceIP, DestinationIP, MessageIP, Message, DeviceVendor, DeviceProduct, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, TI_ipEntity, CS_ipEntity, LogSeverity, DeviceAction, Type\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible execution of Powershell Empire.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where EventSubType != 'AttackAttempt'\n| where ActingProcessCommandLine has_any ('-NoP -sta -NonI -W Hidden -Enc', '-noP -sta -w 1 -enc', '-NoP -NonI -W Hidden -enc')\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Use this query to look for activity related to Turtle activity, known to affect macOS devices via a MachO binary\n Topic: Jamf Protect"}, {"role": "assistant", "content": "JamfProtect\n| where TargetProcessSHA256 has \"a48af4a62358831fe5376aa52db1a3555b0c93c1665b242c0c1f49462f614c56\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for an account being created from a domain that is not regularly seen in a tenant.\n  Attackers may attempt to add accounts from these sources as a means of establishing persistant access to an environment.\n  Created accounts should be investigated to confirm expected creation.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#short-lived-accounts\n Topic: Detections"}, {"role": "assistant", "content": "let core_domains = (SigninLogs\n  | where TimeGenerated > ago(7d)\n  | where ResultType == 0\n  | extend domain = tolower(split(UserPrincipalName, \"@\")[1])\n  | summarize by tostring(domain));\n  let alternative_domains = (SigninLogs\n  | where TimeGenerated > ago(7d)\n  | where isnotempty(AlternateSignInName)\n  | where ResultType == 0\n  | extend domain = tolower(split(AlternateSignInName, \"@\")[1])\n  | summarize by tostring(domain));\n  AuditLogs\n  | where TimeGenerated > ago(1d)\n  | where OperationName =~ \"Add User\"\n  | extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n  | extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n  | extend UserAdded = tostring(TargetResources[0].userPrincipalName)\n  | extend UserAddedDomain = case(\n  UserAdded has \"#EXT#\", tostring(split(tostring(split(UserAdded, \"#EXT#\")[0]), \"_\")[1]),\n  UserAdded !has \"#EXT#\", tostring(split(UserAdded, \"@\")[1]),\n  UserAdded)\n  | where UserAddedDomain !in (core_domains) and UserAddedDomain !in (alternative_domains)\n  | extend AddedByName = case(\n  InitiatingUserPrincipalName has \"#EXT#\", tostring(split(tostring(split(InitiatingUserPrincipalName, \"#EXT#\")[0]), \"_\")[0]),\n  InitiatingUserPrincipalName !has \"#EXT#\", tostring(split(InitiatingUserPrincipalName, \"@\")[0]),\n  InitiatingUserPrincipalName)\n  | extend AddedByUPNSuffix = case(\n  InitiatingUserPrincipalName has \"#EXT#\", tostring(split(tostring(split(InitiatingUserPrincipalName, \"#EXT#\")[0]), \"_\")[1]),\n  InitiatingUserPrincipalName !has \"#EXT#\", tostring(split(InitiatingUserPrincipalName, \"@\")[1]),\n  InitiatingUserPrincipalName)\n  | extend UserAddedName = case(\n  UserAdded has \"#EXT#\", tostring(split(tostring(split(UserAdded, \"#EXT#\")[0]), \"_\")[0]),\n  UserAdded !has \"#EXT#\", tostring(split(UserAdded, \"@\")[0]),\n  UserAdded)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects ZPA connections from new country.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "let listCountries =\nZPAEvent \n| where TimeGenerated > ago(14d)\n| where DvcAction == 'open'\n| summarize ListofCountries = make_set(SrcGeoCountry) by DstUserName\n| project ListofCountries;\nZPAEvent\n| where isnotempty(SrcGeoCountry)\n| where SrcGeoCountry !in (listCountries)\n| summarize EventCount = count() by DstUserName, SrcGeoCountry\n| project-away EventCount\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies IP addresses performing DNS lookups associated with common ToR proxies.\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "DnsEvents\n| where Name contains \".\"\n| where Name has_any (\"tor2web.org\", \"tor2web.com\", \"torlink.co\", \"onion.to\", \"onion.ink\", \"onion.cab\", \"onion.nu\", \"onion.link\",\n\"onion.it\", \"onion.city\", \"onion.direct\", \"onion.top\", \"onion.casa\", \"onion.plus\", \"onion.rip\", \"onion.dog\", \"tor2web.fi\",\n\"tor2web.blutmagie.de\", \"onion.sh\", \"onion.lu\", \"onion.pet\", \"t2w.pw\", \"tor2web.ae.org\", \"tor2web.io\", \"tor2web.xyz\", \"onion.lt\",\n\"s1.tor-gateways.de\", \"s2.tor-gateways.de\", \"s3.tor-gateways.de\", \"s4.tor-gateways.de\", \"s5.tor-gateways.de\", \"hiddenservice.net\")\n| extend HostName = iff(Computer has '.', substring(Computer,0,indexof(Computer,'.')),Computer)\n| extend DnsDomain = iff(Computer has '.', substring(Computer,indexof(Computer,'.')+1),\"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects new risky user.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where EventType =~ 'access'\n| where EventResultDetails has_all ('Added', 'Risky Users')\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies IP addresses that generate over 5% of traffic during DDoS attack mitigation Topic: Azure DDoS Protection"}, {"role": "assistant", "content": "let T1 = AzureDiagnostics\n  | where ResourceType == \"PUBLICIPADDRESSES\" and Category == \"DDoSMitigationFlowLogs\"\n  | summarize rows_count = count() by destPublicIpAddress_s, sourcePublicIpAddress_s;\nlet T2 = AzureDiagnostics\n  | where ResourceType == \"PUBLICIPADDRESSES\" and Category == \"DDoSMitigationFlowLogs\"\n  | summarize rows_total = count() by destPublicIpAddress_s;\nT2\n  | join kind=leftouter T1 on destPublicIpAddress_s\n  | project destPublicIpAddress_s, sourcePublicIpAddress_s, percent_of_traffic = 100*rows_count/rows_total\n  | order by percent_of_traffic desc\n  | where percent_of_traffic > 5\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for requiring multi-factor authentication (MFA) for all administrative roles makes it harder\n for attackers to access accounts. Administrative roles have higher permissions than typical users.\n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'Azure Secure Score AdminMFAV2'"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a guest account in a tenant is converted to a member of the tenant.\n  Monitoring guest accounts and the access they are provided is important to detect potential account abuse.\n  Accounts converted to members should be investigated to ensure the activity was legitimate.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-failed-unusual-sign-ins\n Topic: Detections"}, {"role": "assistant", "content": "AuditLogs\n  | where OperationName =~ \"Update user\"\n  | where Result =~ \"success\"\n  | mv-expand TargetResources\n  | mv-expand TargetResources.modifiedProperties\n  | where TargetResources_modifiedProperties.displayName =~ \"TargetId.UserType\"\n  | extend UpdatingAppName = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n  | extend UpdatingServicePrincipalId = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n  | extend UpdatingUserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | extend UpdatingUserAadUserId = tostring(parse_json(tostring(InitiatedBy.user)).id)\n  | extend UpdatingUserIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n  | extend UpdatingUser = iif(isnotempty(UpdatingServicePrincipalId), UpdatingServicePrincipalId, UpdatingUserPrincipalName)\n  | extend UpdatedUserPrincipalName = tostring(TargetResources.userPrincipalName)\n  | project-reorder TimeGenerated, UpdatedUserPrincipalName, UpdatingUser\n  | where parse_json(tostring(TargetResources_modifiedProperties.newValue)) =~ \"\\\"Member\\\"\" and parse_json(tostring(TargetResources_modifiedProperties.oldValue)) =~ \"\\\"Guest\\\"\"\n  | extend InitiatingAccountName = tostring(split(UpdatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(UpdatingUserPrincipalName, \"@\")[1])\n  | extend TargetAccountName = tostring(split(UpdatedUserPrincipalName, \"@\")[0]), TargetAccountUPNSuffix = tostring(split(UpdatedUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches rare user agent strings.\n Topic: Cloudflare"}, {"role": "assistant", "content": "Cloudflare\n| where TimeGenerated > ago(24h)\n| where isnotempty(HttpUserAgentOriginal)\n| summarize count() by HttpUserAgentOriginal, SrcIpAddr\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unexpected authentication URL.\n Topic: PingFederate"}, {"role": "assistant", "content": "let known_domains = \nPingFederateEvent\n| where TimeGenerated between (ago(14d) .. (1d))\n| where isnotempty(DeviceCustomString1)\n| extend url_parsed = parse_url(DeviceCustomString1)\n| extend url_domain = extract(@'.*\\.(.*\\.[a-z]+)', 1, tostring(url_parsed.Host))\n| summarize makeset(url_domain);\nPingFederateEvent\n| where isnotempty(DeviceCustomString1)\n| extend url_parsed = parse_url(DeviceCustomString1)\n| extend url_domain = extract(@'.*\\.(.*\\.[a-z]+)', 1, tostring(url_parsed.Host))\n| where url_domain !in (known_domains)\n| extend AccountCustomEntity = DstUserName\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "IP addresses of broadband links that usually indicates users attempting to access their home network, for example for a remote session to a home computer.\n Topic: Detections"}, {"role": "assistant", "content": "let lbtime = 10m;\nCisco_Umbrella\n| where TimeGenerated > ago(lbtime)\n| where EventType == 'proxylogs'\n| where DvcAction =~ 'Allowed'\n| where UrlCategory has_any ('Dynamic and Residential', 'Personal VPN')\n| project TimeGenerated, SrcIpAddr, Identities\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects new service account creation.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where PayloadMethodname =~ 'google.iam.admin.v1.CreateServiceAccount'\n| extend result = parse_json(todynamic(PayloadAuthorizationinfo))[0]['granted']\n| where result =~ 'true'\n| project-away result\n| extend AccountName = tostring(split(PayloadRequestAccountId, \"@\")[0]), AccountUPNSuffix = tostring(split(PayloadRequestAccountId, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for changes to COM registry keys to point to files in C:\\Windows\\System32\\spool\\drivers\\color\\.\n  This can be used to enable COM hijacking for persistence.\n  Ref: https://www.microsoft.com/security/blog/2022/07/27/untangling-knotweed-european-private-sector-offensive-actor-using-0-day-exploits/\n Topic: Detections"}, {"role": "assistant", "content": "let guids = dynamic([\"{ddc05a5a-351a-4e06-8eaf-54ec1bc2dcea}\",\"{1f486a52-3cb1-48fd-8f50-b8dc300d9f9d}\",\"{4590f811-1d3a-11d0-891f-00aa004b2e24}\", \"{4de225bf-cf59-4cfc-85f7-68b90f185355}\", \"{F56F6FDD-AA9D-4618-A949-C1B91AF43B1A}\"]);\n  let mde_data = DeviceRegistryEvents\n  | where ActionType =~ \"RegistryValueSet\"\n  | where RegistryKey contains \"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Classes\\\\CLSID\"\n  | where RegistryKey has_any (guids)\n  | where RegistryValueData has \"System32\\\\spool\\\\drivers\\\\color\";\n  let event_data = SecurityEvent\n  | where EventID == 4657\n  | where ObjectName contains \"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Classes\\\\CLSID\"\n  | where ObjectName has_any (guids)\n  | where NewValue has \"System32\\\\spool\\\\drivers\\\\color\"\n  | extend RegistryKey = ObjectName, RegistryValueData = NewValue, DeviceName=Computer, InitiatingProcessFileName = Process, InitiatingProcessAccountName=SubjectUserName, InitiatingProcessAccountDomain = SubjectDomainName;\n  union mde_data, event_data\n  | extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n  | extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert creates an incident when Image Segmentation AI Model extraction high suspicious, high severity vulnerability detected from the AIShield.\n Topic: AIShield AI Security Monitoring"}, {"role": "assistant", "content": "AIShield\n| where Message has 'Image Segmentation AI Model Extraction Attack Identified'\n| where Severity =~ 'High'\n| where SuspiciousLevel =~ 'high suspicious attack'\n| extend NTDomain = tostring(split(Computer, '\\\\')[0]), HostName = tostring(split(Computer, '.')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Attackers often try to hide their steps by deleting or stopping the collection of logs that could show their activity. \nThis alert identifies any manipulation of AWS CloudTrail, Cloudwatch/EventBridge or VPC Flow logs.\nMore Information: AWS CloudTrail API: https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_Operations.html \nAWS Cloudwatch/Eventbridge API: https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_Operations.html \nAWS DelteteFlowLogs API : https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteFlowLogs.html \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"UpdateTrail\",\"DeleteTrail\",\"StopLogging\",\"DeleteFlowLogs\",\"DeleteEventBus\",\"DeleteLogGroup\"]);\nAWSCloudTrail\n| where (EventName in~ (EventNameList) or (EventName == \"UpdateTrail\" and (parse_json(RequestParameters).enableLogFileValidation) == false) or (EventName == \"UpdateTrail\" and (parse_json(RequestParameters).isMultiRegionTrail) == false)) and isempty(ErrorMessage) and isempty(ErrorCode)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource\n| extend timestamp = StartTimeUtc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An attacker with the CreateAccessKey permissions on other users can create an access Key ID and secret access key belonging to another user in the AWS environment for privilege escalation.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where  EventName == \"CreateAccessKey\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData,UserIdentityArn, ResponseElements, RequestParameters\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "When Knox device microphone access has been detected through system policy when such access is disabled.\n Topic: Samsung Knox Asset Intelligence"}, {"role": "assistant", "content": "Samsung_Knox_System_CL\n| where Name == \"PERIPHERAL_ACCESS_THROUGH_POLICY_DETECTED_MIC\"\nand MitreTtp has \"KNOX.2\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows sources (hosts) by alert count.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where TimeGenerated > ago(24h)\n| where ActivityType == 3608\n| extend DstHostname = extract(@'detected on\\s(\\S+)\\.', 1, EventOriginalMessage)\n| summarize count() by DstHostname\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Malware authors will sometimes hardcode user agent string values when writing the network communication component of their malware. Malformed user agents can be an indication of such malware.\n Topic: Detections"}, {"role": "assistant", "content": "(union isfuzzy=true\n(OfficeActivity | where UserAgent != \"\"),\n(OfficeActivity\n| where RecordType in (\"AzureActiveDirectory\", \"AzureActiveDirectoryStsLogon\")\n| extend OperationName = Operation\n| parse ExtendedProperties with * 'User-Agent\\\\\":\\\\\"' UserAgent2 '\\\\' *\n| parse ExtendedProperties with * 'UserAgent\",      \"Value\": \"' UserAgent1 '\"' *\n| where isnotempty(UserAgent1) or isnotempty(UserAgent2)\n| extend UserAgent = iff( RecordType == 'AzureActiveDirectoryStsLogon', UserAgent1, UserAgent2)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = ClientIP, Account = UserId, Type, RecordType, Operation\n),\n(AzureDiagnostics\n| where ResourceType =~ \"APPLICATIONGATEWAYS\"\n| where OperationName =~ \"ApplicationGatewayAccess\"\n| extend ClientIP = columnifexists(\"clientIP_s\", \"None\"), UserAgent = columnifexists(\"userAgent_s\", \"None\")\n| where UserAgent != '-'\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = ClientIP,  requestUri_s, httpMethod_s, host_s, requestQuery_s, Type\n),\n(\nW3CIISLog\n| where isnotempty(csUserAgent)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = csUserAgent, SourceIP = cIP, Account = csUserName, Type, sSiteName, csMethod, csUriStem\n),\n(\nAWSCloudTrail\n| where isnotempty(UserAgent)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = SourceIpAddress, Account = UserIdentityUserName, Type, EventSource, EventName\n),\n(SigninLogs\n| where isnotempty(UserAgent)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, OperationName, tostring(LocationDetails), tostring(DeviceDetail), AppDisplayName, ClientAppUsed\n),\n(AADNonInteractiveUserSignInLogs\n| where isnotempty(UserAgent)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, OperationName, tostring(LocationDetails), tostring(DeviceDetail), AppDisplayName, ClientAppUsed\n)\n)\n// Likely artefact of hardcoding\n| where UserAgent startswith \"User\" or UserAgent startswith '\\\"'\n// Incorrect casing\nor (UserAgent startswith \"Mozilla\" and not(UserAgent contains_cs \"Mozilla\"))\n// Incorrect casing\nor UserAgent contains_cs  \"(Compatible;\"\n// Missing MSIE version\nor UserAgent matches regex @\"MSIE\\s?;\"\n// Incorrect spacing around MSIE version\nor UserAgent matches regex  @\"MSIE(?:\\d|.{1,5}?\\d\\s;)\"\n| extend AccountName = split(Account, \"@\")[0], UPNSuffix = split(Account, \"@\")[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0002 (National IDs have been observed in unencrypted data stores. Encrypt data at rest to comply with this CIS requirement)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0002\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects suspicious sender domain age.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where NetworkDirection =~ 'Incoming'\n| extend rec_domain = extract(@'@(.*)', 1, DstUserName)\n| extend s_domain = extract(@'@(.*)', 1, SrcUserName)\n| where s_domain != rec_domain\n| where tostring(AdditionalFields) has 'ESASDRDomainAge'\n| extend domain_age = extract(@'ESASDRDomainAge\":\"(.*days)\"', 1, tostring(AdditionalFields))\n| extend yy = toint(extract(@'(\\d+)\\syears', 1, domain_age))\n| extend mm = toint(extract(@'(\\d+)\\smonths', 1, domain_age))\n| extend dd = toint(extract(@'(\\d+)\\sdays', 1, domain_age))\n| where isempty(yy)\n| where isempty(mm) or mm <= 2\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects large ICMP packets to external host.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "UbiquitiAuditEvent\n| where EventCategory =~ 'firewall'\n| where ipv4_is_private(SrcIpAddr)\n| where ipv4_is_private(DstIpAddr) == 'False'\n| where NetworkProtocol =~ 'ICMP'\n| summarize avg_packet_length = avg(toint(NetworkBytes))\n| extend a = 1\n| join (UbiquitiAuditEvent\n  | where EventCategory =~ 'firewall'\n  | where ipv4_is_private(SrcIpAddr)\n  | where ipv4_is_private(DstIpAddr) == 'False'\n  | where NetworkProtocol =~ 'ICMP'\n  | extend a = 1) on a\n| where toint(NetworkBytes) > 2*avg_packet_length\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "AWS ECR image scan detected medium severity vulnerabilities in your container image.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"DescribeImageScanFindings\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend repoName = tostring(parse_json(ResponseElements).repositoryName)\n| extend imageId = tostring(parse_json(ResponseElements).imageId.imageDigest)\n| extend Medium = toint(parse_json(ResponseElements).imageScanFindings.findingSeverityCounts.MEDIUM)\n| where Medium > 0\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Encoding malicious software is a technique used to obfuscate files from detection. \nThe first CommandLine component is looking for Python decoding base64. \nThe second CommandLine component is looking for Bash/sh command line base64 decoding.\nThe third one is looking for Ruby decoding base64.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "let ProcessCreationEvents=(union isfuzzy=true\n(SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, FileName = Process, CommandLine, ParentProcessName\n),\n(WindowsEvent\n| where EventID==4688\n| where EventData has_any (\".decode('base64')\", \"base64 --decode\", \".decode64(\" )\n| extend CommandLine = tostring(EventData.CommandLine)\n| where isnotempty(CommandLine)\n| extend SubjectUserName = tostring(EventData.SubjectUserName)\n| extend SubjectDomainName = tostring(EventData.SubjectDomainName)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend FileName=tostring(split(NewProcessName, '\\\\')[-1])\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, CommandLine, ParentProcessName\n));\nProcessCreationEvents \n| where CommandLine contains \".decode('base64')\"\n        or CommandLine contains \"base64 --decode\"\n        or CommandLine contains \".decode64(\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), CountToday = count() by Computer, Account, AccountDomain, FileName, CommandLine, ParentProcessName\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query establishes a baseline of the type of UserAgent (i.e. browser, office application, etc) that is typically used for a particular application by looking back for a number of days. \nIt then searches the current day for any deviations from this pattern, i.e. types of UserAgents not seen before in combination with this application.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let minimumAppThreshold = 100;\nlet timeframe = 1d;\nlet lookback_timeframe= 7d;\nlet ExtractBrowserTypeFromUA=(ua:string) {\n    // Note: these are in a specific order since, for example, Edge contains \"Chrome/\" and \"Edge/\" strings.\n    case(\n        ua has \"Edge/\", dynamic({\"AgentType\": \"Browser\", \"AgentName\": \"Edge\"}),\n        ua has \"Edg/\", dynamic({\"AgentType\": \"Browser\", \"AgentName\": \"Edge\"}),\n        ua has \"Trident/\", dynamic({\"AgentType\": \"Browser\", \"AgentName\": \"Internet Explorer\"}),\n        ua has \"Chrome/\" and ua has \"Safari/\", dynamic({\"AgentType\": \"Browser\", \"AgentName\": \"Chrome\"}),\n        ua has \"Gecko/\" and ua has \"Firefox/\", dynamic({\"AgentType\": \"Browser\", \"AgentName\": \"Firefox\"}),\n        not(ua has \"Mobile/\") and ua has \"Safari/\" and ua has \"Version/\", dynamic({\"AgentType\": \"Browser\", \"AgentName\": \"Safari\"}),\n        ua startswith \"Dalvik/\" and ua has \"Android\", dynamic({\"AgentType\": \"Browser\", \"AgentName\": \"Android Browser\"}),\n        ua startswith \"MobileSafari//\", dynamic({\"AgentType\": \"Browser\", \"AgentName\": \"Mobile Safari\"}),\n        ua has \"Mobile/\" and ua has \"Safari/\" and ua has \"Version/\", dynamic({\"AgentType\": \"Browser\", \"AgentName\": \"Mobile Safari\"}),\n        ua has \"Mobile/\" and ua has \"FxiOS/\", dynamic({\"AgentType\": \"Browser\", \"AgentName\": \"IOS Firefox\"}),\n        ua has \"Mobile/\" and ua has \"CriOS/\", dynamic({\"AgentType\": \"Browser\", \"AgentName\": \"IOS Chrome\"}),\n        ua has \"Mobile/\" and ua has \"WebKit/\", dynamic({\"AgentType\": \"Browser\", \"AgentName\": \"Mobile Webkit\"}),\n        //\n        ua startswith \"Excel/\", dynamic({\"AgentType\": \"OfficeApp\", \"AgentName\": \"Excel\"}),\n        ua startswith \"Outlook/\", dynamic({\"AgentType\": \"OfficeApp\", \"AgentName\": \"Outlook\"}),\n        ua startswith \"OneDrive/\", dynamic({\"AgentType\": \"OfficeApp\", \"AgentName\": \"OneDrive\"}),\n        ua startswith \"OneNote/\", dynamic({\"AgentType\": \"OfficeApp\", \"AgentName\": \"OneNote\"}),\n        ua startswith \"Office/\", dynamic({\"AgentType\": \"OfficeApp\", \"AgentName\": \"Office\"}),\n        ua startswith \"PowerPoint/\", dynamic({\"AgentType\": \"OfficeApp\", \"AgentName\": \"PowerPoint\"}),\n        ua startswith \"PowerApps/\", dynamic({\"AgentType\": \"OfficeApp\", \"AgentName\": \"PowerApps\"}),\n        ua startswith \"SharePoint/\", dynamic({\"AgentType\": \"OfficeApp\", \"AgentName\": \"SharePoint\"}),\n        ua startswith \"Word/\", dynamic({\"AgentType\": \"OfficeApp\", \"AgentName\": \"Word\"}),\n        ua startswith \"Visio/\", dynamic({\"AgentType\": \"OfficeApp\", \"AgentName\": \"Visio\"}),\n        ua startswith \"Whiteboard/\", dynamic({\"AgentType\": \"OfficeApp\", \"AgentName\": \"Whiteboard\"}),\n        ua =~ \"Mozilla/5.0 (compatible; MSAL 1.0)\", dynamic({\"AgentType\": \"OfficeApp\", \"AgentName\": \"Office Telemetry\"}),\n        //\n        ua has \".NET CLR\", dynamic({\"AgentType\": \"Custom\", \"AgentName\": \"Dotnet\"}),\n        ua startswith \"Java/\", dynamic({\"AgentType\": \"Custom\", \"AgentName\": \"Java\"}),\n        ua startswith \"okhttp/\", dynamic({\"AgentType\": \"Custom\", \"AgentName\": \"okhttp\"}),\n        ua has \"Drupal/\", dynamic({\"AgentType\": \"Custom\", \"AgentName\": \"Drupal\"}),\n        ua has \"PHP/\", dynamic({\"AgentType\": \"Custom\", \"AgentName\": \"PHP\"}),\n        ua startswith \"curl/\", dynamic({\"AgentType\": \"Custom\", \"AgentName\": \"curl\"}),\n        ua has \"python-requests\", dynamic({\"AgentType\": \"Custom\", \"AgentName\": \"Python\"}),\n        pack(\"AgentType\",\"Other\",\"AgentName\", extract(@\"^([^/]*)/\",1,ua))\n    )\n};\n// Query to obtain 'simplified' user agents in a given timespan.\nlet QueryUserAgents = (start_time:timespan, end_time:timespan) {\n    union withsource=tbl_name AADNonInteractiveUserSignInLogs, SigninLogs\n    | where TimeGenerated >= ago(start_time)\n    | where TimeGenerated < ago(end_time)\n    | where ResultType == 0  // Only look at succesful logins\n    | extend ParsedUserAgent=ExtractBrowserTypeFromUA(UserAgent)\n    | extend UserAgentType=tostring(ParsedUserAgent.AgentType)\n    | extend UserAgentName=tostring(ParsedUserAgent.AgentName)\n    //| extend SimpleUserAgent=strcat(UserAgentType,\"_\",UserAgentName)\n    | extend SimpleUserAgent=UserAgentType\n    | where not(isempty(UserAgent))\n    | where not(isempty(AppId))\n};\n// Get baseline usage per application.\nlet BaselineUserAgents=materialize(\n    QueryUserAgents(lookback_timeframe+timeframe, timeframe)\n    | summarize RequestCount=count() by AppId, AppDisplayName, SimpleUserAgent\n);\nlet BaselineSummarizedAgents=(\n    BaselineUserAgents\n    | summarize BaselineUAs=make_set(SimpleUserAgent),BaselineRequestCount=sum(RequestCount) by AppId, AppDisplayName\n);\nQueryUserAgents(timeframe, 0d)\n| summarize count() by AppId, AppDisplayName, UserAgent, SimpleUserAgent\n| join kind=leftanti BaselineUserAgents on AppId, AppDisplayName, SimpleUserAgent\n| join BaselineSummarizedAgents on AppId, AppDisplayName\n| where BaselineRequestCount > minimumAppThreshold // Search only for actively used applications.\n// Get back full original requests.\n| join QueryUserAgents(timeframe, 0d) on AppId, UserAgent\n| project-away ParsedUserAgent, UserAgentName\n| project-reorder TimeGenerated, AppDisplayName, UserPrincipalName, UserAgent, BaselineUAs\n// Begin allow-list.\n// End allow-list.\n| summarize count() by UserPrincipalName, AppDisplayName, AppId, UserAgentType, SimpleUserAgent, UserAgent\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for workflow schemes added to projects.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where TimeGenerated > ago(24h)\n| where EventMessage =~ 'Workflow scheme added to project'\n| project EventCreationTime, UserName, ObjectItemName, AssociatedItems\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies beaconing patterns from Palo Alto Network traffic logs based on recurrent timedelta patterns.\nThe query leverages various KQL functions to calculate time deltas and then compares it with total events observed in a day to find percentage of beaconing.\nThis outbound beaconing pattern to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts.\nReference Blog:\nhttp://www.austintaylor.io/detect/beaconing/intrusion/detection/system/command/control/flare/elastic/stack/2017/06/10/detect-beaconing-with-flare-elasticsearch-and-intrusion-detection-systems/\nhttps://techcommunity.microsoft.com/t5/microsoft-sentinel-blog/detect-network-beaconing-via-intra-request-time-delta-patterns/ba-p/779586\n Topic: Azure Cloud NGFW by Palo Alto Networks"}, {"role": "assistant", "content": "let starttime = 2d;\nlet endtime = 1d;\nlet TimeDeltaThreshold = 25;\nlet TotalEventsThreshold = 30;\nlet MostFrequentTimeDeltaThreshold = 25;\nlet PercentBeaconThreshold = 80;\nfluentbit_CL\n| where ident_s == \"TRAFFIC\"\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where ipv4_is_private(tostring(parse_json(Message).dst_ip)) == false\n| project TimeGenerated, FirewallName_s, parse_json(Message).src_ip, parse_json(Message).sport, parse_json(Message).dst_ip, parse_json(Message).dport,Message\n| sort by tostring(parse_json(Message).src_ip) asc, TimeGenerated asc, tostring(parse_json(Message).dst_ip) asc, tostring(parse_json(Message).dport) asc\n| extend src_ip=tostring(parse_json(Message).src_ip)\n| serialize\n| extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceIP = next(src_ip, 1)\n| extend TimeDeltainSeconds = datetime_diff('second', nextTimeGenerated, TimeGenerated)\n| where parse_json(Message).src_ip == nextSourceIP\n| where TimeDeltainSeconds > TimeDeltaThreshold\n| summarize count() by TimeDeltainSeconds, bin(TimeGenerated, 1h), FirewallName_s, tostring(parse_json(Message).src_ip), tostring(parse_json(Message).dst_ip), tostring(parse_json(Message).dport),Message\n| summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds), TotalEvents=sum(count_)\nby bin(TimeGenerated, 1h), FirewallName_s, tostring(parse_json(Message).src_ip), tostring(parse_json(Message).dst_ip), tostring(parse_json(Message).dport),Message\n| where TotalEvents > TotalEventsThreshold and MostFrequentTimeDeltaCount > MostFrequentTimeDeltaThreshold\n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent > PercentBeaconThreshold\n| extend IPAddress = tostring(parse_json(Message).dst_ip)\n| extend HostName = tostring(split(FirewallName_s, \".\")[0]), DomainIndex = toint(indexof(FirewallName_s, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(FirewallName_s, DomainIndex + 1), FirewallName_s)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects known malicious user agents\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "let mal_uas = dynamic(['Metasploit', '360Spider', '404checker', 'AllSubmitter', 'BackDoorBot', 'CATExplorador', 'Nikto', 'havij']);\nApacheHTTPServer\n| where HttpUserAgentOriginal has_any (mal_uas)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unscannable attachments in mails.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where NetworkDirection =~ 'Incoming'\n| where tostring(AdditionalFields) has 'ESAAMPVerdict'\n| extend amp_verdict = extract(@'ESAAMPVerdict\":\"(NOT_EVALUATED|CLEAN|FA_PENDING|UNKNOWN|SKIPPED|UNSCANNABLE|LOW_RISK|MALICIOUS)\"', 1, tostring(AdditionalFields))\n| where amp_verdict =~ 'UNSCANNABLE'\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible privileges enumeration.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "let threshold = 5;\nGCP_IAM\n| where PayloadMethodname =~ 'google.iam.admin.v1.ListRoles'\n| summarize count() by PayloadAuthenticationinfoPrincipalemail, bin(TimeGenerated, 1h)\n| where count_ > threshold\n| extend AccountCustomEntity = PayloadAuthenticationinfoPrincipalemail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Monitors CTERA platform to detect files infected with viruses identified by the antivirus engine on Edge Filers. Topic: CTERA"}, {"role": "assistant", "content": "Syslog\n| where SyslogMessage contains \"found an infected file\"\n| extend \n    EdgeFiler = extract(\"Edge filer (\\\\w+)\", 1, SyslogMessage),\n    DetectionTime = extract(\"found an infected file at ([^ ]+)\", 1, SyslogMessage),\n    Portal = extract(\"from portal: (\\\\w+)\", 1, SyslogMessage),\n    FilePath = extract(\"The file path is: ([^\\\\.]+)\", 1, SyslogMessage),\n    Virus = extract(\"The virus is: ([^\\\\.]+)\", 1, SyslogMessage)\n| project TimeGenerated, EdgeFiler, DetectionTime, Portal, FilePath, Virus\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule will monitor for any employee accounts being deleted.\nDeleting an employee account can have a big potential impact as all of the data for that user will be removed.\n Topic: LastPass"}, {"role": "assistant", "content": "LastPassNativePoller_CL\n| where Action_s == \"Employee Account Deleted\" or Action_s == \"Remove User From Company\"\n| extend AccountCustomEntity = Username_s, IPCustomEntity = IP_Address_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a source IP scanning same open ports on the Azure Firewall IPs. This can indicate malicious scanning of port by an attacker, trying to reveal IPs with specific ports open in the organization. The ports can be compromised by attackers for initial access, most often by exploiting vulnerability.\n\nConfigurable Parameters:\n\n- Port sweep time - the time range to look for multiple hosts scanned. Default is set to 30 seconds.\n- Minimum different hosts threshold - alert only if more than this number of hosts scanned. Default is set to 200.\n Topic: Azure Firewall"}, {"role": "assistant", "content": "let MinimumDifferentHostsThreshold = 200;\nlet ExcludedPorts = dynamic([80 , 443]);\nlet BinTime = 30s;\nunion isfuzzy=true(\nAZFWApplicationRule\n| where DestinationPort !in (ExcludedPorts)\n| summarize AlertTimedCountHostsInBinTime = make_set(Fqdn) by SourceIp, bin(TimeGenerated, BinTime), DestinationPort\n| where array_length(AlertTimedCountHostsInBinTime) > MinimumDifferentHostsThreshold\n| mv-expand Fqdn = AlertTimedCountHostsInBinTime),\n(AZFWNetworkRule\n| extend Fqdn = DestinationIp\n| where DestinationPort !in (ExcludedPorts)\n| summarize AlertTimedCountHostsInBinTime = make_set(Fqdn) by SourceIp, bin(TimeGenerated, BinTime), DestinationPort\n| where array_length(AlertTimedCountHostsInBinTime) > MinimumDifferentHostsThreshold\n| mv-expand Fqdn = AlertTimedCountHostsInBinTime),\n(AzureDiagnostics\n| where OperationName == \"AzureFirewallApplicationRuleLog\" or OperationName == \"AzureFirewallNetworkRuleLog\"\n| parse msg_s with * \"from \" SourceIp \":\" SourcePort:int \" to \" Fqdn \":\" DestinationPort:int \". \" * \"Action: \" Action \".\" *\n| where DestinationPort !in (ExcludedPorts)\n| where isnotempty(Fqdn) and isnotempty(SourceIp) and isnotempty(DestinationPort)\n| summarize AlertTimedCountHostsInBinTime = make_set(Fqdn) by SourceIp, bin(TimeGenerated, BinTime), DestinationPort\n| where array_length(AlertTimedCountHostsInBinTime) > MinimumDifferentHostsThreshold\n| mv-expand Fqdn = AlertTimedCountHostsInBinTime)\n| project bin(TimeGenerated, BinTime), SourceIp, DestinationPort, AlertTimedCountHostsInBinTime, Fqdn\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when high privileged role was added to service account.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "let privileged_roles = dynamic(['roles/iam.securityAdmin', 'roles/secretmanager.admin', 'roles/secretmanager.secretAccessor', 'roles/apigateway.admin', 'roles/logging.admin', 'roles/iam.organizationRoleAdmin', 'roles/iam.roleAdmin', 'roles/iam.serviceAccountAdmin', 'roles/iam.serviceAccountCreator', 'roles/iam.serviceAccountKeyAdmin']);\nGCP_IAM\n| where PayloadMethodname =~ 'SetIamPolicy'\n| extend action = parse_json(todynamic(PayloadServicedataPolicydeltaBindingdeltas))[0]['action']\n| where action =~ 'ADD'\n| extend role = parse_json(todynamic(PayloadServicedataPolicydeltaBindingdeltas))[0]['role']\n| where role in~ (privileged_roles)\n| project-away action\n| extend AccountName = tostring(split(PayloadAuthenticationinfoPrincipalemail, \"@\")[0]), AccountUPNSuffix = tostring(split(PayloadAuthenticationinfoPrincipalemail, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible SMTP protocol abuse.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where NetworkApplicationProtocol =~ 'SMTP'\n| where DstPortNumber != 25\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "User account was added to a privileged built in domain local group or global group such as the Enterprise Adminis, Cert Publishers or DnsAdmins\nBe sure to verify this is an expected addition.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$\";\nSecurityEvent \n| where AccountType == \"User\"\n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group\n| where EventID in (\"4728\", \"4732\", \"4756\")   \n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| project StartTimeUtc = TimeGenerated, EventID, Activity, Computer, TargetUserName, TargetDomainName, TargetSid, UserPrincipalName, SubjectUserName, SubjectUserSid \n| extend timestamp = StartTimeUtc, HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')), Name = tostring(split(UserPrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(UserPrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match across filename and commandline IOCs related to an actor tracked by Microsoft as Zinc.\nReference: https://www.microsoft.com/security/blog/2022/09/29/zinc-weaponizing-open-source-software/\n Topic: Zinc Open Source"}, {"role": "assistant", "content": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/ZincOctober2022IOCs.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet file_path = (iocs | where Type =~ \"filepath\" | project IoC);\nlet commandline = (iocs | where Type =~ \"commandline\" | project IoC);\n(union isfuzzy=true \n(DeviceNetworkEvents\n| where  InitiatingProcessFolderPath has_any (file_path) or InitiatingProcessCommandLine has_any (commandline)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, LocalIP, Type\n| extend timestamp = TimeGenerated, HostEntity = DeviceName\n),\n(Event\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend Image = EventDetail.[4].[\"#text\"],  CommandLine = EventDetail.[10].[\"#text\"]\n| where Image has_any (file_path)  or   CommandLine has_any (commandline)\n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, CommandLine, Image\n| extend Type = strcat(Type, \": \", Source)\n| extend timestamp = TimeGenerated, HostEntity = Computer , AccountEntity = UserName, ProcessEntity = tostring(split(Image, '\\\\', -1)[-1])\n),  \n(DeviceProcessEvents\n| where  ( InitiatingProcessCommandLine has_any (file_path)) or ( InitiatingProcessCommandLine has_any (commandline))  or (InitiatingProcessFolderPath has_any (file_path)) or (InitiatingProcessFolderPath has_any (commandline)) or (FolderPath  has_any (file_path)) or (FolderPath has_any (commandline))\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, FolderPath, Type\n| extend timestamp = TimeGenerated, HostEntity = DeviceName , AccountEntity = InitiatingProcessAccountName, ProcessEntity = InitiatingProcessFileName\n),\n(DeviceFileEvents\n| where  (InitiatingProcessFolderPath has_any (file_path)) or (InitiatingProcessFolderPath has_any (commandline)) or (FolderPath  has_any (file_path)) or (FolderPath  has_any (commandline)) or ( InitiatingProcessCommandLine has_any (commandline)) or ( InitiatingProcessCommandLine has_any (file_path))\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RequestAccountName, RequestSourceIP, InitiatingProcessSHA256, FolderPath, Type\n| extend timestamp = TimeGenerated, HostEntity = DeviceName , AccountEntity = RequestAccountName, ProcessEntity = InitiatingProcessFileName, AlgorithmEntity = \"SHA256\", FileHashEntity = InitiatingProcessSHA256\n),\n(DeviceEvents\n| where  ( InitiatingProcessCommandLine has_any (file_path)) or ( InitiatingProcessCommandLine has_any (commandline)) or (InitiatingProcessFolderPath has_any (file_path)) or (InitiatingProcessFolderPath has_any (commandline)) or (FolderPath  has_any (file_path)) or (FolderPath has_any (commandline))\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, FolderPath, Type\n| extend CommandLine = InitiatingProcessCommandLine\n| extend timestamp = TimeGenerated, HostEntity = DeviceName , AccountEntity = InitiatingProcessAccountName, ProcessEntity = InitiatingProcessFileName\n),\n(SecurityEvent\n| where EventID == 4688\n| where ( CommandLine has_any (file_path)) or ( CommandLine has_any (commandline))  or (NewProcessName has_any (file_path)) or (NewProcessName has_any (commandline)) or (ParentProcessName has_any (file_path)) or (ParentProcessName has_any (commandline))\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type\n| extend timestamp = TimeGenerated, HostEntity = Computer , AccountEntity = Account, ProcessEntity = NewProcessName\n)\n)\n| extend HostName = tostring(split(HostEntity, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(HostEntity, '.'), 1, -1), '.'))\n| extend Name = tostring(split(AccountEntity, '@', 0)[0]), UPNSuffix = tostring(split(AccountEntity, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a source IP scanning multiple open ports on Azure Firewall. This can indicate malicious scanning of ports by an attacker, trying to reveal open ports in the organization that can be compromised for initial access.\n\nConfigurable Parameters:\n\n- Port scan time - the time range to look for multiple ports scanned. Default is set to 30 seconds.\n- Minimum different ports threshold - alert only if more than this number of ports scanned. Default is set to 100.\n Topic: Azure Firewall"}, {"role": "assistant", "content": "let MinimumDifferentPortsThreshold = 100;\nlet BinTime = 30s;\nunion isfuzzy=true(\nAZFWApplicationRule\n| summarize AlertTimedCountPortsInBinTime = dcount(DestinationPort) by SourceIp, bin(TimeGenerated, BinTime), Fqdn\n| where AlertTimedCountPortsInBinTime > MinimumDifferentPortsThreshold),\n(AZFWNetworkRule\n| extend Fqdn = DestinationIp\n| summarize AlertTimedCountPortsInBinTime = dcount(DestinationPort) by SourceIp, bin(TimeGenerated, BinTime), Fqdn\n| where AlertTimedCountPortsInBinTime > MinimumDifferentPortsThreshold),\n(AzureDiagnostics\n| where OperationName == \"AzureFirewallApplicationRuleLog\" or OperationName == \"AzureFirewallNetworkRuleLog\"\n| parse msg_s with * \"from \" SourceIp \":\" SourcePort:int \" to \" Fqdn \":\" DestinationPort:int *\n| where isnotempty(Fqdn) and isnotempty(SourceIp)\n| summarize AlertTimedCountPortsInBinTime = dcount(DestinationPort) by SourceIp, bin(TimeGenerated, BinTime), Fqdn\n| where AlertTimedCountPortsInBinTime > MinimumDifferentPortsThreshold)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection looks for command line parameters associated with the use of Sysinternals sdelete (https://docs.microsoft.com/sysinternals/downloads/sdelete) to delete multiple files on a hosts C drive.\nA threat actor may re-name the tool to avoid detection and then use it for destructive attacks on a host.\nThis detection uses the ASIM imProcess parser, this will need to be deployed before use - https://docs.microsoft.com/azure/sentinel/normalization\n Topic: Detections"}, {"role": "assistant", "content": "imProcess\n| where CommandLine has_all (\"accepteula\", \"-s\", \"-r\", \"-q\")\n| where Process !endswith \"sdelete.exe\"\n| where CommandLine !has \"sdelete\"\n| extend AccountName = tostring(split(ActorUsername, @'\\')[1]), AccountNTDomain = tostring(split(ActorUsername, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for updated projects.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where TimeGenerated > ago(24h)\n| where EventMessage =~ 'Project updated'\n| project EventCreationTime, UserName, SrcIpAddr, ObjectItemName, ChangedValues, AssociatedItems\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Results found on an publicly available cloud bucket\n Topic: Flare"}, {"role": "assistant", "content": "Firework_CL\n| where source_s contains \"Grayhat_warfare\" and (risk_score_d == \"3\" or risk_score_d == \"4\" or risk_score_d == \"5\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This identifies new Windows Reserved Filenames on Office services like SharePoint and OneDrive in the past 7 days. It also detects when a user uploads these files to another users workspace, which may indicate malicious activity.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\n  let endtime = todatetime('{{EndTimeISO}}');\n  let lookback = totimespan((endtime - starttime) * 7);\n  \n  // Reserved file names and extensions for Windows\n  let Reserved = dynamic(['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9']);\n  \n  // EnrichedMicrosoft365AuditLogs Query\n  let EnrichedEvents = EnrichedMicrosoft365AuditLogs\n      | where TimeGenerated between (starttime .. endtime)\n      | extend FileName = tostring(parse_json(tostring(AdditionalProperties)).SourceFileName)\n      | extend ClientUserAgent = tostring(parse_json(tostring(AdditionalProperties)).ClientUserAgent)\n      | extend SiteUrl = tostring(parse_json(tostring(AdditionalProperties)).SiteUrl)\n      | where isnotempty(ObjectId)\n      | where ObjectId !~ FileName\n      | where ObjectId in (Reserved) or FileName in (Reserved)\n      | where ClientUserAgent !has \"Mac OS\"\n      | join kind=leftanti (\n          EnrichedMicrosoft365AuditLogs\n          | where TimeGenerated between (ago(lookback) .. starttime)\n          | extend FileName = tostring(parse_json(tostring(AdditionalProperties)).SourceFileName)\n          | extend ClientUserAgent = tostring(parse_json(tostring(AdditionalProperties)).ClientUserAgent)\n          | extend SiteUrl = tostring(parse_json(tostring(AdditionalProperties)).SiteUrl)\n          | where isnotempty(ObjectId)\n          | where ObjectId !~ FileName\n          | where ObjectId in (Reserved) or FileName in (Reserved)\n          | where ClientUserAgent !has \"Mac OS\"\n          | summarize PrevSeenCount = count() by ObjectId, UserId, FileName\n      ) on ObjectId\n      | extend SiteUrlUserFolder = tolower(split(SiteUrl, '/')[-2])\n      | extend UserIdUserFolderFormat = tolower(replace_regex(UserId, '@|\\\\.', '_'))\n      | extend UserIdDiffThanUserFolder = iff(SiteUrl has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true, false)\n      | summarize TimeGenerated = make_list(TimeGenerated, 100000), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Operations = make_list(Operation, 100000), UserAgents = make_list(ClientUserAgent, 100000), Ids = make_list(Id, 100000),\n          SourceRelativeUrls = make_list(ObjectId, 100000), FileNames = make_list(FileName, 100000) by Workload, RecordType, UserType, UserKey, UserId, ClientIp, SiteUrl, ObjectId, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder\n      | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n      | extend IP_0_Address = ClientIp\n      | extend Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix, URL_0_Url = SiteUrl;\n  // OfficeActivity Query\n  let OfficeEvents = OfficeActivity\n      | where TimeGenerated between (starttime .. endtime)\n      | where isnotempty(SourceFileExtension)\n      | where SourceFileName !~ SourceFileExtension\n      | where SourceFileExtension in (Reserved) or SourceFileName in (Reserved)\n      | where UserAgent !has \"Mac OS\"\n      | join kind=leftanti (\n          OfficeActivity\n          | where TimeGenerated between (ago(lookback) .. starttime)\n          | where isnotempty(SourceFileExtension)\n          | where SourceFileName !~ SourceFileExtension\n          | where SourceFileExtension in (Reserved) or SourceFileName in (Reserved)\n          | where UserAgent !has \"Mac OS\"\n          | summarize PrevSeenCount = count() by SourceFileExtension\n      ) on SourceFileExtension\n      | extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])\n      | extend UserIdUserFolderFormat = tolower(replace_regex(UserId, '@|\\\\.', '_'))\n      | extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true, false)\n      | summarize TimeGenerated = make_list(TimeGenerated, 100000), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Operations = make_list(Operation, 100000), UserAgents = make_list(UserAgent, 100000), OfficeIds = make_list(OfficeId, 100000),\n          SourceRelativeUrls = make_list(SourceRelativeUrl, 100000), FileNames = make_list(SourceFileName, 100000) by OfficeWorkload, RecordType, UserType, UserKey, UserId, ClientIP, Site_Url, SourceFileExtension, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder\n      | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n      | extend IP_0_Address = ClientIP\n      | extend Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix, URL_0_Url = Site_Url;\n  // Combine Office and Enriched Logs\n  let CombinedEvents = OfficeEvents\n      | union EnrichedEvents\n      | summarize arg_min(StartTime, *) by UserId, ClientIP;\n  // Final Output\n  CombinedEvents\n      | project StartTime, EndTime, Operations, UserAgents, IP_0_Address, Account_0_Name, Account_0_UPNSuffix, URL_0_Url\n      | order by StartTime desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Header: Referrer-Policy Missing\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"informational\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"Header: Referrer-Policy Missing\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for failed root logins.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "VMwareESXi\n| where TimeGenerated > ago(24h)\n| where SyslogMessage has_all ('UserLoginSessionEvent', 'root', 'fail')\n| extend SrcIpAddr = extract(@'root@(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, SyslogMessage)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects WAF \"Allowed\" action on threat events.\n Topic: Fortinet FortiWeb Cloud WAF-as-a-Service connector for Microsoft Sentinel"}, {"role": "assistant", "content": "Fortiweb\n| where EventType =~ 'Attack'\n| where DvcAction =~ 'Allow'\n| summarize count() by SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects instance metadata access.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where EventType contains 'vcn.flowlogs'\n| where data_action_s =~ 'ACCEPT'\n| where DstIpAddr == '169.254.169.254'\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies unusual access to cloud storage, particularly from IPs not historically seen accessing the bucket or downloading files. It can be limited to private buckets with sensitive files by setting BucketName values.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "\nlet EventNameList = dynamic([\"ListBucket\",\"ListObjects\",\"GetObject\"]);\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nAWSS3BucketAPILogParsed \n| where EventTime between(starttime..endtime)\n| where EventName in (EventNameList)\n| project EventTime, EventSource, EventName, SourceIPAddress, UserIdentityType, UserIdentityArn, UserIdentityUserName, BucketName, Host, AuthenticationMethod, SessionMfaAuthenticated, SessionUserName, Key\n| join kind=leftanti\n(\n  AWSS3BucketAPILogParsed \n  | where EventTime between (lookback..starttime)\n  | where EventName in (EventNameList)\n) on SourceIPAddress\n| summarize EventCount=count(), StartTimeUtc = min(EventTime), EndTimeUtc = max(EventTime), Files= makeset(Key), EventNames = makeset(EventName) by EventSource, SourceIPAddress, UserIdentityType, UserIdentityArn, UserIdentityUserName, BucketName, Host, AuthenticationMethod, SessionMfaAuthenticated, SessionUserName\n| project StartTimeUtc, EndTimeUtc, EventSource, Host, SourceIPAddress, UserIdentityType, BucketName, EventNames, Files, AuthenticationMethod, SessionMfaAuthenticated, SessionUserName, EventCount\n| extend timestamp = StartTimeUtc, HostCustomEntity = Host, AccountCustomEntity = SessionUserName, IPCustomEntity = SourceIPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in DeviceFileEvents Event data from any FileHash IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet DeviceFileEvents_ = (union\n(DeviceFileEvents | where TimeGenerated > ago(dt_lookBack) | where isnotempty(SHA1) | extend FileHashValue = SHA1),\n(DeviceFileEvents | where TimeGenerated > ago(dt_lookBack) | where isnotempty(SHA256) | extend FileHashValue = SHA256));\nlet Hashes = DeviceFileEvents_ | distinct FileHashValue;\nThreatIntelligenceIndicator\n| where isnotempty(FileHashValue)\n| where TimeGenerated > ago(ioc_lookBack)\n| where FileHashValue in (Hashes)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\"\n| join kind=innerunique (DeviceFileEvents_) on $left.FileHashValue == $right.FileHashValue\n| where TimeGenerated < ExpirationDateTime\n| summarize TimeGenerated = arg_max(TimeGenerated, *) by  IndicatorId, DeviceId\n| project TimeGenerated, TrafficLightProtocolLevel, Description, ActivityGroupNames, IndicatorId, ThreatType, FileHashValue, FileHashType, ExpirationDateTime, ConfidenceScore, ActionType, DeviceId, DeviceName, FolderPath, RequestAccountDomain, RequestAccountName, RequestAccountSid, MachineGroup\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects ZPA connections from new IP.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "let listIPs =\nZPAEvent \n| where TimeGenerated > ago(14d)\n| where DvcAction == 'open'\n| summarize ListofIPs = make_set(SrcIpAddr) by DstUserName\n| project ListofIPs;\nZPAEvent\n| where isnotempty(SrcIpAddr)\n| where SrcIpAddr !in (listIPs)\n| summarize EventCount = count() by DstUserName, SrcIpAddr\n| project-away EventCount\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies Azure DevOps activities where additional organization admin is added\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where OperationName == \"Group.UpdateGroupMembership.Add\"\n| where Category == \"Modify\"\n| where Area == \"Group\"\n| where Details contains (\"Project Collection Administrators\")\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0012 (Theom has observed developer secrets in a data store that is publicly exposed. As per this requirement, use this information to apply data access control lists or access permissions to secure your data)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0012\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Takes Microsoft Defender for Endpoint (formerly Microsoft Defender ATP) alerts where web scripts are present in the evidence and correlates with requests made to those scripts in the WCSIISLog to surface new alerts for potentially malicious web request activity.\nThe lookback for alerts is set to 1h and the lookback for W3CIISLogs is set to 7d. A sample set of popular web script extensions has been provided in scriptExtensions that should be tailored to your environment.\n Topic: Web Shells Threat Protection"}, {"role": "assistant", "content": "let alertTimeWindow = 1h;\nlet logTimeWindow = 7d;\n// Define script extensions that suit your web application environment - a sample are provided below\nlet scriptExtensions = dynamic([\".php\", \".jsp\", \".js\", \".aspx\", \".asmx\", \".asax\", \".cfm\", \".shtml\"]);\nlet alertData = materialize(SecurityAlert\n| where TimeGenerated > ago(alertTimeWindow)\n| where ProviderName == \"MDATP\"\n// Parse and expand the alert JSON\n| extend alertData = parse_json(Entities)\n| mvexpand alertData);\nlet fileData = alertData\n// Extract web script files from MDATP alerts - our malicious web scripts - candidate webshells\n| where alertData.Type =~ \"file\"\n| where alertData.Name has_any(scriptExtensions)\n| extend FileName = tostring(alertData.Name), Directory = tostring(alertData.Directory);\nlet hostData = alertData\n// Extract server details from alerts and map to alert id\n| where alertData.Type =~ \"host\"\n| project HostName = tostring(alertData.HostName), DnsDomain = tostring(alertData.DnsDomain), SystemAlertId\n| distinct HostName, DnsDomain, SystemAlertId;\n// Join the files on their impacted servers\nlet webshellData = fileData\n| join kind=inner (hostData) on SystemAlertId\n| project TimeGenerated, FileName, Directory, HostName, DnsDomain;\nwebshellData\n| join (\n// Find requests that were made to this file on the impacted server in the W3CIISLog table\nW3CIISLog\n| where TimeGenerated > ago(logTimeWindow)\n// Restrict to accesses to script extensions\n| where csUriStem has_any(scriptExtensions)\n| extend splitUriStem = split(csUriStem, \"/\")\n| extend FileName = splitUriStem[-1], HostName = sComputerName\n// Summarize potential attacker activity\n| summarize count(), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), RequestUserAgents=make_set(csUserAgent), ReqestMethods=make_set(csMethod), RequestStatusCodes=make_set(scStatus), RequestCookies=make_set(csCookie), RequestReferers=make_set(csReferer), RequestQueryStrings=make_set(csUriQuery) by AttackerIP=cIP, SiteName=sSiteName, ShellLocation=csUriStem, tostring(FileName), HostName\n) on FileName, HostName\n| project StartTime, EndTime, AttackerIP, RequestUserAgents, Computer = HostName, SiteName, ShellLocation, ReqestMethods, RequestStatusCodes, RequestCookies, RequestReferers, RequestQueryStrings, RequestCount = count_\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies the host and account that executed AdFind by hash and filename in addition to common and unique flags that are used by many threat actors in discovery.\n Topic: MicrosoftDefenderForEndpoint"}, {"role": "assistant", "content": "let args = dynamic([\"objectcategory\",\"domainlist\",\"dcmodes\",\"adinfo\",\"trustdmp\",\"computers_pwdnotreqd\",\"Domain Admins\", \"objectcategory=person\", \"objectcategory=computer\", \"objectcategory=*\",\"dclist\"]);\nlet parentProcesses = dynamic([\"pwsh.exe\",\"powershell.exe\",\"cmd.exe\"]);\nDeviceProcessEvents\n//looks for execution from a shell\n| where InitiatingProcessFileName in (parentProcesses)\n// main filter\n| where FileName =~ \"AdFind.exe\" or SHA256 == \"c92c158d7c37fea795114fa6491fe5f145ad2f8c08776b18ae79db811e8e36a3\"\n   // AdFind common Flags to check for from various threat actor TTPs\n    or ProcessCommandLine has_any (args)\n| extend ProcessCustomEntity = InitiatingProcessFileName, CommandLineCustomEntity = ProcessCommandLine, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = SHA256,Name = tostring(split(AccountName, '@', 0)[0]), UPNSuffix = tostring(split(AccountName, '@', 1)[0]),HostName = tostring(split(DeviceName, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(DeviceName, '.'), 1, -1), '.'))\n | extend Account_0_Name = Name\n | extend Account_0_UPNSuffix = UPNSuffix\n | extend Host_0_HostName = HostName\n | extend Host_0_DnsDomain = DnsDomain\n | extend Process_0_ProcessId = ProcessCustomEntity\n | extend Process_0_CommandLine = CommandLineCustomEntity\n | extend FileHash_0_Algorithm = AlgorithmCustomEntity\n | extend FileHash_0_Value = FileHashCustomEntity\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests from unexpected IP addresses to admin panel.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "ImpervaWAFCloud\n| where QueryString contains @'/admin'\n| where ipv4_is_private(SrcIpAddr) == False\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The analytic rule is designed to identify when an email is blocked by Votiro Sanitization Engine policy. The rule generates an alert when an email is blocked after Sanitization process which is not password protected and has a from field meaning its a valid email. More information in terms of details about the blocked attachment, such as the file name and hash, and information about the email, such as the sender and recipient(s). The alert also includes information about the Votiro policy that blocked the attachment and provides a link to additional details about the incident.\n Topic: Votiro"}, {"role": "assistant", "content": "let Votiro_view  = view () { VotiroEvents | where sanitizationResult has \"Blocked\" and passwordProtected == \"false\" and from =~ \"null\" | extend FileWithEmailDetails = strcat_delim(' ', fileName, 'with the hash', SrcFileSHA256, 'was blocked in an email that was sent from user', from, 'to the following recipients', recipients) | summarize count() by fileName, SrcFileSHA256, FileWithEmailDetails, policyName, tostring(incidentURL), sanitizationResult, LogSeverity | extend FileHashAlgo = \"SHA256\", FileHashValue = SrcFileSHA256};Votiro_view"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for recipients with large number of corrupted emails.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "ProofpointPOD\n| where EventType == 'message'\n| where NetworkDirection == 'inbound'\n| extend isCorrupted = todynamic(MsgParts)[0]['isCorrupted']\n| where isCorrupted == 'true'\n| summarize count() by DstUserUpn\n| sort by count_\n| where count_ > 10"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for URLs used.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(http_url)\n| project SrcUserName, DstUserName, URL=http_url, MatchedPolicies\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for successful Guest authentication events.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "CiscoISEEvent\n| where TimeGenerated > ago(24h)\n| where EventId in ('5231', '5236')\n| project TimeGenerated, DstUserName, SrcIpAddr, DstIpAddr\n| extend AccountCustomEntity = DstUserName\n| extend IPCustomEntity = SrcIpAddr"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query uses XDR data from M365 Defender to detect files downloaded from a Dataverse instance and copied to USB drive. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "DataverseActivity\n| distinct InstanceUrl\n| join kind=inner (DeviceFileEvents)\n    on $left.InstanceUrl == $right.FileOriginUrl\n| join kind=inner (DeviceEvents\n    | where ActionType == \"UsbDriveMounted\"\n    | extend DriveLetter = tostring(AdditionalFields.DriveLetter)\n    | summarize MountedDriveLetters = make_set(DriveLetter, 26) by DeviceId, DeviceName)\n    on DeviceId\n| extend TargetDriveLetter = tostring(split(FolderPath, \"\\\\\")[0])\n| where set_has_element(MountedDriveLetters, TargetDriveLetter)\n| join kind=inner (DeviceInfo\n    | summarize arg_max(TimeGenerated, DeviceId, PublicIP) by DeviceName)\n    on DeviceId\n| summarize LatestEvent = arg_max(TimeGenerated, *) by FileName, UserId = InitiatingProcessAccountUpn, InstanceUrl\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    LatestEvent,\n    UserId,\n    PublicIP,\n    FolderPath,\n    InstanceUrl,\n    AccountName,\n    UPNSuffix,\n    CloudAppId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Subresource Integrity (SRI) Not Implemented\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"informational\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"Subresource Integrity (SRI) Not Implemented\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Malware writers often use windows system process names like svchost.exe to hide malicious activities. Query searches for execution of process svchost.exe, filtering out execution by well-known SIDs and from legitimate path.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n| where NewProcessName endswith \"\\\\svchost.exe\"\n| where SubjectUserSid !in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\")\n| where NewProcessName !has \":\\\\Windows\\\\System32\"\n| where NewProcessName !has \":\\\\Windows\\\\Syswow64\"\n| summarize minTimeGenerated=min(TimeGenerated), maxTimeGenerated=max(TimeGenerated), count() by Computer, SubjectUserName, NewProcessName, CommandLine, Account\n| project minTimeGenerated , maxTimeGenerated , count_ , Computer , SubjectUserName , NewProcessName , CommandLine, Account\n| extend NTDomain = tostring(split(Account,'\\\\',0)[0]), Name = tostring(split(Account,'\\\\',1)[0])\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies a message containing a malware attachment that was delivered.\n Topic: ProofPointTap"}, {"role": "assistant", "content": "ProofPointTAPMessagesDelivered_CL\n| mv-expand todynamic(threatsInfoMap_s)\n| mv-expand todynamic(messageParts_s)\n| extend threatType = tostring(threatsInfoMap_s.threatType), classification = tostring(threatsInfoMap_s.classification)\n| extend filename = tostring(messageParts_s.filename)\n| where threatType =~ \"attachment\" and classification =~ \"malware\"\n| summarize filenames = make_set(filename), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by TimeGenerated, Sender = sender_s, SenderIPAddress = senderIP_s, Recipient = recipient_s, threatType, classification,  Subject = subject_s\n| mv-expand todynamic(Recipient)\n| extend RecipientName = tostring(split(Recipient, \"@\")[0]), RecipientUPNSuffix = tostring(split(Recipient, \"@\")[1])\n| extend SenderName = tostring(split(Sender, \"@\")[0]), SenderUPNSuffix = tostring(split(Sender, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create an incident when the account entity presents a specific tag. If the tag is present, an incident should be created and marked with highest priority. Topic: Vectra XDR"}, {"role": "assistant", "content": "Entities_Data_CL\n| where type_s == \"account\"\n| extend Tags = todynamic(tags_s)\n| where set_has_element(Tags, \"MDR - Customer Escalation\")\n| summarize arg_max(['last_modified_timestamp_t'], *) by ['name_s']\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies when a process execution command-line indicates that a registry value is written to allow for later execution a malicious script\n References: https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/\n Topic: Detections"}, {"role": "assistant", "content": "let cmdTokens0 = dynamic(['vbscript','jscript']);\nlet cmdTokens1 = dynamic(['mshtml','RunHTMLApplication']);\nlet cmdTokens2 = dynamic(['Execute','CreateObject','RegRead','window.close']);\n(union isfuzzy=true \n(SecurityEvent\n| where TimeGenerated >= ago(14d)\n| where EventID == 4688\n| where CommandLine has @'\\Microsoft\\Windows\\CurrentVersion'\n| where not(CommandLine has_any (@'\\Software\\Microsoft\\Windows\\CurrentVersion\\Run', @'\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce'))\n// If you are receiving false positives, then it may help to make the query more strict by uncommenting one or both of the lines below to refine the matches\n//| where CommandLine has_any (cmdTokens0)\n//| where CommandLine has_all (cmdTokens1)\n| where CommandLine has_all (cmdTokens2)\n| project TimeGenerated, Computer, Account, Process, NewProcessName, CommandLine, ParentProcessName, _ResourceId\n),\n(WindowsEvent\n| where TimeGenerated >= ago(14d)\n| where EventID == 4688 and EventData has_all(cmdTokens2) and  EventData has @'\\Microsoft\\Windows\\CurrentVersion'\n| where not(EventData has_any (@'\\Software\\Microsoft\\Windows\\CurrentVersion\\Run', @'\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce'))\n| extend CommandLine = tostring(EventData.CommandLine)\n| where CommandLine has @'\\Microsoft\\Windows\\CurrentVersion'\n| where not(CommandLine has_any (@'\\Software\\Microsoft\\Windows\\CurrentVersion\\Run', @'\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce'))\n// If you are receiving false positives, then it may help to make the query more strict by uncommenting one or both of the lines below to refine the matches\n//| where CommandLine has_any (cmdTokens0)\n//| where CommandLine has_all (cmdTokens1)\n| where CommandLine has_all (cmdTokens2)\n| extend Account =  strcat(EventData.SubjectDomainName,\"\\\\\", EventData.SubjectUserName)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1])\n| extend ParentProcessName = tostring(EventData.ParentProcessName)  \n| project TimeGenerated, Computer, Account, Process, NewProcessName, CommandLine, ParentProcessName, _ResourceId)\n| extend Name = tostring(split(Account, \"\\\\\")[1]), NTDomain = tostring(split(Account, \"\\\\\")[0])\n| extend DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')), HostName = tostring(split(Computer, '.', 0)[0]))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checks if Sonrai tickets have been updated. \nIt uses the action type to check if a ticket has been updated\n Topic: SonraiSecurity"}, {"role": "assistant", "content": "Sonrai_Tickets_CL\n| where action_d == 5\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for uncategorized resources.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'swgweb'\n| where WebCategories contains 'Uncategorized'\n| where Action =~ 'allow'\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert leverages Defender for IoT to detect Illegal function codes in SCADA equipment indicating improper application configuration or malicious activity such using illegal values within a protocol to exploit a PLC vulnerability.\n Topic: IoTOTThreatMonitoringwithDefenderforIoT"}, {"role": "assistant", "content": "let alertList = dynamic([\"Function Code Not Supported by Outstation\", \"Illegal BACNet message\", \"Illegal Connection Attempt on Port 0\", \"Illegal DNP3 Operation\", \"Illegal MODBUS Operation (Exception Raised by Master)\",  \"Illegal MODBUS Operation (Function Code Zero)\", \"Incorrect Parameter Sent to Outstation\", \"Initiation of an Obsolete Function Code (Initialize Data)\", \"Initiation of an Obsolete Function Code (Save Config)\", \"Modbus Exception\", \"Unknown Object Sent to Outstation\", \"Usage of a Reserved Function Code\",  \"Usage of Improper Formatting by Outstation\", \"Usage of Reserved Status Flags (IIN)\", \"Unauthorized communication was detected by a User Defined Protocol Rule\", \"Unauthorized Operation was detected by a User Defined whitelist Alert\", \"Illegal Protocol Version\", \"New Activity Detected - LonTalk Network Variable\", \"New Activity Detected - Ovation Data Request\", \"New Activity Detected - Read/Write Command (AMS Index Group)\", \"New Activity Detected - Read/Write Command (AMS Index Offset)\", \"New Activity Detected - Unauthorized DeltaV Message Type\", \"New Activity Detected - Unauthorized DeltaV ROC Operation\", \"New Activity Detected - Using AMS Protocol Command\", \"New Activity Detected - Using Siemens SICAM Command\", \"New Activity Detected - Using Suitelink Protocol command\", \"New Activity Detected - Using Suitelink Protocol sessions\", \"New Activity Detected - Using Yokogawa VNetIP Command\", \"Omron FINS Unauthorized Command\", \"Toshiba Computer Link Unauthorized Command\", \"Unauthorized ABB Totalflow File Operation\", \"Unauthorized ABB Totalflow Register Operation\", \"Unauthorized Access to Siemens S7 Plus Object\", \"Unauthorized BACNet Object Access\", \"Unauthorized BACNet Route\", \"Unauthorized Emerson ROC Operation\", \"Unauthorized GE SRTP File Access\", \"Unauthorized GE SRTP Protocol Command\", \"Unauthorized GE SRTP System Memory Operation\", \"Unauthorized Mitsubishi MELSEC Command\", \"Unauthorized MMS Service\", \"Unauthorized OPC UA Activity\", \"Unauthorized OPC UA Request/Response\", \"Unauthorized Profinet Frame Type\", \"Unauthorized SAIA S-Bus Command\", \"Unauthorized Siemens S7 Execution of Control Function\", \"Unauthorized Siemens S7 Execution of User Defined Function\", \"Unauthorized Siemens S7 Plus Block Access\", \"Unauthorized Siemens S7 Plus Operation\", \"Unauthorized SNMP Operation\", \"Unpermitted Modbus Schneider Electric Extension\", \"Unpermitted Usage of ASDU Types\", \"Unpermitted Usage of DNP3 Function Code\", \"Unpermitted Usage of Modbus Function Code\", \"Unauthorized Operation was detected by a User Defined Rule\", \"Unauthorized PLC Configuration Read\", \"Unauthorized PLC Programming\", \"Unauthorized PLC Configuration Write\", \"Unauthorized PLC Program Upload\", \"Slave Device Received Illegal\"]);\nSecurityAlert\n| where ProviderName == \"IoTSecurity\"\n| where AlertName has_any (alertList)\n| extend ExtendedProperties = parse_json(ExtendedProperties)\n| where tostring(ExtendedProperties.isNew) == \"True\"\n| extend DeviceId = tostring(ExtendedProperties.DeviceId), \n         SourceDeviceAddress = tostring(ExtendedProperties.SourceDeviceAddress), \n         DestDeviceAddress = tostring(ExtendedProperties.DestinationDeviceAddress), \n         RemediationSteps = tostring(parse_json(RemediationSteps)[0]), \n         Protocol = tostring(ExtendedProperties.Protocol), \n         AlertManagementUri = tostring(ExtendedProperties.AlertManagementUri)\n| project\n  TimeGenerated,\n  DeviceId,\n  ProductName,\n  ProductComponentName,\n  AlertSeverity,\n  AlertName,\n  Description,\n  Protocol,\n  SourceDeviceAddress,\n  DestDeviceAddress,\n  RemediationSteps,\n  Tactics,\n  Entities,\n  VendorOriginalId,\n  AlertLink,\n  AlertManagementUri,\n  Techniques\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for server TLS errors.\n Topic: Cloudflare"}, {"role": "assistant", "content": "let err_tls = dynamic(['UNKNOWN', 'INTERNAL_ERROR', 'INVALID_CONFIG', 'INVALID_SNI', 'HANDSHAKE_FAILED']);\nCloudflare\n| where TimeGenerated > ago(24h)\n| where OriginTlsStatus in~ (err_tls)\n| extend IPCustomEntity = SrcIpAddr\n| extend UrlCustomEntity = ClientRequestURI\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The rule identifies anomalous pattern in network session traffic based on previously seen data, different Device Action, Network Protocol, Network Direction or overall volume. The rule utilize [ASIM](https://aka.ms/AboutASIM) normalization, and is applied to any source which supports the ASIM Network Session schema\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "let min_t = ago(14d);\nlet max_t = now();\nlet dt = 1d;\nlet fieldForDvcAction = \"DvcAction\";\nlet fieldForNetworkDirection = \"NetworkDirection\";\nlet fieldForNetworkProtocol = \"NetworkProtocol\";\nlet AnomalyThreshold = 2.5;\nlet eps = materialize (_Im_NetworkSession | project TimeGenerated | where TimeGenerated > ago(5m) | count | extend Count = Count/300);\nlet maxSummarizedTime = toscalar (\n    union isfuzzy=true \n        (\n            NetworkCustomAnalytics_protocol_CL\n                | where EventTime_t > min_t\n                | summarize max_TimeGenerated=max(EventTime_t)\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\n        ),\n        (\n            print(min_t)\n            | project max_TimeGenerated = print_0\n        )\n      | summarize maxTimeGenerated = max(max_TimeGenerated) \n    );\nlet nosummary = materialize(\n              union isfuzzy=true \n                (\n                    NetworkCustomAnalytics_protocol_CL\n                    | where EventTime_t > ago(1d) \n                    | project v = int(2)\n                ),\n                (\n                    print int(1) \n                    | project v = print_0\n                )\n                | summarize maxv = max(v)\n                | extend nosum = (maxv > 1)\n              );\nlet allData = union isfuzzy=true \n    (\n        (datatable(exists:int, nosum:bool)[1,false] | where toscalar(eps) > 1000 | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=todatetime(ago(2d)), endtime=now())\n        | where TimeGenerated > maxSummarizedTime\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        (datatable(exists:int, nosum:bool)[1,false] | where toscalar(eps) between (501 .. 1000) | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=todatetime(ago(3d)), endtime=now())\n        | where TimeGenerated > maxSummarizedTime\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        (datatable(exists:int, nosum:bool)[1,false] | where toscalar(eps) <= 500 | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=todatetime(ago(4d)), endtime=now())\n        | where TimeGenerated > maxSummarizedTime\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        NetworkCustomAnalytics_protocol_CL\n        | where EventTime_t > min_t\n        | project-rename NetworkProtocol=NetworkProtocol_s, DstPortNumber=DstPortNumber_d, DstAppName=DstAppName_s, NetworkDirection=NetworkDirection_s, DvcAction=DvcAction_s, Count=count__d, EventTime=EventTime_t\n        | extend Count = toint(Count),DstPortNumber = toint(DstPortNumber) \n    )\n;\nlet findVolumneBasedAnomaly = allData\n        | make-series total=sum(Count) on EventTime from min_t to max_t step dt\n        | extend (anomalies, score, baseline) = series_decompose_anomalies(total, AnomalyThreshold, -1, 'linefit') \n        | mv-expand anomalies, score, baseline, EventTime, total\n        | extend anomalies = toint(anomalies), score = toint(score), baseline = toint(baseline), EventTime = todatetime(EventTime), total = tolong(total)\n        | where EventTime >= ago(1d)\n        | where score >= 2*AnomalyThreshold\n        ;\nlet findAnomalies = (field:string){\n    allData\n        | where isnotempty(column_ifexists(field,\"\"))\n        | make-series total=sum(Count) on EventTime from min_t to max_t step dt by column_ifexists(field,\"\")\n        | extend (anomalies, score, baseline) = series_decompose_anomalies(total, AnomalyThreshold, -1, 'linefit')\n        | mv-expand anomalies, score, baseline, EventTime, total\n        | extend anomalies = toint(anomalies), score = toint(score), baseline = toint(baseline), EventTime = todatetime(EventTime), total = tolong(total)\n        | where EventTime >= ago(1d)\n        | where score >= 2*AnomalyThreshold\n};\nunion findAnomalies(fieldForDvcAction), findAnomalies(fieldForNetworkDirection), findAnomalies(fieldForNetworkProtocol), findVolumneBasedAnomaly\n| extend anomalyFieldType  = case (isnotempty(column_ifexists(fieldForDvcAction,\"\")), \"DvcAction\",\n                                  isnotempty(column_ifexists(fieldForNetworkDirection,\"\")), \"NetworkDirection\",\n                                  isnotempty(column_ifexists(fieldForNetworkProtocol,\"\")), \"NetworkProtocol\",\n                                  \"TotalVolume\"\n                                ),\n        anomalyFieldValue  = case (isnotempty(column_ifexists(fieldForDvcAction,\"\")), column_ifexists(fieldForDvcAction,\"\"),\n                                  isnotempty(column_ifexists(fieldForNetworkDirection,\"\")), column_ifexists(fieldForNetworkDirection,\"\"),\n                                  isnotempty(column_ifexists(fieldForNetworkProtocol,\"\")), column_ifexists(fieldForNetworkProtocol,\"\"),\n                                  \"Overall\"\n                                )\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies accounts who have failed to logon to the domain multiple times in a row, followed by a successful authentication within a short time frame. Multiple failed attempts followed by a success can be an indication of a brute force attempt or possible mis-configuration of a service account within an environment.\nThe lookback is set to 2h and the authentication window and threshold are set to 1h and 5, meaning we need to see a minimum of 5 failures followed by a success for an account within 1 hour to surface an alert.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let timeRange = 2h;\nlet authenticationWindow = 1h;\nlet authenticationThreshold = 5;\nSecurityEvent\n| where TimeGenerated > ago(timeRange)\n| where EventID in (4624, 4625)\n| where IpAddress != \"-\" and isnotempty(Account)\n| extend Outcome = iff(EventID == 4624, \"Success\", \"Failure\")\n// bin outcomes into 10 minute windows to reduce the volume of data\n| summarize OutcomeCount=count() by bin(TimeGenerated, 10m), Account, IpAddress, Computer, Outcome\n| project TimeGenerated, Account, IpAddress, Computer, Outcome, OutcomeCount\n// sort ready for sessionizing - by account and time of the authentication outcome\n| sort by TimeGenerated asc, Account, IpAddress, Computer, Outcome, OutcomeCount\n| serialize\n// sessionize into failure groupings until either the account changes or there is a success\n| extend SessionStartedUtc = row_window_session(TimeGenerated, timeRange, authenticationWindow, Account != prev(Account) or prev(Outcome) == \"Success\")\n// count the failures in each session\n| summarize FailureCountBeforeSuccess=sumif(OutcomeCount, Outcome == \"Failure\"), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), make_list(Outcome, 128), make_set(Computer, 128), make_set(IpAddress, 128) by SessionStartedUtc, Account\n// the session must not start with a success, and must end with one\n| where array_index_of(list_Outcome, \"Success\") != 0\n| where array_index_of(list_Outcome, \"Success\") == array_length(list_Outcome) - 1\n| project-away SessionStartedUtc, list_Outcome\n// where the number of failures before the success is above the threshold\n| where FailureCountBeforeSuccess >= authenticationThreshold\n// expand out ip and computer for customer entity assignment\n| mv-expand set_IpAddress, set_Computer\n| extend IpAddress = tostring(set_IpAddress), Computer = tostring(set_Computer)\n| extend timestamp=StartTime, NTDomain = split(Account, '\\\\', 0)[0], Name = split(Account, '\\\\', 1)[0], HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule is triggered when possible ransomware activity is detected on host.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where EventMessage has 'Suspected ransomware'\n| extend HostCustomEntity = DstHostname, MalwareCustomEntity = ThreatName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checks if Sonrai tickets have been snoozed. \nIt uses the action type to check if a ticket has been snoozed\n Topic: SonraiSecurity"}, {"role": "assistant", "content": "Sonrai_Tickets_CL\n| where action_d == 6\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Several enumeration API calls were executed by the same identity. This could be an attacker trying to enumerate the compromised user/token permissions. Verify with the user identity that this activity is legitimate.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where (EventName startswith \"List\" or EventName startswith \"Describe\" or EventName startswith \"Get\")\n| where SourceIpAddress !has \"amazonaws.com\" and UserAgent has \"aws-cli\"\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n| summarize timestamp=arg_max(timestamp,*), enum_events=dcount(EventName), num_regions=dcount(AWSRegion) by bin(TimeGenerated,24h), IPCustomEntity, AccountCustomEntity\n| where enum_events > 3\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies clients with high reverse DNS counts, which could be carrying out reconnaissance or discovery activity. This helps in detecting the possible initial phases of an attack, like discovery and reconnaissance. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let threshold = 10;\nlet stime = 10d;\nlet etime = 1d;\nlet SearchDomain = dynamic([\"in-addr.arpa\"]);\n_Im_Dns(starttime=ago(etime), domain_has_any=SearchDomain)\n| summarize\n  StartTimeUtc = min(TimeGenerated),\n  EndTimeUtc = max(TimeGenerated),\n  DNSQueryCount=dcount(DnsQuery)\n  by SrcIpAddr\n| where DNSQueryCount > threshold\n| project StartTimeUtc, EndTimeUtc, SrcIpAddr, DNSQueryCount \n| join kind=leftanti (_Im_Dns(starttime=ago(stime), endtime=ago(etime), domain_has_any=SearchDomain)\n  | summarize DNSQueryCount=dcount(DnsQuery) by SrcIpAddr, bin(TimeGenerated, 1d)\n  | where DNSQueryCount > threshold\n  | project SrcIpAddr, DNSQueryCount\n  )\n  on SrcIpAddr\n| join kind=inner (_Im_Dns(starttime=ago(etime), domain_has_any=SearchDomain)\n  | summarize DNSQueries=make_set(DnsQuery, 1000) by SrcIpAddr)\n  on SrcIpAddr\n| extend DNSQuerythreshold = threshold\n| project-away SrcIpAddr1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects log file deleting activity.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "let lbtime = 5m;\nCiscoISEEvent\n| where TimeGenerated > ago(lbtime)\n| where EventId in ('58015', '59101', '59102')\n| project TimeGenerated, DvcHostname, DvcIpAddr, DstUserName\n| extend HostCustomEntity = DvcHostname\n| extend IPCustomEntity = DvcIpAddr\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare urlhostname requests.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "ZPAEvent\n| where isnotempty(UrlHostname)\n| summarize url = count()by UrlHostname\n| top 20 by url asc \n| extend UrlCustomEntity = UrlHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Created to detect new threat events from the data in SailPointIDN_Events.\n Topic: SailPointIdentityNow"}, {"role": "assistant", "content": "declare query_parameters(lbperiod:timespan = 14d, technicalName:string = \"ENTITLEMENT_ADD_FAILED\", type:string = 'ACCESS_ITEM');\n  SailPointIDN_Events_CL\n  | where TimeGenerated > ago(lbperiod)\n  | where type_s == type\n  | where technicalName_s == technicalName\n  | where status_s == \"FAILED\"\n  | sort by created_t\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects put or get files from one source in short timeframe \n Topic: Tomcat"}, {"role": "assistant", "content": "let p = TomcatEvent\n| where HttpRequestMethod in~ ('POST', 'PUT')\n| sort by EventStartTime asc\n| summarize post_time=min(EventStartTime) by SrcIpAddr, tostring(UrlOriginal);\nTomcatEvent\n| where HttpRequestMethod =~ 'GET'\n| sort by EventStartTime asc\n| summarize get_time=min(EventStartTime) by SrcIpAddr, tostring(UrlOriginal)\n| join kind=innerunique (p) on UrlOriginal, SrcIpAddr\n| extend second = datetime_diff('second',get_time,post_time)\n| where second between (1 .. 300)\n| project second, post_time, get_time, SrcIpAddr, UrlOriginal\n| extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = tostring(UrlOriginal)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule detects any registry value creation or modification of Windows firewall registry keys to allow network traffic. This could be an indication of defense evasion by an adversary to allow network traffic to/from a compromised host.\n Topic: Malware Protection Essentials"}, {"role": "assistant", "content": "// List of Windows Firewall registry keys to monitor\nlet firewallRegistryList = dynamic([\n      'HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\SharedAccess\\\\Parameters\\\\FirewallPolicy\\\\RestrictedServices\\\\Static\\\\System',\n      'HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\SharedAccess\\\\Parameters\\\\FirewallPolicy\\\\RestrictedServices\\\\Configurable\\\\System',\n      'HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\SharedAccess\\\\Defaults\\\\FirewallPolicy\\\\FirewallRules',\n      'HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\WindowsFirewall'\n  ]);\n_ASim_RegistryEvent\n| where EventType in ('RegistryValueSet', 'RegistryKeyCreated') \n| where RegistryKey has_any (firewallRegistryList) and RegistryValueData has_all ('Action=Allow', 'Active=TRUE')\n| project\n    TimeGenerated,\n    DvcHostname,\n    ActorUsername,\n    ActorUsernameType,\n    ActingProcessId,\n    ActingProcessName,\n    ActingProcessCommandLine,\n    RegistryKey,\n    RegistryValue,\n    RegistryValueType,\n    RegistryValueData\n| extend HostName = tostring(split(DvcHostname, '.')[0])\n| extend DnsDomain = tostring(strcat_array(array_slice(split(DvcHostname, '.'), 1, -1), '.'))\n| extend Username = iff(tostring(ActorUsernameType) == 'Windows', tostring(split(ActorUsername, '\\\\')[1]), ActorUsername)\n| extend NTDomain = iff(tostring(ActorUsernameType) == 'Windows', tostring(split(ActorUsername, '\\\\')[0]), ActorUsername)\n| extend Username = iff(tostring(ActorUsernameType) == 'UPN', tostring(split(ActorUsername, '@')[0]), Username)\n| extend UPNSuffix = iff(tostring(ActorUsernameType) == 'UPN', tostring(split(ActorUsername, '@')[1]), '')\n| extend RegHive = tostring(split(RegistryKey, '\\\\')[0]), RegKey = tostring(strcat_array(array_slice(split(RegistryKey, '\\\\'), 1, -1), '\\\\')) \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match across various data feeds for domains related to an actor tracked by Microsoft as Star Blizzard.\n Topic: Detections"}, {"role": "assistant", "content": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/SEABORGIUMIOC.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet DomainNames = (iocs | where Type =~ \"domainname\"| project IoC);\n(union isfuzzy=true\n(CommonSecurityLog\n| parse Message with * '(' DNSName ')' *\n| where DNSName in~ (DomainNames)\n| extend Account = SourceUserID, Computer = DeviceName, IPAddress =  DestinationIP\n),\n(_Im_Dns (domain_has_any=DomainNames)\n| extend DNSName = DnsQuery\n| extend IPAddress =  SrcIpAddr, Computer = Dvc\n),\n(_Im_WebSession (url_has_any=DomainNames)\n| extend DNSName = tostring(parse_url(Url)[\"Host\"])\n| extend IPAddress =  SrcIpAddr, Computer = Dvc\n),\n(VMConnection\n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| where DNSName  in~ (DomainNames)\n| extend IPAddress = RemoteIp\n),\n(DeviceNetworkEvents\n| where RemoteUrl  has_any (DomainNames)\n| extend IPAddress = RemoteIP\n| extend Computer = DeviceName\n),\n(EmailUrlInfo\n| where Url has_any (DomainNames)\n| join (EmailEvents\n| where EmailDirection == \"Inbound\" ) on NetworkMessageId\n| extend IPAddress = SenderIPv4\n| extend Account = RecipientEmailAddress\n),\n(AzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (DomainNames)\n| extend DNSName = DestinationHost\n| extend IPAddress = SourceHost\n)\n)\n| extend AccountName = tostring(split(Account, \"@\")[0]), AccountUPNSuffix = tostring(split(Account, \"@\")[1])\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, \"@\")[0]), AccountUPNSuffix = tostring(split(Account, \"@\")[1])\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for dormant user dormant.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "VMwareESXi\n| where TimeGenerated > ago(30d)\n| where SyslogMessage has_all ('UserLoginSessionEvent', 'logged in')\n| extend SrcUsername = extract(@'User\\s(.*?)@\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', 1, SyslogMessage)\n| summarize LastLoginTime=max(TimeGenerated) by SrcUsername\n| extend AccountCustomEntity = SrcUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Amazon Relational Database Service (RDS) is scalable relational database in the cloud.\nIf your organization have one or more AWS RDS Databases running, monitoring changes to especially internet facing AWS RDS (Relational Database Service)\nOnce alerts triggered, validate if changes observed are authorized and adhere to change control policy.\nMore information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255 \nand RDS API Reference Docs: https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AuthorizeDBSecurityGroupIngress\",\"CreateDBSecurityGroup\",\"DeleteDBSecurityGroup\",\"RevokeDBSecurityGroupIngress\"]);\nAWSCloudTrail\n| where EventName in~ (EventNameList)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements\n| extend timestamp = StartTimeUtc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies new MFA methods added to an account within 6 hours of a medium or high risk sign-in session. It includes UEBA logs IdentityInfo and BehaviorAnalytics for context.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "let timeDelta = 6h;\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet mfaMethodAdded=AuditLogs\n| where TimeGenerated between (starttime .. endtime)\n| where OperationName =~ \"Update user\" \n| where TargetResources has \"StrongAuthenticationPhoneAppDetail\"\n| extend AccountUpn = tostring(TargetResources[0].userPrincipalName)\n| extend AccountObjectId = tostring(TargetResources[0].id)\n| project MfaAddedTimestamp=TimeGenerated,AccountUpn,AccountObjectId;\nlet usersWithNewMFAMethod=mfaMethodAdded\n| distinct AccountObjectId;\nlet hasusersWithNewMFAMethod = isnotempty(toscalar(usersWithNewMFAMethod));\nlet riskySignins=SigninLogs\n| where TimeGenerated between ((starttime-timeDelta) .. endtime)\n| where hasusersWithNewMFAMethod\n| where UserId in (usersWithNewMFAMethod) \n| where RiskLevelDuringSignIn has_any ('medium', 'high')\n| where AppDisplayName in~ (\"Office 365 Exchange Online\", \"OfficeHome\") \n| where isnotempty(Id) \n| project SignInTimestamp=TimeGenerated, AppDisplayName, CorrelationId, AccountObjectId=UserId, IPAddress, RiskLevelDuringSignIn \n| summarize SignInTimestamp=argmin(SignInTimestamp,*) by AppDisplayName, CorrelationId, AccountObjectId, IPAddress, RiskLevelDuringSignIn;\nmfaMethodAdded \n| join riskySignins on AccountObjectId \n| where  MfaAddedTimestamp - SignInTimestamp < timeDelta //Time delta between risky sign-in and device registration less than 6h \n| project-away AccountObjectId1\n| extend timestamp = MfaAddedTimestamp, AccountCustomEntity = tolower(AccountUpn), IPCustomEntity = IPAddress\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n    | project-rename AccountCustomEntity = AccountUPN\n) on AccountCustomEntity\n| join kind=leftouter (\n    BehaviorAnalytics\n    | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n    | where isnotempty(SourceIPAddress)\n    | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress\n    | project-rename IPAddress = SourceIPAddress\n    | summarize\n        UsersInsights = make_set(UsersInsights, 1000),\n        DevicesInsights = make_set(DevicesInsights, 1000),\n        IPInvestigationPriority = sum(InvestigationPriority)\n    by IPAddress)\non IPAddress\n| extend Account_0_Name = AccountCustomEntity\n| extend Account_0_AadUserId = AccountObjectId\n| extend IP_0_Address = IPAddress\n| extend UEBARiskScore = IPInvestigationPriority\n| sort by UEBARiskScore desc \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests using not the latest version of OAuth protocol.\n Topic: PingFederate"}, {"role": "assistant", "content": "PingFederateEvent\n| where isnotempty(DeviceCustomString3)\n| extend proto = extract(@'(OAuth)', 1, DeviceCustomString3)\n| extend ver = extract(@'(\\d+)', 1, DeviceCustomString3)\n| where proto =~ 'OAuth'\n| where ver !~ '20'\n| extend AccountCustomEntity = DstUserName\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects failed events based on created time.\n Topic: SailPointIdentityNow"}, {"role": "assistant", "content": "declare query_parameters(lbperiod:timespan = 14d, createdTime:string = \"2020-08-19T20:34:38.676Z\");\n  SailPointIDN_Events_CL\n  | where TimeGenerated > ago(lbperiod)\n  | where status_s == \"FAILED\"\n  | where created_t >= created_t\n  | sort by created_t\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple server errors from one source in short timeframe\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "let threshold = 100;\nOracleWebLogicServerEvent\n| where HttpStatusCode >= 500 and HttpStatusCode <= 599 \n| summarize MultipleServerErrors = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleServerErrors > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for ransomware threats.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where TimeGenerated > ago(24h)\n| where isnotempty(RansomwareName)\n| project DetectionTime, DstUserName, SrcFileName, RansomwareName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when an admin or app owner account adds a new credential to an Application or Service Principal where there was no previous verify KeyCredential associated.\nIf a threat actor obtains access to an account with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.\nAdditional information on OAuth Credential Grants can be found in RFC 6749 Section 4.4 or https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where OperationName has_any (\"Add service principal\", \"Certificates and secrets management\")\n| where Result =~ \"success\"\n| where tostring(InitiatedBy.user.userPrincipalName) has \"@\" or tostring(InitiatedBy.app.displayName) has \"@\"\n| mv-apply TargetResource = TargetResources on \n  (\n    where TargetResource.type =~ \"Application\"\n    | extend targetDisplayName = tostring(TargetResource.displayName),\n             targetId = tostring(TargetResource.id),\n             targetType = tostring(TargetResource.type),\n             keyEvents = TargetResource.modifiedProperties\n  )\n|  mv-apply Property = keyEvents on \n (\n  where Property.displayName =~ \"KeyDescription\"\n  | extend new_value_set = parse_json(tostring(Property.newValue)),\n           old_value_set = parse_json(tostring(Property.oldValue))\n )\n| where old_value_set == \"[]\"\n| mv-expand new_value_set\n| parse new_value_set with * \"KeyIdentifier=\" keyIdentifier:string \",KeyType=\" keyType:string \",KeyUsage=\" keyUsage:string \",DisplayName=\" keyDisplayName:string \"]\" *\n| where keyUsage == \"Verify\"\n | mv-apply AdditionalDetail = AdditionalDetails on \n  (\n    where AdditionalDetail.key =~ \"User-Agent\"\n    | extend UserAgent = tostring(AdditionalDetail.value)\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n//| where targetType =~ \"Application\" // or targetType =~ \"ServicePrincipal\"\n| project-away new_value_set, old_value_set\n| project-reorder TimeGenerated, OperationName, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, UserAgent, targetDisplayName, targetId, targetType, keyDisplayName, keyType, keyUsage, keyIdentifier, CorrelationId, TenantId\n| extend InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects a scheduled task, created/updated remotely, using the ATSVC name pipe. \n Threat actors are using scheduled tasks for establishing persistence and moving laterally through the network.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "SecurityEvent\n  | where EventID == 5145 and ShareName==\"\\\\\\\\*\\\\IPC$\" and RelativeTargetName == \"atsvc\"\n  | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, SubjectUserName, ShareName, RelativeTargetName, IpAddress\n  | extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n  | extend UserName = tostring(split(SubjectUserName, '@', 0)[0]), UPNSuffix = tostring(split(SubjectUserName, '@', 1)[0])\n  | extend Account_0_Name = UserName\n  | extend Account_0_UPNSuffix = UPNSuffix\n  | extend Host_0_HostName = HostName\n  | extend Host_0_DnsDomain = DnsDomain\n  | extend IP_0_Address = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects alert events.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where EventType has \"ALERT_CENTER\"\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for events where threats were detected and not blocked, cleaned or deleted.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "let lbtime = 24h;\nMcAfeeEPOEvent\n| where TimeGenerated > ago(lbtime)\n| where EventId in ('1095', '1096', '1099', '34937', '35102', '34938', '35106', '35111', '35117')\n| extend EventMessage = case(EventId == '1095', \"Access Protection rule violation detected and NOT blocked\",\n                              EventId == '1096', \"Port blocking rule violation detected and NOT blocked\",\n                              EventId == '1099', \n                              \"Buffer Overflow detected and NOT blocked\",\n                              EventId == '34937', \"Script security violation detected, AMSI would block\",\n                              EventId == '35102', \"Adaptive Threat Protection Would Block\",\n                              EventId == '34938', \"Script security violation detected, AMSI would delete\",\n                              EventId == '35106', \"Adaptive Threat Protection Would Clean\", \n                              EventId == '35111', \"Adaptive Threat Protection Would Contain\",\n                              \"Adaptive Threat Protection Would Block Source\")\n| project DvcIpAddr, EventId, EventMessage\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects potential attempts to remotely access to the print spooler service on Active Directory Domain Controllers which could indicate an exploitation of MS-RPRN printer bug from a server that is configured with unconstrained delegation.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// Enter a reference list of hostnames for your DC servers\n// let DCServersList = dynamic ([\"DC01.domain.local\",\"DC02.domain.local\"]);\n// Enter a reference list of IP addresses for your unconstrained delegation servers\n// let UnconstrainedServersIPList = dynamic ([\"10.1.0.7\",\"10.1.0.45\"]);\nSecurityEvent\n// | where Computer in (DCServersList)\n// | where IpAddress  in (UnconstrainedServersIPList)\n| where EventID == 5145 and ShareName == \"\\\\\\\\*\\\\IPC$\" and RelativeTargetName == \"spoolss\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by Computer, SubjectUserName, IpAddress, ShareName, RelativeTargetName, Type, SubjectUserSid\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = SubjectUserName\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare process run by users.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where TimeGenerated > ago(24h)\n| where isnotempty(ActingProcessFileInternalName)\n| summarize count() by ActingProcessFileInternalName, ActorUsername\n| top 25 by count_ asc\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected failed brute attempt on S3 bucket. If it is not an anonymous principle, verify with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"GetObject\" and not(isempty(ErrorCode) and isempty(ErrorMessage))\n| where UserIdentityAccountId == \"ANONYMOUS_PRINCIPAL\" or UserIdentityAccessKeyId <> RecipientAccountId\n| extend bucketName = tostring(parse_json(RequestParameters).bucketName), keyName = tostring(parse_json(RequestParameters).key)\n| summarize arg_max(TimeGenerated, *), failed_attempts = dcount(keyName) by UserIdentityAccountId, SourceIpAddress, bucketName\n| where failed_attempts > 20\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName, bucketName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for failed sign-in attempts to disabled accounts summarized by the IP originating IP address.\n Topic: Cloud Identity Threat Protection Essentials"}, {"role": "assistant", "content": "SigninLogs \n| where ResultType == \"50057\" \n| where ResultDescription =~ \"User account is disabled. The account has been disabled by an administrator.\" \n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), numberAccountsTargeted = dcount(UserPrincipalName), \nnumberApplicationsTargeted = dcount(AppDisplayName), accountSet = make_set(UserPrincipalName, 100), applicationSet=make_set(AppDisplayName, 100), \nnumberLoginAttempts = count() by IPAddress\n| extend timestamp = StartTime\n| order by numberLoginAttempts desc\n| extend IP_0_Address = IPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for users with suspicious spikes in the number of files accessed that relate to topics commonly accessed as part of Business Email Compromise (BEC) attacks.\nThe query looks for access to files in storage that relate to topics such as invoices or payments, and then looks for users accessing these files in significantly higher numbers than in the previous 14 days. Incidents raised by this analytic should be investigated to see if the user accessing these files should be accessing them, and if the volume they accessed them at was related to a legitimate business need. \nThis query contains thresholds to reduce the chance of false positives, these can be adjusted to suit individual environments. In addition false positives could be generated by legitimate, scheduled actions that occur less often than every 14 days, additional exclusions can be added for these actions on username or IP address entities. This query uses the imFileEvent schema from ASIM, you will first need to ensure you have ASIM deployed in your environment. Ref https://learn.microsoft.com/azure/sentinel/normalization-about-parsers\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "let BEC_Keywords = dynamic([ 'invoice','payment','paycheck','transfer','bank statement','bank details','closing','funds','bank account','account details','remittance','purchase','deposit',\"PO#\",\"Zahlung\",\"Rechnung\",\"Paiement\", \"virement bancaire\",\"Bankuberweisung\",'hacked','phishing']);\n// Adjust this threshold based on your environment\nlet sensitivity = 2.5;\nlet Events = materialize(imFileEvent\n| where TimeGenerated between(startofday(ago(14d))..endofday(ago(0d)))\n| where User !~ \"app@sharepoint\"\n| where EventType =~ \"FileAccessed\"\n| extend OriginalEvent = column_ifexists(\"EventOriginalType\",\"Unknown\")\n| where OriginalEvent !~ \"FileSyncDownloadedFull\"\n| where EventProduct in (\"SharePoint 365\", \"Azure File Storage\", \"OneDrive\" , \"SharePoint\")\n| where FilePath has_any(BEC_Keywords)\n| extend _AuthDetails = column_ifexists(\"AuthorizationDetails\", \"None\")\n| extend SPuser = case(gettype(_AuthDetails) == \"array\", tostring(todynamic(_AuthDetails)[0].principals[0].id), \"Unknown\")\n| extend User = case(isnotempty(User), User, SPuser)\n| where isnotempty(User));\nEvents\n| summarize dcount(FileName) by User, bin(startofday(TimeGenerated), 1d)\n| summarize CountOfDocs = make_list(dcount_FileName, 10000), TimeStamp = make_list(TimeGenerated, 10000) by User\n| extend (Anomalies, Score, Baseline) = series_decompose_anomalies(CountOfDocs, sensitivity, -1, 'linefit')\n| mv-expand CountOfDocs to typeof(double), TimeStamp to typeof(datetime), Anomalies to typeof(double), Score to typeof(double), Baseline to typeof(long)\n| where Anomalies > 0\n| project TimeStamp, CountOfDocs, Baseline, Score, Anomalies, User\n| join kind=inner(Events | extend TimeStamp = startofday(TimeGenerated)) on TimeStamp, User\n| extend IpAddr = column_ifexists(\"IpAddr\", SrcIpAddr)\n| extend Name = iif(User contains \"@\", split(User, \"@\")[0], split(User, \"\\\\\")[1])\n| extend UPNSuffix = iif(User contains \"@\", split(User, \"@\")[1], \"\")\n| extend NTDomain = iif(User contains \"@\", split(User, \"\\\\\")[0], \"\")\n| project-reorder TimeGenerated, User, EventType, EventResult, EventProduct, FilePath, HttpUserAgent, IpAddr, CountOfDocs, Baseline, Score\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "As well as adding build agents to an existing pool to execute malicious activity within a pipeline, an attacker could create a complete new agent pool and use this for execution.\nAzure DevOps allows for the creation of agent pools with Azure hosted infrastructure or self-hosted infrastructure. Given the additional customizability of self-hosted agents this   detection focuses on the creation of new self-hosted pools.\nTo further reduce false positive rates the detection looks for pools created and deleted relatively quickly (within 7 days by default), as an attacker is likely to remove a malicious pool once used in order to reduce/remove evidence of their activity.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "let lookback = 14d;\nlet timewindow = 7d;\nAzureDevOpsAuditing\n| where TimeGenerated > ago(lookback)\n| where OperationName =~ \"Library.AgentPoolCreated\"\n| extend AgentCloudId = tostring(Data.AgentCloudId)\n| extend PoolType = iif(isnotempty(AgentCloudId), \"Azure VMs\", \"Self Hosted\")\n// Comment this line out to include cloud pools as well\n| where PoolType == \"Self Hosted\"\n| extend AgentPoolName = tostring(Data.AgentPoolName)\n| extend AgentPoolId = tostring(Data.AgentPoolId)\n| extend IsHosted = tostring(Data.IsHosted)\n| extend IsLegacy = tostring(Data.IsLegacy)\n| extend timekey = bin(TimeGenerated, timewindow)\n// Join only with pools deleted in the same window\n| join (AzureDevOpsAuditing\n| where TimeGenerated > ago(lookback)\n| where OperationName =~ \"Library.AgentPoolDeleted\"\n| extend AgentPoolName = tostring(Data.AgentPoolName)\n| extend AgentPoolId = tostring(Data.AgentPoolId)\n| extend timekey = bin(TimeGenerated, timewindow)) on AgentPoolId, timekey\n| project-reorder TimeGenerated, ActorUPN, UserAgent, IpAddress, AuthenticationMechanism, OperationName, AgentPoolName, IsHosted, IsLegacy, Data\n| extend timestamp = TimeGenerated\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Header: X-Frame-Options Missing\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"low\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"SPF Policy Set to Soft Fail\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies Dataverse sign-in activity originating from users with UPN suffixes that have not been seen previously in the last 14 days and are not present on a predefined list of authorized domains. Common internal Power Platform system users are excluded by default. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// Allow list of UPN suffixes allowed by the organization.\nlet allowed_domains = dynamic([\n    'onmicrosoft.com',\n    'microsoft.com'\n    ]);\n// All list of users allowed by the organization\nlet allowed_users = dynamic([\n    'user1@mydomain.com',\n    'user2@mydomain.com'\n    ]);\nlet query_frequency = 1h;\nlet query_lookback = 14d;\nlet historical_users = DataverseActivity\n    | where TimeGenerated between(ago(query_lookback) .. ago(query_frequency))\n    | where Message == 'UserSignIn'\n    | summarize by UserId;\nDataverseActivity\n| where TimeGenerated >= ago (query_frequency)\n| where Message == 'UserSignIn'\n| join kind=leftanti (historical_users) on UserId\n| summarize FirstEvent = min(TimeGenerated), LastEvent = max(TimeGenerated) by UserId, ClientIp, InstanceUrl\n| where isnotempty(ClientIp)\n| extend CloudAppId = int(32780)\n| extend AccountName = tostring(split(UserId, '@')[0])\n| extend UPNSuffix = tostring(split(UserId, '@')[1])\n| where UPNSuffix !in (allowed_domains) and UserId !in (allowed_users)\n| project\n    FirstEvent,\n    LastEvent,\n    UserId,\n    ClientIp,\n    InstanceUrl,\n    AccountName,\n    UPNSuffix,\n    CloudAppId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A rule was created which granted a user access to a large, built-in, group of assets.\n Topic: ZeroNetworks"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nZNSegmentAudit\n| where TimeGenerated > ago(endtime-starttime)\n| where AuditTypeId  in (9,12,20,22,23,24)\n| where DestinationEntityId startswith \"b:\"\n| summarize affectedEntities=make_set(DestinationEntityId) by PerformedByName\n| extend numOfTargetEntities=array_length(affectedEntities)\n| order by numOfTargetEntities desc\n| extend Account_0_Name = PerformedByName\n| extend Host_0_NetBiosName = affectedEntities\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "As seen in attacks such as SolarWinds attackers can look to subvert a build process by controlling build servers. Azure DevOps uses agent pools to execute pipeline tasks. \nAn attacker could insert compromised agents that they control into the pools in order to execute malicious code. This query looks for users adding agents to pools they have not added agents to before, or adding agents to a pool of an OS that has not been added to that pool before. This detection has potential for false positives so has a configurable allow list to allow for certain users to be excluded from the logic.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "let lookback = 14d;\nlet timeframe = 1d;\n// exclude allowed users from query such as the ADO service\nlet allowed_users = dynamic([\"Azure DevOps Service\"]);\nunion\n// Look for agents being added to a pool of a OS type not seen with that pool before\n(AzureDevOpsAuditing\n| where TimeGenerated > ago(lookback) and TimeGenerated < ago(timeframe)\n| where OperationName =~ \"Library.AgentAdded\"\n| where ActorUPN !in (allowed_users)\n| extend AgentPoolName = tostring(Data.AgentPoolName)\n| extend OsDescription = tostring(Data.OsDescription)\n| where isnotempty(OsDescription)\n| extend OsDescription = tostring(split(OsDescription, \"#\", 0)[0])\n| project AgentPoolName, OsDescription\n| join kind=rightanti (AzureDevOpsAuditing\n| where TimeGenerated > ago(timeframe)\n| where OperationName == \"Library.AgentAdded\"\n| extend AgentPoolName = tostring(Data.AgentPoolName)\n| extend OsDescription = tostring(Data.OsDescription)\n| where isnotempty(OsDescription)\n| extend OsDescription = tostring(split(OsDescription, \"#\", 0)[0])) on AgentPoolName, OsDescription),\n// Look for users addeing agents to a pool that they have not added agents to before.\n(AzureDevOpsAuditing\n| where TimeGenerated > ago(lookback) and TimeGenerated < ago(timeframe)\n| extend AgentPoolName = tostring(Data.AgentPoolName)\n| where ActorUPN !in (allowed_users)\n| project AgentPoolName, ActorUPN\n| join kind=rightanti (AzureDevOpsAuditing\n| where TimeGenerated > ago(timeframe)\n| where OperationName == \"Library.AgentAdded\"\n| where ActorUPN !in (allowed_users)\n| extend AgentPoolName = tostring(Data.AgentPoolName)\n) on AgentPoolName, ActorUPN)\n| extend AgentName = tostring(Data.AgentName)\n| extend OsDescription = tostring(Data.OsDescription)\n| extend SystemDetails = Data.SystemCapabilities\n| project-reorder TimeGenerated, OperationName, ScopeDisplayName, AgentPoolName, AgentName, ActorUPN, IpAddress, UserAgent, OsDescription, SystemDetails, Data\n| extend timestamp = TimeGenerated\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected creation of new CRUD IAM policy and usage of one of the attach policy operations (AttachUserPolicy/AttachRolePolicy/AttachGroupPolicy). This might indicate a privilege escalation technique that attackers could use.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\nlet createPolicy =  dynamic([\"CreatePolicy\", \"CreatePolicyVersion\"]);\nlet timeframe = 1d;\nlet lookback = 14d;\n// Creating Master table with all the events to use with materialize for better performance\nlet EventInfo = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName in (EventNameList) or EventName in (createPolicy)\n  | extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\");\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\nlet FullAdminPolicyEvents =  materialize(  EventInfo\n| where TimeGenerated >= ago(lookback)\n| where EventName in (createPolicy)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and (Action contains \"iam:Create\" and (Action contains \"iam:Get\" or Action contains \"iam:List\")  and Action contains \"iam:Update\" and Action contains \"iam:Delete\") and Resource == \"*\" and Condition == \"\"\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn\n| project-rename StartTime = TimeGenerated  );\nlet PolicyAttach = materialize(  EventInfo\n| where TimeGenerated >= ago(timeframe)\n| where EventName in (EventNameList) and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\"/\")[1])\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName,   RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityType , UserIdentityArn, SourceIpAddress, PolicyName\n| extend AttachEvent = pack(\"StartTime\", StartTime, \"EndTime\", EndTime, \"EventName\", EventName, \"UserIdentityType\",   UserIdentityType, \"SourceIpAddress\", SourceIpAddress,\"AccountName\", AccountName, \"AccountUPNSuffix\", AccountUPNSuffix, \"RecipientAccountId\", RecipientAccountId, \"UserIdentityArn\", UserIdentityArn)\n| project EventSource, PolicyName, AttachEvent, AttachEventCount, RecipientAccountId, AccountName, AccountUPNSuffix\n);\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\nFullAdminPolicyEvents\n| join kind=leftouter\n(\n    PolicyAttach\n)\non PolicyName\n| project-away PolicyName1\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects IAM Groups with Administrator Access Permissions.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where Reason =~ 'NEW_ALERT'\n| where Status =~ 'open'\n| where AlertMessage has 'IAM Groups with Administrator Access Permissions'\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query helps identify new, and potentially unapproved applications or bots being added to Teams.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\n  let endtime = todatetime('{{EndTimeISO}}');\n  let lookback = starttime - 14d;\n  // Historical bots from EnrichedMicrosoft365AuditLogs\n  let historical_bots_enriched = EnrichedMicrosoft365AuditLogs\n      | where TimeGenerated between (lookback .. starttime)\n      | where Workload == \"MicrosoftTeams\"\n      | extend AddonName = tostring(parse_json(tostring(AdditionalProperties)).AddonName)\n      | where isnotempty(AddonName)\n      | distinct AddonName;\n  // Historical bots from OfficeActivity\n  let historical_bots_office = OfficeActivity\n      | where TimeGenerated between (lookback .. starttime)\n      | where OfficeWorkload == \"MicrosoftTeams\"\n      | where isnotempty(AddonName)\n      | distinct AddonName;\n  // Find new bots in Enriched Logs\n  let new_bots_enriched = EnrichedMicrosoft365AuditLogs\n      | where TimeGenerated between (starttime .. endtime)\n      | where Workload == \"MicrosoftTeams\"\n      | extend AddonName = tostring(parse_json(tostring(AdditionalProperties)).AddonName)\n      | where AddonName !in (historical_bots_enriched)\n      | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n  // Find new bots in OfficeActivity\n  let new_bots_office = OfficeActivity\n      | where TimeGenerated between (starttime .. endtime)\n      | where OfficeWorkload == \"MicrosoftTeams\"\n      | where isnotempty(AddonName)\n      | where AddonName !in (historical_bots_office)\n      | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n  // Combine both new bots from Enriched Logs and OfficeActivity\n  let CombinedNewBots = new_bots_enriched\n      | union new_bots_office\n      | summarize arg_min(TimeGenerated, *) by AddonName, UserId;\n  // Final output\n  CombinedNewBots\n      | project TimeGenerated, AddonName, UserId, AccountName, AccountUPNSuffix\n      | order by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New auto_generated_page with severity Low found\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL | where severity_s == \"Low\" | where type_s == \"Auto Generated Page\" | where status_s != \"Closed\" or status_s != \"Resolved\" | where remarks_s == \"New auto_generated_page with severity Low found\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create alerts for SailPoint IdentityNow Event Trigger Service.\n Topic: SailPointIdentityNow"}, {"role": "assistant", "content": "declare query_parameters(lbperiod:timespan = 14d, triggerId:string = \"idn:aggregation-accounts-collected\");\n  SailPointIDN_Triggers_CL\n  | where TimeGenerated > ago(lbperiod)\n  | where Metadata_triggerId_s == triggerId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "User account added or removed from a security group by an unauthorized user, pass in a list\n Topic: Windows Security Events"}, {"role": "assistant", "content": "\n// Create DataTable with your own values, example below shows dummy usernames that are authorized and for what domain\nlet List = datatable(AuthorizedUser:string, Domain:string)[\"Bob\", \"Domain\", \"joe\", \"domain\", \"MATT\", \"DOMAIN\"];\nSecurityEvent\n| where EventID in (4728, 4729, 4732, 4733, 4746, 4747, 4751, 4752, 4756, 4757, 4761, 4762)\n| join kind= leftanti (\n    List\n    | project SubjectUserName = tolower(AuthorizedUser), SubjectDomainName = toupper(Domain)\n) on SubjectUserName, SubjectDomainName\n| project TimeGenerated, Computer, Account, SubjectUserName, SubjectDomainName, TargetAccount, EventID, Activity\n| extend timestamp = TimeGenerated, HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = SubjectUserName\n| extend Account_0_NTDomain = SubjectDomainName\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain  \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create Microsoft Sentinel Incident When A Cloned Ven Is Detected\n Topic: IllumioSaaS"}, {"role": "assistant", "content": "Illumio_Auditable_Events_CL\n| union IllumioSyslogAuditEvents  \n| where event_type has 'agent.clone_detected'\n| extend hostname = created_by.agent.hostname,\n        ven_href = created_by.ven.href\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection builds an allow list of historic service connection use by Builds and Releases and compares to recent history, flagging growth of service connection use which are not manually included in the allow list and not historically included in the allow list Build/Release runs.\nThis is to determine if someone is hijacking a build/release and adding many service connections in order to abuse or dump credentials from service connections.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "let starttime = 14d;\nlet endtime = 6h;\n// Ignore Build/Releases with less/equal this number\nlet ServiceConnectionThreshold = 3;\n// New Connections need to exhibit execution of more \"new\" connections than this number.\nlet NewConnectionThreshold = 1;\n// List of Builds/Releases to ignore in your space\nlet BypassDefIds = datatable(DefId:string, Type:string, ProjectName:string)\n[\n//\"103\", \"Release\", \"ProjectA\",\n//\"42\", \"Release\", \"ProjectB\",\n//\"122\", \"Build\", \"ProjectB\"\n];\nlet HistoricDefs = AzureDevOpsAuditing\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where OperationName == \"Library.ServiceConnectionExecuted\"\n| extend DefId = tostring(Data.DefinitionId), Type = tostring(Data.PlanType), ConnectionId = tostring(Data.ConnectionId)\n| summarize HistoricCount = dcount(tostring(ConnectionId)), ConnectionNames = make_set(tostring(Data.ConnectionName))\n  by DefId = tostring(DefId), Type = tostring(Type), ProjectId, ProjectName, ActorUPN;\nAzureDevOpsAuditing\n| where TimeGenerated >= ago(endtime)\n| where OperationName == \"Library.ServiceConnectionExecuted\"\n| extend DefId = tostring(Data.DefinitionId), Type = tostring(Data.PlanType), ConnectionId = tostring(Data.ConnectionId)\n| parse ScopeDisplayName with OrganizationName ' (Organization)'\n| summarize CurrentCount = dcount(tostring(ConnectionId)), ConnectionNames = make_set(tostring(Data.ConnectionName)), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated)\n  by OrganizationName, DefId = tostring(DefId), Type = tostring(Type), ProjectId, ProjectName, ActorUPN\n| where CurrentCount > ServiceConnectionThreshold\n| join (HistoricDefs) on ProjectId, DefId, Type, ActorUPN\n| join kind=anti BypassDefIds on $left.DefId==$right.DefId and $left.Type == $right.Type and $left.ProjectName == $right.ProjectName\n| extend link = iff(\nType == \"Build\", strcat('https://dev.azure.com/', OrganizationName, '/', ProjectName, '/_build?definitionId=', DefId),\nstrcat('https://dev.azure.com/', OrganizationName, '/', ProjectName, '/_release?_a=releases&view=mine&definitionId=', DefId))\n| where CurrentCount >= HistoricCount + NewConnectionThreshold\n| project StartTime, OrganizationName, ProjectName, DefId, link, RecentDistinctServiceConnections = CurrentCount, HistoricDistinctServiceConnections = HistoricCount,\n  RecentConnections = ConnectionNames, HistoricConnections = ConnectionNames1, ActorUPN\n| extend timestamp = StartTime\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies accounts that are added to a privileged group and then quickly removed, which could be a sign of compromise.\n Topic: Detections"}, {"role": "assistant", "content": "let WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$\";\nlet AC_Add =\n(union isfuzzy=true\n(SecurityEvent\n// Event ID related to member addition.\n| where EventID in (4728, 4732,4756)\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n| parse EventData with * '\"MemberName\">' * '=' AccountAdded \",OU\" *\n| where isnotempty(AccountAdded)\n| extend GroupAddedTo = TargetUserName, AddingAccount = Account\n| extend  AccountAdded_GroupAddedTo_AddingAccount = strcat(AccountAdded, \"||\", GroupAddedTo, \"||\", AddingAccount )\n| project AccountAdded_GroupAddedTo_AddingAccount, AccountAddedTime = TimeGenerated\n),\n(WindowsEvent\n// Event ID related to member addition.\n| where EventID in (4728, 4732,4756)\n| extend TargetSid = tostring(EventData.TargetSid)\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n| parse EventData.MemberName with * '\"MemberName\">' * '=' AccountAdded \",OU\" *\n| where isnotempty(AccountAdded)\n| extend TargetUserName = tostring(EventData.TargetUserName)\n| extend AddingAccount =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend GroupAddedTo = TargetUserName\n| extend  AccountAdded_GroupAddedTo_AddingAccount = strcat(AccountAdded, \"||\", GroupAddedTo, \"||\", AddingAccount )\n| project AccountAdded_GroupAddedTo_AddingAccount, AccountAddedTime = TimeGenerated\n)\n);\nlet AC_Remove =\n( union isfuzzy=true\n(SecurityEvent\n// Event IDs related to member removal.\n| where EventID in (4729,4733,4757)\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n| parse EventData with * '\"MemberName\">' * '=' AccountRemoved \",OU\" *\n| where isnotempty(AccountRemoved)\n| extend GroupRemovedFrom = TargetUserName, RemovingAccount = Account\n| extend AccountRemoved_GroupRemovedFrom_RemovingAccount = strcat(AccountRemoved, \"||\", GroupRemovedFrom, \"||\", RemovingAccount)\n| project AccountRemoved_GroupRemovedFrom_RemovingAccount, AccountRemovedTime = TimeGenerated, Computer, AccountRemoved = tolower(AccountRemoved),\nRemovingAccount, RemovingAccountLogonId = SubjectLogonId, GroupRemovedFrom = TargetUserName, TargetDomainName\n),\n(WindowsEvent\n// Event IDs related to member removal.\n| where EventID in (4729,4733,4757)\n| extend TargetSid = tostring(EventData.TargetSid)\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n| parse EventData.MemberName with * '\"MemberName\">' * '=' AccountRemoved \",OU\" *\n| where isnotempty(AccountRemoved)\n| extend TargetUserName = tostring(EventData.TargetUserName)\n| extend RemovingAccount =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend GroupRemovedFrom = TargetUserName\n| extend AccountRemoved_GroupRemovedFrom_RemovingAccount = strcat(AccountRemoved, \"||\", GroupRemovedFrom, \"||\", RemovingAccount)\n| extend RemovedAccountLogonId= tostring(EventData.SubjectLogonId)\n| extend TargetDomainName = tostring(EventData.TargetDomainName)\n| project AccountRemoved_GroupRemovedFrom_RemovingAccount, AccountRemovedTime = TimeGenerated, Computer, AccountRemoved = tolower(AccountRemoved),\nRemovingAccount, RemovedAccountLogonId, GroupRemovedFrom = TargetUserName, TargetDomainName\n));\nAC_Add\n| join kind = inner AC_Remove \non $left.AccountAdded_GroupAddedTo_AddingAccount == $right.AccountRemoved_GroupRemovedFrom_RemovingAccount\n| extend DurationinSecondAfter_Removed = datetime_diff ('second', AccountRemovedTime, AccountAddedTime)\n| where DurationinSecondAfter_Removed > 0\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend RemovedAccountName = tostring(split(AccountRemoved, @\"\\\")[1]), RemovedAccountNTDomain = tostring(split(AccountRemoved, @\"\\\")[0])\n| extend RemovingAccountName = tostring(split(RemovingAccount, @\"\\\")[1]), RemovingAccountNTDomain = tostring(split(RemovingAccount, @\"\\\")[0])\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Every standard app has a port associated with it. This query will identify if destination port associated with destination app is not standard which can be a case of network spoofing attack.\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "_Im_NetworkSession(starttime=ago(1d),endtime=now())\n| where DstAppName in (\"dns\",\"web-browsing\",\"http\",\"ssl\",\"smtp\") and DstPortNumber in (53, 80, 8080, 8000, 443, 8443, 25)\n| extend DstAppName = tolower(DstAppName)\n| where \n        (DstAppName == \"dns\" and not(DstPortNumber == 53)) or\n        (DstAppName in (\"web-browsing\",\"http\") and not(DstPortNumber in (80, 8080, 8000))) or\n        (DstAppName == \"ssl\" and not(DstPortNumber in (443, 8443))) or\n        (DstAppName == \"smtp\" and not(DstPortNumber == 25))\n| summarize Instances = count(), EventStartTime = min(EventStartTime), EventEndTime = max(EventEndTime) by SrcIpAddr, DstIpAddr, DstAppName, DstPortNumber\n| extend IP_0_Address = SrcIpAddr\n| extend IP_1_Address = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query will detect instances where a balanced boolean query, e.g. \"true=true\", is observed in an SQL query sent to the server. Balanced boolean queries are commonly used by attackers to test of SQL injections vulnerabilities\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let timeRange = 7d;\n//How frequently the query averages data for an average execution time\nlet timeSliceSize = 1h;\n//Anomaly decompose threshold, 2 by default\nlet scoreThreshold = 2;\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated > ago(timeRange)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n    ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n    IsSuccess = succeeded_s, DurationMs = duration_milliseconds_d, AffectedRows = affected_rows_d,\n    ResponseRows = response_rows_d, Statement = statement_s,\n    Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                      , 0),\n    State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                      , 0),\n    AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize));\nlet queryData = processedData\n| where Statement contains \"=\"\n| extend extract_equals = extract_all(@\"([a-zA-Z0-9\\-\\']+\\s?=\\s?[a-zA-Z0-9\\-\\']+)\", Statement)\n| where extract_equals != \"\"\n| mv-expand extract_equals\n| extend left = tostring(split(extract_equals, \"=\", 0)[0])\n| extend right = tostring(split(extract_equals, \"=\", 1)[0]);\nlet cleanData = queryData\n| where left !has \"'\" and right !has \"'\";\n//Data has a quote in both sides, we need to parse this properly\n//We only care when the query is balanced e.g. '1'='1', so both sides will have a quote\n//This allows us to drop some results early\nlet quoteData = queryData\n| where left has \"'\" and right has \"'\"\n| extend extract_equals = extract_all(@\"(\\'.+\\'\\s?=\\s?\\'.+\\')\", Statement)\n| extend left = tostring(split(extract_equals, \"=\", 0)[0])\n| extend right = tostring(split(extract_equals, \"=\", 1)[0]);\ncleanData\n| union quoteData\n| where left == right\n| extend alertText = strcat(left, \"=\", right)\n| summarize AlertText=make_list(alertText, 10000) by TimeGenerated, Database, ClientIp, PrincipalName, Statement, ApplicationName, ResourceId, HostName\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = ClientIp\n| extend Host_0_Hostname = HostName\n| extend CloudApplication_0_Name = ApplicationName\n| extend AzureResource_0_ResourceId = ResourceId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection will alert when RunningRAT URI parameters or paths are detect in an HTTP request.\nId the device blocked this communication presence of this alert means the RunningRAT implant is likely still executing on the source host.\n Topic: Detections"}, {"role": "assistant", "content": "let runningRAT_parameters = dynamic(['/ui/chk', 'mactok=', 'UsRnMe=', 'IlocalP=', 'kMnD=']);\nCommonSecurityLog\n| where RequestMethod == \"GET\"\n| project TimeGenerated, DeviceVendor, DeviceProduct, DeviceAction, DestinationDnsDomain, DestinationIP, RequestURL, SourceIP, SourceHostName, RequestClientApplication\n| where RequestURL has_any (runningRAT_parameters)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects suspicious file upload activity.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where EventType =~ 'swgwebdlp'\n| where HttpRequestMethod =~ 'POST'\n| where isnotempty(DlpPattern)\n| summarize count() by User, bin(TimeGenerated, 15m)\n| where count_ > 1\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects command execution with PrivilegeLevel - 15 by user for wich there was no such activity detected earlier.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "let lbperiod = 14d;\nlet lbtime = 15m;\nlet knownPrivUsers =\nCiscoISEEvent\n| where TimeGenerated between (ago(lbperiod) .. ago(lbtime))\n| where PrivilegeLevel == '15'\n| summarize makelist(DstUserName)\n;\nCiscoISEEvent\n| where TimeGenerated > ago(lbtime)\n| where PrivilegeLevel == '15'\n| where DstUserName !in (knownPrivUsers)\n| project TimeGenerated, SrcIpAddr, DstIpAddr, DstUserName, CmdSet\n| extend AccountCustomEntity = DstUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected S3 bucket publicly exposed via policy, this could lead for sensitive information leakage to the public. Verify the S3 object configurations.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"PutBucketPolicy\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).bucketPolicy))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition), Principal_aws = tostring(parse_json(Statement).Principal.AWS), Principal = tostring(parse_json(Statement).Principal)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and (Principal_aws == \"*\" or Principal == \"*\") and isempty(Condition)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| distinct TimeGenerated, EventName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, UserIdentityUserName\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when user permissions have changed within a non-privileged vault which have been implemented by an actor that was not the target user account. Once this analytics rule is triggered it will group all related future alerts for upto an hour when all related entities are the same.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "let watchlist =\n    _GetWatchlist(\"PV1PW\")\n    | project SearchKey\n;\n// Insert the vault UUIDs below when using the dynamic vaults list within the analytics rule itself\nlet vaults = dynamic([\"\"]);\nOnePasswordEventLogs_CL\n| where log_source == \"auditevents\"\n| where action has_any(\"grant\", \"revoke\", \"update\")\n| where object_type == \"uva\"\n| where tostring(actor_details.email) != tostring(aux_details.email)\n// Enable the line below when using the \"Privileged Vaults - 1PW\" watchlist\n| where object_uuid !in (watchlist)\n// Enable the line below when using the dynamic vaults list within the analytics rule itself\n// | where object_uuid !in (vaults)\n| extend\n    TargetUsername = aux_details.email\n    , ActorUsername = actor_details.email\n    , SrcIpAddr = session.ip"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when VM was stopped.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "VMwareESXi\n| where SyslogMessage has ('VmPoweredOffEvent')\n| extend SrcUsername = extract(@'\\[info\\]\\s+\\[(.*?)\\]', 1, SyslogMessage)\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| extend HostCustomEntity = DstHostname, AccountCustomEntity = SrcUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for application not using a client certificate or secret is not secure.    \n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'ApplicationNotUsingClientCredentials'"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic is designed to detect an IAM user updating AWS lambda code via AWS CLI to gain persistent, further access into your AWS environment and to facilitate panting backdoors. An attacker may upload malicious code/binary to a lambda function which will be executed automatically when the function is triggered.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName startswith 'UpdateFunctionCode' and EventSource == \"lambda.amazonaws.com\" and UserIdentityType =='IAMUser' and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple client errors from one source in short timeframe\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "let threshold = 100;\nNGINXHTTPServer\n| where tolong(HttpStatusCode) >= 400 and tolong(HttpStatusCode) <= 499 \n| summarize MultipleClientErrors = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleClientErrors > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies use of legacy authentication in Microsoft Entra ID sign-in activity, which can bypass Azure Conditional Access policies. It includes UEBA logs IdentityInfo and BehaviorAnalytics for context.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "\nlet riskScoreCutoff = 20; //Adjust this based on volume of results\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = totimespan((endtime-starttime)*7);\nlet legacy_auth_protocols = dynamic([\"Authenticated SMTP\", \"AutoDiscover\", \"Exchange ActiveSync\", \"Exchange Online PowerShell\", \"Exchange Web Services\", \"IMAP4\", \"MAPI Over HTTP\", \"Outlook Anywhere (RPC over HTTP)\", \"Outlook Service\", \"POP3\", \"Reporting Web Services\", \"Other clients\"]);\nlet legacyAuthentications =\nSigninLogs\n| where TimeGenerated >= ago(lookback)\n// success logons only\n| where ResultType == 0\n| extend ClientAppUsed = iff(isempty(ClientAppUsed)==true,\"Unknown\" ,ClientAppUsed)\n| extend isLegacyAuth = iff(ClientAppUsed in (legacy_auth_protocols), \"Yes\", \"No\")\n| where isLegacyAuth==\"Yes\";\nlegacyAuthentications\n| where TimeGenerated >= starttime\n// Don't alert for accounts already seen using legacy auth in prior 7 days\n| join kind=leftanti (\n   legacyAuthentications\n   | where TimeGenerated between(ago(lookback)..starttime)\n) on UserPrincipalName, ClientAppUsed, AppDisplayName, IPAddress\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend LocationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\",\ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]))\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), AttemptCount = count()\nby UserPrincipalName, ClientAppUsed, AppDisplayName, IPAddress, isLegacyAuth, tostring(OS), tostring(Browser), LocationString\n| sort by AttemptCount desc nulls last\n| extend timestamp = StartTime, UserPrincipalName = tolower(UserPrincipalName), Account_0_Name = UserPrincipalName, IP_0_Address = IPAddress\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n) on UserPrincipalName\n| join kind=leftouter (\n    BehaviorAnalytics\n    | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n    | where isnotempty(SourceIPAddress)\n    | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress\n    | project-rename IPAddress = SourceIPAddress\n    | summarize\n        UsersInsights = make_set(UsersInsights, 1000),\n        DevicesInsights = make_set(DevicesInsights, 1000),\n        IPInvestigationPriority = sum(InvestigationPriority)\n    by IPAddress\n) on IPAddress\n| extend UEBARiskScore = IPInvestigationPriority\n| where UEBARiskScore > riskScoreCutoff\n| sort by UEBARiskScore desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Recorded Future Threat Hunting IP correlation for all actors.\n Topic: Recorded Future"}, {"role": "assistant", "content": "imNetworkSession\n| join kind= innerunique  (\n  ThreatIntelligenceIndicator\n// Only look for IOCs\n| where isnotempty(NetworkIP)\n// Only look at Recorded Future Threat Hunt Indicators.\n| where Description startswith \"Recorded Future - Threat Hunt\"\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n) on $left.DstIpAddr == $right.NetworkIP\n| project DstIpAddr\n| extend IP_0_Address = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in Azure Activity Events from Recorded Future Actively Communicating C&C Server Risklist.\n Topic: Recorded Future"}, {"role": "assistant", "content": "// Identifies a match in AzureActivity from the Recorded Future C2 Malware Detection IPs (Actively Communicating C&C Server RiskList)\nlet dt_lookBack = 1h;\nlet ioc_lookBack = 1d;\nThreatIntelligenceIndicator\n// Picking up only Recorded Future IOC's that are pertinent to the use case (Malware C2 Detection)\n| where Description == \"Recorded Future - IP - Actively Communicating C&C Server\"\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| where Active == true\n| extend TI_ipEntity = NetworkIP\n| join (\n  AzureActivity | where TimeGenerated >= ago(dt_lookBack)\n  // renaming time column so it is clear the log this came from\n  | extend AzureActivity_TimeGenerated = TimeGenerated\n  )\non $left.TI_ipEntity == $right.CallerIpAddress\n| where AzureActivity_TimeGenerated >= TimeGenerated and AzureActivity_TimeGenerated < ExpirationDateTime\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| project LatestIndicatorTime, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, AzureActivity_TimeGenerated, TI_ipEntity, CallerIpAddress, Caller, OperationNameValue, ActivityStatusValue, CategoryValue, ResourceId, NetworkIP, Description, AdditionalInformation\n| extend AccountName = tostring(split(Caller, \"@\")[0]), AccountUPNSuffix = tostring(split(Caller, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare URLs requested.\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where TimeGenerated > ago(24h)\n| where isnotempty(UrlOriginal)\n| summarize count() by tostring(UrlOriginal)\n| top 20 by count_ asc\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies Azure DevOps activities where organization public projects policy enabled by the admin\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where OperationName == \"OrganizationPolicy.PolicyValueUpdated\"\n| where Data.PolicyName == \"Policy.AllowAnonymousAccess\"\n| where Data.PolicyValue == \"ON\"\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule will monitor critical IPs in Syslog and Netflow Data.\n Topic: Cisco SD-WAN"}, {"role": "assistant", "content": "CiscoSyslogUTD\n| union (CiscoSDWANNetflow)\n| where isnotempty(SourceIP) or isnotempty(NetflowFwSrcAddrIpv4)\n| extend SourceIP = coalesce(SourceIP, NetflowFwSrcAddrIpv4)\n| where ipv4_is_in_any_range(SourceIP, \"Enter comma-separated IPs\")\n| summarize count() by SourceIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for application installation events.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where TimeGenerated > ago(24h)\n| where DvcAction =~ 'app_installed'\n| summarize by SrcUserName, EntityAppName\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects access denied events generated by the CTERA Edge Filer Topic: CTERA"}, {"role": "assistant", "content": "Syslog\n| where ProcessName == 'gw-audit'\n| extend\n    TenantName = extract(\"\\\"vportal\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage),\n    UserName = extract(\"user=([^|]*)\", 1, SyslogMessage),\n    Operation = extract(\"op=([^|]*)\", 1, SyslogMessage),\n    EdgeFiler = extract(\"\\\"client\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage),\n    RootPath = extract(\"rootPath=([^|]*)\", 1, SyslogMessage),\n    Share = extract(\"share=([^|]*)\", 1, SyslogMessage),\n    LocalPath = extract(\"path=([^|]*)\", 1, SyslogMessage),\n    Timestamp = todatetime(extract(\"\\\"@timestamp\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage))\n| where Operation in ('OpenDenied', 'createDenied', 'AclDenied', 'deleteDenied')\n| summarize Count = count() by UserName, bin(Timestamp, 2m)\n| where Count > 10\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0015 (Theom has observed healthcare data in a data store that is publicly exposed. As per this requirement, use this information to apply data access control lists or access permissions to secure your data)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0015\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Zero Trust(TIC3.0) Control Assessments have Deviated from Configured Threshold Baselines\n Topic: ZeroTrust(TIC3.0)"}, {"role": "assistant", "content": "SecurityRecommendation\n| where RecommendationDisplayName <> \"\"\n| extend ControlFamily=iff(RecommendationDisplayName has_any(\"email\"), \"Email\",\n    iff(RecommendationDisplayName has_any(\"apps\", \"teams\", \"meeting\", \"call\"), \"Unified Communications & Collaboration\",\n    iff(RecommendationDisplayName has_any(\"dns\", \"domain\"), \"DNS\",\n    iff(RecommendationDisplayName has_any(\"endpoint protection\", \"malware\", \"file\", \"files\", \"IaaSAntimalware\"), \"Files\",\n    iff(RecommendationDisplayName has_any(\"Security Center\", \"defender\", \"adaptive\", \"HoneyTokens\", \"honey\", \"deception\", \"intrusion\", \"incident\", \"incidents\"), \"Intrusion Detection\",\n    iff(RecommendationDisplayName has_any(\"firewall\", \"watcher\", \"proxy\", \"certificate\", \"url\", \"web\"), \"Web\",\n    iff(RecommendationDisplayName has_any(\"network\", \"segment\", \"network security groups\", \"subnet\", \"application gateway\", \"security groups\", \"IP forwarding\", \"port\", \"ports\", \"networks\"), \"Networking\",\n    iff(RecommendationDisplayName has_any(\"backup\", \"denial\", \"DDoS\", \"load\", \"scale\", \"front\", \"traffic manager\", \"pool\", \"disaster\", \"region\", \"redundant\", \"geo\"), \"Resiliency\",\n    iff(RecommendationDisplayName has_any(\"encrypt\", \"rest\", \"transit\", \"data\", \"http\", \"https\", \"TLS\", \"transfer\", \"transit\", \"Secure Socket\", \"SSH\", \"just\", \"FTP\", \"server-side\", \"storage\", \"database\", \"databases\", \"SQL\", \"disk\", \"disks\"), \"Data Protection\",\n    iff(RecommendationDisplayName has_any(\"private\", \"vpn\", \"automation\", \"playbook\", \"logic\", \"notification\", \"authorized\", \"safe\", \"network gateway\", \"express\", \"VPC\"), \"Enterprise\",\n    iff(RecommendationDisplayName has_any(\"recover\", \"log\", \"configured\", \"configuration\", \"identity\", \"privilege\", \"admin\", \"authentication\", \"JIT\", \"just\", \"password\", \"time\", \"sync\", \"vulnerability\", \"Vulnerabilities\", \"updates\", \"update\", \"upgrade\", \"audit\", \"account\", \"guest\", \"shared\", \"access\", \"machines\", \"rights\", \"VM\", \"key\", \"keys\", \"IAM\", \"EC2\", \"GuardDuty\", \"logs\", \"CloudTrail\", \"MFA\", \"External accounts\", \"accounts\", \"config\", \"credentials\", \"privileged\", \"owner\", \"owners\", \"login\", \"logon\", \"virtual machine\", \"container\", \"containers\", \"Kubernetes\"), \"Universal Security Capabilities\", \"Other\")))))))))))\n| summarize arg_max(TimeGenerated, *) by AssessedResourceId, RecommendationDisplayName\n| summarize\n    Failed=countif(RecommendationState == \"Unhealthy\"),\n    Passed=countif(RecommendationState == \"Healthy\"),\n    Total=countif(RecommendationState == \"Unhealthy\" or RecommendationState == \"Healthy\")\n    by ControlFamily\n| extend PassedControlsPercentage = (Passed / todouble(Total)) * 100\n| extend RemediationLink = strcat('https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/5')\n| extend URLCustomEntity = RemediationLink\n| project ControlFamily, Total, PassedControlsPercentage, Passed, Failed, RemediationLink, URLCustomEntity\n| where PassedControlsPercentage < 70 //Adjust PassedRatePercentage Thresholds within Organizational Needs\n| sort by PassedControlsPercentage asc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a change in system audit configuration whereby audit logging is turned off. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_frequency = 1h;\nDataverseActivity\n| where TimeGenerated >= ago(query_frequency)\n| where Message =~ 'UpdateAuditSettings'\n| mv-expand Fields\n| extend AuditValue = Fields.Name, AuditEnabled = tobool(Fields.Value)\n| where not (AuditEnabled)\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    TimeGenerated,\n    UserId,\n    ClientIp,\n    OriginalObjectId,\n    AuditValue,\n    AuditEnabled,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for new users created.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where TimeGenerated > ago(24h)\n| where EventMessage =~ 'User created'\n| where ObjectItemTypeName =~ 'USER'\n| project EventCreationTime, UserName, SrcIpAddr, ObjectItemName, AssociatedItems\n| extend AccountCustomEntity = ObjectItemName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when sender sent email to the non-corporate domain and recipients username is the same as senders username.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let lbtime = 10m;\nProofpointPOD\n| where TimeGenerated > ago(lbtime)\n| where EventType == 'message'\n| where NetworkDirection == 'outbound'\n| where array_length(todynamic(DstUserUpn)) == 1\n| extend sender = extract(@'\\A(.*?)@', 1, SrcUserUpn)\n| extend sender_domain = extract(@'@(.*)$', 1, SrcUserUpn)\n| extend recipient = extract(@'\\A(.*?)@', 1, tostring(todynamic(DstUserUpn)[0]))\n| extend recipient_domain = extract(@'@(.*)$', 1, tostring(todynamic(DstUserUpn)[0]))\n| where sender =~ recipient\n| where sender_domain != recipient_domain\n| project SrcUserUpn, DstUserUpn\n| extend AccountCustomEntity = SrcUserUpn\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare process vendors.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where TimeGenerated > ago(24h)\n| where isnotempty(ActingProcessFileCompany)\n| summarize count() by ActingProcessFileCompany, ActingProcessFileInternalName\n| top 25 by count_ asc\n| extend ProcCustomEntity = ActingProcessFileCompany\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for failed attempts to sign-in to disabled accounts summarized by account name.\n This query has also been updated to include UEBA logs IdentityInfo and BehaviorAnalytics for contextual information around the results.\n Topic: Cloud Identity Threat Protection Essentials"}, {"role": "assistant", "content": "let riskScoreCutoff = 20; //Adjust this based on volume of results\nSigninLogs \n| where ResultType == \"50057\" \n| where ResultDescription == \"User account is disabled. The account has been disabled by an administrator.\" \n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by AppDisplayName, UserPrincipalName\n| extend timestamp = StartTime, UserPrincipalName = tolower(UserPrincipalName), AccountCustomEntity = UserPrincipalName \n| order by count_ desc\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n) on UserPrincipalName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Goal: To detect anomalous data change/deletion. This query detects SQL queries that changed/deleted a large number of rows, which is significantly higher than normal for this database. This is a hunting query, so the training and the detection occur on the whole time window (controlled by queryPeriod parameter). The user can set the minimal threshold for anomaly by changing the threshold parameters volThresholdZ and volThresholdQ (higher threshold will detect only more severe anomalies).\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let detectionWindow = 15d;\nlet trainingWindow = 15d;\nlet volumeThresholdZ = 3.0;                     // Minimal threshold for the Zscore to trigger anomaly (number of standard deviations above mean). If set higher, only very significant alerts will fire.\nlet volumeThresholdQ = volumeThresholdZ;        // Minimal threshold for the Qscore to trigger anomaly (number of Inter-Percentile Ranges above high percentile). If set higher, only very significant alerts will fire.\nlet volumeThresholdHardcoded = 500;             // Minimal value for the volume metric to trigger anomaly.\nlet monitoredColumn = 'AffectedRows';           // The name of the column for volumetric anomalies.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s, \n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0)\n    | extend QuantityColumn = column_ifexists(monitoredColumn, 0)\n    | sort by TimeGenerated desc\n    | extend RowNumber = row_number(),\n                         WindowType = case( TimeGenerated >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= TimeGenerated and TimeGenerated < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize AvgVal = round(avg(QuantityColumn), 2), StdVal = round(stdev(QuantityColumn), 2), N = max(RowNumber),\n                P99Val = round(percentile(QuantityColumn, 99), 2), P50Val = round(percentile(QuantityColumn, 50), 2)\n      by Database;\nprocessedData\n| where WindowType == 'detection'\n| join kind = inner (trainingSet) on Database\n| extend ZScoreVal = iff(N >= 20, round(todouble(QuantityColumn - AvgVal) / todouble(StdVal + 1), 2), 0.00),\n         QScoreVal = iff(N >= 20, round(todouble(QuantityColumn - P99Val) / todouble(P99Val - P50Val + 1), 2), 0.00)\n| extend IsVolumeAnomalyOnVal = iff((ZScoreVal > volumeThresholdZ and QScoreVal > volumeThresholdQ and QuantityColumn > volumeThresholdHardcoded), true, false), AnomalyScore = round((ZScoreVal + QScoreVal)/2, 0)\n| project TimeGenerated, Database, PrincipalName, ClientIp, HostName, ApplicationName, ActionName, Statement,\n          IsSuccess, ResponseRows, AffectedRows, IsVolumeAnomalyOnVal, AnomalyScore\n| where IsVolumeAnomalyOnVal == 'true'\n| sort by AnomalyScore desc, TimeGenerated desc\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = ClientIp\n| extend Host_0_Hostname = HostName\n| extend CloudApplication_0_Name = ApplicationName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection addresses most of the known ways to utilize this binary for malicious/unintended purposes. \nIt attempts to accommodate for most detection evasion techniques, like commandline obfuscation and binary renaming.\n Topic: FalconFriday"}, {"role": "assistant", "content": "// Set the time span for the query.\nlet Timeframe = 1h;\n// Set the HashTimeframe for the hash lookup; longer makes it more accurate, but obviously also more resource-intensive.\nlet HashTimeframe = 14d;\n// Get all known SHA1 hashes for certutil executions or renamed files formerly named certutil.\nlet CertUtilPESha1=materialize(DeviceProcessEvents | where Timestamp > ago(HashTimeframe)| where FileName has \"certutil\"  | where isnotempty(SHA1) | summarize sha1=make_set(SHA1));\nlet CertUtilFESha1=materialize(DeviceFileEvents | where Timestamp > ago(HashTimeframe)| where PreviousFileName contains \"certutil\" or FileName contains \"certutil\"  | where isnotempty(SHA1) | summarize sha1=make_set(SHA1));\nDeviceProcessEvents\n| where Timestamp >= ago(Timeframe)\n// Get all executions by processes with a SHA1 hash that is or was named certutil.\n| where SHA1 in (CertUtilPESha1) or SHA1 in (CertUtilFESha1) or FileName =~ \"certutil.exe\" or ProcessCommandLine has \"certutil\"\n// Create a new field called CleanProcessCommandLine which gets populated with the value of ProcessCommandLine as Windows parses it for execution, \n// removing any potential command line obfuscation. \n| extend CleanProcessCommandLine=parse_command_line(ProcessCommandLine, \"windows\")\n// Search for de-obfuscated commands used. \n// Urlcache is the documented attribute. However, url is also accepted.\n// Verifyctl is the documented attribute. However, verify is also accepted.\n| where CleanProcessCommandLine has_any (\"decode\", \"encode\", \"verify\",\"url\") \n| order by Timestamp\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects post requests to unusual extensions.\n Topic: Corelight"}, {"role": "assistant", "content": "corelight_http\n| where method in~ ('POST', 'PUT')\n| where toint(status_code) between (200 .. 299)\n| where request_body_len != 0 or response_body_len != 0\n| extend fe = extract(@'.*(\\.\\w+)$', 1, uri)\n| where fe in~ ('.jpg', '.jpeg', '.gif', '.png', '.icon', '.ico', '.xml', '.swf', '.svg', '.ppt', '.pttx', '.doc', '.docx', '.rtf', '.pdf', '.tif', '.zip', '.mov')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for accounts that have been assigned Global Administrator do not need other roles assigned. \n  Global Administrators have access to all aspects of Azure\n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'AzureSecureScoreRoleOverlap'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query aggregates and charts cron job data based on unique user-command pairs. It shows the frequency of commands, the number of computers theyve run on, and their percentage of total tenant computers.\n Topic: Syslog"}, {"role": "assistant", "content": "\n// Pull messages from Syslog-cron where the process name is \"CRON\" or \"CROND\", the severity level is info, and the SyslogMessage contains \"CMD\".\n// It also parses out the user and commandline from the message.\nlet RawCommands = Syslog \n| where Facility =~ \"cron\" \n| where SeverityLevel =~ \"info\" \n| where ProcessName =~ \"CRON\" or ProcessName =~ \"CROND\"  \n| where SyslogMessage contains \"CMD \" \n| project TenantId, TimeGenerated, Computer, SeverityLevel, ProcessName, SyslogMessage\n| extend TrimmedSyslogMsg = trim_end(@\"\\)\", SyslogMessage)\n| parse TrimmedSyslogMsg with * \"(\" user  \") CMD (\" cmdline \n| project TenantId, TimeGenerated, Computer, user, cmdline; \n// Count how many times a particular commandline has been seen based on unique Computer, User, and cmdline sets\nlet CommandCount = RawCommands\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), CmdlineCount = count() by Computer, user, cmdline; \n// Count how many computers have run a particular user and cmdline pair\nlet DistComputerCount = RawCommands\n| summarize ComputerCount = dcount(Computer) by TenantId, user, cmdline; \n// Join above counts based on user and commandline pair\nlet CommandSummary = CommandCount | join (DistComputerCount) on user, cmdline\n| project StartTime, EndTime, TenantId, user, CmdlineCount, ComputerCount, cmdline;\n// Count the total number of computers reporting cron messages in the tenant\nlet TotalComputers = Syslog\n| where Facility =~ \"cron\"\n| summarize dcount(Computer) by TenantId ;\n// Join the previous counts with the total computers count. Calculate the percentage of total computers value.\nlet FinalSummary = CommandSummary | join kind= leftouter (TotalComputers) on TenantId\n| project StartTime, EndTime, user, TimesCmdlineSeen = CmdlineCount, CompsThatHaveRunCmdline = ComputerCount, \nAsPercentOfTotalComps = round(100 * (toreal(ComputerCount)/toreal(dcount_Computer)),2), cmdline\n| order by user asc, TimesCmdlineSeen desc;\nFinalSummary \n| extend timestamp = StartTime, AccountCustomEntity = user\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Elastic Load Balancer distributes incoming traffic across multiple instances in multiple availability Zones. This increases the fault tolerance of your applications.\n Unwanted changes to Elastic Load Balancer specific security groups could open your environment to attack and  hence needs monitoring.\n More information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255 \n and https://aws.amazon.com/elasticloadbalancing/. \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"ApplySecurityGroupsToLoadBalancer\", \"SetSecurityGroups\"]);\nAWSCloudTrail\n| where EventName in~ (EventNameList)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| summarize EventCount=count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated)\nby EventSource, EventName, UserIdentityType,  SourceIpAddress, UserAgent, SessionMfaAuthenticated, AWSRegion,\nAdditionalEventData, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityAccountId, UserIdentityPrincipalid, ResponseElements\n| extend timestamp = StartTimeUtc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Okta API tokens are used to authenticate requests to Okta APIs. This query searches for attempts to create new API Token.\n Refrence: https://developer.okta.com/docs/reference/api/event-types/\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let Events = dynamic([\"system.api_token.create\"]);\nOktaSSO\n| where eventType_s in (Events)\n| where outcome_result_s =~ \"SUCCESS\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Generates an incident when a new asset or MAC is detected either by Radiflows iSID.\n Topic: Radiflow"}, {"role": "assistant", "content": "RadiflowEvent\n| where DeviceProduct =~ 'iSID'\n| where EventClassID in (1, 2, 3, 155)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies individual record ownership changes including sharing of records with other users/teams or re-assignment of ownership exceeding a pre-defined threshold. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// Set threshold for number of shared/assigned records\nlet detection_threshold = 100;\nlet query_frequency = 1h;\nDataverseActivity\n| where TimeGenerated >= ago(query_frequency)\n| where Message in (\"ModifyAccess\", \"Assign\", \"GrantAccess\")\n| summarize\n    FirstEvent = min(TimeGenerated),\n    LastEvent = max(TimeGenerated),\n    Events = count()\n    by UserId, Message, InstanceUrl, ClientIp\n| where Events > detection_threshold\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    FirstEvent,\n    LastEvent,\n    Message,\n    Events,\n    UserId,\n    ClientIp,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Release approvals in Azure Pipelines, often user-authorized, can be self-approved by attackers using compromised accounts. This query identifies unusual approvers, aiding in the detection of unauthorized releases.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = 30d;\nAzureDevOpsAuditing\n| where TimeGenerated > ago(lookback) and TimeGenerated < starttime\n| where OperationName in (\"Release.ApprovalCompleted\", \"Release.ApprovalsCompleted\")\n| extend PipelineName = tostring(Data.PipelineName)\n| extend ApprovalType = tostring(Data.ApprovalType)\n| extend StageName = tostring(Data.StageName)\n| extend ReleaseName = tostring(Data.ReleaseName)\n| summarize by PipelineName, ActorUPN, ApprovalType\n| join kind=rightanti (\nAzureDevOpsAuditing\n| where TimeGenerated between(starttime..endtime)\n| where OperationName in (\"Release.ApprovalCompleted\", \"Release.ApprovalsCompleted\")\n| extend PipelineName = tostring(Data.PipelineName)\n| extend ApprovalType = tostring(Data.ApprovalType)\n| extend StageName = tostring(Data.StageName)\n| extend ReleaseName = tostring(Data.ReleaseName)) on ActorUPN\n| project-reorder TimeGenerated, PipelineName, ActorUPN, ApprovalType, StageName, ReleaseName, IpAddress, UserAgent, AuthenticationMechanism\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A new incident was created in the Cortex XDR portal with a severity \"Low\". Click on the events for incident details. \n Topic: Cortex XDR"}, {"role": "assistant", "content": "CortexXDR_Incidents_CL\n| where severity_s contains \"low\"\n| where status_s !contains \"resolved_auto\"\n// the below line filters for incidents that has at least one user or one host in it. Comment the below line if you want to generated incidents that have 0 user or 0 host as well\n| where host_count_d > 0 or user_count_d > 0\n| project TimeGenerated, incident_id_s, status_s, severity_s, incident_sources_s, description_s, xdr_url_s, hosts_s, users_s, alert_categories_s, host_count_d, user_count_d, alert_count_d, creation_time_d, modification_time_d\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for sources with high number of errors.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "GCPCloudDNS\n| where TimeGenerated > ago(24h)\n| where EventResultDetails != 'NOERROR'\n| summarize count() by SrcIpAddr\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query hunts for file creation events linked to Dev-0322s compromise of ZOHO ManageEngine ADSelfService Plus software. It focuses on files dropped during post-exploitation activity. Hosts with higher risk scores should be prioritized.\n Topic: Legacy IOC based Threat Protection"}, {"role": "assistant", "content": "// Look for the specific files dropped by threat actor\nlet files = dynamic([\"C:\\\\ProgramData\\\\Microsoft\\\\Crypto\\\\RSA\\\\key.dat \", \"c:\\\\windows\\\\temp\\\\ccc.exe\"]);\nDeviceFileEvents\n| where FileName endswith \"elrs.exe\" or FolderPath has_any (files)\n// Increase the risk score of command accessing file also seen\n| join kind=leftouter (DeviceProcessEvents\n| where ProcessCommandLine contains \"cmd /c elrs.exe\") on DeviceId\n| extend RiskScore = iif(isnotempty(DeviceId1), 1.0, 0.5)\n| project-reorder TimeGenerated, DeviceName, FileName, FolderPath, ProcessCommandLine, RiskScore, InitiatingProcessAccountName\n// Increase risk score if recent alerts for the host\n| join kind=leftouter (SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| mv-expand todynamic(Entities)\n| extend DeviceId = tostring(parse_json(Entities).MdatpDeviceId)\n| where isnotempty(DeviceId)\n// Higher risk score are for Defender alerts related to threat actor\n| extend AlertRiskScore = iif(ThreatName has_any (\"Zebracon\", \"Trojan:MSIL/Gacker.A!dha\", \"Backdoor:MSIL/Kokishell.A!dha\"), 1.0, 0.5)\n| project DeviceId, AlertRiskScore) on DeviceId\n// Create agregate risk score\n| extend RiskScore = RiskScore + AlertRiskScore\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName, AccountCustomEntity = AccountName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule makes use of the series decompose anomaly method to generate an alert when multiple clients report errors for the same DNS query. This rule monitors DNS traffic over a period of 14 days to detect possible similar C2 communication originating from different clients. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let threshold = 2.5;\nlet min_t = ago(14d);\nlet max_t = now();\nlet dt = 1d;\nlet Errors = dynamic(['NXDOMAIN', 'SERVFAIL', 'REFUSED']);\n// calculate avg. eps(events per second)\nlet eps = materialize (_Im_Dns | project TimeGenerated | where TimeGenerated > ago(5m) | count | extend Count = Count/300);\nlet maxSummarizedTime = toscalar (\n  union isfuzzy=true \n      (\n          DNS_Summarized_Logs_ip_CL \n              | where EventTime_t >= min_t\n              | summarize max_TimeGenerated=max(EventTime_t)\n              | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\n      ),\n      (\n          print(min_t)\n          | project max_TimeGenerated = print_0\n      )\n    | summarize maxTimeGenerated = max(max_TimeGenerated) \n  );\n  let summarizationexist = materialize(\n            union isfuzzy=true \n              (\n                  DNS_Summarized_Logs_ip_CL\n                  | where EventTime_t > ago(1d) \n                  | project v = int(2)\n              ),\n              (\n                  print int(1) \n                  | project v = print_0\n              )\n              | summarize maxv = max(v)\n              | extend sumexist = (maxv > 1)\n            );\nlet allData = union isfuzzy=true\n(\n  (datatable(exists:int, sumexist:bool)[1,false] | where toscalar(eps) > 1000 | join (summarizationexist) on sumexist) | join (\n  _Im_Dns(starttime=todatetime(ago(2d)), endtime=now())\n  | where TimeGenerated > maxSummarizedTime and EventResultDetails in (Errors)\n  | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated,1h)\n  | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n  ) on exists\n  | project-away exists, maxv, sum*\n),\n(\n  (datatable(exists:int, sumexist:bool)[1,false] | where toscalar(eps) between (501 .. 1000) | join (summarizationexist) on sumexist) | join (\n  _Im_Dns(starttime=todatetime(ago(3d)), endtime=now())\n  | where TimeGenerated > maxSummarizedTime and EventResultDetails in (Errors)\n  | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated,1h)\n  | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n  ) on exists\n  | project-away exists, maxv, sum*\n),\n(\n  (datatable(exists:int, sumexist:bool)[1,false] | where toscalar(eps) <= 500 | join (summarizationexist) on sumexist) | join (\n  _Im_Dns(starttime=todatetime(ago(4d)), endtime=now())\n  | where TimeGenerated > maxSummarizedTime and EventResultDetails in (Errors)\n  | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated,1h)\n  | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n  ) on exists\n  | project-away exists, maxv, sum*\n),\n(\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > min_t and EventResultDetails_s in (Errors)\n      | project-rename SrcIpAddr=SrcIpAddr_s, DnsQuery=DnsQuery_s, Count=count__d, EventTime=EventTime_t\n      | extend Count = toint(Count) \n);\nallData\n| make-series TotalIPCount=dcount(SrcIpAddr) on EventTime from min_t to max_t step dt by DnsQuery\n| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalIPCount, threshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, EventTime, TotalIPCount\n| extend\n  anomalies = toint(anomalies),\n  score = toint(score),\n  baseline = toint(baseline),\n  EventTime = todatetime(EventTime),\n  TotalIPs = tolong(TotalIPCount)\n| where EventTime >= ago(dt)\n| where score >= threshold * 2\n| join kind=inner(allData | where TimeGenerated>ago(dt) | summarize SrcIps = make_set(SrcIpAddr,1000) by DnsQuery) on DnsQuery\n| project-away DnsQuery1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query look for applications that have been granted (Delegated or App/Role) permissions to Read Mail (Permissions field has Mail.Read) and subsequently has been consented to. This can help identify applications that have been abused to gain access to mailboxes.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where Category =~ \"ApplicationManagement\"\n| where ActivityDisplayName has_any (\"Add delegated permission grant\",\"Add app role assignment to service principal\")  \n| where Result =~ \"success\"\n| where tostring(InitiatedBy.user.userPrincipalName) has \"@\" or tostring(InitiatedBy.app.displayName) has \"@\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\" and array_length(TargetResource.modifiedProperties) > 0 and isnotnull(TargetResource.displayName)\n      | extend props = TargetResource.modifiedProperties,\n               Type = tostring(TargetResource.type),\n               PermissionsAddedTo = tostring(TargetResource.displayName)\n  )\n| mv-apply Property = props on \n  (\n      where Property.displayName =~ \"DelegatedPermissionGrant.Scope\"\n      | extend DisplayName = tostring(Property.displayName), Permissions = trim('\"',tostring(Property.newValue))\n  )\n| where Permissions has_any (\"Mail.Read\", \"Mail.ReadWrite\")\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend InitiatingUserAgent = tostring(AdditionalDetail.value)\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| project-away props, TargetResource, AdditionalDetail, Property\n| join kind=leftouter(\n  AuditLogs\n  | where ActivityDisplayName has \"Consent to application\"\n  | mv-apply TargetResource = TargetResources on \n      (\n          where TargetResource.type =~ \"ServicePrincipal\"\n          | extend AppName = tostring(TargetResource.displayName),\n                   AppId = tostring(TargetResource.id)\n      )\n| project AppName, AppId, CorrelationId) on CorrelationId\n| project-away CorrelationId1\n| project-reorder TimeGenerated, OperationName, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, InitiatingUserAgent, PermissionsAddedTo, Permissions, AppName, AppId, CorrelationId\n| extend Name = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection looks for command line parameters associated with the use of Sysinternals sdelete (https://docs.microsoft.com/sysinternals/downloads/sdelete) to delete multiple files on a hosts C drive.\nA threat actor may re-name the tool to avoid detection and then use it for destructive attacks on a host.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n  | where EventID == 4688\n  | where Process !~ \"sdelete.exe\"\n  | where CommandLine has_all (\"accepteula\", \"-r\", \"-s\", \"-q\", \"c:/\")\n  | where CommandLine !has (\"sdelete\")\n  | extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n  | extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n  | extend AccountName = tostring(split(TargetAccount, @'\\')[1]), AccountNTDomain = tostring(split(TargetAccount, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for top source IP addresses of failed logins.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where TimeGenerated > ago(24h)\n| where ResourceType =~ 'Login'\n| where EventMessage !has 'access key'\n| summarize count() by SrcIpAddr\n| order by count_ desc\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query uses Sysmon telemetry to detect System Shutdown/Reboot (MITRE Technique: T1529).\n Topic: Windows Security Events"}, {"role": "assistant", "content": "Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend RenderedDescription = tostring(split(RenderedDescription, \":\")[0])\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=column_ifexists('@Name', \"\"), Value=column_ifexists('#text', \"\")\n| evaluate pivot(Key, take_any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| extend RuleName = column_ifexists(\"RuleName\", \"\"), TechniqueId = column_ifexists(\"TechniqueId\", \"\"),  TechniqueName = column_ifexists(\"TechniqueName\", \"\")\n| parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName\n| where EventLog has \"shutdown.exe\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies a match Network Sessions for which the source or destination IP address is a known GreyNoise IoC.\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM NetworkSession schema\n Topic: GreyNoiseThreatIntelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet IP_TI = materialize (\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where SourceSystem == 'GreyNoise'\n  | extend TI_ipEntity = coalesce(NetworkIP, NetworkDestinationIP, NetworkSourceIP,EmailSourceIpAddress,\"NO_IP\")\n  | where TI_ipEntity != \"NO_IP\"\n);\nIP_TI\n  // using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique \n(\n  _Im_NetworkSession (starttime=ago(dt_lookBack))\n  | where isnotempty(SrcIpAddr)\n  | summarize imNWS_mintime=min(TimeGenerated), imNWS_maxtime=max(TimeGenerated) by SrcIpAddr, DstIpAddr, Dvc, EventProduct, EventVendor  \n  | lookup (IP_TI | project TI_ipEntity, Active) on $left.SrcIpAddr == $right.TI_ipEntity\n  | project-rename SrcMatch = Active\n  | lookup (IP_TI | project TI_ipEntity, Active) on $left.DstIpAddr == $right.TI_ipEntity\n  | project-rename DstMatch = Active\n  | where SrcMatch or DstMatch\n  | extend \n      IoCIP = iff(SrcMatch, SrcIpAddr, DstIpAddr),\n      IoCDirection = iff(SrcMatch, \"Source\", \"Destination\")\n)on $left.TI_ipEntity == $right.IoCIP\n| where imNWS_mintime < ExpirationDateTime\n| project imNWS_mintime, imNWS_maxtime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, SrcIpAddr, DstIpAddr, IoCDirection, IoCIP, Dvc, EventVendor, EventProduct\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when user connects to a database from IP address which is not present in AllowList.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let ip_allowlist = dynamic(['127.0.0.2']);\nOracleDatabaseAuditEvent\n| where isnotempty(SrcIpAddr)\n| where DbAction =~ 'CONNECT'\n| where SrcIpAddr !in (ip_allowlist)\n| project SrcIpAddr, DstUserName\n| extend AccountCustomEntity = DstUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when firewall was disabled from Mctray.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "McAfeeEPOEvent\n| where EventId in ('35009')\n| extend IPCustomEntity = DvcIpAddr, HostCustomEntity = DvcHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies occurrences of new API connector creations within Power Platform, specifically targeting a predefined list of sensitive environments. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let sensitive_environment_id = dynamic([\n    // Specify the list of sensitive power platform environment ID's to monitor here.\n    // Example: \"10e72012-8886-41ec-b973-250286419b38\", \"183c7056-7ed0-426f-8ae6-69819cf72259\"\n    ]);\nlet query_frequency = 11h;\nPowerPlatformAdminActivity\n| where TimeGenerated >= ago (query_frequency)\n| where EventOriginalType == \"PutConnection\"\n| extend Properties = tostring(PropertyCollection)\n| extend SrcIpAddr = extract(@'\"enduser.ip_address\",\"Value\":\"([^\"]+)\"', 1, Properties)\n| extend SrcIpAddr = iif(SrcIpAddr startswith '::ffff:', replace_string('::ffff:', '', SrcIpAddr), SrcIpAddr)\n| extend\n    EnvironmentId = extract(@'\"powerplatform.analytics.resource.environment.id\",\"Value\":\"([^\"]+)\"', 1, Properties),\n    ConnectionId = extract(@'\"powerplatform.analytics.resource.connection.id\",\"Value\":\"([^\"]+)\"', 1, Properties)\n| where EnvironmentId in~ (sensitive_environment_id)\n| extend\n    AccountName = tostring(split(ActorName, \"@\")[0]),\n    UPNSuffix = tostring(split(ActorName, \"@\")[1])\n| project\n    TimeGenerated,\n    EventOriginalType,\n    ActorName,\n    SrcIpAddr,\n    ConnectionId,\n    EnvironmentId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in Palo Alto data in CommonSecurityLog table from any Domain IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;  // Duration to look back for recent logs (1 hour)\nlet ioc_lookBack = 14d;  // Duration to look back for recent threat intelligence indicators (14 days)\n// Create a list of top-level domains (TLDs) in our threat feed for later validation of extracted domains\nlet list_tlds = \n    ThreatIntelligenceIndicator\n    | where isnotempty(DomainName)\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now()\n    | extend DomainName = tolower(DomainName)\n    | extend parts = split(DomainName, '.')\n    | extend tld = parts[(array_length(parts)-1)]\n    | summarize count() by tostring(tld)\n    | summarize make_list(tld);\nlet Domain_Indicators = \n    ThreatIntelligenceIndicator\n    // Filter to pick up only IOC's that contain the entities we want (in this case, DomainName)\n    | where isnotempty(DomainName)\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now()\n    | extend TI_DomainEntity = DomainName;\nDomain_Indicators\n    // Join with CommonSecurityLog to find potential malicious activity\n    | join kind=innerunique (\n        CommonSecurityLog\n        | extend IngestionTime = ingestion_time()\n        | where IngestionTime > ago(dt_lookBack)\n        | where DeviceVendor =~ 'Palo Alto Networks'\n        | where DeviceEventClassID =~ 'url'\n        // Uncomment the line below to only alert on allowed connections\n        // | where DeviceAction !~ \"block-url\"\n        // Extract domain from RequestURL, if not present, extract it from AdditionalExtensions\n        | extend PA_Url = coalesce(RequestURL, \"None\")\n        | extend PA_Url = iif(isempty(PA_Url) and AdditionalExtensions !startswith \"PanOS\", extract(\"([^\\\"]+)\", 1, tolower(AdditionalExtensions)), trim('\"', PA_Url))\n        | extend PA_Url = iif(PA_Url !in~ ('None', 'http://None', 'https://None') and PA_Url !startswith \"http://\" and PA_Url !startswith \"https://\" and ApplicationProtocol !~ \"ssl\", strcat('http://', PA_Url), PA_Url)\n        | extend PA_Url = iif(PA_Url !in~ ('None', 'http://None', 'https://None') and PA_Url !startswith \"https://\" and ApplicationProtocol =~ \"ssl\", strcat('https://', PA_Url), PA_Url)\n        | extend Domain = trim(@\"\"\"\", tostring(parse_url(PA_Url).Host))\n        | where isnotempty(Domain)\n        | extend Domain = tolower(Domain)\n        | extend parts = split(Domain, '.')\n        // Split out the top-level domain (TLD) for the purpose of checking if we have any TI indicators with this TLD to match on\n        | extend tld = parts[(array_length(parts)-1)]\n        // Validate parsed domain by checking TLD against TLDs from the threat feed and drop domains where there is no chance of a match\n        | where tld in~ (list_tlds)\n        | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n    ) on $left.TI_DomainEntity == $right.Domain\n    | where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n    // Group the results by IndicatorId and Domain and keep only the latest CommonSecurityLog_TimeGenerated\n    | summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, Domain\n    // Select the desired fields for the final result set\n    | project CommonSecurityLog_TimeGenerated, Description, ActivityGroupNames, PA_Url, Domain, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DeviceAction, DestinationIP, DestinationPort, DeviceName, SourceIP, SourcePort, ApplicationProtocol, RequestMethod, Type, TI_DomainEntity\n    // Add a new field 'timestamp' for convenience, using the CommonSecurityLog_TimeGenerated as its value\n    | extend timestamp = CommonSecurityLog_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This queries GitLab Application logs to list external user accounts (i.e.: account not in allow-listed domains) which have been added to GitLab users.\n Topic: GitLab"}, {"role": "assistant", "content": "// List of allow-listed domains\nlet allowedDomain = pack_array(\"mydomain.com\");\nGitLabAudit\n| where AddAction == \"user\"\n| project AuthorName, IPAddress, User = EntityName\n| join (GitLabApp \n| where UserAdded == 1\n| parse kind=regex Message with \"User \\\"\" User \"\\\"\" EmailAddress \" was created\"\n| project tostring(User), EmailAddress = substring(EmailAddress,2,strlen(EmailAddress)-3)) on User\n| project  AuthorName, IPAddress, User, EmailAddress, DomainName = tostring(extract(\"@(.*)$\", 1, EmailAddress))\n| where allowedDomain !contains DomainName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An attacker with access to Azure DevOps could create a pipeline to inject artifacts used by other pipelines, or to create a malicious software build that looks legitimate by using a pipeline that incorporates legitimate elements. \nAn attacker would also likely want to cover their tracks once conducting such activity. This query looks for Pipelines created and deleted within the same day, this is unlikely to be legitimate user activity in the majority of cases.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "let timeframe = 3d;\n// Get Release Pipeline Creation Events and group by day\nAzureDevOpsAuditing\n| where TimeGenerated > ago(timeframe)\n| where OperationName =~ \"Release.ReleasePipelineCreated\"\n// Group by day\n| extend timekey = bin(TimeGenerated, 1d)\n| extend PipelineId = tostring(Data.PipelineId)\n| extend PipelineName = tostring(Data.PipelineName)\n// Rename some columns to make output clearer\n| project-rename TimeCreated = TimeGenerated, CreatingUser = ActorUPN, CreatingUserAgent = UserAgent, CreatingIP = IpAddress\n// Join with Release Pipeline Deletions where Pipeline ID is the same and deletion occurred on same day as creation\n| join (AzureDevOpsAuditing\n| where TimeGenerated > ago(timeframe)\n| where OperationName =~ \"Release.ReleasePipelineDeleted\"\n// Group by day\n| extend timekey = bin(TimeGenerated, 1d)\n| extend PipelineId = tostring(Data.PipelineId)\n| extend PipelineName = tostring(Data.PipelineName)\n// Rename some things to make the output clearer\n| project-rename TimeDeleted = TimeGenerated,DeletingUser = ActorUPN, DeletingUserAgent = UserAgent, DeletingIP = IpAddress) on PipelineId, timekey\n| project TimeCreated, TimeDeleted, PipelineName, PipelineId, CreatingUser, CreatingIP, CreatingUserAgent, DeletingUser, DeletingIP, DeletingUserAgent, ScopeDisplayName, ProjectName, Data, OperationName, OperationName1\n| extend timestamp = TimeCreated\n| extend CreatingUserAccountName = tostring(split(CreatingUser, \"@\")[0]), CreatingUserAccountUPNSuffix = tostring(split(CreatingUser, \"@\")[1])\n| extend DeletingUserAccountName = tostring(split(DeletingUser, \"@\")[0]), DeletingUserAccountUPNSuffix = tostring(split(DeletingUser, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for blocked files.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "CiscoWSAEvent\n| where TimeGenerated > ago(24h)\n| where DvcAction =~ 'BLOCK_ADMIN_FILE_TYPE'\n| summarize count() by UrlOriginal\n| extend URLCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when same malware was detected for multiple user account.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where EventType has_all ('virtual', 'analyzer')\n| where isnotempty(VirusName)\n| summarize count() by DstUserName, VirusName, bin(TimeGenerated, 15m)\n| where count_ >= 2\n| extend AccountCustomEntity = DstUserName, MalwareCustomEntity = VirusName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query joins UEBA to Security Alerts from Microsoft products for a correlation of Internet Service Provider anomalies to data exfiltration (watchlist options). For more information, see https://docs.microsoft.com/azure/sentinel/watchlists\n Topic: MicrosoftPurviewInsiderRiskManagement"}, {"role": "assistant", "content": "let ExfiltrationAlerts = SecurityAlert\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UserPrincipalName = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UserPrincipalName <> \"\"\n| where Tactics contains \"exfiltration\"\n| summarize PreviousSecurityAlertLinks=make_set(AlertLink) by UserPrincipalName, AlertName, TimeGenerated\n| where PreviousSecurityAlertLinks contains \"https\";\nBehaviorAnalytics\n| where ActivityInsights contains \"ISP\"\n| extend ISPAnomalies = strcat(ActivityInsights)\n| join kind=innerunique(ExfiltrationAlerts) on UserPrincipalName\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UserPrincipalName == $right.SearchKey\n| project UserPrincipalName, AlertName, PreviousSecurityAlertLinks, ISPAnomalies, TimeGenerated\n| sort by TimeGenerated desc\n| limit 25\n| extend AccountCustomEntity = UserPrincipalName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible webshell on host.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where EventMessage has 'Possible webshell'\n| extend HostCustomEntity = DstHostname, MalwareCustomEntity = ThreatName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a privileged role being assigned to a user outside of PIM\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#things-to-monitor-1\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where Category =~ \"RoleManagement\"\n| where OperationName has \"Add member to role outside of PIM\"\n        or (LoggedByService =~ \"Core Directory\" and OperationName =~ \"Add member to role\" and Identity != \"MS-PIM\")\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend TargetUserPrincipalName = tostring(TargetResource.userPrincipalName)\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n| extend InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for users with high number of threats.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where TimeGenerated > ago(24h)\n| where isnotempty(SecurityRiskName)\n| summarize threats = makeset(SecurityRiskName) by DstUserName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert leverages Defender for IoT to detect an unusually high bandwidth which may be an indication of a new service/process or malicious activity on the network. An example scenario is a cyber threat attempting to manipulate the SCADA network.\n Topic: IoTOTThreatMonitoringwithDefenderforIoT"}, {"role": "assistant", "content": "SecurityAlert\n| where ProviderName == \"IoTSecurity\"\n| where AlertName in (\"Abnormal Traffic Bandwidth\", \"Abnormal Traffic Bandwidth Between Devices\", \"ARP Spoofing\", \"ICMP Flooding\")\n| extend ExtendedProperties = parse_json(ExtendedProperties)\n| where tostring(ExtendedProperties.isNew) == \"True\"\n| extend DeviceId = tostring(ExtendedProperties.DeviceId), \n         SourceDeviceAddress = tostring(ExtendedProperties.SourceDeviceAddress), \n         DestDeviceAddress = tostring(ExtendedProperties.DestinationDeviceAddress), \n         RemediationSteps = tostring(parse_json(RemediationSteps)[0]), \n         Protocol = tostring(ExtendedProperties.Protocol), \n         AlertManagementUri = tostring(ExtendedProperties.AlertManagementUri)\n| project\n  TimeGenerated,\n  DeviceId,\n  ProductName,\n  ProductComponentName,\n  AlertSeverity,\n  AlertName,\n  Description,\n  Protocol,\n  SourceDeviceAddress,\n  DestDeviceAddress,\n  RemediationSteps,\n  Tactics,\n  Entities,\n  VendorOriginalId,\n  AlertLink,\n  AlertManagementUri,\n  Techniques\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected creation of new CRUD S3 policy and afterwards used one of the attach policy operations (AttachUserPolicy/AttachRolePolicy/AttachGroupPolicy). This might indicate a privilege escalation technique that attackers could use.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\nlet createPolicy =  dynamic([\"CreatePolicy\", \"CreatePolicyVersion\"]);\nlet timeframe = 1d;\nlet lookback = 14d;\n// Creating Master table with all the events to use with materialize for better performance\nlet EventInfo = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName in (EventNameList) or EventName in (createPolicy)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\");\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\nlet FullAdminPolicyEvents =  materialize(  EventInfo\n| where TimeGenerated >= ago(lookback)\n| where EventName in (createPolicy)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and (Action contains \"s3:Create\" and Action contains \"s3:Get\" and Action contains \"s3:Put\" and Action contains \"s3:Delete\") and Resource == \"*\" and Condition == \"\"\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn, RecipientAccountId, AccountName, AccountUPNSuffix\n| project-rename StartTime = TimeGenerated  );\nlet PolicyAttach = materialize(  EventInfo\n| where TimeGenerated >= ago(timeframe)\n| where EventName in (EventNameList) and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\"/\")[1])\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName, UserIdentityType , UserIdentityArn, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, PolicyName\n| extend AttachEvent = pack(\"StartTime\", StartTime, \"EndTime\", EndTime, \"EventName\", EventName, \"UserIdentityType\",   UserIdentityType, \"SourceIpAddress\", SourceIpAddress, \"AccountName\", AccountName, \"AccountUPNSuffix\", AccountUPNSuffix, \"RecipientAccountId\", RecipientAccountId, \"UserIdentityArn\", UserIdentityArn)\n| project EventSource, PolicyName, AttachEvent, AttachEventCount, RecipientAccountId, AccountName, AccountUPNSuffix\n);\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\nFullAdminPolicyEvents\n| join kind=leftouter\n(\n    PolicyAttach\n)\non PolicyName\n| project-away PolicyName1\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is designed to monitor assets within the Maturity Model for Event Log Management (M-21-31) standard. The alert triggers when a monitored asset fails to provide a heartbeat within 24 hours.\n Topic: MaturityModelForEventLogManagementM2131"}, {"role": "assistant", "content": "let LastHeartbeatTime = Heartbeat\n| summarize LastHeartbeat_Time = arg_max(TimeGenerated, *) by ResourceId;\nHeartbeat\n| where TimeGenerated > ago(14d)\n| summarize LastHeartbeat_Hours = datetime_diff(\"hour\",now(), max(TimeGenerated)) by ResourceId\n| where ResourceId <> \"\"\n| where ResourceId <> \"None\"\n| join kind=inner (LastHeartbeatTime) on ResourceId\n| where LastHeartbeat_Hours > 24\n| project LastHeartbeat_Hours, LastHeartbeat_Time, Computer, ComputerIP, Category, OSType, OSName, ResourceId, SubscriptionId, ResourceGroup, RemoteIPCountry \n| sort by LastHeartbeat_Hours desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when 20 or more failed attempts from a given client IP in 1 minute occur on the IIS server.\nThis could be indicative of an attempted brute force. This could also simply indicate a misconfigured service or device.\nRecommendations: Validate that these are expected connections from the given Client IP.  If the client IP is not recognized, potentially block these connections at the edge device.\nIf these are expected connections, verify the credentials are properly configured on the system, service, application or device that is associated with the client IP.\nReferences:\nIIS status code mapping: https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\nWin32 Status code mapping: https://msdn.microsoft.com/library/cc231199.aspx\n Topic: Detections"}, {"role": "assistant", "content": "let timeBin = 1m;\nlet failedThreshold = 20;\nW3CIISLog\n| where scStatus in (\"401\",\"403\")\n| where csUserName != \"-\"\n| extend scStatusFull = strcat(scStatus, \".\",scSubStatus)\n// Map common IIS codes\n| extend scStatusFull_Friendly = case(\nscStatusFull == \"401.0\", \"Access denied.\",\nscStatusFull == \"401.1\", \"Logon failed.\",\nscStatusFull == \"401.2\", \"Logon failed due to server configuration.\",\nscStatusFull == \"401.3\", \"Unauthorized due to ACL on resource.\",\nscStatusFull == \"401.4\", \"Authorization failed by filter.\",\nscStatusFull == \"401.5\", \"Authorization failed by ISAPI/CGI application.\",\nscStatusFull == \"403.0\", \"Forbidden.\",\nscStatusFull == \"403.4\", \"SSL required.\",\n\"See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\")\n// Mapping to Hex so can be mapped using website in comments above\n| extend scWin32Status_Hex = tohex(tolong(scWin32Status))\n// Map common win32 codes\n| extend scWin32Status_Friendly = case(\nscWin32Status_Hex =~ \"775\", \"The referenced account is currently locked out and cannot be logged on to.\",\nscWin32Status_Hex =~ \"52e\", \"Logon failure: Unknown user name or bad password.\",\nscWin32Status_Hex =~ \"532\", \"Logon failure: The specified account password has expired.\",\nscWin32Status_Hex =~ \"533\", \"Logon failure: Account currently disabled.\",\nscWin32Status_Hex =~ \"2ee2\", \"The request has timed out.\",\nscWin32Status_Hex =~ \"0\", \"The operation completed successfully.\",\nscWin32Status_Hex =~ \"1\", \"Incorrect function.\",\nscWin32Status_Hex =~ \"2\", \"The system cannot find the file specified.\",\nscWin32Status_Hex =~ \"3\", \"The system cannot find the path specified.\",\nscWin32Status_Hex =~ \"4\", \"The system cannot open the file.\",\nscWin32Status_Hex =~ \"5\", \"Access is denied.\",\nscWin32Status_Hex =~ \"8009030e\", \"SEC_E_NO_CREDENTIALS\",\nscWin32Status_Hex =~ \"8009030C\", \"SEC_E_LOGON_DENIED\",\n\"See - https://msdn.microsoft.com/library/cc231199.aspx\")\n// decode URI when available\n| extend decodedUriQuery = url_decode(csUriQuery)\n// Count of failed attempts from same client IP\n| summarize makeset(decodedUriQuery), makeset(csUserName), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), FailedConnectionsCount = count() by bin(TimeGenerated, timeBin), cIP, Computer, sIP\n| where FailedConnectionsCount >= failedThreshold\n| project TimeGenerated, cIP, set_csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_sPort, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, FailedConnectionsCount\n| order by FailedConnectionsCount\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in CommonSecurityLog from Recorded Future Hash Observed in Underground Virus Testing Sites RiskList.\n Topic: Recorded Future"}, {"role": "assistant", "content": "// Identifies a match in CommonSecurityLog from the Recorded Future Hashes Observed in Underground Virus Testing Sites\nlet dt_lookBack = 1h;\nlet ioc_lookBack = 1d;\nlet fileHashIndicators = ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n// Picking up only Recorded Future IOC's that have been observed in undersground testing sites\n| where Description == \"Recorded Future - HASH - Observed in Underground Virus Testing Sites\"\n| where Active == true\n| where isnotempty(FileHashValue);\n// Handle matches against both lower case and uppercase versions of the hash:\n(fileHashIndicators | extend  FileHashValue = tolower(FileHashValue)\n| union (fileHashIndicators | extend FileHashValue = toupper(FileHashValue)))\n| join (\n  CommonSecurityLog | where TimeGenerated >= ago(dt_lookBack)\n  | where isnotempty(FileHash)\n  | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n  )\non $left.FileHashValue == $right.FileHash\n| where CommonSecurityLog_TimeGenerated >= TimeGenerated and CommonSecurityLog_TimeGenerated < ExpirationDateTime\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nCommonSecurityLog_TimeGenerated, SourceIP, SourcePort, DestinationIP, DestinationPort, SourceUserID, SourceUserName, DeviceName, DeviceAction, RequestURL, DestinationUserName, DestinationUserID, ApplicationProtocol, Activity, FileHash, AdditionalInformation\n| extend AccountName = tostring(split(SourceUserName, \"@\")[0]), AccountUPNSuffix = tostring(split(SourceUserName, \"@\")[1])\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies modifications to an environments blocked file extensions and extracts the removed extension. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_frequency = 1h;\nlet default_attachments = split('ade;adp;app;asa;ashx;asmx;asp;bas;bat;cdx;cer;chm;class;cmd;com;config;cpl;crt;csh;dll;exe;fxp;hlp;hta;htr;htw;ida;idc;idq;inf;ins;isp;its;jar;js;jse;ksh;lnk;mad;maf;mag;mam;maq;mar;mas;mat;mau;mav;maw;mda;mdb;mde;mdt;mdw;mdz;msc;msh;msh1;msh1xml;msh2;msh2xml;mshxml;msi;msp;mst;ops;pcd;pif;prf;prg;printer;pst;reg;rem;scf;scr;sct;shb;shs;shtm;shtml;soap;stm;tmp;url;vb;vbe;vbs;vsmacros;vss;vst;vsw;ws;wsc;wsf;wsh', \";\");\nDataverseActivity\n| where TimeGenerated >= ago(query_frequency)\n| where Message == \"Update\" and EntityName =~ 'organization'\n| mv-expand Fields\n| where Fields.Name == \"blockedattachments\"\n| extend\n    UpdatedAttachments = split(tostring(Fields.Value), \";\"),\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| extend RemovedAttachments = set_difference(default_attachments, UpdatedAttachments)\n| project\n    TimeGenerated,\n    UserId,\n    ClientIp,\n    InstanceUrl,\n    RemovedAttachments,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query will identify instances where Service Principal credentials were added to an application by one user after the application was granted admin consent rights by another user.\n If a threat actor obtains access to an account with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.\n Additional information on OAuth Credential Grants can be found in RFC 6749 Section 4.4 or https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow.\n For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let auditLookbackStart = 2d;\nlet auditLookbackEnd = 1d;\nAuditLogs\n| where TimeGenerated >= ago(auditLookbackStart)\n| where OperationName =~ \"Consent to application\" \n| where Result =~ \"success\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\"\n      | extend targetResourceName = tostring(TargetResource.displayName),\n               targetResourceID = tostring(TargetResource.id),\n               targetResourceType = tostring(TargetResource.type),\n               targetModifiedProp = TargetResource.modifiedProperties\n  )\n| mv-apply Property = targetModifiedProp on \n  (\n      where Property.displayName =~ \"ConsentContext.IsAdminConsent\"\n      | extend isAdminConsent = trim(@'\"',tostring(Property.newValue))\n  )\n| mv-apply Property = targetModifiedProp on \n  (\n      where Property.displayName =~ \"ConsentAction.Permissions\"\n      | extend Consent_TargetPermissions = trim(@'\"',tostring(Property.newValue))\n  )\n| mv-apply Property = targetModifiedProp on \n  (\n      where Property.displayName =~ \"TargetId.ServicePrincipalNames\"\n      | extend Consent_TargetServicePrincipalNames = tostring(extract_all(@\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\",trim(@'\"',tostring(Property.newValue)))[0])\n  )\n| extend Consent_InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| extend Consent_InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend Consent_InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend Consent_InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend Consent_InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend Consent_InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| join kind=inner ( \nAuditLogs\n| where TimeGenerated  >= ago(auditLookbackEnd)\n| where OperationName =~ \"Add service principal credentials\"\n| where Result =~ \"success\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\"\n      | extend targetResourceName = tostring(TargetResource.displayName),\n               targetResourceID = tostring(TargetResource.id),\n               targetModifiedProp = TargetResource.modifiedProperties\n  )\n| mv-apply Property = targetModifiedProp on \n  (\n      where Property.displayName =~ \"KeyDescription\"\n      | extend Credential_TargetKeyDescription = trim(@'\"',tostring(Property.newValue))\n  )\n| mv-apply Property = targetModifiedProp on \n  (\n      where Property.displayName =~ \"Included Updated Properties\"\n      | extend UpdatedProperties = trim(@'\"',tostring(Property.newValue))\n  )\n| mv-apply Property = targetModifiedProp on \n  (\n      where Property.displayName =~ \"TargetId.ServicePrincipalNames\"\n      | extend Credential_TargetServicePrincipalNames = tostring(extract_all(@\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\",trim(@'\"',tostring(Property.newValue)))[0])\n  )\n| extend Credential_InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| extend Credential_InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend Credential_InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend Credential_InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend Credential_InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend Credential_InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n) on targetResourceName, targetResourceID\n| extend TimeConsent = TimeGenerated, TimeCred = TimeGenerated1\n| where TimeConsent < TimeCred \n| project TimeConsent, TimeCred, targetResourceName, targetResourceType, isAdminConsent, \nConsent_InitiatingUserOrApp, Consent_TargetServicePrincipalNames, Consent_TargetPermissions,\nConsent_InitiatingAppName, Consent_InitiatingAppServicePrincipalId, Consent_InitiatingUserPrincipalName, Consent_InitiatingAadUserId, Consent_InitiatingIpAddress,\nCredential_InitiatingUserOrApp, Credential_TargetServicePrincipalNames, Credential_TargetKeyDescription,\nCredential_InitiatingAppName, Credential_InitiatingAppServicePrincipalId, Credential_InitiatingUserPrincipalName, Credential_InitiatingAadUserId, Credential_InitiatingIpAddress\n| extend Consent_AccountName = tostring(split(Consent_InitiatingUserPrincipalName, \"@\")[0]), Consent_UPNSuffix = tostring(split(Consent_InitiatingUserPrincipalName, \"@\")[1])\n| extend Credential_AccountName = tostring(split(Credential_InitiatingUserPrincipalName, \"@\")[0]), Credential_UPNSuffix = tostring(split(Credential_InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when new authentication token is created for service account.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where PayloadMethodname =~ 'google.iam.admin.v1.GenerateAccessToken'\n| extend result = parse_json(todynamic(PayloadAuthorizationinfo))[0]['granted']\n| where result =~ 'true'\n| extend service_account = extract(@'serviceAccounts\\/(.*?)@', 1, PayloadResponseName)\n| project-away result\n| extend AccountName = tostring(split(service_account, \"@\")[0]), AccountUPNSuffix = tostring(split(service_account, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in DNSEvents from Recorded Future C2 DNS Name Domains Risklist.\n Topic: Recorded Future"}, {"role": "assistant", "content": "// Identifies a match in DnsEvent from the Recorded Future DOMAIN Malware C2 DNS Name \nlet dt_lookBack = 1h;\nlet ioc_lookBack = 1d;\n//Create a list of TLDs in our threat feed for later validation\nlet list_tlds = ThreatIntelligenceIndicator\n| where TimeGenerated > ago(ioc_lookBack)\n// Picking up only Recorded Future IOC's that are pertinent to the use case (Malware C2 Detection)\n| where Description == 'Recorded Future - Domains - Command and Control Activity'\n| where isnotempty(DomainName)\n| extend parts = split(DomainName, '.')\n| extend tld = parts[(array_length(parts)-1)]\n| summarize count() by tostring(tld)\n| summarize make_list(tld);\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| where Active == true\n// Picking up only Recorded Future IOC's that are pertinent to the use case (Malware C2 Detection)\n| where Description == 'Recorded Future - Domains - Command and Control Activity'\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(DomainName)\n| join (\n  DnsEvents\n  | where TimeGenerated > ago(dt_lookBack)\n  //Extract Domain patterns from syslog message\n  | where isnotempty(Name)\n  | extend parts = split(Name, '.')\n  //Split out the TLD\n  | extend tld = parts[(array_length(parts)-1)]\n  //Validate parsed Domain by checking if the TLD is in the list of TLDs in our threat feed\n  | where tld in~ (list_tlds)\n  | extend DNS_TimeGenerated = TimeGenerated\n  ) \non $left.DomainName==$right.Name\n| where DNS_TimeGenerated >= TimeGenerated and DNS_TimeGenerated < ExpirationDateTime\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| project LatestIndicatorTime, DomainName, Description, ConfidenceScore, AdditionalInformation, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, DNS_TimeGenerated, Computer, ClientIP, Name, QueryType\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The Okta risk engine auto-assigns risk levels to each login attempt. This query identifies admin operations originating from events associated with high-risk profiles.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let AdminActivity = dynamic([\"iam.role.create\",\"iam.role.permissions.add\",\"user.session.access_admin_app\",\"user.mfa.factor.suspend\", \"user.account.privilege.grant\", \"group.privilege.grant\", \"system.api_token.create\", \"user.session.impersonation.grant\"]);\nlet AdminOperations = OktaSSO\n| where eventType_s in (AdminActivity)\n| where outcome_result_s =~ 'SUCCESS' \n| summarize  StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by  actor_alternateId_s, actor_displayName_s, client_userAgent_os_s, client_userAgent_browser_s, client_device_s, client_userAgent_rawUserAgent_s, client_ipAddress_s, client_geographicalContext_country_s, client_geographicalContext_city_s, displayMessage_s, outcome_result_s, outcome_reason_s, column_ifexists('debugContext_debugData_logOnlySecurityData_s', \"\"), debugContext_debugData_threatSuspected_s, client_geographicalContext_geolocation_lat_d, client_geographicalContext_geolocation_lon_d, authenticationContext_externalSessionId_s;\nlet HighRiskEvents = OktaSSO\n| where eventType_s in ('policy.evaluate_sign_on' , 'user.session.start')\n| extend debugContext_debugData_logOnlySecurityData_s = column_ifexists('debugContext_debugData_logOnlySecurityData_s', '{}')\n| where parse_json(tostring(parse_json(debugContext_debugData_logOnlySecurityData_s).risk)).level =~ \"HIGH\"\n| where outcome_result_s =~ 'SUCCESS'\n| extend reasons = tostring(parse_json(tostring(parse_json(debugContext_debugData_logOnlySecurityData_s).risk)).reasons)\n| summarize  StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by  actor_alternateId_s, actor_displayName_s, client_userAgent_os_s, client_userAgent_browser_s, client_device_s, client_userAgent_rawUserAgent_s, client_ipAddress_s, client_geographicalContext_country_s, client_geographicalContext_city_s, displayMessage_s, outcome_result_s, outcome_reason_s, column_ifexists('debugContext_debugData_logOnlySecurityData_s', \"\"), debugContext_debugData_threatSuspected_s, client_geographicalContext_geolocation_lat_d, client_geographicalContext_geolocation_lon_d, authenticationContext_externalSessionId_s, reasons;\nAdminOperations\n| join kind=inner (HighRiskEvents) on actor_displayName_s, client_ipAddress_s, authenticationContext_externalSessionId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection focused on Suspicious deployment of AWS EC2 resource (virtual machine) scale sets was detected. This behavior might indicate that the threat actor is deploying computing resources for cryptocurrency mining activities.This detection centers around identifying suspicious instances of AWS EC2 resource deployment, particularly scale sets. Such behavior raises concerns of potential threat actor involvement, potentially indicative of efforts to deploy computing resources for the purpose of cryptocurrency mining activities.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "// Retrieve AWS CloudTrail events generated within the last day\nAWSCloudTrail\n// Filter events related to instance creation\n| where EventName =~ \"RunInstances\"\n// Exclude events with error messages\n| where isempty(ErrorMessage)\n// Extract the event source type\n| extend EventSourceSplit = split(EventSource, \".\")\n| extend Type = tostring(EventSourceSplit[0])\n// Extract instance-related details from the event data\n| extend instance = tostring(parse_json(RequestParameters).instanceType),platform = tostring(parse_json(ResponseElements).instancesSet.items[0].platform)\n// Determine the operating system platform\n| extend OSplatform = iff(isempty(platform), tostring(\"Linux\"), platform),CPU = tostring(parse_json(ResponseElements).instancesSet.items[0].cpuOptions),core = toint(parse_json(ResponseElements).instancesSet.items[0].cpuOptions.coreCount),corThread = toint(parse_json(ResponseElements).instancesSet.items[0].cpuOptions.threadsPerCore),InstanceId = tostring(parse_json(ResponseElements).instancesSet.items[0].instanceId)\n// Filter out instances with empty core values\n| where isnotempty(core)\n// Calculate the total compute based on core and thread counts\n| extend totalCorecompute = core * corThread\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n// Summarize relevant information for analysis\n| summarize Start= min(TimeGenerated),\n  end=   max(TimeGenerated),\n  totalgpu= sum(totalCorecompute)\n  by SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, UserAgent\n// Filter results based on total GPU compute and time duration\n| where totalgpu > 800\n| where datetime_diff('hour', end, Start) < 8\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies beaconing patterns from DNS logs based on recurrent frequency patterns. Such a potential outbound beaconing pattern to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let querystarttime = 2d;\nlet queryendtime = 1d;\nlet TimeDeltaThreshold = 10;\nlet TotalEventsThreshold = 15;\nlet PercentBeaconThreshold = 80;\n_Im_Dns(starttime=ago(querystarttime), endtime=ago(queryendtime))\n| where isnotempty(SrcIpAddr)\n| project TimeGenerated, SrcIpAddr, DnsQuery\n| sort by SrcIpAddr asc,TimeGenerated asc\n| serialize\n| extend nextTimeGenerated = next(TimeGenerated, 1), nextSrcIpAddr = next(SrcIpAddr, 1)\n| extend TimeDeltainSeconds = datetime_diff('second',nextTimeGenerated,TimeGenerated)\n| where SrcIpAddr == nextSrcIpAddr\n//Whitelisting criteria/ threshold criteria\n| where TimeDeltainSeconds > TimeDeltaThreshold\n| project TimeGenerated, TimeDeltainSeconds, SrcIpAddr, DnsQuery\n| summarize count(), make_list(TimeDeltainSeconds) by TimeDeltainSeconds, bin(TimeGenerated, 1h), SrcIpAddr, DnsQuery\n| summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds), TotalEvents=sum(count_)\nby bin(TimeGenerated, 1h), SrcIpAddr, DnsQuery\n| where TotalEvents > TotalEventsThreshold\n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent > PercentBeaconThreshold\n| order by BeaconPercent\n| take 50\n| extend IP_0_Address = SrcIpAddr\n| extend DNS_0_DomainName = DnsQuery\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\nTwo common accessibility programs are C:\\Windows\\System32\\sethc.exe, launched when the shift key is pressed five times and C:\\Windows\\System32\\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. [1]\nRef: https://attack.mitre.org/techniques/T1546/008/\n Topic: Detections"}, {"role": "assistant", "content": "let ImagesList = dynamic ([\"sethc.exe\",\"utilman.exe\",\"osk.exe\",\"Magnify.exe\",\"Narrator.exe\",\"DisplaySwitch.exe\",\"AtBroker.exe\"]); \nlet OriginalFileNameList = dynamic ([\"sethc.exe\",\"utilman.exe\",\"osk.exe\",\"Magnify.exe\",\"Narrator.exe\",\"DisplaySwitch.exe\",\"AtBroker.exe\",\"SR.exe\",\"utilman2.exe\",\"ScreenMagnifier.exe\"]); \nEvent\n| where EventLog == \"Microsoft-Windows-Sysmon/Operational\" and EventID==1\n| parse EventData with * 'ProcessId\">' ProcessId \"<\" * 'Image\">' Image \"<\" * 'OriginalFileName\">' OriginalFileName \"<\" *\n| where Image has_any (ImagesList) and not (OriginalFileName has_any (OriginalFileNameList))\n| parse EventData with * 'ProcessGuid\">' ProcessGuid \"<\" * 'Description\">' Description \"<\" * 'CommandLine\">' CommandLine \"<\" * 'CurrentDirectory\">' CurrentDirectory \"<\" * 'User\">' User \"<\" * 'LogonGuid\">' LogonGuid \"<\" * 'Hashes\">' Hashes \"<\" * 'ParentProcessGuid\">' ParentProcessGuid \"<\" * 'ParentImage\">' ParentImage \"<\" * 'ParentCommandLine\">' ParentCommandLine \"<\" * 'ParentUser\">' ParentUser \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, User, ParentImage, ParentProcessGuid, ParentCommandLine, ParentUser, Image, ProcessId, ProcessGuid, CommandLine, Description, OriginalFileName, CurrentDirectory, Hashes\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(User, \"\\\\\")[1]), AccountNTDomain = tostring(split(User, \"\\\\\")[0])\n| extend ImageFileName = tostring(split(Image, \"\\\\\")[-1])\n| extend ImageDirectory = replace_string(Image, ImageFileName, \"\")\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies evidence of brute force activity against a Windows 365 Cloud PC by highlighting multiple authentication failures and by a successful authentication within a given time window.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let authenticationWindow = 20m;\nlet sensitivity = 2.5;\nSigninLogs\n| where AppDisplayName =~ \"Windows Sign In\"\n| extend FailureOrSuccess = iff(ResultType in (\"0\", \"50125\", \"50140\", \"70043\", \"70044\"), \"Success\", \"Failure\")\n| summarize FailureCount = countif(FailureOrSuccess==\"Failure\"), SuccessCount = countif(FailureOrSuccess==\"Success\"), IPAddresses = make_set(IPAddress,1000)\n                          by bin(TimeGenerated, authenticationWindow), UserDisplayName, UserPrincipalName\n| extend FailureSuccessDiff = FailureCount - SuccessCount\n| where FailureSuccessDiff > 0\n| summarize Diff = make_list(FailureSuccessDiff, 10000), TimeStamp = make_list(TimeGenerated, 10000) by UserDisplayName, UserPrincipalName//, tostring(IPAddresses)\n| extend (Anomalies, Score, Baseline) = series_decompose_anomalies(Diff, sensitivity, -1, 'linefit')  \n| mv-expand Diff to typeof(double), TimeStamp to typeof(datetime), Anomalies to typeof(double), Score to typeof(double), Baseline to typeof(long)\n| where Anomalies > 0\n| summarize by UserDisplayName, UserPrincipalName, Anomalies, Score, Baseline, FailureToSuccessDiff = Diff\n| join kind=leftouter (\n      SigninLogs\n      | where AppDisplayName =~ \"Windows Sign In\"\n      | extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n      | extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n      | extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)\n      | summarize StartTime = min(TimeGenerated), \n                  EndTime = max(TimeGenerated), \n                  IPAddresses = make_set(IPAddress,100), \n                  OS = make_set(OS,20), \n                  Browser = make_set(Browser,20), \n                  City = make_set(City,100), \n                  ResultType = make_set(ResultType,100)\n              by UserDisplayName, UserPrincipalName, UserId, AppDisplayName\n  ) on UserDisplayName, UserPrincipalName\n| project-away UserDisplayName1, UserPrincipalName1\n| extend IPAddressFirst = tostring(IPAddresses[0])\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect activities from a location that was not recently or was never visited by the user or by any user in your organization.\n Topic: GitHub"}, {"role": "assistant", "content": "let LearningPeriod = 7d;\nlet RunTime = 1h;\nlet StartTime = 1h;\nlet EndRunTime = StartTime - RunTime;\nlet EndLearningTime = StartTime + LearningPeriod;\nlet GitHubCountryCodeLogs = (GitHubAuditData\n| where Country != \"\");\n  GitHubCountryCodeLogs\n| where TimeGenerated between (ago(EndLearningTime) .. ago(StartTime))\n| summarize makeset(Country) by Actor\n| join kind=innerunique (\n  GitHubCountryCodeLogs\n  | where TimeGenerated between (ago(StartTime) .. ago(EndRunTime))\n  | distinct Country, Actor, TimeGenerated\n) on Actor \n| where set_Country !contains Country\n| extend timestamp = TimeGenerated\n| extend AccountName = tostring(split(Actor, \"@\")[0]), AccountUPNSuffix = tostring(split(Actor, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies user accounts which has over 50 Windows logon failures today and at least 33% of the count of logon failures over the previous 7 days.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = 8d;\nlet endtime = 1d;\nlet threshold = 0.333;\nlet countlimit = 50;\nSecurityEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4625 and AccountType =~ \"User\"\n| where IpAddress !in (\"127.0.0.1\", \"::1\")\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), CountToday = count() by EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress, Process\n| join kind=leftouter (\n    SecurityEvent\n    | where TimeGenerated between (ago(starttime) .. ago(endtime))\n    | where EventID == 4625 and AccountType =~ \"User\"\n    | where IpAddress !in (\"127.0.0.1\", \"::1\")\n    | summarize CountPrev7day = count() by EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress\n) on EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress\n| where CountToday >= coalesce(CountPrev7day,0)*threshold and CountToday >= countlimit\n//SubStatus Codes are detailed here - https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4625\n| extend Reason = case(\nSubStatus =~ '0xC000005E', 'There are currently no logon servers available to service the logon request.',\nSubStatus =~ '0xC0000064', 'User logon with misspelled or bad user account',\nSubStatus =~ '0xC000006A', 'User logon with misspelled or bad password',\nSubStatus =~ '0xC000006D', 'Bad user name or password',\nSubStatus =~ '0xC000006E', 'Unknown user name or bad password',\nSubStatus =~ '0xC000006F', 'User logon outside authorized hours',\nSubStatus =~ '0xC0000070', 'User logon from unauthorized workstation',\nSubStatus =~ '0xC0000071', 'User logon with expired password',\nSubStatus =~ '0xC0000072', 'User logon to account disabled by administrator',\nSubStatus =~ '0xC00000DC', 'Indicates the Sam Server was in the wrong state to perform the desired operation',\nSubStatus =~ '0xC0000133', 'Clocks between DC and other computer too far out of sync',\nSubStatus =~ '0xC000015B', 'The user has not been granted the requested logon type (aka logon right) at this machine',\nSubStatus =~ '0xC000018C', 'The logon request failed because the trust relationship between the primary domain and the trusted domain failed',\nSubStatus =~ '0xC0000192', 'An attempt was made to logon, but the Netlogon service was not started',\nSubStatus =~ '0xC0000193', 'User logon with expired account',\nSubStatus =~ '0xC0000224', 'User is required to change password at next logon',\nSubStatus =~ '0xC0000225', 'Evidently a bug in Windows and not a risk',\nSubStatus =~ '0xC0000234', 'User logon with account locked',\nSubStatus =~ '0xC00002EE', 'Failure Reason: An Error occurred during Logon',\nSubStatus =~ '0xC0000413', 'Logon Failure: The machine you are logging onto is protected by an authentication firewall. The specified account is not allowed to authenticate to the machine',\nstrcat('Unknown reason substatus: ', SubStatus))\n| extend WorkstationName = iff(WorkstationName == \"-\" or isempty(WorkstationName), Computer , WorkstationName)\n| project StartTime, EndTime, EventID, Account, LogonTypeName, SubStatus, Reason, AccountType, Computer, WorkstationName, IpAddress, CountToday, CountPrev7day, Avg7Day = round(CountPrev7day*1.00/7,2), Process\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), Computer = make_set(Computer,128), IpAddressList = make_set(IpAddress,128), sum(CountToday), sum(CountPrev7day), avg(Avg7Day)\nby EventID, Account, LogonTypeName, SubStatus, Reason, AccountType, WorkstationName, Process\n| order by sum_CountToday desc nulls last\n| extend timestamp = StartTime, NTDomain = tostring(split(Account, '\\\\', 0)[0]), Name = tostring(split(Account, '\\\\', 1)[0]), HostName = tostring(split(WorkstationName, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(WorkstationName, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when the MFA factor or type for all user accounts are disabled. Once this analytics rule is triggered it will group all related future alerts for upto an hour when all related entities are the same.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "OnePasswordEventLogs_CL\n| where log_source == \"auditevents\"\n| where action == \"disblmfa\"\n| where object_type == \"account\"\n| extend\n    ActorUsername = actor_details.email\n    , SrcIpAddr = session.ip"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when an actor grants, or updates their own permissions via a vault. Once this analytics rule is triggered it will group all related future alerts for upto an hour when all related entities are the same.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "OnePasswordEventLogs_CL\n| where log_source == \"auditevents\"\n| where action has_any(\"grant\", \"update\")\n| where object_type == \"uva\"\n| where tostring(actor_details.email) == tostring(aux_details.email)\n| extend\n    TargetUsername = aux_details.email\n    , ActorUsername = actor_details.email\n    , SrcIpAddr = session.ip"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies Palo Alto Threat signatures from unusual IP addresses which are not historically seen. \nThis detection is also leveraged and required for MDE and PAN Fusion scenario\nhttps://docs.microsoft.com/Azure/sentinel/fusion-scenario-reference#network-request-to-tor-anonymization-service-followed-by-anomalous-traffic-flagged-by-palo-alto-networks-firewall\n Topic: Azure Cloud NGFW by Palo Alto Networks"}, {"role": "assistant", "content": "let starttime = 7d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet HistThreshold = 25; \nlet CurrThreshold = 10; \nlet HistoricalThreats = fluentbit_CL\n| where ident_s == \"THREAT\"\n| extend message = parse_json(Message)\n| where isnotempty(message.src_ip)\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where message.sub_type in ('spyware', 'scan', 'file', 'vulnerability', 'flood', 'packet', 'virus','wildfire', 'wildfire-virus')\n| extend src_ip = tostring(message.src_ip)\n| summarize TotalEvents = count(), ThreatTypes = make_set(message.sub_type), DestinationIpList = make_set(message.dst), FirstSeen = min(TimeGenerated) , LastSeen = max(TimeGenerated) by src_ip, tostring(message.action), FirewallName_s;\nlet CurrentHourThreats = fluentbit_CL\n| where ident_s == \"THREAT\"\n| extend message = parse_json(Message)\n| where isnotempty(message.src_ip)\n| where TimeGenerated > ago(timeframe)\n| where message.sub_type in ('spyware', 'scan', 'file', 'vulnerability', 'flood', 'packet', 'virus','wildfire', 'wildfire-virus')\n| extend src_ip = tostring(message.src_ip)\n| summarize TotalEvents = count(), ThreatTypes = make_set(message.sub_type), DestinationIpList = make_set(message.dst), FirstSeen = min(TimeGenerated) , LastSeen = max(TimeGenerated) by src_ip, tostring(message.action), FirewallName_s;\nCurrentHourThreats \n| where TotalEvents < CurrThreshold\n| join kind = leftanti (HistoricalThreats \n| where TotalEvents > HistThreshold) on src_ip\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection focuses on identifying potentially suspicious activities involving the execution of AWS Command Line Interface (CLI) commands, particularly focusing on reconnaissance operations.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let SuspiciousCommands= pack_array('iam.list-users', 'iam.list-groups', 'ec2.describe-vpcs', 'ec2.describe-subnets', 'route53.list-hosted-zones', 'kms.list-keys', 'kms.list-aliases', 'ecs.list-clusters', 'ecs.list-services', 'iam.list-roles', 'iam.get-user''iam.list-access-keys', 'ec2.describe-security-groups', 'ec2.describe-network-acls', 'ec2.describe-network-interfaces', 'ec2.describe-route-tables', 'ec2.describe-internet-gateways', 'ec2.describe-vpc-peering-connections', 'ec2.describe-network-interfaces', 'ec2.describe-network-interfaces', 'ec2.describe-transit-gateway-vpc-attachment', 'ec2.describe-vpc');\n// Retrieve AWS CloudTrail events\nAWSCloudTrail \n// Filter events with UserAgent starting with \"aws-cli\"\n| where UserAgent startswith \"aws-cli\" \n// Extract the command from the UserAgent using string splitting\n| extend command = tostring(split(UserAgent, \"off command/\", 1)[0])  \n// Filter events based on predefined suspicious command list\n| where command has_any (SuspiciousCommands)  \n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n// Summarize relevant information for further analysis\n| summarize \n    CommadCount = dcount(command), \n    EventCount = dcount(EventName), \n    commands = make_list(command), \n    Events = make_list(EventName) \n    by \n    bin(TimeGenerated, 1min), \n    RecipientAccountId, AccountName, AccountUPNSuffix, \n    UserIdentityUserName, \n    SourceIpAddress, \n    SessionMfaAuthenticated \n// Filter out results with a sufficient count of unique suspicious commands in 1 min time window\n| where CommadCount >= 8\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies failed logon attempts from unknown users in Syslog authpriv logs. The unknown user means the account that tried to log in isnt provisioned on the machine. A few hits could indicate someone attempting to access a machine they arent authorized to access. \nIf there are many of hits, especially from outside your network, it could indicate a brute force attack. \nDefault threshold for logon attempts is 15.\n Topic: Syslog"}, {"role": "assistant", "content": "let threshold = 15;\n// Below pulls messages from syslog-authpriv logs where there was an authentication failure with an unknown user.\n// IP address of system attempting logon is also extracted from the SyslogMessage field. Some of these messages\n// are aggregated.\nSyslog\n| where Facility =~ \"authpriv\"\n| where SyslogMessage has \"authentication failure\" and SyslogMessage has \" uid=0\"\n| extend RemoteIP = extract(@\".*?rhost=([\\d.]+).*?\", 1,SyslogMessage)\n| project TimeGenerated, Computer, ProcessName, HostIP, RemoteIP, ProcessID\n| join kind=innerunique (\n    // Below pulls messages from syslog-authpriv logs that show each instance an unknown user tried to logon. \n    Syslog \n    | where Facility =~ \"authpriv\"\n    | where SyslogMessage has \"user unknown\"\n    | project Computer, HostIP, ProcessID\n    ) on Computer, HostIP, ProcessID\n// Count the number of failed logon attempts by External IP and internal machine\n| summarize FirstLogonAttempt = min(TimeGenerated), LatestLogonAttempt = max(TimeGenerated), TotalLogonAttempts = count() by Computer, HostIP, RemoteIP\n// Calculate the time between first and last logon attempt (AttemptPeriodLength)\n| extend TimeBetweenLogonAttempts = LatestLogonAttempt - FirstLogonAttempt\n| where TotalLogonAttempts >= threshold\n| project FirstLogonAttempt, LatestLogonAttempt, TimeBetweenLogonAttempts, TotalLogonAttempts, SourceAddress = RemoteIP, Computer,  HostIP\n| sort by Computer asc nulls last\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in OfficeActivity data.\n Topic: ThreatConnect"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\n  ThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where ExpirationDateTime > now() and Active == true\n// Filter out non ThreatConnect TI Sources\n| where SourceSystem startswith \"ThreatConnect-\"\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(Url)\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n  OfficeActivity\n  | where TimeGenerated >= ago(dt_lookBack)\n  //Extract the Url from a number of potential fields\n  | extend Url = iif(OfficeWorkload == \"AzureActiveDirectory\",extract(\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+);\", 1,ModifiedProperties),tostring(parse_json(ModifiedProperties)[12].NewValue))\n  | where isnotempty(Url)\n  // Ensure we get a clean URL\n  | extend Url = tostring(split(Url, ';')[0])\n  | extend OfficeActivity_TimeGenerated = TimeGenerated\n  // Project a single user identity that we can use for entity mapping\n  | extend User = iif(isnotempty(UserId), UserId, iif(isnotempty(Actor), tostring(parse_json(Actor)[0].ID), tostring(parse_json(Parameters)[0].Value)))\n) on Url\n| where OfficeActivity_TimeGenerated < ExpirationDateTime\n| summarize OfficeActivity_TimeGenerated = arg_max(OfficeActivity_TimeGenerated, *) by IndicatorId, Url\n| project OfficeActivity_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Operation,\nUserType, OfficeWorkload, Parameters, Url, User\n| extend timestamp = OfficeActivity_TimeGenerated, Name = tostring(split(User, '@', 0)[0]), UPNSuffix = tostring(split(User, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when user email linked to account changes.\n Topic: SlackAudit"}, {"role": "assistant", "content": "let lbperiod_max_d = 14d;\nlet lbperiod_min_d = 1d;\nlet lb_time_max_h = 24h;\nSlackAudit\n| where TimeGenerated between (ago(lbperiod_max_d) .. (lbperiod_min_d))\n| where Action =~ 'user_deactivated'\n| summarize deactivation_time = max(TimeGenerated) by EntityUserEmail, EntityUserId\n| project deactivation_time, EntityUserEmail, EntityUserId\n| join (SlackAudit\n      | where TimeGenerated > ago(lb_time_max_h)\n      | where Action =~ 'user_login'\n      | summarize new_login_time = max(TimeGenerated) by SrcUserEmail, SrcUserIdentity\n      | project new_login_time, SrcUserEmail, EntityUserId = SrcUserIdentity) on EntityUserId\n| where EntityUserEmail == SrcUserEmail\n| where deactivation_time < new_login_time\n| extend AccountCustomEntity = SrcUserEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies abnormal ports used by machines to connect to a destination IP based on learning period activity. This can indicate exfiltration attack or C2 control from machines in the organization by using new a port that has never been used.\n Topic: Azure Firewall"}, {"role": "assistant", "content": "let LearningPeriod = 7d; \nlet RunTime = 1d; \nlet StartLearningPeriod = LearningPeriod + RunTime; \nlet EndRunTime = RunTime - 1d; \nlet AllowedCommonPorts = dynamic([80, 443]); \nlet TrafficLogs = (union isfuzzy=true\n(AzureDiagnostics\n| where OperationName == \"AzureFirewallApplicationRuleLog\" or OperationName == \"AzureFirewallNetworkRuleLog\" \n| parse msg_s with * \"from \" SourceIp \":\" SourcePort:int \" to \" Fqdn \":\" DestinationPort:int \". \" * \"Action: \" Action \".\" *\n| where isnotempty(SourceIp)),\n(AZFWNetworkRule\n| extend Fqdn = DestinationIp\n| where isnotempty(Fqdn) and isnotempty(SourceIp)),\n(AZFWApplicationRule\n| where isnotempty(Fqdn) and isnotempty(SourceIp))); \nlet LearningSrcIp = (TrafficLogs \n| where TimeGenerated between (ago(StartLearningPeriod) .. ago(RunTime)) \n| distinct SourceIp ,DestinationPort); \nlet AlertTimeSrcIpToPort = (TrafficLogs \n| where TimeGenerated between (ago(RunTime) .. ago(EndRunTime)) \n| distinct SourceIp ,DestinationPort, Fqdn); \nAlertTimeSrcIpToPort \n| join kind=leftantisemi (LearningSrcIp) on SourceIp ,DestinationPort\n| where DestinationPort  !in (AllowedCommonPorts)\n| extend IPCustomEntity = SourceIp, URLCustomEntity = Fqdn\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query searches for license revoke and assignment in quick succession to user, potential sign of data exfiltration.\nhttps://www.mitiga.io/blog/mitiga-security-advisory-lack-of-forensic-visibility-with-the-basic-license-in-google-drive\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "// Adjust timeDelta (in minutes) to adjust the duration between two license revoke and assignment events   \nlet timeDelta = 15;\n// Adjust lookbackPeriod (in hours) to adjust the time window of search \nlet lookbackPeriod = 24h;\nlet usersWithLicenseRevoke = GWorkspaceActivityReports\n  | where TimeGenerated > ago(lookbackPeriod)\n  | where EventMessage =~ 'USER_LICENSE_REVOKE'\n  | sort by TimeGenerated desc \n  | summarize by TimeGenerated, UserEmail, EventMessage, SrcIpAddr;\nlet usersWithLicenseAssignment = GWorkspaceActivityReports\n  | where TimeGenerated > ago(lookbackPeriod)\n  | where EventMessage =~ 'USER_LICENSE_ASSIGNMENT'\n  | sort by TimeGenerated desc \n  | summarize by TimeGenerated, UserEmail, EventMessage, SrcIpAddr;\nusersWithLicenseRevoke\n  | join kind=inner usersWithLicenseAssignment on UserEmail\n  | extend isWithinDelta = iff(datetime_diff('minute', TimeGenerated1, TimeGenerated) < timeDelta, 1, 0)\n  | where isWithinDelta == 1\n  | summarize by UserEmail, SrcIpAddr\n  | extend Name = tostring(split(UserEmail,'@',0)[0]), UPNSuffix = tostring(split(UserEmail,'@',1)[0])\n  | extend Account_0_Name = Name\n  | extend Account_0_UPNSuffix = UPNSuffix\n  | extend IP_0_Address = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies Office operations that are typically rare and can provide capabilities useful to attackers.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n    | where Operation in~ ( \"Add-MailboxPermission\", \"Add-MailboxFolderPermission\", \"Set-Mailbox\", \"New-ManagementRoleAssignment\", \"New-InboxRule\", \"Set-InboxRule\", \"Set-TransportRule\")\n    and not(UserId has_any ('NT AUTHORITY\\\\SYSTEM (Microsoft.Exchange.ServiceHost)', 'NT AUTHORITY\\\\SYSTEM (Microsoft.Exchange.AdminApi.NetCore)', 'NT AUTHORITY\\\\SYSTEM (w3wp)', 'devilfish-applicationaccount') \n         and Operation in~ ( \"Add-MailboxPermission\", \"Set-Mailbox\"))\n    | extend ClientIPOnly = tostring(extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?', dynamic([\"IPAddress\"]), ClientIP)[0])\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), \n             AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n\n// EnrichedMicrosoft365AuditLogs Query\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where Operation in~ ( \"Add-MailboxPermission\", \"Add-MailboxFolderPermission\", \"Set-Mailbox\", \"New-ManagementRoleAssignment\", \"New-InboxRule\", \"Set-InboxRule\", \"Set-TransportRule\")\n    and not(UserId has_any ('NT AUTHORITY\\\\SYSTEM (Microsoft.Exchange.ServiceHost)', 'NT AUTHORITY\\\\SYSTEM (Microsoft.Exchange.AdminApi.NetCore)', 'NT AUTHORITY\\\\SYSTEM (w3wp)', 'devilfish-applicationaccount') \n         and Operation in~ ( \"Add-MailboxPermission\", \"Set-Mailbox\"))\n    | extend ClientIPOnly = tostring(extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?', dynamic([\"IPAddress\"]), ClientIp)[0])\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), \n             AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n\n// Combine and Deduplicate Office and Enriched Logs\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize arg_min(TimeGenerated, *) by Operation, UserId, ClientIPOnly;\n\n// Final Output\nCombinedEvents\n    | project TimeGenerated, Operation, UserId, AccountName, AccountUPNSuffix, ClientIPOnly\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when blacklist hash was deleted.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where ActivityType == 3020\n| project EventCreationTime, SrcUserName, Hash=EventSubStatus\n| extend AccountCustomEntity = SrcUserName, HashCustomEntity = Hash, HashAlgorithmCustomEntity = \"SHA1\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Applications using SQL will generally make repeated similar requests for data as users interact with the application, this hunting query will find instances where an unusual number of tokens have been seen grouped on the client application and username. The query will calculate the prevalence for the token sizes based on historical activity from grouped application and user and show instances where an unusual number of tokens were observed. This query is designed to be run against application and username combinations that are used by SQL applications, such as content management systems (Wordpress, Joomla, TYPO3, etc.).\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let timeRange = 14d;\n//How frequently the query averages data for an average execution time\nlet timeSliceSize = 1h;\n//Anomaly decompose threshold, 2 by default\nlet parameterJitter = 3; //The number of different parameters seen with the anomalous query\nlet prevalenceThreshold = 10; // %\nlet dayThreshold = 1;\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated > ago(timeRange)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n    ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n    IsSuccess = succeeded_s, DurationMs = duration_milliseconds_d, AffectedRows = affected_rows_d,\n    ResponseRows = response_rows_d, Statement = statement_s,\n    Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                      , 0),\n    State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                      , 0),\n    AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize));\nlet total =\nprocessedData\n| summarize count() by PrincipalName, ApplicationName\n| extend key = strcat(PrincipalName, ApplicationName);\nlet anomalyData = processedData\n//Splitting on \"=\" provides a good estimate to the parameters\n| extend parameters = countof(Statement, \"=\")\n//Splitting on space provides a good estimate to the tokens in the query\n| extend tokens = array_length(split(Statement, \" \"))\n| summarize count(), make_set(parameters, 10000), make_list(TimeGenerated, 10000), make_list(ClientIp, 10000), dcount(ClientIp), min(TimeGenerated), max(TimeGenerated), make_list(Statement, 10000) by tokens, PrincipalName, ApplicationName\n| extend key = strcat(PrincipalName, ApplicationName)\n| join kind=leftouter (total) on key\n| extend prevalence = toreal(count_) / toreal(count_1) * 100\n| where prevalence <= prevalenceThreshold\n//Optional; Filter to instances where multiple parameters were seen\n//| where array_length(set_parameters) >= parameterJitter\n| extend dayKey = hash_md5(strcat(tokens, set_parameters));\n//Calculate the period anomalous queries were active\nanomalyData\n| join kind=leftouter  (\n    anomalyData\n    | mv-expand list_TimeGenerated\n    | summarize by bin(todatetime(list_TimeGenerated), 1d), dayKey\n    | summarize Days=count() by dayKey\n) on dayKey\n//Optional; The maximum number of days the anomaly activity spanned\n//| where Days <= dayThreshold\n| project min_TimeGenerated, max_TimeGenerated, Days, prevalence, count_, set_parameters, tokens, dcount_ClientIp, ApplicationName, PrincipalName, list_Statement\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend CloudApplication_0_Name = ApplicationName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects threat when logon authentication failure found in audit Topic: MimecastAudit"}, {"role": "assistant", "content": "MimecastAudit_CL | where src_s !=\"\" and auditType_s == \"Logon Authentication Failed\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule assists in detecting rare user agents, which may indicate web browsing activity by an unconventional process different from the usual ones. The rule specifically searches for UserAgent strings that have not been seen in the past 14 days. This query will perform better when run over summarized data\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let lookBack = 14d;\nlet timeframe = 1h;\n// calculate avg. eps(events per second)\nlet eps = materialize(_Im_WebSession(starttime=ago(1d))\n    | project TimeGenerated\n    | summarize AvgPerSec = count() / 3600 by bin(TimeGenerated, 1h)\n    | summarize round(avg(AvgPerSec))\n    );\nlet summarizationexist  = (\n    union isfuzzy=true \n        (\n        WebSession_Summarized_SrcInfo_CL\n        | where EventTime_t > ago(1d) \n        | project v = int(2)\n        ),\n        (\n        print int(1) \n        | project v = print_0\n        )\n    | summarize maxv = max(v)\n    | extend sumexist = (maxv > 1)\n    );\nlet allUserAgents = union isfuzzy=true\n        (\n        (datatable(exists: int, sumexist: bool)[1, false]\n        | where toscalar(eps) > 1000\n        | join (summarizationexist) on sumexist)\n        | join (\n            _Im_WebSession(starttime=todatetime(ago(2d)), endtime=bin(ago(timeframe), 1h), eventresult='Success')\n            | where isnotempty(HttpUserAgent)\n            | summarize UserAgentsSet =  make_set(HttpUserAgent) // This could contain upto 10,48,576 unique values\n            | extend exists=int(1)\n            )\n            on exists\n        | project-away exist*, maxv, sum*\n        ),\n        (\n        (datatable(exists: int, sumexist: bool)[1, false]\n        | where toscalar(eps) between (501 .. 1000)\n        | join (summarizationexist) on sumexist)\n        | join (\n            _Im_WebSession(starttime=todatetime(ago(3d)), endtime=bin(ago(timeframe), 1h), eventresult='Success')\n            | where isnotempty(HttpUserAgent)\n            | summarize UserAgentsSet = make_set(HttpUserAgent) // This could contain upto 10,48,576 unique values\n            | extend exists=int(1)\n            )\n            on exists\n        | project-away exist*, maxv, sum*\n        ),\n        (\n        (datatable(exists: int, sumexist: bool)[1, false]\n        | where toscalar(eps) <= 500\n        | join (summarizationexist) on sumexist)\n        | join (\n            _Im_WebSession(starttime=todatetime(ago(4d)), endtime=bin(ago(timeframe), 1h), eventresult='Success')\n            | where isnotempty(HttpUserAgent)\n            | summarize UserAgentsSet = make_set(HttpUserAgent) // This could contain upto 10,48,576 unique values\n            | extend exists=int(1)\n            )\n            on exists\n        | project-away exist*, maxv, sum*\n        ),\n        (\n        WebSession_Summarized_SrcInfo_CL\n        | where EventTime_t between (ago(14d) .. ago(timeframe))\n            and isnotempty(HttpUserAgent_s)\n            and EventResult_s =~ 'Success'\n        | summarize UserAgentsSet = make_set(HttpUserAgent_s) // This could contain upto 10,48,576 unique values\n        );\n_Im_WebSession (starttime=bin(ago(timeframe), 1h), eventresult='Success')\n| project\n    SrcIpAddr,\n    SrcUsername,\n    SrcHostname,\n    DstIpAddr,\n    DstPortNumber,\n    Url,\n    HttpUserAgent,\n    TimeGenerated\n| where isnotempty(HttpUserAgent) and HttpUserAgent !in~ (allUserAgents)\n| summarize\n    EventCount=count(),\n    EventStartTime=min(TimeGenerated),\n    EventEndTime=max(TimeGenerated)\n    by\n    SrcIpAddr,\n    SrcUsername,\n    SrcHostname,\n    DstIpAddr,\n    Url,\n    HttpUserAgent,\n    DstPortNumber\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Looks for users bypassing Update Policies in repos\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "\nAzureDevOpsAuditing\n| where OperationName == 'Git.RefUpdatePoliciesBypassed'\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Amazon GuardDuty is a threat detection service that continuously monitors your AWS accounts and workloads for malicious activity and delivers detailed security findings for visibility and remediation. This templates create an alert for each Amazon GuardDuty finding. Topic: Amazon Web Services"}, {"role": "assistant", "content": "// https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_findings.html \nAWSGuardDuty \n// Parse the finding\n// https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_finding-format.html \n// Example: \"ThreatPurpose:ResourceTypeAffected/ThreatFamilyName.DetectionMechanism!Artifact\"\n| extend findingTokens = split(ActivityType, \":\")\n| extend ThreatPurpose=findingTokens[0], findingTokens=split(findingTokens[1], \"/\")\n| extend ResourceTypeAffected=findingTokens[0], findingTokens= split(findingTokens[1], \".\")\n| extend ThreatFamilyName=findingTokens[0], findingTokens=split(findingTokens[1], \"!\")\n| extend DetectionMechanism=findingTokens[0], Artifact=findingTokens[1]\n// Assign severity level\n// https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_findings.html#guardduty_findings-severity\n| extend Severity = \n    case (\n      Severity >= 7.0, \"High\",\n      Severity between (4.0 .. 6.9), \"Medium\",\n      Severity between (1.0 .. 3.9), \"Low\",\n      \"Unknown\"\n    )\n// Pull out any available resource details we can extract entities from. These may not exist in the alert.\n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_Resource.html \n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_AccessKeyDetails.html \n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_RdsDbUserDetails.html \n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_KubernetesDetails.html \n| extend AccessKeyDetails=ResourceDetails.accessKeyDetails\n| extend RdsDbUserDetails=ResourceDetails.rdsDbUserDetails\n| extend KubernetesDetails=ResourceDetails.kubernetesDetails\n// Pull out any available action details we can extract entities from. These may not exist in the alert.\n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_Action.html \n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_AwsApiCallAction.html \n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_KubernetesApiCallAction.html \n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_NetworkConnectionAction.html \n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_RdsLoginAttemptAction.html \n| extend ServiceAction = \n    case(\n      isnotempty(ServiceDetails.action.awsApiCallAction), ServiceDetails.action.awsApiCallAction,\n      isnotempty(ServiceDetails.action.kubernetesApiCallAction), ServiceDetails.action.kubernetesApiCallAction,\n      isnotempty(ServiceDetails.action.networkConnectionAction), ServiceDetails.action.networkConnectionAction,\n      isnotempty(ServiceDetails.action.rdsLoginAttemptAction), ServiceDetails.action.rdsLoginAttemptAction,\n      dynamic(null)\n    )\n// The IPv4 remote address of the connection\n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_RemoteIpDetails.html \n// or\n// The IP of the Kubernetes API caller and the IPs of any proxies or load balancers between the caller and the API endpoint \n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_KubernetesApiCallAction.html \n| extend RemoteIpAddress = \n    coalesce(\n      tostring(ServiceAction.remoteIpDetails.ipAddressV4),\n      tostring(parse_json(ServiceAction.sourceIPs)[0])\n    )\n// The IPv4 local address of the connection\n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_LocalIpDetails.html \n| extend LocalIpAddress = ServiceAction.localIpDetails.ipAddressV4\n// The AWS account ID of the remote API caller.\n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_AwsApiCallAction.html \n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_RemoteAccountDetails.html \n| extend RemoteAWSAccountId = ServiceAction.remoteAccountDetails.accountId\n// The IAM access key details (user information) of a user that engaged in the activity that prompted GuardDuty to generate a finding\n// https://docs.aws.amazon.com/guardduty/latest/APIReference/API_AccessKeyDetails.html \n| extend AccountUpn = \n    case(\n      AccessKeyDetails.userType == \"IAMUser\", AccessKeyDetails.userName,\n      AccessKeyDetails.userType == \"AssumedRole\", split(AccessKeyDetails.principalId, \":\", 1)[0],\n      isnotempty(RdsDbUserDetails.user), RdsDbUserDetails.user,\n      isnotempty(KubernetesDetails.kubernetesUserDetails.username), KubernetesDetails.kubernetesUserDetails.username,\n      \"\"\n    )\n| extend AccountName = split(AccountUpn, \"@\", 0)[0]\n| extend UPNSuffix = split(AccountUpn, \"@\", 1)[0]\n// Clean up the output\n| extend GuardDutyDetails =\n    bag_pack( \n      \"DetectorId\", ServiceDetails.detectorId,\n      \"Partition\", Partition,\n      \"Region\", Region\n    )\n| extend FindingLink = \n    iff(\n      isnotempty(Region) and isnotempty(Id),\n      strcat(\"https://\", Region, \".console.aws.amazon.com/guardduty/home?region=\", Region, \"#/findings?fId=\", Id),\n      \"\"\n    )\n| extend FindingLinkDescription = \n    iff(\n      isnotempty(FindingLink),\n      strcat(\"Link to GuardDuty finding (AWS): \", FindingLink),\n      \"\"\n    )\n| project-rename \n    FindingArn=Arn,\n    FindingId=Id,\n    AWSAccountId=AccountId\n| project-away \n    ActivityType, \n    findingTokens,\n    Partition,\n    Region, \n    SchemaVersion,\n    TimeGenerated,\n    Type\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in SigninLogs.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet Signins = materialize(union isfuzzy=true\n  (SigninLogs\n  | where TimeGenerated >= ago(dt_lookBack)),\n  (AADNonInteractiveUserSignInLogs\n  | where TimeGenerated >= ago(dt_lookBack)\n  | extend Status = todynamic(Status), LocationDetails = todynamic(LocationDetails)));\nlet SigninIPs = Signins | summarize make_list(IPAddress);\nlet TI = materialize(ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = coalesce(NetworkIP, EmailSourceIpAddress, NetworkDestinationIP, NetworkSourceIP)\n  | where TI_ipEntity in (SigninIPs)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\");\nTI\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (Signins) on $left.TI_ipEntity == $right.IPAddress\n| project-rename SigninLogs_TimeGenerated = TimeGenerated\n| where SigninLogs_TimeGenerated < ExpirationDateTime\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails), StatusReason = tostring(Status.failureReason)\n| summarize SigninLogs_TimeGenerated = arg_max(SigninLogs_TimeGenerated, *) by IndicatorId, IPAddress\n| project SigninLogs_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, TI_ipEntity, IPAddress, UserPrincipalName, AppDisplayName, StatusCode, StatusDetails, StatusReason, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n| extend timestamp = SigninLogs_TimeGenerated, Name = tostring(split(UserPrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(UserPrincipalName, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Infoblox SOC Insight detected in logs sourced via REST API. Customize scheduling, responses and more. This rule depends on a parser based on a Kusto Function to work as expected called [**InfobloxInsight**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox/Parsers/InfobloxInsight.yaml).\n Topic: Infoblox"}, {"role": "assistant", "content": "InfobloxInsight\n| summarize arg_max(TimeGenerated, *) by InfobloxInsightID\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query pulls in all the failed scan results from the CSPM scans\n Topic: Prancer PenSuiteAI Integration"}, {"role": "assistant", "content": "prancer_CL\n| where act_s == 'alert'\n    and data_data_result_s == 'failed'\n| extend snapshot = parse_json(data_data_snapshots_s)\n| mv-expand snapshot  \n| extend\n    id = tostring(snapshot.id),\n    structure = tostring(snapshot.structure),\n    reference = tostring(snapshot.reference),\n    source = tostring(snapshot.source),\n    collection = tostring(snapshot.collection),\n    type = tostring(snapshot.type),\n    region = tostring(snapshot.region),\n    resourceTypes = tostring(snapshot.resourceTypes),\n    path = tostring(snapshot.path)\n| summarize arg_min(id, *) by path, data_data_title_s\n| project Alert = data_data_title_s, Severity = data_data_severity_s, Cloud_Type = structure, Resource = path, Description = data_data_description_s, Remediation = data_data_remediation_description_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for messages related to file downloads of suspicious file types. This query uses the Exchange HttpProxy AOBGeneratorLog, you will need to onboard this log as a custom log under the table http_proxy_oab_CL before using this query. \nReference: https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/\n Topic: Detections"}, {"role": "assistant", "content": "let scriptExtensions = dynamic([\".php\", \".jsp\", \".js\", \".aspx\", \".asmx\", \".asax\", \".cfm\", \".shtml\"]);\nhttp_proxy_oab_CL\n| where RawData contains \"Download failed and temporary file\"\n| extend File = extract(\"([^\\\\\\\\]*)(\\\\\\\\[^']*)\",2,RawData)\n| extend Extension = strcat(\".\",split(File, \".\")[-1])\n| extend InteractiveFile = iif(Extension in (scriptExtensions), \"Yes\", \"No\")\n// Uncomment the following line to alert only on interactive file download type\n//| where InteractiveFile =~ \"Yes\"\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a chain of events starting with disablement of Power Platform tenant isolation and removal of an environments access security group. These events are correlated with Dataverse exfiltration alerts associated with the impacted environment and recently created Microsoft Entra guest users.\n\nNote: Activate other Dataverse analytics rules with the MITRE tactic Exfiltration before enabling this rule.\n Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_lookback = 14d;\nlet query_frequncy = 1h;\nlet defense_evasion_events = PowerPlatformAdminActivity\n    | where TimeGenerated >= ago(query_lookback)\n    | where EventOriginalType == \"TenantIsolationOperation\"\n    | mv-expand PropertyCollection\n    | where PropertyCollection.Name == \"powerplatform.analytics.resource.tenant.isolation_policy.enabled\"\n    | where PropertyCollection.Value == \"False\"\n    | summarize\n        TenantIsolationRemovalTimestamp = max(TimeGenerated)\n        by SecurityDisablingUser = ActorName\n    | join kind=inner (\n        PowerPlatformAdminActivity\n        | where TimeGenerated >= ago(query_lookback)\n        | where EventOriginalType == \"EnvironmentPropertyChange\"\n        | where PropertyCollection has \"Property: SecurityGroupId, Old Value: , New Value: \"\n        | mv-expand PropertyCollection\n        | extend\n            GroupRemovalTimestamp = TimeGenerated,\n            InstanceUrl = tostring(iif(PropertyCollection.Name == \"powerplatform.analytics.resource.environment.url\", PropertyCollection.Value, \"\")),\n            EnvironmentId = tostring(iif(PropertyCollection.Name == \"powerplatform.analytics.resource.environment.name\", PropertyCollection.Value, \"\"))\n        | summarize InstanceUrl = max(InstanceUrl), EnvironmentId = max(EnvironmentId) by GroupRemovalTimestamp, SecurityDisablingUser = ActorName)\n        on SecurityDisablingUser\n    | summarize\n        GroupRemovalTimestamp = max(GroupRemovalTimestamp),\n        TenantIsolationRemovalTimestamp = max(TenantIsolationRemovalTimestamp)\n        by SecurityDisablingUser, InstanceUrl, EnvironmentId;\nlet exfiltration_alerts = SecurityAlert\n    | where TimeGenerated >= ago(query_frequncy)\n    | where Tactics has \"Exfiltration\"\n    | where Entities has ('\"AppId\":32780')\n    | mv-expand todynamic(Entities)\n    | extend AlertUPN = iif(Entities.Type == \"account\", strcat(Entities.Name, \"@\", Entities.UPNSuffix), \"\")\n    | extend InstanceUrl = tostring(iif(Entities.AppId == 32780, Entities.InstanceName, \"\"))\n    | join kind=inner defense_evasion_events on InstanceUrl\n    | where StartTime > TenantIsolationRemovalTimestamp and StartTime > GroupRemovalTimestamp\n    | summarize InstanceUrl = max(InstanceUrl), AlertUPN = max(AlertUPN) by AlertName, SystemAlertId\n    | extend AlertDetails = bag_pack(\"AlertName\", AlertName, \"SystemAlertId\", SystemAlertId)\n    | summarize AlertDetails = make_set(AlertDetails, 100) by AlertUPN, InstanceUrl\n    | join kind=inner (\n        AuditLogs\n        | where OperationName == \"Update user\"\n        | where Identity == \"Microsoft Invitation Acceptance Portal\"\n        | mv-expand TargetResources\n        | extend ModifiedProperties = TargetResources.modifiedProperties\n        | mv-expand ModifiedProperties\n        | where ModifiedProperties.displayName == \"AcceptedAs\"\n        | summarize RedeemTime = max(TimeGenerated) by GuestUser = tostring(parse_json(replace_regex(tostring(ModifiedProperties.newValue), \"\\\\r\", \"\"))[0]))\n        on $left.AlertUPN == $right.GuestUser;\ndefense_evasion_events\n| join kind=inner exfiltration_alerts on InstanceUrl\n| extend\n    AccountName = tostring(split(SecurityDisablingUser, \"@\")[0]),\n    UPNSuffix = tostring(split(SecurityDisablingUser, \"@\")[1]),\n    GuestAccountName = tostring(split(GuestUser, \"@\")[0]),\n    GuestUPNSuffix = tostring(split(GuestUser, \"@\")[0]),\n    DataverseId = 32780\n| project\n    SecurityDisablingUser,\n    GuestUser,\n    AlertDetails,\n    TenantIsolationRemovalTimestamp,\n    GroupRemovalTimestamp,\n    InstanceUrl,\n    EnvironmentId,\n    AccountName,\n    UPNSuffix,\n    GuestAccountName,\n    GuestUPNSuffix,\n    DataverseId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert leverages Defender for IoT to detect unauthorized remote access to network devices, if another device on the network is compromised, target devices can be accessed remotely, increasing the attack surface.\n Topic: IoTOTThreatMonitoringwithDefenderforIoT"}, {"role": "assistant", "content": "SecurityAlert\n| where ProviderName == \"IoTSecurity\"\n| where AlertName == \"Unauthorized SSH Access\"\n| extend ExtendedProperties = parse_json(ExtendedProperties)\n| where tostring(ExtendedProperties.isNew) == \"True\"\n| extend DeviceId = tostring(ExtendedProperties.DeviceId), \n         SourceDeviceAddress = tostring(ExtendedProperties.SourceDeviceAddress), \n         DestDeviceAddress = tostring(ExtendedProperties.DestinationDeviceAddress), \n         RemediationSteps = tostring(parse_json(RemediationSteps)[0]), \n         Protocol = tostring(ExtendedProperties.Protocol), \n         AlertManagementUri = tostring(ExtendedProperties.AlertManagementUri)\n| project\n  TimeGenerated,\n  DeviceId,\n  ProductName,\n  ProductComponentName,\n  AlertSeverity,\n  AlertName,\n  Description,\n  Protocol,\n  SourceDeviceAddress,\n  DestDeviceAddress,\n  RemediationSteps,\n  Tactics,\n  Entities,\n  VendorOriginalId,\n  AlertLink,\n  AlertManagementUri,\n  Techniques\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unexpected file uploads.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "let f_cnt_upload_threshold = 5;\nlet f_upload_size_threshold = 5000000;\nCiscoWSAEvent\n| where HttpRequestMethod in~ ('POST', 'PUT')\n| where isnotempty(AmpFileName)\n| where UrlCategory in~ ('IW_fts', 'IW_osb')\n| where DstBytes > f_upload_size_threshold\n| summarize count() by AmpFileName, SrcUserName, bin(TimeGenerated, 10m)\n| where count_ >= f_cnt_upload_threshold\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects attempts to exploit OMI vulnerability (CVE-2021-38647) by identifying external IP connections to management ports (5985,5986,1270). It uses the imNetworkSession schema and other logs for this purpose.\n Topic: Legacy IOC based Threat Protection"}, {"role": "assistant", "content": "let Port = dynamic([\"5985\",\"5986\",\"1270\"]); \n(union isfuzzy=true\n(imNetworkSession\n| extend result = ipv4_is_private(SrcIpAddr)\n| where result == 0  and SrcIpAddr != \"127.0.0.1\"\n| where DstPortNumber in (Port)\n| where EventResult != 'Failure'\n| project TimeGenerated, EventProduct, EventResult, SourceIp = SrcIpAddr, DestinationIp = DstIpAddr,Type, Dvc, DestinationPort= DstPortNumber, SrcPortNumber, Protocol = NetworkProtocol, RemoteCountry = SrcGeoCountry, SrcGeoCity, RemoteLatitude = SrcGeoLatitude, RemoteLongitude = SrcGeoLongitude\n| extend Timestamp = TimeGenerated, IPCustomEntity = SourceIp, HostCustomEntity = Dvc \n),\n(VMConnection\n| where Direction == \"inbound\"\n| extend result = ipv4_is_private(SourceIp)\n| where result == 0  and SourceIp != \"127.0.0.1\"\n| where ProcessName == 'omiengine'\n| where DestinationPort in (Port)\n| project TimeGenerated, Computer, Direction, ProcessName, SourceIp, DestinationIp, DestinationPort, Protocol, RemoteCountry, RemoteLatitude, RemoteLongitude, Type\n| extend Timestamp = TimeGenerated, HostCustomEntity = Computer, IPCustomEntity = SourceIp\n),\n(AzureNetworkAnalytics_CL\n| extend result = ipv4_is_private(SrcIP_s) \n| where result == 0 and SrcIP_s != \"127.0.0.1\"\n| where L7Protocol_s has 'wsman'\n| where DestPort_d in (Port)\n| parse VM_s with * '/' VM \n| project TimeGenerated, SourceIp = SrcIP_s, DestinationIp = DestIP_s, DestinationPort = DestPort_d, Protocol = L7Protocol_s, NSGRule_s, VM, Type\n| extend Timestamp = TimeGenerated, HostCustomEntity = VM, IPCustomEntity = SourceIp\n),\nAzureDiagnostics\n| where Category == \"AzureFirewallNetworkRule\" and OperationName == \"AzureFirewallNatRuleLog\"\n| parse msg_s with Protocol ' request from ' SourceIp ':' SourcePort ' to ' DestinationIp ':' DestinationPort \" was \" Action \" to \" InternalIP ':' InternalPort\n| where DestinationPort in (Port)\n| project TimeGenerated, SourceIp, DestinationIp, DestinationPort, Protocol, Action, Resource\n| extend Timestamp = TimeGenerated, IPCustomEntity = SourceIp\n)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible data exfiltration.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "let e_theshold = 3;\nlet s_threshold = 10000000;\nCiscoSEGEvent\n| where AdditionalFields[15]['ESAMsgSize'] > s_threshold\n| where NetworkDirection =~ 'Outgoing'\n| extend rec_domain = extract(@'@(.*)', 1, DstUserName)\n| extend s_domain = extract(@'@(.*)', 1, SrcUserName)\n| where s_domain != rec_domain\n| summarize count() by SrcUserName\n| where count_ >= e_theshold\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for multi-factor authentication (MFA) helps protect devices and data \n that are accessible to these users. Adding more authentication methods, increases the level of protection \n if one factor is compromised.\n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'AzureSecureScoreMFARegistrationV2'"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Looks for users accessing multiple other users mailboxes or accessing multiple folders in another users mailbox.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = totimespan((endtime-starttime)*2);\n//Adjust this value to alter how many mailbox (other than their own) a user needs to access before being included in results\nlet user_threshold = 1;\n//Adjust this value to alter how many mailbox folders in other's email accounts a users needs to access before being included in results.\nlet folder_threshold = 5;\n//Exclude historical as known good (set lookback and timeframe to same value to skip this)\nOfficeActivity\n| where TimeGenerated between(ago(lookback)..starttime)\n| where Operation =~ \"MailItemsAccessed\"\n| where ResultStatus =~ \"Succeeded\"\n| where tolower(MailboxOwnerUPN) != tolower(UserId)\n| join kind=rightanti(\nOfficeActivity\n| where TimeGenerated between(starttime..endtime)\n| where Operation =~ \"MailItemsAccessed\"\n| where ResultStatus =~ \"Succeeded\"\n| where tolower(MailboxOwnerUPN) != tolower(UserId)) on MailboxOwnerUPN, UserId\n| where isnotempty(Folders)\n| mv-expand parse_json(Folders)\n| extend folders = tostring(Folders.Path)\n| extend ClientIP = iif(Client_IPAddress startswith \"[\", extract(\"\\\\[([^\\\\]]*)\", 1, Client_IPAddress), Client_IPAddress)\n| summarize StartTime=max(TimeGenerated), EndTime=min(TimeGenerated), make_set(folders, 100000), make_set(ClientInfoString, 100000), make_set(ClientIP, 100000), make_set(MailboxGuid, 100000), make_set(MailboxOwnerUPN, 100000)  by UserId\n| extend folder_count = array_length(set_folders)\n| extend user_count = array_length(set_MailboxGuid)\n| where user_count > user_threshold or folder_count > folder_threshold\n| extend Reason = case(user_count > user_threshold and folder_count > folder_threshold, \"Both User and Folder Threshold Exceeded\", folder_count > folder_threshold and user_count < user_threshold, \"Folder Count Threshold Exceeded\",\"User Threshold Exceeded\")\n| sort by user_count desc\n| project-reorder UserId, user_count, folder_count, set_MailboxOwnerUPN, set_ClientIP, set_ClientInfoString, set_folders\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when malware was detected for user account.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where EventType has_all ('virtual', 'analyzer')\n| where isnotempty(VirusName)\n| extend AccountCustomEntity = DstUserName, MalwareCustomEntity = VirusName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures.\n Topic: TenableAD"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.kql parser into the workspace\n// Retrieve the parser here: https://raw.githubusercontent.com/tenable/Azure-Sentinel/Tenable.ad-connector/Solutions/TenableAD/Parsers/afad_parser.kql\n// Then, create the Kusto Function with alias afad_parser\nlet SeverityTable=datatable(Severity:string,Level:int) [\n  \"low\", 1,\n  \"medium\", 2,\n  \"high\", 3,\n  \"critical\", 4\n  ];\n  afad_parser\n  | where MessageType == 0\n  | lookup kind=leftouter SeverityTable on Severity\n  | order by Level\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for unusual sources of authentication.\n Topic: PingFederate"}, {"role": "assistant", "content": "let known_src = \nPingFederateEvent\n| where TimeGenerated between (ago(30d) .. (1d))\n| where isnotempty(SrcIpAddr)\n| summarize makeset(SrcIpAddr);\nPingFederateEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(SrcIpAddr)\n| where SrcIpAddr !in (known_src)\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible brute force attack.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "let threshold = 5;\nGWorkspaceActivityReports\n| where EventMessage has \"login_failure\"\n| summarize login_attempts = count() by ActorEmail, bin(TimeGenerated, 5m)\n| where login_attempts > threshold\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Microsoft Sentinel incidents for Theom insight alerts.\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n | where priority_s == \"P5\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Suspicious activity of the STS token of an EC2 machine hosted by EKS (for example, by SSRF) indicates a possible token hijacking. An attacker may have stolen the token and could abuse its permissions to escalate privileges and move laterally in the cloud account.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let aws_public_ips = externaldata(prefixes: string)\n[ \n   h@'https://aka.ms/awspublicipaddresse/aws-public-ip-addresses/ip-ranges.json'\n]\nwith(format='multijson');\nlet timeframe = 30m;\nlet lookback = 12h;\n//Get the AccessKey in the STS token (IMDS) when EC2 service assumes the Role periodically\nlet sts_token = AWSCloudTrail\n| where TimeGenerated >= ago (lookback)\n| where EventSource == \"sts.amazonaws.com\" and SourceIpAddress == \"ec2.amazonaws.com\"\n| extend instanceId = tostring(parse_json(RequestParameters).roleSessionName)\n| extend token = tostring(parse_json(ResponseElements).credentials.accessKeyId);\n//Identify if the EC2 belongs to ECS/EKS\nlet typeOfEC2 = AWSCloudTrail\n| where TimeGenerated >= ago (lookback)\n| extend instanceId = tostring(split(UserIdentityPrincipalid, \":\")[1])\n| join sts_token on instanceId\n| where UserAgent startswith \"kubernetes\"\n| project-away SourceIpAddress1, UserIdentityUserName1, UserIdentityArn1, TimeGenerated1;\n//Get the identities who used that STS token - this can be the EC2 which assumed it (legit),\n//but it can also be an external identity (attacker) which abuses the token permissions \nlet tokenUsage = AWSCloudTrail\n| where TimeGenerated >= ago (timeframe)\n| join kind=inner typeOfEC2 on $left.UserIdentityAccessKeyId == $right.token\n| extend region = AWSRegion\n| project-away SourceIpAddress1, UserIdentityUserName1, UserIdentityArn1, TimeGenerated1;\n//Check whether the called identity is legit\naws_public_ips\n| mv-expand todynamic(prefixes)\n| extend ip_prefix=tostring(todynamic(prefixes.['ip_prefix']))\n| extend region=tostring(todynamic(prefixes.['region']))\n| extend service=tostring(todynamic(prefixes.['service']))\n| project-away prefixes\n| where service == \"EC2\" \n| join kind=inner tokenUsage on region\n| where SourceIpAddress !contains \"amazonaws.com\"\n| where ipv4_is_private(SourceIpAddress) == false\n| extend IsInRange = ipv4_is_in_range(SourceIpAddress, ip_prefix)\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName, AssumedRoleArn = UserIdentityArn\n| summarize timestamp=arg_max(timestamp,*), r = make_set(IsInRange) by SourceIpAddress, UserIdentityUserName, UserIdentityArn\n| where not (set_has_element(r, true))\n| project-away ip_prefix, IsInRange\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects malware execution on host.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where EventMessage has 'Executed Malware'\n| extend HostCustomEntity = DstHostname, MalwareCustomEntity = ThreatName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for top-level domains that are longer than four characters. This query utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "// Check in last 24hours\nlet looback=1d;\n_Im_Dns(starttime=ago(looback),endtime=now())\n| summarize Count=count() by SrcIpAddr, DnsQuery\n| extend TopLevelDomain = tostring(split(DnsQuery, \".\")[-1])\n| where strlen(TopLevelDomain) > 4\n| order by Count\n| take 25\n| extend IP_0_Address = SrcIpAddr\n| extend DNS_0_DomainName = DnsQuery\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which medium sensitivity governance information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let mediumRisk = 2;\nlet goverence = 'Goverence Information';\nCognniIncidents_CL \n| where Severity == mediumRisk\n| where informationType_s == goverence\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "SPF Policy Set to Soft Fail\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"low\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"SPF Policy Set to Soft Fail\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects local to remote (L2R) FTP connections.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "let allowed_ftp = dynamic(['127.0.0.2']);\nUbiquitiAuditEvent\n| where EventCategory == 'firewall'\n| where ipv4_is_private(SrcIpAddr)\n| where ipv4_is_private(DstIpAddr) == 'False'\n| where DstPortNumber in ('20', '21')\n| where DstIpAddr !in (allowed_ftp)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies SFTP File Transfers with distinct folder count above certain threshold in a 15min time period.\n It requires SFTP VERBOSE loglevel to be enabled.\n Please note that entity mapping for arrays is not supported, so when there is a single value in an array, we will pull that value from the array as a single string to populate the entity to support entity mapping features within Sentinel. Additionally, if the array is multivalued, we will input a string to indicate this with a unique hash so that matching will not occur.\n Topic: Syslog"}, {"role": "assistant", "content": "let threshold = 10;\nSyslog\n| where ProcessName has \"sftp\"\n    and SyslogMessage has \"close \"\n    and SyslogMessage has \" bytes read \"\n| parse SyslogMessage with \"close \\\"\" filepath \"\\\" bytes read \" readbytes: int \" written \" writtenbytes: int\n| parse kind=regex filepath with dirpath:string \"/\" filename:string\n| join kind=leftouter (\n    Syslog\n    | where ProcessName has \"sftp\" and SyslogMessage has \"session opened for\"\n    | parse SyslogMessage with \"session opened for local user \" username: string \" from [\" src_ip \"]\"\n    | project username, src_ip, ProcessID\n    )\n    on ProcessID\n| project-away ProcessID1\n| summarize count_distinct_dirpath=dcount(dirpath), dirlist=make_set(dirpath) by Computer, username, src_ip, bin(TimeGenerated, 15m)\n| where count_distinct_dirpath >= threshold\n| extend DirSample = iff(array_length(dirlist) == 1, tostring(dirlist[0]), strcat(\"SeeDirListField\",\"_\", tostring(hash(tostring(dirlist)))))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches uncommon user agent strings.\n Topic: Tomcat"}, {"role": "assistant", "content": "let ua_length = 20;\nTomcatEvent\n| where TimeGenerated > ago(24h)\n| where strlen(HttpUserAgentOriginal) < ua_length\n| extend UrlCustomEntity = HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for infected systems which were not cleaned for long term.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "let lbperiod_30d = 30d;\nlet infected_systems = McAfeeEPOEvent\n| where TimeGenerated > ago(lbperiod_30d)\n| where EventId in ('1038', '3043')\n| summarize LastScanTimeInfected = max(TimeGenerated) by DvcIpAddr\n| extend SystemStatus = 'Infected';\nlet clean_systems = McAfeeEPOEvent\n| where TimeGenerated > ago(lbperiod_30d - 1h)\n| where EventId in ('1034', '3039')\n| summarize LastScanTimeClean = max(TimeGenerated) by DvcIpAddr\n| extend SystemStatus = 'Clean';\nlet clean_systems2 = McAfeeEPOEvent\n| where TimeGenerated > ago(lbperiod_30d - 1h)\n| where EventId in ('1034', '3039')\n| summarize makeset(DvcIpAddr);\ninfected_systems\n| extend tmp_key = 1\n| join (clean_systems\n          | extend tmp_key = 1) on tmp_key\n| where  LastScanTimeInfected > LastScanTimeClean or DvcIpAddr !in (clean_systems2)\n| project LastScanTimeInfected, DvcIpAddr\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert creates an incident when Tabular classification AI Model Evasion Low suspicious, medium severity vulnerability detected from the AIShield.\n Topic: AIShield AI Security Monitoring"}, {"role": "assistant", "content": "AIShield\n| where Message has 'Tabular Classification AI Model Evasion Attack Identified'\n| where Severity =~ 'Medium'\n| where SuspiciousLevel =~ 'low suspicious attack'\n| extend NTDomain = tostring(split(Computer, '\\\\')[0]), HostName = tostring(split(Computer, '.')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "TLSv1 in Use\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"low\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"TLSv1 in Use\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects request to sensitive files.\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "let forbidden_files = dynamic(['shadow', 'passwd', 'id_rsa']);\nNGINXHTTPServer\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where File in (forbidden_files)\n| extend FileCustomEntity = File, UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when \"SHUTDOWN\" command was sent to server.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "OracleDatabaseAuditEvent\n| where isnotempty(SrcIpAddr)\n| where DbAction =~ 'SHUTDOWN'\n| project SrcIpAddr, DstUserName\n| extend AccountCustomEntity = DstUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests to ip lookup resources.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "let ip_check = dynamic(['whatismyipaddress.com', 'ip2location.com', 'ipaddress.my', 'whatismyip.com', 'ipinfo.info', 'checkmyip.com', 'myip.com', 'checkmyip.org', 'canireachthe.net', 'ipv4.icanhazip.com', 'ip.anysrc.net', 'edns.ip-api.com', 'wtfismyip.com', 'checkip.dyndns.org', 'api.2ip.ua', 'icanhazip.com', 'api.ipify.org', 'ip-api.com', 'checkip.amazonaws.com', 'ipecho.net', 'ipinfo.io', 'ipv4bot.whatismyipaddress.com', 'freegeoip.app', 'checkip.azurewebsites.net']);\nGCPCloudDNS\n| where Query in~ (ip_check)\n| extend DNSCustomEntity = Query, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible sql injection patterns\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "let sql_patterns = dynamic([@\"1/*'*/\", @\"1'||'asd'||'\", @\"'1'='1\", @\"1' or '1'='1\", @\"1 or 1=1\", @\"1=1\", @\"1/*!1111'*/\", @\"'or''='\"]);\nNGINXHTTPServer\n| where UrlOriginal has_any (sql_patterns)\n| extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match for a Path Traversal based attack in the AFD WAF logs. The threshold value in the query can be changed as per your infrastructures requirements.\nReferences: https://owasp.org/www-community/attacks/Path_Traversal\n Topic: Azure Web Application Firewall (WAF)"}, {"role": "assistant", "content": "let Threshold = 3;\nAzureDiagnostics\n| where Category =~ \"FrontDoorWebApplicationFirewallLog\"\n| where action_s =~ \"AnomalyScoring\"\n| where details_msg_s has \"Path Traversal Attack\"\n| parse details_data_s with MessageText \"Matched Data:\" MatchedData \"AND \" * \"table_name FROM \" TableName \" \" *\n| project trackingReference_s, host_s, requestUri_s, TimeGenerated, clientIP_s, details_matches_s, details_msg_s, details_data_s, TableName, MatchedData\n| join kind = inner(\nAzureDiagnostics\n| where Category =~ \"FrontDoorWebApplicationFirewallLog\"\n| where action_s =~ \"Block\") on trackingReference_s\n| summarize URI_s = make_set(requestUri_s,100), Table = make_set(TableName,100), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), TrackingReference = make_set(trackingReference_s,100), Matched_Data = make_set(MatchedData,100), Detail_Data = make_set(details_data_s,100), Detail_Message = make_set(details_msg_s,100), Total_TrackingReference = dcount(trackingReference_s) by clientIP_s, host_s, action_s\n| where Total_TrackingReference >= Threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "High severity sites alerts found by Prancer.\n Topic: Prancer PenSuiteAI Integration"}, {"role": "assistant", "content": "union prancer_CL\n| where deviceProduct_s == 'azure'\n| where parse_json(data_data_snapshots_s)[0].type == 'Microsoft.Web/sites'\n| where data_data_severity_s == 'High' and data_data_result_s == 'failed'\n| extend snapshot = parse_json(data_data_snapshots_s)\n| mv-expand snapshot \n| extend\n    id = tostring(snapshot.id),\n    structure = tostring(snapshot.structure),\n    reference = tostring(snapshot.reference),\n    source = tostring(snapshot.source),\n    collection = tostring(snapshot.collection),\n    type = tostring(snapshot.type),\n    region = tostring(snapshot.region),\n    resourceTypes = tostring(snapshot.resourceTypes),\n    path = tostring(snapshot.path)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of devices (APs) which do not have the latest version of firmware installed.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "let latest_firmware = '4.0.80.10875';\nUbiquitiAuditEvent\n| where TimeGenerated > ago(24h)\n| where FirmwareVersion != latest_firmware\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects changes to the ownership of an appplicaiton.\n  Monitor these changes to make sure that they were authorized.\n  Ref: https://learn.microsoft.com/en-gb/entra/architecture/security-operations-applications#new-owner\n Topic: Detections"}, {"role": "assistant", "content": "AuditLogs\n  | where Category =~ \"ApplicationManagement\"\n  | where OperationName =~ \"Add owner to application\"\n  | extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n  | extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n  | extend TargetUserPrincipalName = TargetResources[0].userPrincipalName\n  | extend TargetAadUserId = tostring(TargetResources[0].id)\n  | extend mod_props = TargetResources[0].modifiedProperties\n  | mv-expand mod_props\n  | where mod_props.displayName =~ \"Application.DisplayName\"\n  | extend TargetAppName = tostring(parse_json(tostring(mod_props.newValue)))\n  | extend AddedUser = TargetUserPrincipalName\n  | extend UpdatedBy = iif(isnotempty(InitiatingAppName), InitiatingAppName, InitiatingUserPrincipalName)\n  | extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n  | extend TargetAccountName = tostring(split(TargetUserPrincipalName, \"@\")[0]), TargetAccountUPNSuffix = tostring(split(TargetUserPrincipalName, \"@\")[1])\n  | project-reorder TimeGenerated, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingAadUserId, InitiatingUserPrincipalName, InitiatingIPAddress, TargetAppName, AddedUser, UpdatedBy\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A new incident was created in the Cortex XDR portal with a severity \"High\". Click on the events for incident details. \n Topic: Cortex XDR"}, {"role": "assistant", "content": "CortexXDR_Incidents_CL\n| where severity_s contains \"high\"\n| where status_s !contains \"resolved_auto\"\n// the below line filters for incidents that has at least one user or one host in it. Comment the below line if you want to generated incidents that have 0 user or 0 host as well\n| where host_count_d > 0 or user_count_d > 0\n| project TimeGenerated, incident_id_s, status_s, severity_s, incident_sources_s, description_s, xdr_url_s, hosts_s, users_s, alert_categories_s, host_count_d, user_count_d, alert_count_d, creation_time_d, modification_time_d\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies external user accounts that are added to a Team and then removed within one hour.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "// If you want to look at user added further than 7 days ago adjust this value\n// If you want to change the timeframe of how quickly accounts need to be added and removed change this value\nlet time_delta = 1h;\nEnrichedMicrosoft365AuditLogs\n| where Workload == \"MicrosoftTeams\"\n| where Operation == \"MemberAdded\"\n| extend UPN = tostring(parse_json(tostring(AdditionalProperties)).UPN) // Assuming UPN is stored in AdditionalProperties\n| where UPN contains \"#EXT#\"\n| project TimeAdded = TimeGenerated, Operation, UPN, UserWhoAdded = UserId, TeamName = tostring(parse_json(tostring(AdditionalProperties)).TeamName), TeamGuid = tostring(parse_json(tostring(AdditionalProperties)).TeamGuid)\n| join kind=innerunique (\n    EnrichedMicrosoft365AuditLogs\n    | where Workload == \"MicrosoftTeams\"\n    | where Operation == \"MemberRemoved\"\n    | extend UPN = tostring(parse_json(tostring(AdditionalProperties)).UPN) // Assuming UPN is stored in AdditionalProperties\n    | where UPN contains \"#EXT#\"\n    | project TimeDeleted = TimeGenerated, Operation, UPN, UserWhoDeleted = UserId, TeamName = tostring(parse_json(tostring(AdditionalProperties)).TeamName), TeamGuid = tostring(parse_json(tostring(AdditionalProperties)).TeamGuid)\n) on UPN, TeamGuid\n| where TimeDeleted < (TimeAdded + time_delta)\n| project TimeAdded, TimeDeleted, UPN, UserWhoAdded, UserWhoDeleted, TeamName, TeamGuid\n| extend AccountName = tostring(split(UPN, \"@\")[0]), AccountUPNSuffix = tostring(split(UPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is triggered when a Microsoft Purview Insider Risk Management alert is recieved in Microsoft Sentinel via the Microsoft Purview Insider Risk Management Connector. The alert extracts usernames from security alerts to provide UserPrincipalName, Alert Name, Reporting Product Name, Status, Alert Link, Previous Alerts Links, Time Generated. There is an option for configuration of correlations against Microsoft Sentinel watchlists. For more information, see [Learn about insider risk management](https://docs.microsoft.com/microsoft-365/compliance/insider-risk-management)\n Topic: MicrosoftPurviewInsiderRiskManagement"}, {"role": "assistant", "content": "let AlertLinks = SecurityAlert\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| summarize PreciousSecurityAlertLinks=make_set(AlertLink) by UPN;\nSecurityAlert\n| where ProductName == \"Microsoft 365 Insider Risk Management\"\n    | summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n    | mv-expand todynamic(Entities)\n    | where Entities[\"Type\"] =~ \"account\"\n    | extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n        Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n    | extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| join kind=inner (AlertLinks) on UPN\n| extend UserPrincipalName = UPN\n| extend PreviousAlertsLinks = strcat(PreciousSecurityAlertLinks)\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UserPrincipalName == $right.SearchKey\n| project UserPrincipalName, AlertName, ProductName, Tactics, Status, AlertLink, PreviousAlertsLinks, TimeGenerated\n| sort by TimeGenerated desc\n| extend AccountName = tostring(split(UserPrincipalName, \"@\")[0]), AccountUPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies whenever a user account has the setting \"Password Never Expires\" in the user account properties selected.\nThis is indicated in Security event 4738 in the EventData item labeled UserAccountControl with an included value of %%2089.\n%%2089 resolves to \"Dont Expire Password - Enabled\".\n Topic: Detections"}, {"role": "assistant", "content": "union isfuzzy=true\n(\n SecurityEvent\n | where EventID == 4738\n // 2089 value indicates the Don't Expire Password value has been set\n | where UserAccountControl has \"%%2089\"\n | extend Value_2089 = iff(UserAccountControl has \"%%2089\",\"'Don't Expire Password' - Enabled\", \"Not Changed\")\n // 2050 indicates that the Password Not Required value is NOT set, this often shows up at the same time as a 2089 and is the recommended value.  This value may not be in the event.\n | extend Value_2050 = iff(UserAccountControl has \"%%2050\",\"'Password Not Required' - Disabled\", \"Not Changed\")\n // If value %%2082 is present in the 4738 event, this indicates the account has been configured to logon WITHOUT a password. Generally you should only see this value when an account is created and only in Event 4720: Account Creation Event.\n | extend Value_2082 = iff(UserAccountControl has \"%%2082\",\"'Password Not Required' - Enabled\", \"Not Changed\")\n | project StartTime = TimeGenerated, EventID, Activity, Computer, TargetAccount, TargetUserName, TargetDomainName, TargetSid, \n AccountType, UserAccountControl, Value_2089, Value_2050, Value_2082, SubjectAccount, SubjectUserName, SubjectDomainName, SubjectUserSid\n ),\n (\n WindowsEvent\n | where EventID == 4738 and EventData has '2089'\n // 2089 value indicates the Don't Expire Password value has been set\n | extend UserAccountControl = tostring(EventData.UserAccountControl)\n | where UserAccountControl has \"%%2089\"\n | extend Value_2089 = iff(UserAccountControl has \"%%2089\",\"'Don't Expire Password' - Enabled\", \"Not Changed\")\n // 2050 indicates that the Password Not Required value is NOT set, this often shows up at the same time as a 2089 and is the recommended value.  This value may not be in the event.\n | extend Value_2050 = iff(UserAccountControl has \"%%2050\",\"'Password Not Required' - Disabled\", \"Not Changed\")\n // If value %%2082 is present in the 4738 event, this indicates the account has been configured to logon WITHOUT a password. Generally you should only see this value when an account is created and only in Event 4720: Account Creation Event.\n | extend Value_2082 = iff(UserAccountControl has \"%%2082\",\"'Password Not Required' - Enabled\", \"Not Changed\")\n | extend Activity=\"4738 - A user account was changed.\"\n | extend TargetAccount = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n | extend TargetSid = tostring(EventData.TargetSid)\n | extend SubjectAccount = strcat(EventData.SubjectDomainName,\"\\\\\", EventData.SubjectUserName)\n | extend SubjectUserSid = tostring(EventData.SubjectUserSid)\n | extend AccountType=case(SubjectAccount endswith \"$\" or SubjectUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(SubjectUserSid), \"\", \"User\")\n | project StartTime = TimeGenerated, EventID, Activity, Computer, TargetAccount, TargetUserName = tostring(EventData.TargetUserName), TargetDomainName = tostring(EventData.TargetDomainName), TargetSid, \n AccountType, UserAccountControl, Value_2089, Value_2050, Value_2082, SubjectAccount, SubjectDomainName = tostring(EventData.SubjectDomainName), SubjectUserName = tostring(EventData.SubjectUserName), SubjectUserSid = tostring(EventData.SubjectUserSid)\n )\n | extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n | extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n | project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An attacker with SetDefaultPolicyVersion permissions could escalate privileges through existing policy versions that are not currently in use. More about this API at https://docs.aws.amazon.com/IAM/latest/APIReference/API_SetDefaultPolicyVersion.html \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"SetDefaultPolicyVersion\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identify and decode new encoded powershell scripts this week versus previous 14 days\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = totimespan((endtime-starttime)*3);\nlet midlookback = totimespan((endtime-starttime)*2);\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where TimeGenerated between(ago(lookback)..endtime)\n| where EventID==4688\n| where NewProcessName has_any (\"powershell.exe\",\"pwsh.exe\")\n| project TimeGenerated, Computer, Account, NewProcessName, FileName=tostring(split(NewProcessName, '\\\\')[-1]), ProcessCommandLine = CommandLine, ParentProcessName;\nprocessEvents};\nlet encodedPSScripts =\nProcessCreationEvents\n| where TimeGenerated between(ago(midlookback)..starttime)\n| where FileName in~ (\"powershell.exe\",\"pwsh.exe\")\n| where ProcessCommandLine has \"-encodedCommand\";\nencodedPSScripts\n| where TimeGenerated between(starttime..endtime)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by Computer, Account, NewProcessName, FileName, ProcessCommandLine, ParentProcessName\n| parse kind=regex flags=i ProcessCommandLine with * \"-EncodedCommand \" encodedCommand\n| extend decodedCommand = base64_decode_tostring(substring(encodedCommand, 0, strlen(encodedCommand) - (strlen(encodedCommand) %8)))\n| join kind=leftanti (\n  encodedPSScripts\n  | where TimeGenerated between(ago(lookback)..starttime)\n  | summarize count() by ProcessCommandLine\n  | parse kind=regex flags=i ProcessCommandLine with * \"-EncodedCommand \" encodedCommand\n  | extend decodedCommand = base64_decode_tostring(substring(encodedCommand, 0, strlen(encodedCommand) - (strlen(encodedCommand) %8)))\n) on encodedCommand, decodedCommand\n| extend timestamp = StartTime\n| extend NTDomain = tostring(split(Account,'\\\\',0)[0]), Name = tostring(split(Account,'\\\\',1)[0])\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches suspended users.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where TimeGenerated > ago(24h)\n| where EventMessage has \"suspend\"\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects suspicious ZPA connections from forbidden countries.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "let bl_countries = dynamic(['CH', 'RU']);       //List of countries from which you do not expect connections\nZPAEvent \n| where DvcAction == 'open'\n| where SrcGeoCountry in~ (bl_countries)\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for server latency.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "GCPCloudDNS\n| where TimeGenerated > ago(24h)\n| order by payload_serverLatency_d\n| extend DNSCustomEntity = Query, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for Microsoft Defender for Endpoint detections related to the remote command execution attempts on Azure IR with Managed VNet or SHIR. \nIn Microsoft Sentinel, the SecurityAlerts table includes the name of the impacted device. Additionally, this query joins the DeviceInfo table to connect other information such as device group, IP address, signed in users, and others allowing analysts using Microsoft Sentinel to have more context related to the alert. \nReference: https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-29972 , \nhttps://msrc-blog.microsoft.com/2022/05/09/vulnerability-mitigated-in-the-third-party-data-connector-used-in-azure-synapse-pipelines-and-azure-data-factory-cve-2022-29972\n Topic: Detections"}, {"role": "assistant", "content": "let mde_threats = dynamic([\"Behavior:Win32/SuspAzureRequest.A\", \"Behavior:Win32/SuspAzureRequest.B\", \"Behavior:Win32/SuspAzureRequest.C\", \"Behavior:Win32/LaunchingSuspCMD.B\"]);\nDeviceInfo\n| extend DeviceName = tolower(DeviceName)\n| join kind=inner ( SecurityAlert\n| where ProviderName == \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| extend ThreatFamilyName = tostring(parse_json(ExtendedProperties).ThreatFamilyName)\n| where ThreatName in~ (mde_threats) or ThreatFamilyName in~ (mde_threats)\n| extend CompromisedEntity = tolower(CompromisedEntity)\n) on $left.DeviceName == $right.CompromisedEntity\n| summarize by bin(TimeGenerated, 1d), DisplayName, ThreatName, ThreatFamilyName, PublicIP, AlertSeverity, Description, tostring(LoggedOnUsers), DeviceId, TenantId, CompromisedEntity, tostring(LoggedOnUsers), ProductName, Entities\n| extend HostName = tostring(split(CompromisedEntity, \".\")[0]), DomainIndex = toint(indexof(CompromisedEntity, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(CompromisedEntity, DomainIndex + 1), CompromisedEntity)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected creation of new CRUD Lambda policy and usage of the attach policy events (AttachUserPolicy/AttachRolePolicy/AttachGroupPolicy). This might indicate a privilege escalation technique that attackers could use.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\nlet createPolicy =  dynamic([\"CreatePolicy\", \"CreatePolicyVersion\"]);\nlet timeframe = 1d;\nlet lookback = 14d;\n// Creating Master table with all the events to use with materialize for better performance\nlet EventInfo = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName in (EventNameList) or EventName in (createPolicy)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\");\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\nlet FullAdminPolicyEvents =  materialize(  EventInfo\n| where TimeGenerated >= ago(lookback)\n| where EventName in (createPolicy)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and (Action contains \"lambda:Create\" and Action contains \"lambda:Get\" and Action contains \"lambda:Update\" and Action contains \"kms:Delete\") and Resource == \"*\" and Condition == \"\"\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn, RecipientAccountId, AccountName, AccountUPNSuffix\n| project-rename StartTime = TimeGenerated  );\nlet PolicyAttach = materialize(  EventInfo\n| where TimeGenerated >= ago(timeframe)\n| where EventName in (EventNameList) and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\"/\")[1])\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName, UserIdentityType , UserIdentityArn, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, PolicyName\n| extend AttachEvent = pack(\"StartTime\", StartTime, \"EndTime\", EndTime, \"EventName\", EventName, \"UserIdentityType\",   UserIdentityType, \"SourceIpAddress\", SourceIpAddress, \"AccountName\", AccountName, \"AccountUPNSuffix\", AccountUPNSuffix, \"RecipientAccountId\", RecipientAccountId, \"UserIdentityArn\", UserIdentityArn)\n| project EventSource, PolicyName, AttachEvent, RecipientAccountId, AccountName, AccountUPNSuffix, AttachEventCount\n);\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\nFullAdminPolicyEvents\n| join kind=leftouter\n(\n    PolicyAttach\n)\non PolicyName\n| project-away PolicyName1\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects potential attempts by non-computer accounts (non domain controllers) to retrieve/synchronize an active directory object leveraging directory replication services (DRS).\nA Domain Controller (computer account) would usually be performing these actions in a domain environment. Another detection rule can be created to cover domain controllers accounts doing at rare times.\nA domain user with privileged permissions to use directory replication services is rare.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// Enter a reference list of hostnames for your DC servers\n//let DCServersList = dynamic ([\"DC01.simulandlabs.com\",\"DC02.simulandlabs.com\"]);\nSecurityEvent\n//| where Computer in (DCServersList)\n| where EventID == 4662 and ObjectServer == 'DS'\n| where AccountType != 'Machine'\n| where Properties has '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2' //DS-Replication-Get-Changes\n    or Properties has '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2' //DS-Replication-Get-Changes-All\n    or Properties has '89e95b76-444d-4c62-991a-0facbeda640c' //DS-Replication-Get-Changes-In-Filtered-Set\n| project TimeGenerated, Account, Activity, Properties, SubjectLogonId, Computer\n| join kind=leftouter\n(\n    SecurityEvent\n    //| where Computer in (DCServersList)\n    | where EventID == 4624 and LogonType == 3\n    | where AccountType != 'Machine'\n    | project TargetLogonId, IpAddress\n)\non $left.SubjectLogonId == $right.TargetLogonId\n| project-reorder TimeGenerated, Computer, Account, IpAddress\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, \"\\\\\")[0]), AccountNTDomain = tostring(split(Account, \"\\\\\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query helps identify bots added to multiple Teams in a short space of time.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "// Adjust these thresholds to suit your environment.\nlet threshold = 2;\nlet time_threshold = timespan(5m);\nOfficeActivity\n  | where OfficeWorkload =~ \"MicrosoftTeams\"\n  | where Operation =~ \"BotAddedToTeam\"\n  | summarize Start=max(TimeGenerated), End=min(TimeGenerated), Teams = make_set(TeamName, 10000) by UserId\n  | extend CountOfTeams = array_length(Teams)\n  | extend TimeDelta = End - Start \n  | where CountOfTeams > threshold\n  | where TimeDelta >= time_threshold\n  | project Start, End, Teams, CountOfTeams, UserId\n  | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n  | extend Account_0_Name = AccountName\n  | extend Account_0_UPNSuffix = AccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies MFA Spamming followed by Successful logins and by a successful authentication within a given time window.\nDefault Failure count is 10 and 1 successful login with default Time Window is 5 minutes.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "// Filter for sign-in logs ingested within the last day\nSigninLogs\n| where ingestion_time() > ago(1d)\n// Filter for records with AuthenticationRequirement set to multiFactorAuthentication\n| where AuthenticationRequirement == \"multiFactorAuthentication\"\n// Extract information from dynamic columns DeviceDetail and LocationDetails\n| extend DeviceDetail = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n// Extract specific attributes from DeviceDetail and LocationDetails\n| extend\n      OS = tostring(DeviceDetail.operatingSystem),\n      Browser = tostring(DeviceDetail.browser),\n      State = tostring(LocationDetails.state),\n      City = tostring(LocationDetails.city),\n      Region = tostring(LocationDetails.countryOrRegion)\n// Expand multi-value property AuthenticationDetails into separate records\n| mv-expand todynamic(AuthenticationDetails)\n// Parse AuthResult from JSON in AuthenticationDetails and convert to string\n| extend AuthResult = tostring(parse_json(AuthenticationDetails).authenticationStepResultDetail)\n// Summarize data by aggregating statistics for each user, IP, and AuthResult\n| summarize FailedAttempts = countif(AuthResult == \"MFA denied; user declined the authentication\" or AuthResult == \"MFA denied; user did not respond to mobile app notification\"), SuccessfulAttempts = countif(AuthResult == \"MFA successfully completed\"), InvolvedOS = make_set(OS, 5), InvolvedBrowser = make_set(Browser), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserPrincipalName, IPAddress, State, City, Region\n// Calculate AuthenticationWindow by finding time difference between start and end times\n| extend AuthenticationWindow = (EndTime - StartTime)\n// Filter for records with more than 10 failed attempts in 5-minute window and at least 1 successful attempt\n| where FailedAttempts > 10 and AuthenticationWindow <= 5m and SuccessfulAttempts >= 1\n// Extract user's name and UPN suffix using split function\n| extend Name = tostring(split(UserPrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(UserPrincipalName, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects request attempts to unexpected destination ports.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "let bl_ports = dynamic(['22', '3389']);\nImpervaWAFCloud\n| where DvcAction !startswith 'REQ_BLOCKED' or DvcAction !startswith 'REQ_BAD_'\n| where DstPortNumber in (bl_ports)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Suspicious activity of the STS token of a Lambda function (for example, by SSRF) indicates a possible token hijacking. An attacker may have stolen the token and could abuse its permissions to escalate privileges and move laterally in the cloud account.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let aws_public_ips = externaldata(prefixes: string)\n[ \n   h@'https://aka.ms/awspublicipaddresse/aws-public-ip-addresses/ip-ranges.json'\n]\nwith(format='multijson');\nlet timeframe = 30m;\nlet lookback = 12h;\n//Get the AccessKey in the STS token when Lambda service assumes the Role periodically (max assumed session can be 12h)\nlet sts_token = AWSCloudTrail\n| where TimeGenerated >= ago (lookback)\n| where EventSource == \"sts.amazonaws.com\" and SourceIpAddress == \"lambda.amazonaws.com\"\n| extend instanceId = tostring(parse_json(RequestParameters).roleSessionName)\n| extend token = tostring(parse_json(ResponseElements).credentials.accessKeyId);\n//Get the identities who used that STS token - this can be the Lambda function itself which assumed it (legit),\n//but it can also be an external identity which abuses the token permissions\nlet tokenUsage = AWSCloudTrail\n| where TimeGenerated >= ago (timeframe)\n| join kind=inner sts_token on $left.UserIdentityAccessKeyId == $right.token\n| extend region = AWSRegion1\n| project-away SourceIpAddress1, UserIdentityUserName1, UserIdentityArn1, TimeGenerated1;\n//Check whether the called identity is legit\naws_public_ips\n| mv-expand todynamic(prefixes)\n| extend ip_prefix=tostring(todynamic(prefixes.['ip_prefix']))\n| extend region=tostring(todynamic(prefixes.['region']))\n| extend service=tostring(todynamic(prefixes.['service']))\n| project-away prefixes\n| where service == \"AMAZON\" \n| join kind=inner tokenUsage on region\n| where SourceIpAddress !contains \"amazonaws.com\"\n| where ipv4_is_private(SourceIpAddress) == false\n| extend IsInRange = ipv4_is_in_range(SourceIpAddress, ip_prefix)\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName, AssumedRoleArn = UserIdentityArn\n| summarize timestamp=arg_max(timestamp,*), r = make_set(IsInRange) by SourceIpAddress, UserIdentityUserName, UserIdentityArn\n| where not (set_has_element(r, true))\n| project-away ip_prefix, IsInRange\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects outbound network connections using the LDAP protocol to external IP addresses that have not had an LDAP network connection in the past 14 days. This could indicate exploitation of CVE-2021-44228 vulnerability.\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet legacy_ldap = (\nCommonSecurityLog\n| where TimeGenerated between(lookback..starttime)\n// Filter to LDAP connections only\n| where ApplicationProtocol =~ \"ldap\"\n// Check LDAP server is external\n| extend private =  ipv4_is_private(DestinationIP)\n| where private == false\n// Filter out events where network connection was blocked - change this to expand hunt\n| where DeviceAction has_any (\"allow\", \"accept\", \"allowed\")\n| summarize by DestinationIP);\nCommonSecurityLog\n| where TimeGenerated between(starttime..endtime)\n| where ApplicationProtocol =~ \"ldap\"\n| extend private =  ipv4_is_private(DestinationIP)\n| where private == false\n| where DestinationIP !in (legacy_ldap)\n| where DeviceAction has_any (\"allow\", \"accept\", \"allowed\")\n| project-reorder TimeGenerated, SourceIP, DestinationIP, ApplicationProtocol, DestinationPort, SentBytes, ReceivedBytes, DeviceAction\n| extend timestamp = TimeGenerated\n| extend IP_0_Address = SourceIP\n| extend IP_1_Address = DestinationIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects failed logons on SQL Server using the SQLEvent KQL Parser function. \n Topic: Microsoft Windows SQL Server Database Audit"}, {"role": "assistant", "content": "// SQLEvent is not the table name, it is the function name that should already be imported into your workspace.\n// The underlying table where the data exists is the Event table.\nSQLEvent\n| where LogonResult has \"failed\"\n| summarize by TimeGenerated, CurrentUser, Reason, ClientIP\n| extend Name = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 0)[0]), CurrentUser)\n| extend UPNSuffix = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 1)[0]), '')\n| extend Name = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 1)[0]), Name)\n| extend NTDomain = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 0)[0]), '')\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for updated users.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where TimeGenerated > ago(24h)\n| where EventMessage =~ 'User updated'\n| project EventCreationTime, ObjectItemName, ChangedValues, AssociatedItems\n| extend AccountCustomEntity = ObjectItemName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for numerous login attempts to the management console with an unknown or invalid user name.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let FailureThreshold = 15;\nlet FailedLogins = OktaSSO\n| where eventType_s =~ \"user.session.start\" and outcome_reason_s =~ \"VERIFICATION_ERROR\"\n| summarize count() by actor_alternateId_s, client_ipAddress_s, bin(TimeGenerated, 5m)\n| where count_ > FailureThreshold\n| project client_ipAddress_s, actor_alternateId_s;\nOktaSSO\n| join kind=inner (FailedLogins) on client_ipAddress_s, actor_alternateId_s\n| where eventType_s =~ \"user.session.start\" and outcome_reason_s =~ \"VERIFICATION_ERROR\"\n| summarize count() by actor_alternateId_s, ClientIP = client_ipAddress_s, City = column_ifexists('client_geographicalContext_city_s', \"\"), Country = column_ifexists('client_geographicalContext_country_s', \"\"), column_ifexists('published_t', now())\n| sort by column_ifexists('published_t', now()) desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This queries GitLab Audit Logs for user impersonation. A malicious operator or a compromised admin account could leverage the impersonation feature of GitLab to change code or repository settings bypassing usual processes. This hunting queries allows you to track the audit actions done under impersonation.\n Topic: GitLab"}, {"role": "assistant", "content": "let impersonationStart = (GitLabAudit\n| where CustomMessage == 'Started Impersonation');\nlet impersonationStop = (GitLabAudit\n| where CustomMessage == 'Stopped Impersonation');\nimpersonationStart\n| join kind=inner impersonationStop on $left.TargetID == $right.TargetID and $left.AuthorID == $right.AuthorID \n| where EventTime1 > EventTime\n| extend TimeGenerated, AuthorID, AuthorName, TargetID, TargetDetails = TargetDetails, IPStart = IPAddress, IPStop = IPAddress1, ImpStartTime = EventTime, ImpStopTime = EventTime1, EntityName\n| join kind=inner (GitLabAudit | extend ActionTime = EventTime, AuthorName) on $left.TargetDetails == $right.AuthorName \n| where ImpStartTime < ActionTime and ActionTime > ImpStopTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when task error occurs.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "McAfeeEPOEvent\n| where EventId in ('1003', '1067')\n| extend EventMessage = case(EventId == '1003', 'Error starting Task',\n                              'Unable to start scheduled task')\n| project DvcIpAddr, EventId, EventMessage\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies Azure DevOps activities where organization Microsoft Entra ID ConditionalAccess policy disable by the admin\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where OperationName ==\"OrganizationPolicy.PolicyValueUpdated\"\n| where Data.PolicyName == \"Policy.EnforceAADConditionalAccess\"\n| where Data.PolicyValue == \"OFF\"\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies mass delete activity where multiple Power Apps are deleted, matching a predefined threshold of total apps deleted or app delete events across multiple Power Platform environments. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let total_app_mass_delete_threshold = 25;\nlet cross_environment_delete_threshold = 10;\nlet query_frequency = 1h;\nlet app_delete_events = materialize(\n    PowerPlatformAdminActivity\n    | where TimeGenerated >= ago (query_frequency)\n    | where EventOriginalType == \"DeletePowerApp\"\n    | extend Properties = tostring(PropertyCollection)\n    | extend AppId = extract(@'\"powerplatform.analytics.resource.power_app.id\",\"Value\":\"([^\"]+)\"', 1, Properties)\n    | extend AppId = tolower(replace_string(AppId, '/providers/Microsoft.PowerApps/apps/', ''))\n    | extend EnvironmentId = extract(@'\"powerplatform.analytics.resource.environment.id\",\"Value\":\"([^\"]+)\"', 1, Properties)\n    );\napp_delete_events\n| summarize AppCount = count(), EnvCount = dcount(EnvironmentId) by ActorName\n| where AppCount >= total_app_mass_delete_threshold or EnvCount >= cross_environment_delete_threshold\n| join kind=inner app_delete_events on ActorName\n| summarize\n    Apps = make_set(AppId, 1000),\n    Environments = make_set(EnvironmentId, 1000),\n    StartTime = min(TimeGenerated)\n    by AppCount, EnvCount, ActorName\n| extend\n    PowerAppsEntityId = 27593,\n    DataverseId = 32780,\n    AccountName = tostring(split(ActorName, '@')[0]),\n    UPNSuffix = tostring(split(ActorName, '@')[1])\n| project\n    StartTime,\n    ActorName,\n    AppCount,\n    Apps,\n    EnvCount,\n    Environments,\n    PowerAppsEntityId,\n    DataverseId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies IP addresses that generates maximal traffic rate over 10k PPS during DDoS attack mitigation Topic: Azure DDoS Protection"}, {"role": "assistant", "content": "AzureDiagnostics \n| where ResourceType == 'PUBLICIPADDRESSES' and Category == \"DDoSMitigationFlowLogs\"\n//sample rate of mitigation device 1:1000 so the PPS of the source is estimated to be x1000.\n| summarize PPS = 1000 * count() by destPublicIpAddress_s, sec = bin(TimeGenerated, 1s), sourcePublicIpAddress_s\n| summarize maxPPS = max(PPS) by destPublicIpAddress_s, sourcePublicIpAddress_s\n| order by destPublicIpAddress_s, maxPPS desc\n| where maxPPS > 10000\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Organizations are added in the Cross-tenant Access Settings to control communication inbound or outbound for users and applications. This detection notifies when Organization Outbound Direct Settings are changed for \"Users & Groups\" and for \"Applications\".\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "// In User & Groups and in Applications, the following \"AccessType\" values in columns PremodifiedOutboundSettings and ModifiedOutboundSettings are interpreted accordingly\n// When Access Type in premodified outbound settings value was 1 that means that the initial access was allowed. When Access Type in premodified outbound settings value was 2 that means that the initial access was blocked.\n// When Access Type in modified outbound settings value is 1 that means that now access is allowed. When Access Type in modified outbound settings value is 2 that means that now access is blocked.\nAuditLogs\n| where OperationName has \"Update a partner cross-tenant access setting\"\n| mv-apply TargetResource = TargetResources on\n  (\n      where TargetResource.type =~ \"Policy\"\n      | extend Properties = TargetResource.modifiedProperties\n  )\n| mv-apply Property = Properties on\n  (\n      where Property.displayName =~ \"b2bDirectConnectOutbound\"\n      | extend PremodifiedOutboundSettings = trim('\"',tostring(Property.oldValue)),\n               ModifiedOutboundSettings = trim(@'\"',tostring(Property.newValue))\n  )\n| where PremodifiedOutboundSettings != ModifiedOutboundSettings\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows inactive user accounts (users which last login time is more than 30 days).\n Topic: Box"}, {"role": "assistant", "content": "let active_admins = BoxEvents\n| where TimeGenerated between (ago(7d) .. ago(1d))\n| where EventType =~ 'LOGIN'\n| summarize makeset(SourceLogin);\nlet inactive_admins = BoxEvents\n| where TimeGenerated between (ago(30d) .. ago(7d))\n| where EventType =~ 'LOGIN'\n| where SourceLogin !in (active_admins)\n| summarize makeset(SourceLogin);\nBoxEvents\n| where TimeGenerated > ago(7d)\n| where EventType =~ 'LOGIN'\n| where SourceLogin !in (active_admins)\n| where SourceLogin in (inactive_admins)\n| summarize LastLoginTime = max(TimeGenerated) by SourceLogin\n| project LastLoginTime, SourceLogin\n| extend AccountCustomEntity = SourceLogin\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query will detect SQL queries that took an unusually long period of time to execute based on a calculated average execution time. The query groups based on the application and the username, making this query suitable for detecting exploitation of web applications, or other SQL backed applications with predictable behaviour.\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let timeRange = 14d;\n//How frequently the query averages data for an average execution time\nlet timeSliceSize = 1h;\n//Anomaly decompose threshold, 2 by default\nlet scoreThreshold = 2;\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated > ago(timeRange)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n    ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n    IsSuccess = succeeded_s, DurationMs = duration_milliseconds_d, AffectedRows = affected_rows_d,\n    ResponseRows = response_rows_d, Statement = statement_s,\n    Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                      , 0),\n    State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                      , 0),\n    AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize));\nprocessedData\n//Bin the data into 1h windows, taking the average of exeuction time\n| summarize round(avg(DurationMs), 2), min(TimeGenerated), max(TimeGenerated) by PrincipalName, ApplicationName, bin(TimeGenerated, timeSliceSize), ResourceId\n//Summarise by user and application and create list ready for anomaly detection\n| summarize make_list(avg_DurationMs, 10000), make_list(min_TimeGenerated, 10000), make_list(max_TimeGenerated, 10000) by PrincipalName, ApplicationName, ResourceId\n| extend series_decompose_anomalies(list_avg_DurationMs, scoreThreshold, -1, 'linefit')\n| mv-expand TimeAnomaly=series_decompose_anomalies_list_avg_DurationMs_ad_flag, WindowStart=list_min_TimeGenerated, WindowEnd=list_max_TimeGenerated\n| project WindowStart, WindowEnd, PrincipalName, ApplicationName, TimeAnomaly, ResourceId\n| where TimeAnomaly == 1 \n//Split the query here to see raw anomaly results\n//The next section will re-join back to the SQL diagnostics data to \n//display the queries executed within the anomalous windows identified\n| extend joinKey = strcat(PrincipalName, ApplicationName)\n| join kind=leftouter (\n    processedData\n    | project ApplicationName, PrincipalName, Statement, TimeGenerated, DurationMs, ResourceId, ClientIp, HostName\n    | extend joinKey = strcat(PrincipalName, ApplicationName)\n) on joinKey\n| where TimeGenerated between (todatetime(WindowStart) .. todatetime(WindowEnd))\n| project TimeGenerated, TimeAnomaly, WindowStart, WindowEnd, PrincipalName, ApplicationName, Statement, DurationMs, ResourceId, ClientIp, HostName\n| order by DurationMs desc\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = ClientIp\n| extend Host_0_Hostname = HostName\n| extend CloudApplication_0_Name = ApplicationName\n| extend AzureResource_0_ResourceId = ResourceId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in DnsEvents.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour for DNS events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and DNS events\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      DnsEvents\n      | where TimeGenerated >= ago(dt_lookBack)\n      | where SubType =~ \"LookupQuery\" and isnotempty(IPAddresses)\n      | mv-expand SingleIP = split(IPAddresses, \", \") to typeof(string)\n      | extend DNS_TimeGenerated = TimeGenerated\n  )\n  on $left.TI_ipEntity == $right.SingleIP\n  // Filter out DNS events that occurred after the expiration of the corresponding indicator\n  | where DNS_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and SingleIP, and keep the DNS event with the latest timestamp\n  | summarize DNS_TimeGenerated = arg_max(DNS_TimeGenerated, *) by IndicatorId, SingleIP\n  // Select the desired output fields\n  | project DNS_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, DomainName, ExpirationDateTime, ConfidenceScore,\n    TI_ipEntity, Computer, EventId, SubType, ClientIP, Name, IPAddresses, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n  | extend timestamp = DNS_TimeGenerated, HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection mechanism identifies situations where multiple server errors originate from a single source within a limited time frame.\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "// HTTP response status codes indicate whether a specific HTTP request has been successfully completed.\n// Please refer this for more details: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\nlet threshold = 100; // You can update threshold value as per your environment\n_Im_WebSession(starttime=ago(1h))\n| where toint(EventResultDetails) between (500 .. 599)\n| summarize\n    TotalErrorCount = count(),\n    URLs=make_set(Url, 100),\n    EventStartTime = min(TimeGenerated),\n    EventEndTime = max(TimeGenerated),\n    EventResultDetailsSet=make_set(EventResultDetails,10)\n    by SrcIpAddr, bin(TimeGenerated, 5m), SrcUsername, SrcHostname\n| where TotalErrorCount > threshold\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\"), Threshold=threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects threats from internal email threat protection Topic: MimecastSEG"}, {"role": "assistant", "content": "MimecastSIEM_CL| where mimecastEventId_s==\"mail_ttp_iep\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for source IP addresses with top failed actions count.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where TimeGenerated > ago(24h)\n| extend result = parse_json(todynamic(PayloadAuthorizationinfo))[0]['granted']\n| where result =~ 'false'\n| where isnotempty(SrcIpAddr)\n| summarize count() by SrcIpAddr\n| top 10 by count_\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects C&C callback events.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where EventMessage has \"CnC Callback\"\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects Mmltiple login failures from single IP.\n Topic: Snowflake"}, {"role": "assistant", "content": "let threshold = 10;\nSnowflake\n| where EventType =~ 'LOGIN'\n| where IS_SUCCESS_s =~ 'No'\n| summarize count() by SrcDvcIpAddr, bin(TimeGenerated, 5m)\n| where count_ > threshold\n| extend IPCustomEntity = SrcDvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects remote desktop authentication attempts with a localhost source address, which can indicate a tunneled login.\nRef: https://www.mandiant.com/resources/bypassing-network-restrictions-through-rdp-tunneling\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "SecurityEvent\n   | where EventID in (4624,4625) and LogonType in (10) and IpAddress in (\"::1\",\"127.0.0.1\")\n   | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, TargetUserName, TargetLogonId, LogonType, IpAddress\n   | extend Name=tostring(split(TargetUserName, \"@\")[0]), UPNSuffix=tostring(split(TargetUserName, \"@\")[1])\n   | extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Looks for users accessing multiple other users mailboxes or accessing multiple folders in another users mailbox.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = totimespan((endtime - starttime) * 2);\nlet user_threshold = 1;    // Threshold for number of mailboxes accessed\nlet folder_threshold = 5;  // Threshold for number of mailbox folders accessed\n// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n    | where TimeGenerated between (ago(lookback)..starttime)\n    | where Operation =~ \"MailItemsAccessed\"\n    | where ResultStatus =~ \"Succeeded\"\n    | where tolower(MailboxOwnerUPN) != tolower(UserId)\n    | join kind=rightanti (\n        OfficeActivity\n        | where TimeGenerated between (starttime..endtime)\n        | where Operation =~ \"MailItemsAccessed\"\n        | where ResultStatus =~ \"Succeeded\"\n        | where tolower(MailboxOwnerUPN) != tolower(UserId)\n    ) on MailboxOwnerUPN, UserId\n    | where isnotempty(Folders)\n    | mv-expand ParsedFolders = parse_json(Folders)\n    | extend folders = tostring(ParsedFolders.Path)\n    | extend ClientIP = iif(Client_IPAddress startswith \"[\", extract(\"\\\\[([^\\\\]]*)\", 1, Client_IPAddress), Client_IPAddress)\n    | summarize \n        StartTime = max(TimeGenerated), \n        EndTime = min(TimeGenerated), \n        set_folders = make_set(folders, 100000), \n        set_ClientInfoString = make_set(ClientInfoString, 100000), \n        set_ClientIP = make_set(ClientIP, 100000), \n        set_MailboxGuid = make_set(MailboxGuid, 100000), \n        set_MailboxOwnerUPN = make_set(MailboxOwnerUPN, 100000) \n      by UserId\n    | extend \n        folder_count = array_length(set_folders),\n        user_count = array_length(set_MailboxGuid)\n    | where user_count > user_threshold or folder_count > folder_threshold\n    | extend Reason = case(\n        user_count > user_threshold and folder_count > folder_threshold, \"Both User and Folder Threshold Exceeded\",\n        folder_count > folder_threshold and user_count <= user_threshold, \"Folder Count Threshold Exceeded\",\n        \"User Threshold Exceeded\")\n    | sort by user_count desc\n    | project-reorder UserId, user_count, folder_count, set_MailboxOwnerUPN, set_ClientIP, set_ClientInfoString, set_folders\n    | extend \n        AccountName = tostring(split(UserId, \"@\")[0]), \n        AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n    // EnrichedMicrosoft365AuditLogs Query\n    let EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated between (ago(lookback)..starttime)\n    | where Operation =~ \"MailItemsAccessed\"\n    | where ResultStatus =~ \"Succeeded\"\n    | extend MailboxOwnerUPN = tostring(parse_json(AdditionalProperties).MailboxOwnerUPN)\n    | where tolower(MailboxOwnerUPN) != tolower(UserId)\n    | join kind=rightanti (\n        EnrichedMicrosoft365AuditLogs\n        | where TimeGenerated between (starttime..endtime)\n        | where Operation =~ \"MailItemsAccessed\"\n        | where ResultStatus =~ \"Succeeded\"\n        | extend MailboxOwnerUPN = tostring(parse_json(AdditionalProperties).MailboxOwnerUPN)\n        | where tolower(MailboxOwnerUPN) != tolower(UserId)\n    ) on MailboxOwnerUPN, UserId\n    | where isnotempty(tostring(parse_json(AdditionalProperties).Folders))\n    | mv-expand ParsedFolders = parse_json(AdditionalProperties).Folders\n    | extend folders = tostring(ParsedFolders.Path)\n    | extend ClientIP = iif(ClientIp startswith \"[\", extract(\"\\\\[([^\\\\]]*)\", 1, ClientIp), ClientIp)\n    | extend ClientInfoString = tostring(parse_json(AdditionalProperties).ClientInfoString)\n    | extend MailboxGuid = tostring(parse_json(AdditionalProperties).MailboxGuid)\n    | summarize \n        StartTime = max(TimeGenerated), \n        EndTime = min(TimeGenerated), \n        set_folders = make_set(folders, 100000), \n        set_ClientInfoString = make_set(ClientInfoString, 100000), \n        set_ClientIP = make_set(ClientIP, 100000), \n        set_MailboxGuid = make_set(MailboxGuid, 100000), \n        set_MailboxOwnerUPN = make_set(MailboxOwnerUPN, 100000) \n      by UserId\n    | extend \n        folder_count = array_length(set_folders),\n        user_count = array_length(set_MailboxGuid)\n    | where user_count > user_threshold or folder_count > folder_threshold\n    | extend Reason = case(\n        user_count > user_threshold and folder_count > folder_threshold, \"Both User and Folder Threshold Exceeded\",\n        folder_count > folder_threshold and user_count <= user_threshold, \"Folder Count Threshold Exceeded\",\n        \"User Threshold Exceeded\")\n    | sort by user_count desc\n    | project-reorder UserId, user_count, folder_count, set_MailboxOwnerUPN, set_ClientIP, set_ClientInfoString, set_folders\n    | extend \n        AccountName = tostring(split(UserId, \"@\")[0]), \n        AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n    // Combine Office and Enriched Logs\n    let CombinedEvents = OfficeEvents\n        | union EnrichedEvents\n        | mv-expand ClientIP = set_ClientIP  // Expand the set_ClientIP into individual ClientIP rows\n        | extend ClientIP = tostring(ClientIP)  // Explicitly cast ClientIP to string\n        | summarize arg_min(StartTime, *) by UserId, ClientIP\n        // Define AccountName and AccountUPNSuffix after summarize to ensure they're available\n        | extend \n            AccountName = tostring(split(UserId, \"@\")[0]), \n            AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n    // Final Output\n    CombinedEvents\n        | project \n            UserId, \n            user_count, \n            folder_count, \n            set_MailboxOwnerUPN, \n            set_ClientIP, \n            set_ClientInfoString, \n            set_folders, \n            AccountName, \n            AccountUPNSuffix\n        | order by user_count desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Cookies: HttpOnly Flag Not Used\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"medium\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"Cookies: HttpOnly Flag Not Used\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for DLP violations by users.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where TimeGenerated > ago(24h)\n| where isnotempty(TriggeredDlpTemplate)\n| project DetectionTime, DstUserName, SrcFileName, TriggeredDlpTemplate\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule helps to identify instances of empty user agent requests originating from IP addresses that have previously reported user agent at least once within the same time period.\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let lookBack = 1d;\nlet WebData =\n    _Im_WebSession(starttime=ago(lookBack), eventresult='Success')\n    | where isempty(HttpUserAgent) and isnotempty( SrcIpAddr)\n    | summarize\n        EventCount=count(),\n        EventStartTime=min(TimeGenerated),\n        EventEndTime=max(TimeGenerated)\n        by SrcIpAddr, SrcUsername, SrcHostname, Url, DstIpAddr, DstPortNumber;\nWebData\n| join kind=inner (_Im_WebSession(starttime=ago(lookBack), eventresult='Success')\n    | project HttpUserAgent, SrcIpAddr\n    | where isnotempty(HttpUserAgent) and isnotempty( SrcIpAddr)\n    | summarize FoundUserAgents=make_set(HttpUserAgent,100) by SrcIpAddr\n    )\n    on SrcIpAddr\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n| project-away SrcIpAddr1\n| order by EventCount desc\n| extend IP_0_Address = SrcIpAddr\n| extend IP_1_Address = DstIpAddr\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend URL_0_Url = Url\n| extend Host_0_HostName = SrcHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple server errors from one source in short timeframe\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "let threshold = 100;\nApacheHTTPServer\n| where HttpStatusCode >= 500 and HttpStatusCode <= 599 \n| summarize MultipleServerErrors = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleServerErrors > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Suspicious activity of the STS token of an EC2 machine hosted by ECS (for example, by SSRF) indicates a possible token hijacking. An attacker may have stolen the token and could abuse its permissions to escalate privileges and move laterally in the cloud account.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let aws_public_ips = externaldata(prefixes: string)\n[ \n    h@'https://aka.ms/awspublicipaddresse/aws-public-ip-addresses/ip-ranges.json'\n]\nwith(format='multijson');\nlet timeframe = 30m;\nlet lookback = 12h;\n//Get the AccessKey in the STS token (IMDS) when EC2 service assumes the Role periodically\nlet sts_token = AWSCloudTrail\n| where TimeGenerated >= ago (lookback)\n| where EventSource == \"sts.amazonaws.com\" and SourceIpAddress == \"ec2.amazonaws.com\"\n| extend instanceId = tostring(parse_json(RequestParameters).roleSessionName)\n| extend token = tostring(parse_json(ResponseElements).credentials.accessKeyId);\n//Identify if the EC2 belongs to ECS/EKS\nlet typeOfEC2 = AWSCloudTrail\n| where TimeGenerated >= ago (lookback)\n| extend instanceId = tostring(split(UserIdentityPrincipalid, \":\")[1])\n| join sts_token on instanceId\n| where UserAgent startswith \"Amazon ECS Agent\"\n| project-away SourceIpAddress1, UserIdentityUserName1, UserIdentityArn1, TimeGenerated1;\n//Get the identities who used that STS token - this can be the EC2 which assumed it (legit),\n//but it can also be an external identity (attacker) which abuses the token permissions \nlet tokenUsage = AWSCloudTrail\n| where TimeGenerated >= ago (timeframe)\n| join kind=inner typeOfEC2 on $left.UserIdentityAccessKeyId == $right.token\n| extend region = AWSRegion\n| project-away SourceIpAddress1, UserIdentityUserName1, UserIdentityArn1, TimeGenerated1;\n//Check whether the called identity is legit\naws_public_ips\n| mv-expand todynamic(prefixes)\n| extend ip_prefix=tostring(todynamic(prefixes.['ip_prefix']))\n| extend region=tostring(todynamic(prefixes.['region']))\n| extend service=tostring(todynamic(prefixes.['service']))\n| project-away prefixes\n| where service == \"EC2\" \n| join kind=inner tokenUsage on region\n| where SourceIpAddress !contains \"amazonaws.com\"\n| where ipv4_is_private(SourceIpAddress) == false\n| extend IsInRange = ipv4_is_in_range(SourceIpAddress, ip_prefix)\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName, AssumedRoleArn = UserIdentityArn\n| summarize timestamp=arg_max(timestamp,*), r = make_set(IsInRange) by SourceIpAddress, UserIdentityUserName, UserIdentityArn\n| where not (set_has_element(r, true))\n| project-away ip_prefix, IsInRange\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Failed brute force attempt detected on an existing user without MFA configurations.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"ConsoleLogin\"\n| where tostring(parse_json(ResponseElements).ConsoleLogin) == \"Failure\" and tostring(parse_json(AdditionalEventData).MFAUsed) == \"No\"\n| summarize arg_min(TimeGenerated, *), failed_attempts=count() by UserIdentityUserName, SourceIpAddress\n| where failed_attempts > 4\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in SecurityAlert table from any Domain IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet SecurityAlerts = SecurityAlert\n| where TimeGenerated > ago(dt_lookBack)\n| extend domain = todynamic(dynamic_to_json(extract_all(@\"(((xn--)?[a-z0-9\\-]+\\.)+([a-z]+|(xn--[a-z0-9]+)))\", dynamic([1]), tolower(Entities))))\n| where isnotempty(domain)\n| mv-expand domain\n| extend domain = tostring(domain)\n| extend EntitiesDynamicArray = parse_json(Entities)\n| mv-apply EntitiesDynamicArray on\n    (summarize\n        HostName = take_anyif(tostring(EntitiesDynamicArray.HostName), EntitiesDynamicArray.Type == \"host\"),\n        IP_addr = take_anyif(tostring(EntitiesDynamicArray.Address), EntitiesDynamicArray.Type == \"ip\")\n    )\n| extend Alert_TimeGenerated = TimeGenerated\n| extend Alert_Description = Description;\nlet AlertDomains = SecurityAlerts\n| distinct domain\n| summarize make_list(domain);\nlet Domain_Indicators = materialize(ThreatIntelligenceIndicator\n| where isnotempty(DomainName)\n| where TimeGenerated >= ago(ioc_lookBack)\n| extend TI_DomainEntity = tolower(DomainName)\n| where TI_DomainEntity in (AlertDomains)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\");\nDomain_Indicators\n// Using innerunique to keep performance fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (SecurityAlerts) on $left.TI_DomainEntity == $right.domain\n| where Alert_TimeGenerated < ExpirationDateTime\n| summarize Alert_TimeGenerated = arg_max(Alert_TimeGenerated, *) by IndicatorId, AlertName\n| project Alert_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DomainName, AlertName, Alert_Description, ProviderName, AlertSeverity, ConfidenceLevel, HostName, IP_addr, Url, Entities, Type, TI_DomainEntity\n| extend timestamp = Alert_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects request to potentially harmful file types (.ps1, .bat, .vbs, etc.).\n Topic: Detections"}, {"role": "assistant", "content": "let file_ext_blocklist = dynamic(['.ps1', '.vbs', '.bat', '.scr']);\nlet lbtime = 10m;\nCisco_Umbrella\n| where TimeGenerated > ago(lbtime)\n| where EventType == 'proxylogs'\n| where DvcAction =~ 'Allowed'\n| extend file_ext = extract(@'.*(\\.\\w+)$', 1, UrlOriginal)\n| extend Filename = extract(@'.*\\/*\\/(.*\\.\\w+)$', 1, UrlOriginal)\n| where file_ext in (file_ext_blocklist)\n| project TimeGenerated, SrcIpAddr, Identities, Filename\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies user account deletion activity where the amount of deleted users exceeds a predefined threshold. Topic: SAP BTP"}, {"role": "assistant", "content": "let bulk_delete_threshold = 10;\nSAPBTPAuditLog_CL\n| where isnotnull(Message.object)\n| where Message.object has \"scim user\" and Message.object has \"DELETE\"\n| mv-expand Attributes = Message.attributes\n| where isnotempty(Attributes.old)\n| extend DeletedUserName = tostring(parse_json(tostring(Attributes.old)).userName)\n| where isnotempty(DeletedUserName)\n| summarize\n    Start = min(UpdatedOn),\n    End = max(UpdatedOn),\n    DeletedUsers = make_set(DeletedUserName, 100)\n    by UserName, Tenant, SpaceId\n| where array_length(DeletedUsers) > bulk_delete_threshold\n| project Start, End, UserName, DeletedUsers, Tenant, SpaceId, CloudApp = \"SAP BTP\"\n| extend AccountName = split(UserName, \"@\")[0], UPNSuffix = split(UserName, \"@\")[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects PUT or POST of suspicious file\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where HttpRequestMethod in~ (\"POST\", \"PUT\") \n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| where File matches regex @\"([a-zA-Z0-9-_]+\\.)([a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+)\"\n| extend FileCustomEntity = File, UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert leverages Defender for IoT to detect unauthorized firmware updates that may indicate malicious activity on the network such as a cyber threat that attempts to manipulate PLC firmware to compromise PLC function.\n Topic: IoTOTThreatMonitoringwithDefenderforIoT"}, {"role": "assistant", "content": "SecurityAlert\n| where ProviderName == \"IoTSecurity\"\n| where AlertName has_any (\"Beckhoff Software Changed\", \"Firmware Version Changed\", \"Firmware Change\", \"Firmware Changed\", \"Firmware Update\")\n| extend ExtendedProperties = parse_json(ExtendedProperties)\n| where tostring(ExtendedProperties.isNew) == \"True\"\n| extend DeviceId = tostring(ExtendedProperties.DeviceId), \n         SourceDeviceAddress = tostring(ExtendedProperties.SourceDeviceAddress), \n         DestDeviceAddress = tostring(ExtendedProperties.DestinationDeviceAddress), \n         RemediationSteps = tostring(parse_json(RemediationSteps)[0]), \n         Protocol = tostring(ExtendedProperties.Protocol), \n         AlertManagementUri = tostring(ExtendedProperties.AlertManagementUri)\n| project\n  TimeGenerated,\n  DeviceId,\n  ProductName,\n  ProductComponentName,\n  AlertSeverity,\n  AlertName,\n  Description,\n  Protocol,\n  SourceDeviceAddress,\n  DestDeviceAddress,\n  RemediationSteps,\n  Tactics,\n  Entities,\n  VendorOriginalId,\n  AlertLink,\n  AlertManagementUri,\n  Techniques\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects a Conditional Access Policy being modified by a user who has not modified a policy in the last 14 days.\n  A threat actor may try to modify policies to weaken the security controls in place.\n  Investigate any change to ensure they are approved.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-infrastructure#conditional-access\n Topic: Detections"}, {"role": "assistant", "content": "let known_users = (AuditLogs\n  | where TimeGenerated between(ago(14d)..ago(1d))\n  | where OperationName has \"conditional access policy\"\n  | where Result =~ \"success\"\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | summarize by InitiatingUserPrincipalName);\n  AuditLogs\n  | where TimeGenerated > ago(1d)\n  | where OperationName has \"conditional access policy\"\n  | where Result =~ \"success\"\n  | extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n  | extend InitiatingAppId = tostring(InitiatedBy.app.appId)\n  | extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n  | extend CAPolicyName = tostring(TargetResources[0].displayName)\n  | where InitiatingUserPrincipalName !in (known_users)\n  | extend NewPolicyValues = TargetResources[0].modifiedProperties[0].newValue\n  | extend OldPolicyValues = TargetResources[0].modifiedProperties[0].oldValue\n  | extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n  | project-reorder TimeGenerated, OperationName, CAPolicyName, InitiatingAppId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIPAddress, NewPolicyValues, OldPolicyValues\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match across various data feeds for IP IOCs related to the Log4j vulnerability exploit aka Log4Shell described in CVE-2021-44228.\n References: https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-44228\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "let IPList = externaldata(IPAddress:string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Log4j_IOC_List.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\n//Network logs\nlet CSlogSourceIP = CommonSecurityLog | summarize by IPAddress = SourceIP, Type;\nlet CSlogDestIP = CommonSecurityLog | summarize by IPAddress = DestinationIP, Type;\nlet CSlogMsgIP = CommonSecurityLog | extend MessageIP = extract(IPRegex, 0, Message) | summarize by IPAddress = MessageIP, Type;\nlet DnsIP = DnsEvents | summarize by IPAddress = IPAddresses, Type;\n// If you have enabled the _Im_Dns and/or imNetworkSession normalization in your workspace, you can uncomment one or both below.  Reference - https://docs.microsoft.com/azure/sentinel/normalization\n//let imDnsIP = _Im_Dns (response_has_any_prefix=IPList) | summarize by IPAddress = ResponseName, Type;\n//let imNetSessIP = imNetworkSession (dstipaddr_has_any_prefix=IPList) | summarize by IPAddress = DstIpAddr, Type;\n//Cloud service logs\nlet officeIP = OfficeActivity | summarize by IPAddress = ClientIP, Type;\nlet signinIP = SigninLogs | summarize by IPAddress, Type;\nlet nonintSigninIP = AADNonInteractiveUserSignInLogs | summarize by IPAddress, Type;\nlet azureActIP = AzureActivity | summarize by IPAddress = CallerIpAddress, Type;\nlet awsCtIP = AWSCloudTrail | summarize by IPAddress = SourceIpAddress, Type;\n//Device logs\nlet vmConnSourceIP = VMConnection | summarize by IPAddress = SourceIp, Type;\nlet vmConnDestIP = VMConnection | summarize by IPAddress = DestinationIp, Type;\nlet iisLogIP = W3CIISLog | summarize by IPAddress = cIP, Type;\nlet devNetIP = DeviceNetworkEvents | summarize by IPAddress = RemoteIP, Type;\n//need to parse to get IP\nlet azureDiagIP = AzureDiagnostics | where ResourceType == \"AZUREFIREWALLS\" | where Category in (\"AzureFirewallApplicationRule\", \"AzureFirewallNetworkRule\")\n| where msg_s has_any (IPList) | parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action | summarize by IPAddress = DestinationHost, Type;\nlet sysEvtIP = Event | where Source == \"Microsoft-Windows-Sysmon\" | where EventID == 3 | where EventData has_any (IPList) | extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = tostring(EventDetail.[9].[\"#text\"]), DestinationIP = tostring(EventDetail.[14].[\"#text\"])\n| where SourceIP in (IPList) or DestinationIP in (IPList) | extend IPAddress = iff(SourceIP in (IPList), SourceIP, DestinationIP) | summarize by IPAddress, Type;\n// If you have enabled the _Im_DNS and/or imNetworkSession normalization in your workdspace, you can uncomment below and include. Reference - https://docs.microsoft.com/azure/sentinel/normalization\n//let ipsort = union isfuzzy=true CSlogDestIP, CSlogMsgIP, CSlogSourceIP, DnsIP, officeIP, signinIP, nonintSigninIP, azureActIP, awsCtIP, vmConnDestIP, vmConnSourceIP, azureDiagIP, sysEvtIP, imDnsIP, imNetSessIP\n// If you uncomment above, then comment out the line below\nlet ipsort = union isfuzzy=true CSlogDestIP, CSlogMsgIP, CSlogSourceIP, DnsIP, officeIP, signinIP, nonintSigninIP, azureActIP, awsCtIP, vmConnDestIP, vmConnSourceIP, azureDiagIP, sysEvtIP\n| summarize by IPAddress\n| where isnotempty(IPAddress) | where not(ipv4_is_private(IPAddress)) and IPAddress !in ('0.0.0.0','127.0.0.1');\nlet ipMatch = ipsort | where IPAddress in (IPList);\n(union isfuzzy=true\n(CommonSecurityLog\n| where SourceIP in (ipMatch) or DestinationIP in (ipMatch) or Message has_any (ipMatch)\n| project TimeGenerated, SourceIP, DestinationIP, Message, SourceUserID, RequestURL, Type\n| extend MessageIP = extract(IPRegex, 0, Message)\n| extend IPMatch = case(SourceIP in (ipMatch), \"SourceIP\", DestinationIP in (ipMatch), \"DestinationIP\", MessageIP in (ipMatch), \"Message\", \"No Match\")\n| extend timestamp = TimeGenerated, IPEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, IPMatch == \"Message\", MessageIP, \"No Match\")\n),\n(OfficeActivity\n| where  ClientIP in (ipMatch)\n| project TimeGenerated, UserAgent, Operation, RecordType, UserId, ClientIP, Type\n| extend SourceIPAddress = ClientIP, Account = UserId\n| extend timestamp = TimeGenerated , IPEntity = SourceIPAddress , AccountEntity = Account\n),\n(DnsEvents\n| where  IPAddresses has_any (ipMatch)\n| project TimeGenerated, Computer, IPAddresses, Name, ClientIP, Type\n| extend DestinationIPAddress = IPAddresses,  Host = Computer\n| extend timestamp = TimeGenerated, IPEntity = DestinationIPAddress, HostEntity = Host\n),\n(VMConnection\n| where SourceIp in (ipMatch) or DestinationIp in (ipMatch)\n| project TimeGenerated, Computer, SourceIp, DestinationIp, Type\n| extend IPMatch = case( SourceIp in (ipMatch), \"SourceIP\", DestinationIp in (ipMatch), \"DestinationIP\", \"None\")\n| extend timestamp = TimeGenerated , IPEntity = case(IPMatch == \"SourceIP\", SourceIp, IPMatch == \"DestinationIP\", DestinationIp, \"None\"), Host = Computer\n),\n(Event\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n| where EventID == 3\n| where EventData has_any (ipMatch)\n| project TimeGenerated, EventData, UserName, Computer, Type\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = tostring(EventDetail.[9].[\"#text\"]), DestinationIP = tostring(EventDetail.[14].[\"#text\"])\n| where SourceIP in (ipMatch) or DestinationIP in (ipMatch)\n| extend IPMatch = case( SourceIP in (ipMatch), \"SourceIP\", DestinationIP in (ipMatch), \"DestinationIP\", \"None\")\n| extend timestamp = TimeGenerated, AccountEntity = UserName, HostEntity = Computer , IPEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n),\n(SigninLogs\n| where IPAddress in (ipMatch)\n| project TimeGenerated, UserPrincipalName, IPAddress, Type\n| extend timestamp = TimeGenerated, AccountEntity = UserPrincipalName, IPEntity = IPAddress\n),\n(AADNonInteractiveUserSignInLogs\n| where IPAddress in (ipMatch)\n| project TimeGenerated, UserPrincipalName, IPAddress, Type\n| extend timestamp = TimeGenerated, AccountEntity = UserPrincipalName, IPEntity = IPAddress\n),\n(W3CIISLog\n| where cIP in (ipMatch)\n| project TimeGenerated, Computer, cIP, csUserName, Type\n| extend timestamp = TimeGenerated, IPEntity = cIP, HostEntity = Computer, AccountEntity = csUserName\n),\n(AzureActivity\n| where CallerIpAddress in (ipMatch)\n| project TimeGenerated, CallerIpAddress, Caller, Type\n| extend timestamp = TimeGenerated, IPEntity = CallerIpAddress, AccountEntity = Caller\n),\n(\nAWSCloudTrail\n| where SourceIpAddress in (ipMatch)\n| project TimeGenerated, SourceIpAddress, UserIdentityUserName, Type\n| extend timestamp = TimeGenerated, IPEntity = SourceIpAddress, AccountEntity = UserIdentityUserName\n),\n(\nDeviceNetworkEvents\n| where RemoteIP in (ipMatch)\n| where ActionType =~ \"InboundConnectionAccepted\"\n| project TimeGenerated, RemoteIP, DeviceName, Type\n| extend timestamp = TimeGenerated, IPEntity = RemoteIP, HostEntity = DeviceName\n),\n(\nAzureDiagnostics\n| where ResourceType =~ \"AZUREFIREWALLS\"\n| where Category in (\"AzureFirewallApplicationRule\", \"AzureFirewallNetworkRule\")\n| where msg_s has_any (ipMatch)\n| project TimeGenerated, msg_s, Type\n| parse msg_s with Protocol 'request from ' SourceIP ':' SourcePort 'to ' DestinationIP ':' DestinationPort '. Action:' Action\n| where DestinationIP has_any (ipMatch)\n| extend timestamp = TimeGenerated, IPEntity = DestinationIP\n)\n// If you have enabled the _Im_Dns and/or imNetworkSession normalization in your workdspace, you can uncomment below and include. Reference - https://docs.microsoft.com/azure/sentinel/normalization\n//,\n//(_Im_Dns (response_has_any_prefix=IPList)\n//| project TimeGenerated, ResponseName, SrcIpAddr, Type\n//| extend DestinationIPAddress = ResponseName,  Host = SrcIpAddr\n//| extend timestamp = TimeGenerated, IPEntity = DestinationIPAddress, HostEntity = Host\n//),\n//(imNetworkSession (dstipaddr_has_any_prefix=IPList)\n//| project TimeGenerated, DstIpAddr, SrcIpAddr, Type\n//| extend timestamp = TimeGenerated, IPEntity = DstIpAddr, HostEntity = SrcIpAddr\n//)\n)\n| extend Name = tostring(split(AccountEntity, '@', 0)[0]), UPNSuffix = tostring(split(AccountEntity, '@', 1)[0])\n| extend HostName = tostring(split(HostEntity, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(HostEntity, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for emails with high score of suspect filter classifier value.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let scoreThreshold = 80;\nProofpointPOD\n| where EventType == 'message'\n| where NetworkDirection == 'inbound'\n| where todynamic(FilterModulesSpamScoresClassifiers).suspect > scoreThreshold"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects admin user login from new location (IP address).\n Topic: SentinelOne"}, {"role": "assistant", "content": "let lback_period = 14d;\nlet lback_time = 1h;\nSentinelOne\n| where TimeGenerated between(ago(lback_period)..ago(lback_time))\n| where ActivityType == 27\n| where DataRole =~ 'Admin'\n| extend SrcIpAddr = extract(@'Address\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, EventOriginalMessage)\n| where isnotempty(SrcIpAddr)\n| summarize ip_lst = makeset(SrcIpAddr) by SrcUserName\n| join (SentinelOne\n        | where ActivityType == 27\n        | where DataRole =~ 'Admin'\n        | extend SrcIpAddr = extract(@'Address\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, EventOriginalMessage)\n        | where isnotempty(SrcIpAddr)) on SrcUserName\n| where ip_lst !has SrcIpAddr\n| extend AccountCustomEntity = SrcUserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows user permissions(groups) changes.\n Topic: Box"}, {"role": "assistant", "content": "BoxEvents\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'GROUP_ADD_USER'\n| project TimeGenerated, SourceName, SourceLogin, AdditionalDetailsGroupName\n| extend AccountCustomEntity = SourceLogin\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rare scanned files.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where TimeGenerated > ago(24h)\n| where EventMessage =~ 'Scan Started'\n| summarize count() by SrcFileName\n| top 20 by count_ asc\n| extend FileCustomEntity = SrcFileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects connections to non-corporate DNS servers.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "let corp_dns = dynamic(['127.0.0.2']);\nUbiquitiAuditEvent\n| where DstPortNumber == '53'\n| where DstIpAddr !in (corp_dns)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query shows top users by uploads over time.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where TimeGenerated > ago(24h)\n| where Action =~ 'file_uploaded'\n| summarize filelist = makeset(EntityFileName) by SrcUserName\n| project filelist, fcount = array_length(filelist), SrcUserName\n| top 10 by fcount\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects execution of files with one character in the name (e.g, a.exe, 7.ps1, g.vbs etc.). \nNormally files that are executed have more characters in the name and this can indicate a malicious file.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "Event\n| where EventLog =~ \"Microsoft-Windows-Sysmon/Operational\" and EventID==1\n| parse EventData with * 'CommandLine\">' CommandLine \"<\" *\n| where CommandLine matches regex @'\\\\[a-zA-Z0-9]\\.[a-zA-Z0-9]{2,5}[\"]{1}'\n| parse EventData with * 'ProcessGuid\">' ProcessGuid \"<\" * 'Image\">' Image \"<\" * 'Description\">' Description \"<\" * 'OriginalFileName\">' OriginalFileName \"<\" * 'CommandLine\">' CommandLine \"<\" * 'CurrentDirectory\">' CurrentDirectory \"<\" * 'User\">' User \"<\" * 'LogonGuid\">' LogonGuid \"<\" * 'IntegrityLevel\">' IntegrityLevel \"<\" * 'Hashes\">' Hashes \"<\" * 'ParentProcessGuid\">' ParentProcessGuid \"<\" * 'ParentImage\">' ParentImage \"<\" * 'ParentCommandLine\">' ParentCommandLine \"<\" * 'ParentUser\">' ParentUser \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, User, ParentImage, ParentProcessGuid, ParentCommandLine, ParentUser, Image, ProcessGuid, CommandLine, Description, OriginalFileName, CurrentDirectory, Hashes\n| extend NTDomain = tostring(split(User, '\\\\', 0)[0]), UserName = tostring(split(User, '\\\\', 1)[0])\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = UserName\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n| extend File_0_Name = Image\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query checks GitLab Audit Logs to see if a user authenticated without MFA. Ot might mean that MFA was disabled for the GitLab server or that an external authentication provider was bypassed. This rule focuses on admin privileges but the parameter can be adapted to also include all users.\n Topic: GitLab"}, {"role": "assistant", "content": "let isAdmin = true;\nGitLabAudit\n| where AuthenticationType == \"standard\" and ((isAdmin and TargetDetails contains \"Administrator\") or (isAdmin==false));\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New code_repository with severity FYI found\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL | where severity_s == \"Informational\" | where type_s == \"Code Repository\" | where status_s != \"Closed\" or status_s != \"Resolved\" | where remarks_s == \"New code_repository with severity FYI found\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows incomplete application protocol\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "PaloAltoCDLEvent\n| where TimeGenerated > ago(24h)\n| where NetworkApplicationProtocol has_any (\"incomplete\", \"Not-Applicable\", \"insufficient\")\n| extend UrlCustomEntity = Url, IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for Microsoft Defender AV detections related to Hive Ransomware.\nIn Microsoft Sentinel the SecurityAlerts table includes only the Device Name of the affected device, this query joins the DeviceInfo table to clearly connect other information such as Device group, ip, logged on users etc. This would allow the Microsoft Sentinel analyst to have more context related to the alert, if available.\n Topic: Detections"}, {"role": "assistant", "content": "let Hive_threats = dynamic([\"Ransom:Win64/Hive\", \"Ransom:Win32/Hive\"]);\nDeviceInfo\n| extend DeviceName = tolower(DeviceName)\n| join kind=inner ( SecurityAlert\n| where ProviderName == \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| extend ThreatFamilyName = tostring(parse_json(ExtendedProperties).ThreatFamilyName)\n| where ThreatName in~ (Hive_threats) or ThreatFamilyName in~ (Hive_threats)\n| extend CompromisedEntity = tolower(CompromisedEntity)\n) on $left.DeviceName == $right.CompromisedEntity\n| summarize by bin(TimeGenerated, 1d), DisplayName, ThreatName, ThreatFamilyName, PublicIP, AlertSeverity, Description, tostring(LoggedOnUsers), DeviceId, TenantId , CompromisedEntity, tostring(LoggedOnUsers), ProductName, Entities\n| extend HostName = tostring(split(CompromisedEntity, \".\")[0]), DomainIndex = toint(indexof(CompromisedEntity, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(CompromisedEntity, DomainIndex + 1), CompromisedEntity)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies CRUD operations on Identity Provider settings within a sub account. Topic: SAP BTP"}, {"role": "assistant", "content": "SAPBTPAuditLog_CL\n| where isnotnull(Message.object)\n| extend Object = Message.object, Attributes = Message.attributes\n| where Object.type == \"IdentityProvider\"\n| extend CrudType = tostring(parse_json(tostring(Object.id)).crudType)\n| mv-expand Attributes\n| extend MessageText = case(\n                           CrudType == \"CREATE\",\n                           \"An identity provider was created\",\n                           CrudType == \"UPDATE\",\n                           \"An identity provider was updated\",\n                           CrudType == \"DELETE\",\n                           \"An identity provider was deleted\",\n                           \"Unclassified CRUD operation encountered\"\n                       )\n| extend NewAttributes = parse_json(replace_regex(tostring(Attributes.new), \"\\\\r\", \"\"))\n| extend OldAttributes = parse_json(replace_regex(tostring(Attributes.old), \"\\\\r\", \"\"))\n| extend IdentityProviderName = case(\n                                    CrudType == \"CREATE\" or CrudType == \"UPDATE\",\n                                    NewAttributes.name,\n                                    CrudType == \"DELETE\",\n                                    OldAttributes.name,\n                                    \"Unknown\"\n                                )\n| project\n    UpdatedOn,\n    UserName,\n    MessageText,\n    IdentityProviderName,\n    Tenant,\n    SpaceId,\n    CloudApp = \"SAP BTP\"\n| extend AccountName = split(UserName, \"@\")[0], UPNSuffix = split(UserName, \"@\")[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query leverages GitLab Audit Logs. A repository in GitLab changed visibility from Private or Internal to Public which could indicate compromise, error or misconfiguration leading to exposing the repository to the public.\n Topic: GitLab"}, {"role": "assistant", "content": "GitLabAudit\n| where SourceVisibility != \"Public\" and ChangeType == \"visibility\" and TargetVisibility == \"Public\"\n| project TimeGenerated, EventTime, IPAddress, AuthorName, ChangeType, TargetType, SourceVisibility,  TargetVisibility, EntityName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The attacker sends a spearphishing email to a user. The email contains a link which points to a website that eventually presents the user a download of an MS Office document. This document contains a malicious macro. The macro triggers one of the ASR rules. \nThis detection looks for Office ASR violations triggered by an Office document opened from a browser.\nNote: be aware that you need to have the proper ASR rules enabled for this detection to work. \n Topic: FalconFriday"}, {"role": "assistant", "content": "// Add your own browsers here as well. \nlet browsers = dynamic([\"iexplore.exe\", \"chrome.exe\", \"firefox.exe\", \"msedge.exe\"]);\nDeviceEvents\n| where ActionType contains \"Office\"\n| where InitiatingProcessFileName in~ (browsers) or InitiatingProcessParentFileName in~ (browsers)\n// Ignore docx, xlsx and pptx files. These don't contain macros.\n| where not(FileName endswith \".docx\" or FileName endswith \".xlsx\" or FileName endswith \".pptx\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies what ports may have been opened for a given Azure Resource over the last 7 days\n Topic: Azure Activity"}, {"role": "assistant", "content": "let lookback = 7d;\nAzureActivity\n| where TimeGenerated >= ago(lookback)\n| where OperationNameValue has_any (\"ipfilterrules\", \"securityRules\", \"publicIPAddresses\", \"firewallrules\") and OperationNameValue endswith \"write\"\n// Choosing Accepted here because it has the Rule Attributes included\n| where ActivityStatusValue == \"Accepted\" \n// If there is publicIP info, include it\n| extend parsed_properties = parse_json(tostring(parse_json(Properties).responseBody)).properties\n| extend publicIPAddressVersion = case(Properties has_cs 'publicIPAddressVersion',tostring(parsed_properties.publicIPAddressVersion),\"\")\n| extend publicIPAllocationMethod = case(Properties has_cs 'publicIPAllocationMethod',tostring(parsed_properties.publicIPAllocationMethod),\"\")\n// Include rule attributes for context\n| extend access = case(Properties has_cs 'access',tostring(parsed_properties.access),\"\")\n| extend description = case(Properties has_cs 'description',tostring(parsed_properties.description),\"\")\n| extend destinationPortRange = case(Properties has_cs 'destinationPortRange',tostring(parsed_properties.destinationPortRange),\"\")\n| extend direction = case(Properties has_cs 'direction',tostring(parsed_properties.direction),\"\")\n| extend protocol = case(Properties has_cs 'protocol',tostring(parsed_properties.protocol),\"\")\n| extend sourcePortRange = case(Properties has_cs 'sourcePortRange',tostring(parsed_properties.sourcePortRange),\"\")\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ResourceIds = make_set(_ResourceId,100) by Caller, CallerIpAddress, Resource, ResourceGroup, \nActivityStatusValue, ActivitySubstatus, SubscriptionId, access, description, destinationPortRange, direction, protocol, sourcePortRange, publicIPAddressVersion, publicIPAllocationMethod\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = CallerIpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows deleted user accounts.\n Topic: Box"}, {"role": "assistant", "content": "BoxEvents\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'DELETE_USER'\n| project TimeGenerated, SourceName, SourceLogin\n| extend AccountCustomEntity = SourceLogin\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Check for Squid proxy events associated with common ToR proxies. This query presumes the default squid log format is being used.\nhttp://www.squid-cache.org/Doc/config/access_log/\n Topic: Syslog"}, {"role": "assistant", "content": "let DomainList = dynamic([\"tor2web.org\", \"tor2web.com\", \"torlink.co\", \"onion.to\", \"onion.ink\", \"onion.cab\", \"onion.nu\", \"onion.link\",\n\"onion.it\", \"onion.city\", \"onion.direct\", \"onion.top\", \"onion.casa\", \"onion.plus\", \"onion.rip\", \"onion.dog\", \"tor2web.fi\",\n\"tor2web.blutmagie.de\", \"onion.sh\", \"onion.lu\", \"onion.pet\", \"t2w.pw\", \"tor2web.ae.org\", \"tor2web.io\", \"tor2web.xyz\", \"onion.lt\",\n\"s1.tor-gateways.de\", \"s2.tor-gateways.de\", \"s3.tor-gateways.de\", \"s4.tor-gateways.de\", \"s5.tor-gateways.de\", \"hiddenservice.net\"]);\nSyslog\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage),\n        SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage),\n        Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage),\n        HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n        User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n        RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n        Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n        Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n        contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where HTTP_Status_Code == \"200\"\n| where Domain contains \".\"\n| where Domain has_any (DomainList)\n| extend AccountName = tostring(split(User, \"@\")[0]), AccountUPNSuffix = tostring(split(User, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Use Microsofts up-to-date Threat Intelligence solution from the Content Hub to replace the deprecated query with outdated IoCs. Install it from: https://learn.microsoft.com/azure/sentinel/sentinel-solutions-deploy\n Topic: Zinc Open Source"}, {"role": "assistant", "content": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/ZincOctober2022IOCs.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet domains = (iocs | where Type =~ \"domainname\"| project IoC);\nlet IPList = (iocs | where Type =~ \"ip\"| project IoC);\nlet sha256Hashes = (iocs | where Type =~ \"sha256\" | project IoC);\nlet useragents = (iocs | where Type =~ \"useragent\" | project IoC);\n(union isfuzzy=true\n(CommonSecurityLog\n| where DestinationHostName has_any (domains) or RequestURL has_any (domains) or Message has_any (domains) or  SourceIP has_any (IPList) or DestinationIP  has_any (IPList)\n| parse Message with * '(' DNSName ')' *\n| project TimeGenerated, Message, SourceUserID, RequestURL, DestinationHostName, Type, SourceIP, DestinationIP, DNSName\n| extend timestamp = TimeGenerated, AccountEntity = SourceUserID, UrlEntity = RequestURL , IPEntity = DestinationIP, DNSCustomEntity = DNSName\n),\n(DnsEvents\n| where Name in~ (domains) or IPAddresses has_any (IPList)\n| project TimeGenerated, Computer, IPAddresses, Name, ClientIP, Type\n| extend DNSName = Name, Host = Computer\n| extend timestamp = TimeGenerated, HostEntity = Host, DNSCustomEntity = DNSName, IPEntity = IPAddresses\n),\n(VMConnection\n| where  RemoteDnsCanonicalNames has_any (domains)  or  SourceIp has_any (IPList) or DestinationIp has_any (IPList)\n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| project TimeGenerated, Computer, Direction, RemoteDnsCanonicalNames, ProcessName, SourceIp, DestinationIp, DestinationPort, DNSName,BytesSent, BytesReceived, RemoteCountry, Type\n| extend timestamp = TimeGenerated, IPEntity = DestinationIp, HostEntity = Computer, ProcessEntity = ProcessName, DNSCustomEntity = DNSName\n),\n(Event\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n| where EventID == 3\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = tostring(EventDetail.[9].[\"#text\"]), DestinationIP = tostring(EventDetail.[14].[\"#text\"]), Image = EventDetail.[4].[\"#text\"]\n| where  SourceIP has_any (IPList) or DestinationIP has_any (IPList)\n| project TimeGenerated, SourceIP, DestinationIP, Image, UserName, Computer, EventDetail, Type\n| extend timestamp = TimeGenerated, AccountEntity = UserName, ProcessEntity = tostring(split(Image, '\\\\', -1)[-1]), HostEntity = Computer , IPEntity = DestinationIP\n),  \n(DeviceNetworkEvents\n| where RemoteUrl has_any (domains) or RemoteIP has_any (IPList) or InitiatingProcessSHA256 in (sha256Hashes) \n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, LocalIP, Type\n| extend timestamp = TimeGenerated, IPEntity = RemoteIP, HostEntity = DeviceName, UrlEntity =RemoteUrl\n),\n(AzureDiagnostics\n| where ResourceType =~ \"AZUREFIREWALLS\"\n| where Category =~ \"AzureFirewallDnsProxy\"\n| project TimeGenerated,Resource, msg_s, Type\n| parse msg_s with \"DNS Request: \" ClientIP \":\" ClientPort \" - \" QueryID \" \" Request_Type \" \" Request_Class \" \" Request_Name \". \" Request_Protocol \" \" Request_Size \" \" EDNSO_DO \" \" EDNS0_Buffersize \" \" Responce_Code \" \" Responce_Flags \" \" Responce_Size \" \" Response_Duration\n| where Request_Name has_any (domains) or ClientIP has_any (IPList)\n| extend timestamp = TimeGenerated, DNSName = Request_Name, IPEntity = ClientIP\n),\n(AzureDiagnostics\n| where ResourceType =~ \"AZUREFIREWALLS\"\n| where Category =~ \"AzureFirewallApplicationRule\"\n| project TimeGenerated,Resource, msg_s\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where DestinationHost has_any (domains) or SourceHost has_any (IPList)\n| extend timestamp = TimeGenerated, DNSName = DestinationHost, IPEntity = SourceHost\n),\n(Event\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| parse EventDetail with * 'SHA256=' SHA256 '\",' *\n| extend Image = EventDetail.[4].[\"#text\"],  CommandLine = EventDetail.[10].[\"#text\"]\n| where SHA256 has_any (sha256Hashes)\n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, SHA256, CommandLine, Image\n| extend Type = strcat(Type, \": \", Source)\n| extend timestamp = TimeGenerated, HostEntity = Computer , AccountEntity = UserName, ProcessEntity = tostring(split(Image, '\\\\', -1)[-1]), AlgorithmEntity = \"SHA256\", FileHashEntity = SHA256\n),  \n(DeviceProcessEvents\n| where  InitiatingProcessSHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, FolderPath, Type\n| extend timestamp = TimeGenerated, HostEntity = DeviceName , AccountEntity = InitiatingProcessAccountName, ProcessEntity = InitiatingProcessFileName, AlgorithmEntity = \"SHA256\", FileHashEntity = InitiatingProcessSHA256\n),\n(DeviceFileEvents\n| where  InitiatingProcessSHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RequestAccountName, RequestSourceIP, InitiatingProcessSHA256, FolderPath, Type\n| extend timestamp = TimeGenerated, HostEntity = DeviceName , AccountEntity = RequestAccountName, ProcessEntity = InitiatingProcessFileName, AlgorithmEntity = \"SHA256\", FileHashEntity = InitiatingProcessSHA256\n),\n(DeviceEvents\n| where  InitiatingProcessSHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, FolderPath, Type\n| extend CommandLine = InitiatingProcessCommandLine\n| extend timestamp = TimeGenerated, HostEntity = DeviceName , AccountEntity = InitiatingProcessAccountName, ProcessEntity = InitiatingProcessFileName, AlgorithmEntity = \"SHA256\", FileHashEntity = InitiatingProcessSHA256\n),\n(OfficeActivity\n| where ClientIP has_any (IPList) or UserAgent has_any (useragents)\n| project TimeGenerated, UserAgent, Operation, RecordType, UserId, ClientIP, Type\n| extend timestamp = TimeGenerated, IPEntity = ClientIP, AccountEntity = UserId\n)\n)\n| extend HostName = tostring(split(HostEntity, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(HostEntity, '.'), 1, -1), '.'))\n| extend Name = tostring(split(AccountEntity, '@', 0)[0]), UPNSuffix = tostring(split(AccountEntity, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query will detect instances where a newly invited external user is granted an administrative role.\nBy default this query will alert on any granted administrative role, however this can be modified using the roles variable if false positives occur in your environment. The maximum delta between invite and escalation to admin is 60 minues, this can be configured using the deltaBetweenInviteEscalation variable.\n Topic: Cloud Identity Threat Protection Essentials"}, {"role": "assistant", "content": "// Administrative roles to look for, default is all admin roles\nlet roles = dynamic([\"Administrator\", \"Admin\"]);\n// The maximum distances between and invite and acceptance\nlet maxTimeBetweenInviteAccept = 30min;\n// The delta (minutes) between the invite being sent and the account being escalated\nlet deltaBetweenInviteEscalation = 60;\n// Collect external user invitations\nlet invite = AuditLogs\n| where Category =~ \"UserManagement\"\n| where OperationName =~ \"Invite external user\"\n| extend Target = tostring(TargetResources[0].[\"userPrincipalName\"])\n| extend InviteInitiator = tostring(InitiatedBy.[\"user\"].[\"userPrincipalName\"])\n| where isnotempty(InviteInitiator);\n// Collect redeem events\nlet redeem = AuditLogs\n| where Category =~ \"UserManagement\"\n| where OperationName =~ \"Redeem external user invite\"\n| where Result =~ \"success\"\n| extend Target = tostring(TargetResources[0].[\"displayName\"]) | extend Target = tostring(extract(@\"UPN\\:\\s(.+)\\,\\sEmail\",1,Target))\n| where isnotempty(Target);\n// Union the inivtation and redeem data then run the sequence_detect kusto plugin\ninvite\n| union redeem\n| order by TimeGenerated\n| project TimeGenerated, Target, InviteInitiator, OperationName, TenantId\n| evaluate sequence_detect(TimeGenerated, maxTimeBetweenInviteAccept, maxTimeBetweenInviteAccept, invite=(OperationName has \"Invite external user\"), redeem=(OperationName has \"Redeem external user invite\"), Target)\n| join kind=innerunique (\nAuditLogs\n| where Category =~ \"RoleManagement\"\n| where AADOperationType in~ (\"Assign\", \"AssignEligibleRole\")\n| where ActivityDisplayName has_any (\"Add eligible member to role\", \"Add member to role\")\n| mv-expand TargetResources\n// Limit to external accounts\n| where TargetResources.userPrincipalName has \"EXT\"\n| mv-expand TargetResources.modifiedProperties\n| extend displayName_ = tostring(TargetResources_modifiedProperties.displayName)\n| where displayName_ =~ \"Role.DisplayName\"\n| extend RoleName = tostring(parse_json(tostring(TargetResources_modifiedProperties.newValue)))\n// Perform check for admin roles\n| where RoleName has_any(roles)\n| extend InitiatingApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend Initiator = iif(isnotempty(InitiatingApp), InitiatingApp, tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName))\n| where Initiator != \"MS-PIM\"\n| extend Target = tostring(TargetResources.userPrincipalName)\n| summarize by TimeGenerated, OperationName,  RoleName, Target, Initiator, Result\n) on Target\n// Calculate delta between the invite and the account escalation\n| extend delta = datetime_diff(\"minute\", TimeGenerated, invite_TimeGenerated)\n| where delta <= deltaBetweenInviteEscalation\n| project InvitationTime=invite_TimeGenerated, RedeemTime=redeem_TimeGenerated, GrantTime=TimeGenerated, ExternalUser=Target, RoleGranted=RoleName, AdminInitiator=Initiator, MinsBetweenInviteAndEscalation=delta\n| extend ExternalUserName = tostring(split(ExternalUser, '@', 0)[0]), ExternalUserUPNSuffix = tostring(split(ExternalUser, '@', 1)[0])\n| extend AdminInitiatorName = tostring(split(AdminInitiator, '@', 0)[0]), AdminInitiatorUPNSuffix = tostring(split(AdminInitiator, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Cookies: SameSite Flag Not Used\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"informational\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"Cookies: SameSite Flag Not Used\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies Dataverse export activity triggered by terminated, or employees about to leave the organization. This analytics rule uses the TerminatedEmployees watchlist template. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// Set a time period before employee terminatation date to search for export events\nlet termination_watch_period = 7d;\nlet query_frequency = 1h;\nlet exportEvents = dynamic(['ExportToExcel', 'ExportPdfDocument', 'ExportWordDocument', 'ExecutePowerBISql']);\nMSBizAppsTerminatedEmployees\n| where (UserState =~ \"Terminated\") or (UserState =~ \"Notified\" and TerminationDate <= startofday(now()) + termination_watch_period)\n| join kind=inner (DataverseActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where Message in (exportEvents))\n    on $left.UserPrincipalName == $right.UserId\n| summarize\n    FirstEvent = min(TimeGenerated),\n    LastEvent = max(TimeGenerated),\n    Event = make_set(Message, 4)\n    by UserId, InstanceUrl, ClientIp, UserState\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    FirstEvent,\n    LastEvent,\n    UserId,\n    ClientIp,\n    UserState,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows requests to URI categories which heavily are used in Initial Access stage by threat actiors and may contain malicious content.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "Cisco_Umbrella\n| where TimeGenerated > ago(24h)\n| where EventType == 'dnslogs'\n| where UrlCategory contains 'Dating' or UrlCategory contains 'Digital Postcards' or UrlCategory contains 'Freeware and Shareware' or UrlCategory contains 'Gambling' or UrlCategory contains  'Hacking' or UrlCategory contains 'Hunting' or UrlCategory contains 'Mobile Phones' or UrlCategory contains 'Software Updates' or UrlCategory contains 'URL Shortener' or UrlCategory contains  'Web Hosting'\n| where DvcAction == 'Allowed'\n| summarize TotalEvents = count() by DnsQueryName, SrcIpAddr\n| sort by TotalEvents\n| summarize listOfIps = make_set(SrcIpAddr) by DnsQueryName\n| extend URLCustomEntity = DnsQueryName"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when update failed event occurs on agent.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "McAfeeEPOEvent\n| where EventId in ('2402', '1119', '1123')\n| extend IPCustomEntity = DvcIpAddr, HostCustomEntity = DvcHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies abnormal deny rate for specific source IP to destination IP based on the normal average and standard deviation learned during a configured period. This can indicate potential exfiltration, initial access or C2, where attacker tries to exploit the same vulnerability on machines in the organization, but is being blocked by firewall rules.\n\nConfigurable Parameters:\n\n- Minimum of stds threshold - the number of stds to use in the threshold calculation. Default is set to 3.\n- Learning period time - learning period for threshold calculation in days. Default is set to 5.\n- Bin time - learning buckets time in hours. Default is set to 1 hour.\n- Minimum threshold - minimum threshold for alert. Default is set to 5.\n- Minimum bucket threshold - minimum learning buckets threshold for alert. Default is set to 5.\n Topic: Azure Firewall"}, {"role": "assistant", "content": "let LearningPeriod = 1d;\nlet RunTime = 1h;\nlet StartLearningPeriod = LearningPeriod + RunTime;\nlet EndRunTime = RunTime - 1h;\nlet BinTime = 1h;\nlet NumOfStdsThreshold = 3;\nlet MinThreshold = 5.0;\nlet MinLearningBuckets = 5;\nlet TrafficLogs = (union isfuzzy=true\n(AzureDiagnostics\n| where OperationName == \"AzureFirewallApplicationRuleLog\" or OperationName == \"AzureFirewallNetworkRuleLog\" \n| parse msg_s with * \"from \" SourceIp \":\" SourcePort:int \" to \" Fqdn \":\" DestinationPort:int \". \" * \"Action: \" Action \".\" *\n| where Action == \"Deny\"\n| where isnotempty(Fqdn) and isnotempty(SourceIp)),\n(AZFWNetworkRule\n| extend Fqdn = DestinationIp\n| where Action == \"Deny\"\n| where isnotempty(Fqdn) and isnotempty(SourceIp)),\n(AZFWFlowTrace\n| extend Fqdn = DestinationIp\n| where Action == \"Deny\"\n| where isnotempty(Fqdn) and isnotempty(SourceIp)),\n(AZFWIdpsSignature\n| extend Fqdn = DestinationIp\n| where Action == \"Deny\"\n| where isnotempty(Fqdn) and isnotempty(SourceIp)),\n(AZFWApplicationRule\n| where Action == \"Deny\"\n| where isnotempty(Fqdn) and isnotempty(SourceIp)));\nlet LearningSrcIpDenyRate = (TrafficLogs\n| where TimeGenerated between (ago(StartLearningPeriod) .. ago(RunTime))\n| summarize count() by SourceIp, bin(TimeGenerated, BinTime), Fqdn\n| summarize LearningTimeSrcIpDenyRateAvg = avg(count_), LearningTimeSrcIpDenyRateStd = stdev(count_), LearningTimeBuckets = count() by SourceIp, Fqdn\n| where LearningTimeBuckets > MinLearningBuckets);\nlet AlertTimeSrcIpDenyRate = (TrafficLogs\n| where TimeGenerated between (ago(RunTime) .. ago(EndRunTime))\n| summarize AlertTimeSrcIpDenyRateCount = count() by SourceIp);\nAlertTimeSrcIpDenyRate\n| join kind=leftouter (LearningSrcIpDenyRate) on SourceIp\n| extend LearningThreshold = max_of(LearningTimeSrcIpDenyRateAvg + NumOfStdsThreshold * LearningTimeSrcIpDenyRateStd, MinThreshold)\n| where AlertTimeSrcIpDenyRateCount > LearningThreshold\n| project-away SourceIp1, LearningTimeSrcIpDenyRateAvg, LearningTimeSrcIpDenyRateStd\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects commands in Url.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where EventSubType in (\"WB:7\", \"CnC:Block\", \"VAD\", \"700106\") \n| where UrlOriginal contains 'cat%20/etc/passwd' or UrlOriginal contains '/etc/passwd' or UrlOriginal contains 'ping -i' or UrlOriginal contains '/usr/bin/id(' or UrlOriginal contains '%2f%75%73%72%2f%62%69%6e%2f%69%64' or UrlOriginal contains 'phpinfo()' or UrlOriginal contains '%70%68%70%69%6e%66%6f%28%29' or UrlOriginal contains ';id' or UrlOriginal contains '%3b%69%64' or UrlOriginal contains '/bin/bash -c' or UrlOriginal contains '%2f%62%69%6e%2f%62%61%73%68%20%2d%63%27' or UrlOriginal contains '/bin/bash' or UrlOriginal contains '%2f%62%69%6e%2f%62%61%73%68' or UrlOriginal contains 'sleep(' or UrlOriginal contains '%73%6c%65%65%70%28' or UrlOriginal contains 'curl' or UrlOriginal contains '%63%75%72%6c' or UrlOriginal contains '&dir' or UrlOriginal contains '%26%64%69%72' or UrlOriginal contains '& dir' or UrlOriginal =~ '%26%20%64%69%72' or UrlOriginal contains '<script>' or UrlOriginal  contains '%3c%73%63%72%69%70%74%3e' or UrlOriginal contains 'eval(' or UrlOriginal contains '%65%76%61%6c%28' or UrlOriginal contains 'exec(' or UrlOriginal contains '%65%78%65%63%28' or UrlOriginal contains 'whoami' or UrlOriginal contains '%77%68%6f%61%6d%69' or UrlOriginal contains 'wget' or UrlOriginal contains 'python' or UrlOriginal contains 'gcc' or UrlOriginal contains 'uname' or UrlOriginal contains 'systeminfo' or UrlOriginal contains '%77%67%65%74' or UrlOriginal contains '%70%79%74%68%6f%6e' or UrlOriginal contains '%75%6e%61%6d%65' or UrlOriginal =~ '%73%79%73%74%65%6d%69%6e%66%6f' \n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies indications of a potential security breach or unauthorized access to the systems and data of the Identity Provider.\n Topic: Commvault Security IQ"}, {"role": "assistant", "content": "SecurityIncident\n| where Title has \"Cvlt Alert\" and Description == \"IDP Compromised\" and Status has \"New\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches requests from bots and crawlers.\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "NGINXHTTPServer\n| where HttpUserAgentOriginal matches regex @'bot|crawler|baiduspider|80legs|ia_archiver|voyager|curl|wget|yahoo!|slurp|mediapartners-google'\n| extend UrlCustomEntity = HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query utilizes built-in KQL anomaly detection algorithms to identify anomalous data transfers to public networks. It detects significant deviations from a baseline pattern, allowing the detection of sudden increases in data transferred to unknown public networks, which may indicate data exfiltration attempts. Investigating such anomalies is crucial.\nThe score indicates the degree to which the data transfer deviates from the baseline value. A higher score indicates a greater deviation. The querys output provides an aggregated summary view of the traffic observed in the flagged anomaly hour, including unique combinations of source IP addresses, destination IP addresses, and port bytes sent. It may be necessary to run queries for individual source IP addresses from the provided SourceIPlist to identify any suspicious activity that warrants further investigation\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let startTime = 14d;\nlet endTime = 1d;\nlet timeframe = 1h;\nlet scorethreshold = 5;\nlet bytessentperhourthreshold = 10;\n// calculate avg. eps(events per second)\nlet eps = materialize(_Im_WebSession(starttime=ago(1d))\n    | project TimeGenerated\n    | summarize AvgPerSec = count() / 3600 by bin(TimeGenerated, 1h)\n    | summarize round(avg(AvgPerSec))\n    );\nlet summarizationexist  = (\n    union isfuzzy=true \n        (\n        WebSession_Summarized_SrcIP_CL\n        | where EventTime_t > ago(1d) \n        | project v = int(2)\n        ),\n        (\n        print int(1) \n        | project v = print_0\n        )\n    | summarize maxv = max(v)\n    | extend sumexist = (maxv > 1)\n    );\nlet TimeSeriesData = union isfuzzy=true \n        (\n        (datatable(exists: int, sumexist: bool)[1, false]\n        | where toscalar(eps) > 1000\n        | join (summarizationexist) on sumexist)\n        | join (\n            _Im_WebSession(starttime=ago(2d), endtime=now())\n            | project DstIpAddr, SrcBytes, TimeGenerated, EventProduct\n            | where isnotempty(DstIpAddr)\n                and not(ipv4_is_private(DstIpAddr))\n                and isnotempty(SrcBytes)\n            | summarize SrcBytesSum=tolong(sum(SrcBytes)) by EventProduct, bin(TimeGenerated, 1h)\n            | extend EventTime = TimeGenerated, exists=int(1)\n            )\n            on exists\n        | project-away exists*, maxv, sum*\n        ),\n        (\n        (datatable(exists: int, sumexist: bool)[1, false]\n        | where toscalar(eps) between (501 .. 1000)\n        | join (summarizationexist) on sumexist)\n        | join (\n            _Im_WebSession(starttime=ago(3d), endtime=now())\n            | project DstIpAddr, SrcBytes, TimeGenerated, EventProduct\n            | where isnotempty(DstIpAddr)\n                and not(ipv4_is_private(DstIpAddr))\n                and isnotempty(SrcBytes)\n            | summarize SrcBytesSum=tolong(sum(SrcBytes)) by EventProduct, bin(TimeGenerated, 1h)\n            | extend EventTime = TimeGenerated, exists=int(1)\n            )\n            on exists\n        | project-away exists*, maxv, sum*\n        ),\n        (\n        (datatable(exists: int, sumexist: bool)[1, false]\n        | where toscalar(eps) <= 500\n        | join (summarizationexist) on sumexist)\n        | join (\n            _Im_WebSession(starttime=ago(4d), endtime=now())\n            | project DstIpAddr, SrcBytes, TimeGenerated, EventProduct\n            | where isnotempty(DstIpAddr)\n                and not(ipv4_is_private(DstIpAddr))\n                and isnotempty(SrcBytes)\n            | summarize SrcBytesSum=tolong(sum(SrcBytes)) by EventProduct, bin(TimeGenerated, 1h)\n            | extend EventTime = TimeGenerated, exists=int(1)\n            )\n            on exists\n        | project-away exists*, maxv, sum*\n        ),\n        (\n        WebSession_Summarized_SrcIP_CL\n        | where EventTime_t between (ago(startTime) .. now())\n        | where isnotempty(SrcBytes_d) and not(DstIPIsPrivate_b)\n        | project\n            SrcBytesSum=tolong(SrcBytes_d),\n            EventTime=EventTime_t,\n            EventProduct = EventProduct_s\n        )\n    | make-series TotalBytesSent = sum(SrcBytesSum) on EventTime from startofday(ago(startTime)) to startofday(now()) step timeframe by EventProduct;\n// TimeSeriesData block ends here\n//Take only anomalies in TimeSeriesData\nlet TimeSeriesAnomalies = materialize(TimeSeriesData\n    | extend (anomalies, score, baseline) = series_decompose_anomalies(TotalBytesSent, scorethreshold, -1, 'linefit')\n    | mv-expand\n        TotalBytesSent to typeof(long),\n        EventTime to typeof(datetime),\n        anomalies to typeof(double),\n        score to typeof(double),\n        baseline to typeof(long)\n    | where anomalies > 0 and baseline > 0\n    | extend AnomalyHour = EventTime\n    | extend\n        TotalBytesSentinMBperHour = round(((TotalBytesSent / 1024) / 1024), 2),\n        BaselineBytesSentinMBperHour = round(((baseline / 1024) / 1024), 2),\n        score = round(score, 2)\n    | project\n        EventProduct,\n        AnomalyHour,\n        TotalBytesSentinMBperHour,\n        BaselineBytesSentinMBperHour,\n        anomalies,\n        score\n    | where AnomalyHour between (startofday(ago(endTime)) .. startofday(now())) // Get TimeSeriesAnomalies in previous day\n        );\n// TimeSeriesAlerts block end here\nlet AnomalyHours = materialize (TimeSeriesAnomalies\n    | project AnomalyHour);\n//Previous day aggregated per hour\nlet PreviousDayLogs = \n    _Im_WebSession(starttime=startofday(ago(endTime)), endtime=startofday(now()))\n    | where isnotempty(DstIpAddr) and isnotempty(SrcIpAddr) and isnotempty(SrcBytes)\n    | where not(ipv4_is_private(DstIpAddr))\n    | project\n        TimeGenerated,\n        DstIpAddr,\n        SrcIpAddr,\n        SrcBytes,\n        DstBytes,\n        DstPortNumber,\n        EventProduct\n    | extend DateHour = bin(TimeGenerated, timeframe) // create a new column and round to hour\n    | where DateHour in (AnomalyHours) // Filter dataset to include only anomaly AnomalyHours\n    | extend\n        SentBytesinMB = ((SrcBytes / 1024) / 1024),\n        ReceivedBytesinMB = ((DstBytes / 1024) / 1024)\n    | summarize\n        HourlyCount = count(),\n        TimeGeneratedMax = arg_max(TimeGenerated, *),\n        DestinationIPList = make_set(DstIpAddr, 100),\n        DestinationPortList = make_set(DstPortNumber, 100),\n        SentBytesinMB = tolong(sum(SentBytesinMB)),\n        ReceivedBytesinMB = tolong(sum(ReceivedBytesinMB))\n        by SrcIpAddr, EventProduct, TimeGeneratedHour = bin(TimeGenerated, timeframe)\n    | where SentBytesinMB > bytessentperhourthreshold\n    | sort by TimeGeneratedHour asc, SentBytesinMB desc\n    | extend Rank=row_number(1, prev(TimeGeneratedHour) != TimeGeneratedHour) // Ranking the dataset per Hourly Partition\n    | where Rank <= 10  // Selecting Top 10 records with Highest BytesSent in each Hour\n    | project\n        EventProduct,\n        TimeGeneratedHour,\n        TimeGeneratedMax,\n        SrcIpAddr,\n        DestinationIPList,\n        DestinationPortList,\n        SentBytesinMB,\n        ReceivedBytesinMB,\n        Rank,\n        HourlyCount;\n// PreviousDayLogs block ends here\nTimeSeriesAnomalies\n| join kind = inner (PreviousDayLogs\n    | extend AnomalyHour = TimeGeneratedHour)\n    on EventProduct, AnomalyHour\n| sort by score desc\n| project\n    EventProduct,\n    AnomalyHour,\n    TimeGeneratedMax,\n    SrcIpAddr,\n    DestinationIPList,\n    DestinationPortList,\n    SentBytesinMB,\n    ReceivedBytesinMB,\n    TotalBytesSentinMBperHour,\n    BaselineBytesSentinMBperHour,\n    score,\n    anomalies,\n    HourlyCount\n| summarize\n    EventCount = sum(HourlyCount),\n    startTimeUtc = min(TimeGeneratedMax),\n    EndTimeUtc = max(TimeGeneratedMax),\n    SentBytesinMB = sum(SentBytesinMB),\n    ReceivedBytesinMB = sum(ReceivedBytesinMB),\n    SourceIP = take_any(SrcIpAddr),\n    SourceIPList = make_set(SrcIpAddr, 10),\n    DestinationIPList = make_set(DestinationIPList, 100),\n    DestinationPortList = make_set(DestinationPortList, 100)\n    by\n    AnomalyHour,\n    TotalBytesSentinMBperHour,\n    BaselineBytesSentinMBperHour,\n    score,\n    anomalies,\n    EventProduct\n| project\n    EventProduct,\n    AnomalyHour,\n    startTimeUtc,\n    EndTimeUtc,\n    SourceIP,\n    SourceIPList,\n    DestinationIPList,\n    DestinationPortList,\n    SentBytesinMB,\n    ReceivedBytesinMB,\n    TotalBytesSentinMBperHour,\n    BaselineBytesSentinMBperHour,\n    anomalies,\n    score,\n    EventCount\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query returns entity counts by anomaly and user principal name including ranges for start/end time observed (watchlists configurable). For more information, see https://docs.microsoft.com/azure/sentinel/watchlists\n Topic: MicrosoftPurviewInsiderRiskManagement"}, {"role": "assistant", "content": "let UncommonActionVolume = BehaviorAnalytics\n| extend UncommonActionVolume = tostring(ActivityInsights.UncommonHighVolumeOfActions)\n| where UncommonActionVolume == \"True\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ActivityType = make_set(ActivityType), make_set(ActionType), UncommonActionVolume = countif(UncommonActionVolume==\"True\") by UserPrincipalName;\nlet UncommonAction = BehaviorAnalytics\n| extend UncommonAction = tostring(ActivityInsights.ActionUncommonlyPerformedByUser)\n| where UncommonAction == \"True\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ActivityType = make_set(ActivityType), make_set(ActionType), UncommonAction = countif(UncommonAction==\"True\") by UserPrincipalName;\nlet Uncommon = UncommonActionVolume | join kind = inner (UncommonAction) on UserPrincipalName;\nlet FirstTimeDeviceLogon = BehaviorAnalytics\n| extend FirstTimeDeviceLogon = tostring(ActivityInsights.FirstTimeUserLoggedOnToDevice)\n| where FirstTimeDeviceLogon == \"True\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ActivityType = make_set(ActivityType), make_set(ActionType), FirstTimeDeviceLogon = countif(FirstTimeDeviceLogon==\"True\") by UserPrincipalName;\nlet FirstTimeUserAction = BehaviorAnalytics\n| extend FirstTimeUserAction = tostring(ActivityInsights.FirstTimeUserPerformedAction)\n| where FirstTimeUserAction == \"True\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ActivityType = make_set(ActivityType), make_set(ActionType), FirstTimeUserAction = countif(FirstTimeUserAction==\"True\") by UserPrincipalName;\nlet FirstTime = FirstTimeUserAction | join(FirstTimeDeviceLogon) on UserPrincipalName;\nUncommon | join kind= inner (FirstTime) on UserPrincipalName\n| where UserPrincipalName <> \"\"\n| project UserPrincipalName, UncommonActionVolume, UncommonAction, FirstTimeUserAction, FirstTimeDeviceLogon, StartTime, EndTime, ActivityType,set_ActionType\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UserPrincipalName == $right.SearchKey\n| sort by UncommonActionVolume desc\n| limit 25\n| extend AccountCustomEntity = UserPrincipalName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in AppServiceHTTPLogs from any IP IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour for AppServiceHTTPLogs\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  // Filter out indicators without relevant IP address fields\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  // Filtering out rows where the Confidence Score is less than 50 as they would not have an Alert Priority label. \n  | where ConfidenceScore > 50\n  // Select the IP entity based on availability of different IP fields\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  // Determine AlertPriority based on ConfidenceScore\n  | extend AlertPriority = case(ConfidenceScore > 82, \"High\",\n                                ConfidenceScore > 74, \"Medium\",\n                                \"Low\")\n  // Exclude local addresses using the ipv4_is_private operator and filtering out specific address prefixes\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and AppServiceHTTPLogs to identify potential malicious activity\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n    AppServiceHTTPLogs | where TimeGenerated >= ago(dt_lookBack)\n    | where isnotempty(CIp)\n    | extend WebApp = split(_ResourceId, '/')[8]\n    | extend AppService_TimeGenerated = TimeGenerated // Rename time column for clarity\n  )\n  on $left.TI_ipEntity == $right.CIp\n  // Filter out logs that occurred after the expiration of the corresponding indicator\n  | where AppService_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and CIp, and keep the log entry with the latest timestamp\n  | summarize AppService_TimeGenerated = arg_max(AppService_TimeGenerated, *) by IndicatorId, CIp\n  // Select the desired output fields\n  | project AppService_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, TI_ipEntity, CsUsername, WebApp = split(_ResourceId, '/')[8], CIp, CsHost, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, _ResourceId, Type\n  // Extract hostname and DNS domain from the CsHost field\n  | extend HostName = tostring(split(CsHost, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(CsHost, '.'), 1, -1), '.'))\n  // Rename the timestamp field\n  | extend timestamp = AppService_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for devices with unsecure settings.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'authentication'\n| where  AccessDvcEncryptionEnabled == False or AccessDvcFirewallEnabled == False or AccessDvcPasswordSet == False\n| project TimeGenerated, SrcIpAddr, DstUserName\n| extend AccountCustomEntity = DstUserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in EmailUrlInfo table from any Domain IOC from TI.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Define the lookback period for email data as 1 hour\nlet ioc_lookBack = 14d; // Define the lookback period for threat intelligence data as 14 days\nlet EmailUrlInfo_ = EmailUrlInfo\n| where isnotempty(Url) or isnotempty(UrlDomain) // Filter for non-empty URLs or URL domains\n| where TimeGenerated >= ago(dt_lookBack) // Filter for records within the lookback period\n| extend Url = tolower(Url), UrlDomain = tolower(UrlDomain) // Convert URLs and domains to lowercase\n| extend EmailUrlInfo_TimeGenerated = TimeGenerated; // Create a new column for the time generated\nlet EmailEvents_ = EmailEvents\n| where TimeGenerated >= ago(dt_lookBack); // Filter email events within the lookback period\nlet TI_Urls = ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) // Filter threat intelligence indicators within the lookback period\n| where isnotempty(Url) // Filter for non-empty URLs\n| extend Url = tolower(Url) // Convert URLs to lowercase\n| join kind=innerunique (EmailUrlInfo_) on Url // Join with email URL info on URL\n| where Active == true and ExpirationDateTime > now() // Filter for active indicators that haven't expired\n| where EmailUrlInfo_TimeGenerated < ExpirationDateTime // Ensure email info was generated before the indicator expired\n| summarize EmailUrlInfo_TimeGenerated = arg_max(EmailUrlInfo_TimeGenerated, *) by IndicatorId, Url // Get the latest email info for each indicator\n| project EmailUrlInfo_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, UrlLocation, NetworkMessageId; // Select relevant columns\nlet TI_Domains = ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) // Filter threat intelligence indicators within the lookback period\n| where isnotempty(DomainName) // Filter for non-empty domain names\n| extend DomainName = tolower(DomainName) // Convert domain names to lowercase\n| join kind=innerunique (EmailUrlInfo_) on $left.DomainName == $right.UrlDomain // Join with email URL info on domain name\n| where Active == true and ExpirationDateTime > now() // Filter for active indicators that haven't expired\n| where EmailUrlInfo_TimeGenerated < ExpirationDateTime // Ensure email info was generated before the indicator expired\n| summarize EmailUrlInfo_TimeGenerated = arg_max(EmailUrlInfo_TimeGenerated, *) by IndicatorId, UrlDomain // Get the latest email info for each indicator\n| project EmailUrlInfo_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, UrlDomain, UrlLocation, NetworkMessageId; // Select relevant columns\nunion TI_Urls, TI_Domains // Combine URL and domain threat intelligence data\n| extend timestamp = EmailUrlInfo_TimeGenerated // Add a timestamp column\n| join kind=inner (EmailEvents_) on NetworkMessageId // Join with email events on network message ID\n| where DeliveryAction !has \"Blocked\" // Filter out blocked delivery actions\n| extend Name = tostring(split(RecipientEmailAddress, '@', 0)[0]), UPNSuffix = tostring(split(RecipientEmailAddress, '@', 1)[0]); // Extract name and UPN suffix from recipient email address\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible flooding.\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "PaloAltoCDLEvent\n| where EventResourceId =~ 'TRAFFIC'\n| where isnotempty(NetworkSessionId)\n| where DstBytes == 0 and tolong(NetworkPackets) > 0\n| extend AccountCustomEntity = DstUsername, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Result found on a darkweb platform\n Topic: Flare"}, {"role": "assistant", "content": "Firework_CL\n| where risk_reasons_s contains \"CYBERCRIME_SOURCE\" and (risk_score_d == \"3\" or risk_score_d == \"4\" or risk_score_d == \"5\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match for a Code Injection based attack in the App Gateway WAF logs. The threshold value in the query can be changed as per your infrastructures requirements.\nReferences: https://owasp.org/www-community/attacks/Code_Injection\n Topic: Azure Web Application Firewall (WAF)"}, {"role": "assistant", "content": "let Threshold = 3;  \nAzureDiagnostics\n| where ResourceProvider == 'MICROSOFT.NETWORK' and Category == 'ApplicationGatewayFirewallLog'\n| where action_s == \"Matched\"\n| where Message has \"Injection\" or Message has \"File Inclusion\"\n| project transactionId_g, hostname_s, requestUri_s, TimeGenerated, clientIp_s, Message, details_message_s, details_data_s\n| join kind = inner(\nAzureDiagnostics\n| where ResourceProvider == 'MICROSOFT.NETWORK' and Category == 'ApplicationGatewayFirewallLog'\n| where action_s == \"Blocked\") on transactionId_g\n| extend Uri = strcat(hostname_s,requestUri_s)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), TransactionID = make_set(transactionId_g,100), Message = make_set(Message,100), Detail_Message = make_set(details_message_s,100), Detail_Data = make_set(details_data_s,100), Total_TransactionId = dcount(transactionId_g) by clientIp_s, Uri, action_s\n| where Total_TransactionId >= Threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of requests to unexisting files\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where TimeGenerated > ago(24h)\n| where EventType =~ \"ErrorLog\"\n| where EventMessage contains \"File does not exist\"\n| extend File = extract(@\"(.*\\/)(.*)\", 2, tostring(EventMessage))\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects executable files in folders.\n Topic: Box"}, {"role": "assistant", "content": "BoxEvents\n| where SourceFileName hassuffix '.exe' or SourceItemName hassuffix '.exe'\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query extracts the operating system from the UserAgent header and compares this to the DeviceDetail information present in Microsoft Entra ID.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let timeframe = 1d;\nlet ExtractOSFromUA=(ua:string) {\n    case(\n        ua has \"Windows NT 6.0\", \"Windows Vista/Windows Server 2008\",\n        ua has \"Windows NT 6.1\", \"Windows 7/Windows Server 2008R2\",\n        ua has \"Windows NT 6.1\", \"Windows 7/Windows Server 2008\",\n        ua has \"Windows NT 6.2\", \"Windows 8/Windows Server 2012\",\n        ua has \"Windows NT 6.3\", \"Windows 8.1/Windows Server 2012R2\",\n        ua has \"Windows NT 10.0\", \"Windows 10\",\n        ua has \"Windows Phone\", \"WindowsPhone\",\n        ua has \"Android\", \"Android\",\n        ua has \"iPhone;\", \"IOS\",\n        ua has \"iPad;\", \"IOS\",\n        ua has \"Polycom/\", \"Polycom\",\n        ua has \"Darwin/\", \"MacOS\",\n        ua has \"Mac OS X\", \"MacOS\",\n        ua has \"macOS\", \"MacOS\",\n        ua has \"ubuntu\", \"Linux\",\n        ua has \"Linux\", \"Linux\",\n        ua has \"curl\", \"CLI\",\n        ua has \"python\", \"CLI\",\n        \"Unknown\"\n    )\n};\n// Query to obtain 'simplified' user agents in a given timespan.\nunion withsource=tbl_name AADNonInteractiveUserSignInLogs, SigninLogs\n| where TimeGenerated >= ago(timeframe)\n| extend UserAgentOS=tolower(ExtractOSFromUA(UserAgent))\n| where not(isempty(UserAgent))\n| where not(isempty(AppId))\n| where ResultType == 0\n| extend DeviceOS=tolower(DeviceDetail_dynamic.operatingSystem)\n| where not(isempty(DeviceOS))\n| where not(UserAgentOS == \"unknown\")\n// Look for matches both ways, since sometimes the browser OS is more specific and sometimes the DeviceOS is more specific.\n| where not(UserAgentOS contains DeviceOS) and not(DeviceOS contains UserAgentOS)\n| where not(DeviceOS == \"ios\" and UserAgentOS == \"macos\") // This can happen for 'request desktop site'\n| where not(DeviceOS == \"android\" and UserAgentOS == \"linux\") // Android and Linux sometimes confused\n| summarize count(), arg_min(TimeGenerated,*) by DeviceOS, UserAgentOS, UserPrincipalName\n// Begin allow-list.\n// End allow-list.\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches document shared publicy  in web.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where TimeGenerated > ago(24h)\n| where Visibility has \"public_on_the_web\"\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects mass record update changes in Dataverse and Dynamics 365, exceeding a pre-defined threshold. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// Set threshold for number of updated records\nlet detection_threshold = 10000;\nlet query_frequency = 1h;\nDataverseActivity\n| where TimeGenerated >= ago(query_frequency)\n| where Message == \"Update\"\n| summarize EventCount = count() by InstanceUrl, UserId, ClientIp, Message\n| where EventCount > detection_threshold\n| join kind=inner(\n    DataverseActivity\n    | where TimeGenerated >= ago(query_frequency))\n    on InstanceUrl, UserId, ClientIp, Message\n| mv-expand Fields\n| summarize\n    UpdatedFields = make_set(Fields.Name, 100),\n    FirstEvent = min(TimeGenerated)\n    by UserId, ClientIp, InstanceUrl, EventCount, EntityName\n| extend Details = bag_pack(\"Entity\", EntityName, \"Count\", EventCount, \"FieldsUpdated\", UpdatedFields)\n| summarize\n    TotalEvents = sum(EventCount),\n    FirstEvent = min(FirstEvent),\n    Details = make_list(Details, 100)\n    by UserId, ClientIp, InstanceUrl\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    FirstEvent,\n    UserId,\n    ClientIp,\n    TotalEvents,\n    Details,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses Security events from the \"AD FS Auditing\" provider to detect suspicious object identifiers (OIDs) as part EventID 501 and specifically part of the Enhanced Key Usage attributes.\nThis query checks to see if you have any new OIDs in the last hour that have not been seen in the previous day. New OIDs should be validated and OIDs that are very long, as indicated\nby the OID_Length field, could also be an indicator of malicious activity.\nIn order to use this query you need to enable AD FS auditing on the AD FS Server.\nReferences:\nhttps://www.microsoft.com/security/blog/2022/08/24/magicweb-nobeliums-post-compromise-trick-to-authenticate-as-anyone/\nhttps://docs.microsoft.com/windows-server/identity/ad-fs/troubleshooting/ad-fs-tshoot-logging\n\n Topic: Detections"}, {"role": "assistant", "content": "// change the starttime value for a longer period of known OIDs\nlet starttime = 1d;\n// change the lookback value for a longer period of lookback for suspicious/abnormal\nlet lookback = 1h;\nlet OIDList = SecurityEvent\n| where TimeGenerated >= ago(starttime)\n| where EventSourceName == 'AD FS Auditing'\n| where EventID == 501\n| where EventData has '/eku'\n| extend OIDs = extract_all(@\"<Data>([\\d+\\.]+)</Data>\", EventData)\n| mv-expand OIDs\n| extend OID = tostring(OIDs)\n| extend OID_Length = strlen(OID)\n| project TimeGenerated, Computer, EventSourceName, EventID, OID, OID_Length, EventData\n;\nOIDList\n| where TimeGenerated >= ago(lookback)\n| join kind=leftanti (\nOIDList\n| where TimeGenerated between (ago(starttime) .. ago(lookback))\n| summarize by OID\n) on OID\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "High severity storage account alerts found by Prancer.\n Topic: Prancer PenSuiteAI Integration"}, {"role": "assistant", "content": "union prancer_CL\n| where deviceProduct_s == 'azure'\n| where parse_json(data_data_snapshots_s)[0].type == 'Microsoft.Storage/storageAccounts'\n| where data_data_severity_s == 'High' and data_data_result_s == 'failed'\n| extend snapshot = parse_json(data_data_snapshots_s)\n| mv-expand snapshot \n| extend\n    id = tostring(snapshot.id),\n    structure = tostring(snapshot.structure),\n    reference = tostring(snapshot.reference),\n    source = tostring(snapshot.source),\n    collection = tostring(snapshot.collection),\n    type = tostring(snapshot.type),\n    region = tostring(snapshot.region),\n    resourceTypes = tostring(snapshot.resourceTypes),\n    path = tostring(snapshot.path)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for conflicting assets.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where TimeGenerated > ago(24h)\n| where EventOriginalType has 'New Conflict Asset' or EventType has 'New Conflict Asset'\n| project TimeGenerated, DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule creates an alert when multiple clients report errors for the same DNS query. This helps in identifying possible similar C2 communications originating from different clients. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let lookback=1h;\nlet threshold = 2;\nlet errors = dynamic(['NXDOMAIN', 'SERVFAIL', 'REFUSED']); \n_Im_Dns(starttime=ago(lookback)) \n  | where EventResultDetails has_any (errors) \n  | summarize SrcIPs = make_set(SrcIpAddr, 100), Dvcs = make_set(Dvc, 100), ResourceIds = make_set(_ResourceId, 100) by DnsQuery, bin(TimeGenerated, 10min) \n  | where array_length(SrcIPs) >= threshold \n  | extend TotalIPs = array_length(SrcIPs),IPCountthreshold = threshold \n  | extend DomainName = strcat(split(DnsQuery, \".\")[1], \".\", split(DnsQuery, \".\")[2])  \n  | mv-expand SrcIPs  \n  | extend SrcIP = tostring(SrcIPs)  \n  | mv-expand Dvcs  \n  | extend Dvc = tostring(Dvcs)  \n  | mv-expand ResourceIds  \n  | extend ResourceId = tostring(ResourceIds)  \n  | extend Dvc = strcat(split(Dvc, \".\")[0])\n  | summarize Start=min(TimeGenerated), End=max(TimeGenerated) by SrcIP, Dvc, ResourceId, DnsQuery, DomainName, SrcIPs = tostring(SrcIPs), IPCountthreshold = threshold, TotalIPs\n  | extend HostName = tostring(split(Dvc, \".\")[0]), DomainIndex = toint(indexof(Dvc, '.'))\n  | extend HostNameDomain = iff(DomainIndex != -1, substring(Dvc, DomainIndex + 1), Dvc)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies users who are added to a Teams Channel or Teams chat\nand within 1 minute of being added upload a file via the chat. This might be\nan indicator of suspicious activity.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let threshold = 1m;\n  // Define MemberAddedEvents for EnrichedMicrosoft365AuditLogs\n  let MemberAddedEvents_Enriched = EnrichedMicrosoft365AuditLogs\n    | where Workload == \"MicrosoftTeams\"\n    | where Operation == \"MemberAdded\"\n    | extend TeamName = tostring(parse_json(tostring(AdditionalProperties)).TeamName)\n    | project TimeGenerated, UploaderID = UserId, TeamName;\n  // Define FileUploadEvents for EnrichedMicrosoft365AuditLogs\n  let FileUploadEvents_Enriched = EnrichedMicrosoft365AuditLogs\n    | where RecordType == \"SharePointFileOperation\"\n    | where ObjectId has \"Microsoft Teams Chat Files\"\n    | where Operation == \"FileUploaded\"\n    | extend SourceFileName = tostring(parse_json(tostring(AdditionalProperties)).SourceFileName)\n    | project UploadTime = TimeGenerated, UploaderID = UserId, FileLocation = ObjectId, SourceFileName;\n  // Perform join for EnrichedMicrosoft365AuditLogs\n  let EnrichedResults = MemberAddedEvents_Enriched\n    | join kind=inner (FileUploadEvents_Enriched) on UploaderID\n    | where UploadTime > TimeGenerated and UploadTime < TimeGenerated + threshold\n    | extend timestamp = TimeGenerated, AccountCustomEntity = UploaderID;\n  // Define MemberAddedEvents for OfficeActivity\n  let MemberAddedEvents_Office = OfficeActivity\n    | where OfficeWorkload == \"MicrosoftTeams\"\n    | where Operation == \"MemberAdded\"\n    | extend TeamName = iff(isempty(TeamName), Members[0].UPN, TeamName)\n    | project TimeGenerated, UploaderID = UserId, TeamName;\n  // Define FileUploadEvents for OfficeActivity\n  let FileUploadEvents_Office = OfficeActivity\n    | where RecordType == \"SharePointFileOperation\"\n    | where SourceRelativeUrl has \"Microsoft Teams Chat Files\"\n    | where Operation == \"FileUploaded\"\n    | project UploadTime = TimeGenerated, UploaderID = UserId, FileLocation = OfficeObjectId, FileName = SourceFileName;\n  // Perform join for OfficeActivity\n  let OfficeResults = MemberAddedEvents_Office\n    | join kind=inner (FileUploadEvents_Office) on UploaderID\n    | where UploadTime > TimeGenerated and UploadTime < TimeGenerated + threshold\n    | project-away UploaderID1\n    | extend timestamp = TimeGenerated, AccountCustomEntity = UploaderID;\n  // Union both results\n  EnrichedResults\n  | union OfficeResults\n  | order by timestamp desc;\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for Password spraying attacks.\n Topic: Tenable App"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.yaml parser into the workspace\n// Retrieve the parser here: https://aka.ms/sentinel-TenableApp-afad-parser\n// Then, create the Kusto Function with alias afad_parser\nafad_parser\n  | where MessageType == 2 and Codename == \"Password Spraying\"\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when event rule was deleted.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where data_eventName_s =~ 'DeleteRule'\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for external facing services.\n Topic: Corelight"}, {"role": "assistant", "content": "corelight_conn\n| where TimeGenerated > ago(24h)\n| where ipv4_is_private(id_orig_h) == false\n| where isnotempty(id_resp_p)\n| where history startswith 'Sh'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "42Crunch API protection against BOLA\n Topic: 42Crunch API Protection"}, {"role": "assistant", "content": "let loginRec = apifirewall_log_1_CL\n| where TimeGenerated >= ago(5m) \n| project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Request_Header_s, Response_Header_s, Errors_s, Type, UUID_g\n| where Instance_Name_s == \"Instance_5\" and URI_Path_s has \"/api/login\" and Status_d == 200;\nlet ipAddress = toscalar(loginRec\n| top 1 by Timestamp_t desc\n| summarize by Source_IP_s);\nlet listRec = apifirewall_log_1_CL\n| where TimeGenerated >= ago(5m) \n| project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Request_Header_s, Response_Header_s, Errors_s, Type, UUID_g\n| where Instance_Name_s == \"Instance_5\" and URI_Path_s has \"/api/accounts/list\" and Status_d == 200;\nlet listCnt = (toscalar(listRec | count));\nlet accountRec = apifirewall_log_1_CL\n| where TimeGenerated >= ago(5m) \n| project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Request_Header_s, Response_Header_s, Errors_s, Type, UUID_g\n| where Instance_Name_s == \"Instance_5\" and Source_IP_s == ipAddress and URI_Path_s matches regex \"/api/accounts/\\\\d{6}$\";\nlet accountCnt = (toscalar(accountRec | count));\nlet recCount = iff((toscalar(listRec | count) == 0) and (accountCnt > 5), accountCnt, 0);\naccountRec | take recCount\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query determines the cluster-admin role assigned to users and applied to resources across the entire cluster .\n Topic: Azure kubernetes Service"}, {"role": "assistant", "content": "AzureDiagnostics\n | where Category == \"kube-audit\"\n | where parse_json(log_s).verb == \"create\"\n | where parse_json(tostring(parse_json(tostring(parse_json(log_s).requestObject)).roleRef)).name == \"cluster-admin\"\n | where parse_json(tostring(parse_json(log_s).objectRef)).resource =~ \"ClusterRoleBinding\"\n | extend k8skind = parse_json(tostring(parse_json(log_s).requestObject)).kind\n | extend k8sroleref = parse_json(tostring(parse_json(tostring(parse_json(log_s).requestObject)).roleRef)).name\n | extend k8suser = parse_json(tostring(parse_json(log_s).user)).username\n | extend k8sipaddress = parse_json(tostring(parse_json(log_s).sourceIPs))[0]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies large scale record delete operations based on a predefined threshold and also detects scheduled bulk deletion jobs. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let mass_delete_threshold = 10000;\nlet query_frequency = 1d;\nlet delete_activities = DataverseActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where Message == \"Delete\";\nunion\n    (\n    delete_activities\n    | summarize FirstEvent = min(TimeGenerated), TotalEvents = count() by UserId, InstanceUrl\n    | where TotalEvents > mass_delete_threshold\n    | join kind=inner (\n        delete_activities\n        | summarize DeleteCount = count() by UserId, InstanceUrl, ClientIp, EntityName)\n        on UserId, InstanceUrl\n    | extend Entities = bag_pack(\"Entity\", EntityName, \"Count\", DeleteCount)\n    | summarize Details = make_set(Entities, 100), FirstEvent = min(FirstEvent) by UserId, InstanceUrl, ClientIp, TotalEvents\n    ),\n    (\n    DataverseActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where Message == \"BulkDelete\"\n    | summarize FirstEvent = min(TimeGenerated), TotalEvents = count() by UserId, InstanceUrl, ClientIp\n    | extend Details = todynamic(\"Bulk delete scheduled\")\n    )\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    FirstEvent,\n    UserId,\n    ClientIp,\n    TotalEvents,\n    Details,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when AD syncronization failed.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where DvcAction =~ \"ad_sync_failed\"\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when multiple VMs ware stopped by user.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "let threshold = 5;\nVMwareESXi\n| where SyslogMessage has ('VmPoweredOffEvent')\n| extend SrcUsername = extract(@'\\[info\\]\\s+\\[(.*?)\\]', 1, SyslogMessage)\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| summarize st_vm = make_set(DstHostname,200) by SrcUsername, bin(TimeGenerated, 5m)\n| where array_length(st_vm) > threshold\n| extend hostname = iff(array_length(st_vm) > 0, st_vm[0], \"\")\n| extend NTDomain = tostring(split(hostname, '\\\\', 0)[0]), Name = tostring(split(SrcUsername, '\\\\', 1)[0]), HostName = tostring(split(hostname, '.', 0)[0]), DnsDomain = tostring(split(SrcUsername, '\\\\', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for privileged users source IP addresses.\n Topic: Snowflake"}, {"role": "assistant", "content": "Snowflake\n| where TimeGenerated > ago(24h)\n| where QUERY_TYPE_s =~ 'SELECT'\n| summarize roles = makeset(ROLE_NAME_s) by TargetUsername\n| join(Snowflake\n      | where TimeGenerated > ago(24h)\n      | where EventType =~ 'LOGIN') on TargetUsername\n| project-away TargetUsername1\n| where roles has_any ('SECURITYADMIN', 'SYSADMIN', 'ACCOUNTADMIN')\n| summarize ip_lst = makeset(SrcDvcIpAddr) by TargetUsername\n| extend AccountCustomEntity = TargetUsername, IPCustomEntity = ip_lst\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Calculate the count of BytesIn per Source-Destination pair over 12/24 hours. Higher values may indicate beaconing. C2 servers reply with the same data, making BytesIn value the same.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "let timeframe = 1d;\nCisco_Umbrella \n| where EventType == \"proxylogs\"\n| where TimeGenerated > ago(timeframe)\n| summarize count() by SrcIpAddr, DstIpAddr, SrcBytes\n| sort by count_ desc\n| extend Message = \"Possible communication with C2\"\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows activities that have never been executed in the tenant, performed by a user with high privileges.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "BehaviorAnalytics\n| where ActivityInsights.FirstTimeActionPerformedInTenant == True\n| where UsersInsights.BlastRadius =~ 'High'\n| extend AadUserId = UsersInsights.AccountObjectID\n| extend Account_0_AadUserId = AadUserId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Matches domain name IOCs related to Forest Blizzard group activity published July 2019 with CommonSecurityLog, DnsEvents and VMConnection dataTypes.\nReferences: https://blogs.microsoft.com/on-the-issues/2019/07/17/new-cyberthreats-require-new-ways-to-protect-democracy/.\n Topic: Detections"}, {"role": "assistant", "content": "let DomainNames = dynamic([\"irf.services\",\"microsoft-onthehub.com\",\"msofficelab.com\",\"com-mailbox.com\",\"my-sharefile.com\",\"my-sharepoints.com\",\n\"accounts-web-mail.com\",\"customer-certificate.com\",\"session-users-activities.com\",\"user-profile-credentials.com\",\"verify-linke.com\",\"support-servics.net\",\n\"onedrive-sharedfile.com\",\"onedrv-live.com\",\"transparencyinternational-my-sharepoint.com\",\"transparencyinternational-my-sharepoints.com\",\"soros-my-sharepoint.com\"]);\n(union isfuzzy=true\n  (CommonSecurityLog\n  | where Message has_any (DomainNames)\n  | parse Message with * '(' DNSName ')' *\n  | extend AccountName = SourceUserID, DeviceName, IPAddress = SourceIP\n  ),\n  (_Im_Dns(domain_has_any=DomainNames)\n  | where DnsQuery has_any (DomainNames)\n  | extend IPAddress = SrcIpAddr, DeviceName = Dvc\n  ),\n  (VMConnection\n  | where RemoteDnsCanonicalNames has_any (DomainNames)\n  | parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n  | extend IPAddress = RemoteIp, DeviceName = Computer\n  ),\n  (AzureDiagnostics \n  | where ResourceType == \"AZUREFIREWALLS\"\n  | where Category == \"AzureFirewallApplicationRule\"\n  | parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n  | where DestinationHost has_any (DomainNames)\n  | extend DNSName = DestinationHost \n  | extend IPAddress = SourceHost\n  ),\n  (AzureDiagnostics\n  | where ResourceType == \"AZUREFIREWALLS\"\n  | where Category == \"AzureFirewallDnsProxy\"\n  | project TimeGenerated,Resource, msg_s, Type\n  | parse msg_s with \"DNS Request: \" ClientIP \":\" ClientPort \" - \" QueryID \" \" Request_Type \" \" Request_Class \" \" Request_Name \". \" Request_Protocol \" \" Request_Size \" \" EDNSO_DO \" \" EDNS0_Buffersize \" \" Responce_Code \" \" Responce_Flags \" \" Responce_Size \" \" Response_Duration\n  | where Request_Name  has_any (DomainNames)\n  | extend DNSName = Request_Name\n  | extend IPAddress = ClientIP\n  ),\n  (AZFWApplicationRule\n  | where isnotempty(Fqdn)\n  | where Fqdn has_any (DomainNames)  \n  | extend DNSName = Fqdn \n  | extend IPAddress = SourceIp\n  ),\n  (AZFWDnsQuery\n  | where isnotempty(QueryName)\n  | where QueryName has_any (DomainNames)\n  | extend DNSName = QueryName\n  | extend IPAddress = SourceIp\n  ),\n  (\n    _Im_WebSession(url_has_any=DomainNames)\n    | extend IPAddress=IpAddr, DeviceName=Hostname, AccountName = tostring(split(User, \"@\")[0]), AccountDomain = tostring(split(User, \"@\")[1])\n  )\n)\n| where DNSName has_any (DomainNames)\n| extend timestamp = TimeGenerated\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests with different user agents from one source in short timeframe.\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "let threshold = 5;\nNGINXHTTPServer\n| summarize makeset(HttpUserAgentOriginal) by SrcIpAddr, bin(TimeGenerated, 5m)\n| extend ua_count = array_length(set_HttpUserAgentOriginal)\n| where ua_count > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unexpected disk image for VM.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "let img_ =\nVMwareESXi\n| where SyslogMessage has ('Matched discovered VM')\n| extend DstHostname = extract(@'vim.VirtualMachine\\S+,(.*?)\\]', 1, SyslogMessage)\n| extend kImageName = extract(@'ds:///vmfs/volumes/(.*)/(.*?),', 2, SyslogMessage)\n| summarize img_lst = makeset(kImageName) by DstHostname;\nVMwareESXi\n| where SyslogMessage has ('Matched discovered VM')\n| extend DstHostname = extract(@'vim.VirtualMachine\\S+,(.*?)\\]', 1, SyslogMessage)\n| extend ImageName = extract(@'ds:///vmfs/volumes/(.*)/(.*?),', 2, SyslogMessage)\n| join (img_) on DstHostname\n| where img_lst !has ImageName\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects malicious scan results and actions which are not allowed Topic: MimecastTTP"}, {"role": "assistant", "content": "MimecastTTPUrl_CL| where scanResult_s == \"malicious\" and action_s != \"allow\";"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for privileged login failures.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'admin'\n| where EventResultDetails =~ 'Error attempting to login to Bitglass'\n| order by TimeGenerated\n| extend AccountCustomEntity = User, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query shows connections to the Slack Workspace with empty User Agent.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where isempty(UserAgentOriginal)\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows processes which hash has been changed recently.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where TimeGenerated > ago(24h)\n| where isnotempty(Hash)\n| summarize hashes = makeset(Hash) by ActingProcessFileInternalName\n| where array_length(hashes) > 1\n| extend FileCustomEntity = ActingProcessFileInternalName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for malicious URL clicks in phishing email recognized by MDO in correlation with CommonSecurityLogs(CSL) & NetworkSession events. \nIf your workspace doesnt have one of the many data sources required for ASIM it may give informational error which can be safely ignored.\n Topic: Microsoft Defender XDR"}, {"role": "assistant", "content": "//SuspiciousUrlClicked\nAlertEvidence\n| where ServiceSource =~ \"Microsoft Defender for Office 365\"\n| where EntityType =~ \"Url\"\n| project AlertId, RemoteUrl\n| join kind=inner (\nAlertEvidence\n| where ServiceSource =~ \"Microsoft Defender for Office 365\"\n| where EntityType =~ \"MailMessage\"\n| project AlertId, NetworkMessageId\n)\non AlertId\n| distinct RemoteUrl, NetworkMessageId\n| join EmailEvents on NetworkMessageId\n| distinct RemoteUrl, NetworkMessageId, RecipientEmailAddress, RecipientObjectId\n| join kind = inner IdentityInfo on $left.RecipientObjectId  == $right.AccountObjectId\n| distinct RemoteUrl, NetworkMessageId, RecipientEmailAddress , RecipientObjectId, AccountSID\n| join kind = inner  \n(DeviceEvents\n| where ActionType =~ \"BrowserLaunchedToOpenUrl\"| where isnotempty(RemoteUrl)\n| project  UrlClickedByUserSid = RemoteUrl,\nInitiatingProcessAccountSid, DeviceName, DeviceId, InitiatingProcessFileName,\nInitiatingProcessAccountUpn, InitiatingProcessAccountName, InitiatingProcessAccountDomain\n)\non $left.AccountSID == $right.InitiatingProcessAccountSid and $left.RemoteUrl == $right.UrlClickedByUserSid\n| distinct  RemoteUrl, NetworkMessageId, RecipientEmailAddress, RecipientObjectId,\n AccountSID, UrlClickedByUserSid, DeviceName, DeviceId, InitiatingProcessFileName,\n InitiatingProcessAccountUpn, InitiatingProcessAccountName, InitiatingProcessAccountDomain\n|  join kind=inner\n(\n//Suspicious url clicked found in common security logs\nCommonSecurityLog\n| project TimeGenerated, DeviceVendor, DeviceProduct, DeviceAction, DestinationDnsDomain, DestinationIP, RequestURL, SourceIP, SourceHostName, RequestClientApplication\n) on $left.RemoteUrl== $right.RequestURL\n|  join kind=inner\n(\n//Find the relevant network sessions\n_Im_NetworkSession\n| where isnotempty(DstIpAddr)\n| where not(ipv4_is_private(DstIpAddr))\n| project TimeGenerated, SrcIpAddr, SrcPortNumber, DstIpAddr, DstPortNumber, DstBytes, SrcBytes\n) on  $left.DestinationIP == $right.DstIpAddr //The relevant network session being projected \n| summarize count() by TimeGenerated, RecipientEmailAddress, UrlClickedByUserSid, InitiatingProcessAccountUpn, InitiatingProcessAccountName, InitiatingProcessAccountDomain,\nDeviceName, InitiatingProcessFileName, DeviceProduct, DeviceAction, SourceIP, DestinationIP, RequestClientApplication\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n| extend RecipientEmailName = tostring(split(RecipientEmailAddress,'@',0)[0]), RecipientEmailUPNSuffix = tostring(split(RecipientEmailAddress,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures related to user accounts issues\n Topic: Alsid For AD"}, {"role": "assistant", "content": "let SeverityTable=datatable(Severity:string,Level:int) [\n\"low\", 1,\n\"medium\", 2,\n\"high\", 3,\n\"critical\", 4\n];\nlet codeNameList = datatable(Codename:string)[\"C-ACCOUNTS-DANG-SID-HISTORY\", \"C-PRE-WIN2000-ACCESS-MEMBERS\", \"C-PASSWORD-DONT-EXPIRE\", \"C-SLEEPING-ACCOUNTS\", \"C-DANG-PRIMGROUPID\", \"C-PASSWORD-NOT-REQUIRED\", \"C-USER-PASSWORD\"];\nafad_parser\n| where MessageType == 0 and Codename in~ (codeNameList)\n| lookup kind=leftouter SeverityTable on Severity\n| order by Level\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies network connections whose ports are frequent targets of attacks and should not cross network boundaries or reach untrusted public networks.\nConsider updating the firewall policies to block the connections.\n Topic: Azure Cloud NGFW by Palo Alto Networks"}, {"role": "assistant", "content": "let HighRiskPorts = datatable (Port:int, Protocol:string, RiskType:string, RiskDescription:string)[\n13,\"udp\",\"3rd Party Attacks\",\"Daytime protocol used in reflection/amplification attacks\",\n17,\"udp\",\"3rd Party Attacks\",\"QOTD protocol, reflection/amplification attacks\",\n19,\"udp\",\"3rd Party Attacks\",\"Chargen protocol, reflection/amplification attacks\",\n20,\"tcp\",\"Unencrypted\",\"Unencrypted FTP Traffic\",\n21,\"tcp\",\"Unencrypted\",\"Unencrypted FTP Traffic\",\n22,\"tcp\",\"Management\",\"SSH, brute force attacks common\",\n23,\"tcp\",\"Management\",\"Telnet, allows unauthenticated and/or unencrypted\",\n53,\"udp\",\"3rd Party Attacks\",\"DNS, reflection/amplification attacks\",\n69,\"udp\",\"Management\",\"TFTP, allows unauthenticated and/or unencrypted\",\n111,\"udp\",\"Management\",\"RPC, unencrypted authentication allowed\",\n111,\"tcp\",\"Management\",\"RPC, unencrypted authentication allowed\",\n119,\"tcp\",\"Unsecure\",\"NNTP, unencrypted authentication\",\n123,\"udp\",\"3rd Party Attacks\",\"Network Time Protocol, reflection/amplification attacks\",\n135,\"tcp\",\"Management\",\"End Point Mapper, multiple remote management srvcs\",\n135,\"udp\",\"Management\",\"End Point Mapper, multiple remote management srvcs\",\n137,\"tcp\",\"Hacker Recon\",\"Netbios Name Service\",\n137,\"udp\",\"Hacker Recon\",\"Netbios Name Service\",\n138,\"tcp\",\"Hacker Recon\",\"Netbios Datagram Service\",\n138,\"udp\",\"Hacker Recon\",\"Netbios Datagram Service\",\n139,\"tcp\",\"Hacker Recon\",\"Netbios Session Service\",\n161,\"tcp\",\"Unsecure/3rd Party Attacks\",\"SNMP, unsecure / no authentication UDP Reflection attacks\",\n161,\"udp\",\"Unsecure/3rd Party Attacks\",\"SNMP, unsecure / no authentication UDP Reflection attacks\",\n162,\"tcp\",\"Unsecure\",\"SNMP Trap, unsecure / no authentication\",\n162,\"udp\",\"Unsecure\",\"SNMP Trap, unsecure / no authentication\",\n389,\"tcp\",\"Hacker Recon/3rd Party Attacks\",\"LDAP/CLDAP\",\n389,\"udp\",\"Hacker Recon/3rd Party Attacks\",\"LDAP/CLDAP\",\n443,\"udp\",\"3rd Party Attacks\",\"UDP Reflection / Amplification attacks\",\n445,\"tcp\",\"Unsecure\",\"SMB - well known attack vector\",\n512,\"tcp\",\"Management\",\"Rexec on Linux, remote commands w/o encrypt auth\",\n514,\"tcp\",\"Management\",\"Remote Shell, remote commands w/o auth or encrypt\",\n593,\"tcp\",\"Management\",\"HTTP RPC EPMAP, unencrypted remote procedure call\",\n593,\"udp\",\"Management\",\"HTTP RPC EPMAP, unencrypted remote procedure call\",\n636,\"tcp\",\"Hacker Recon\",\"Lightweight Directory Access Protocol\",\n873,\"tcp\",\"Management\",\"Rsync, unencrypted file transfer\",\n1433,\"tcp\",\"Data Access/Mgmt\",\"MS SQL Management & Data Access\",\n1434,\"udp\",\"Data Access/Mgmt\",\"MS SQL Monitor Port\",\n1900,\"udp\",\"Hacker Recon/3rd Party Attacks\",\"Simple Service Discovery Protocol, unencrypted\",\n2049,\"tcp\",\"Unsecure\",\"Network File System\",\n2049,\"udp\",\"Unsecure\",\"Network File System\",\n2301,\"tcp\",\"Hacker Recon\",\"Compaq Management Service, no recent incidents\",\n2381,\"tcp\",\"Management\",\"Compaq Management Service, no recent incidents\",\n3268,\"tcp\",\"Hacker Recon\",\"Microsoft Global Catalog LDAP\",\n3306,\"tcp\",\"Data Access/Mgmt\",\"MySQL Database Management Port\",\n3389,\"tcp\",\"Management/3rd Party Attacks\",\"RDP, Common brute force attack port\",\n3389,\"udp\",\"Management/3rd Party Attacks\",\"RDP, Common brute force attack port\",\n4333,\"tcp\",\"Data Access/Mgmt\",\"MSql\",\n5353,\"udp\",\"3rd Party Attacks\",\"mDNS\",\n5432,\"tcp\",\"Data Access/Mgmt\",\"PostgresSQL Database Management\",\n5800,\"tcp\",\"Management\",\"VNC Remote Frame Buffer over HTTP\",\n5900,\"tcp\",\"Management\",\"VNC Remote Frame Buffer over HTTP\",\n5985,\"tcp\",\"Management\",\"Windows Powershell\",\n5986,\"tcp\",\"Management\",\"Windows Powershell\",\n6379,\"tcp\",\"Data Access/Mgmt\",\"Redis\",\n7000,\"tcp\",\"Data Access/Mgmt\",\"Cassandra\",\n7001,\"tcp\",\"Data Access/Mgmt\",\"Cassandra\",\n7199,\"tcp\",\"Data Access/Mgmt\",\"Cassandra\",\n9042,\"tcp\",\"Data Access/Mgmt\",\"Cassandra\",\n9160,\"tcp\",\"Data Access/Mgmt\",\"Cassandra\",\n9200,\"tcp\",\"Data Access/Mgmt\",\"Elastic Search\",\n9300,\"tcp\",\"Data Access/Mgmt\",\"Elastic Search\",\n9987,\"udp\",\"3rd Party Attack\",\"DSM/SCM Target Interface\",\n11211,\"udp\",\"Unencrypted\",\"Memcached\",\n16379,\"tcp\",\"Data Access/Mgmt\",\"Redis\",\n26379,\"tcp\",\"Data Access/Mgmt\",\"Redis\",\n27017,\"tcp\",\"Data Access/Mgmt\",\"MongoDB\",\n];\nHighRiskPorts\n| join kind=inner (\n  fluentbit_CL\n  | extend message = parse_json(Message)\n  | where ident_s == \"TRAFFIC\" and message.action != \"deny\"\n  | extend DestinationIP = tostring(message.dst_ip), DestinationPort = toint(message.dport), Protocol = tostring(message.proto), SourceIP = tostring(message.src_ip)\n  | where isnotempty(DestinationIP) and isnotempty(SourceIP)\n  //Remove private IP communication from DestinationIP\n  | extend result = ipv4_is_private(DestinationIP) \n  | where result == 0\n  | summarize\n      Count = count(),\n      StartTime = min(TimeGenerated),\n      EndTime = max(TimeGenerated)\n      by \n      FirewallName_s,\n      SourceIP,\n      DestinationIP,\n      DestinationPort,\n      Protocol\n) on $left.Port == $right.DestinationPort and $left.Protocol == $right.Protocol\n| project-away Protocol1, Port\n| order by FirewallName_s asc, SourceIP asc, DestinationIP asc, DestinationPort asc\n| extend timestamp = StartTime, IPCustomEntity = SourceIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects exploitation pattern of CVE-2020-1350 (SIGRED) vulnerability.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "let threshold = 15;\nGCPCloudDNS\n| where QueryTypeName in~ ('SIG', 'RRSIG')\n| where NetworkProtocol =~ 'TCP'\n| summarize count() by SrcIpAddr, bin(TimeGenerated, 1m)\n| where count_ < threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects client requests to unusual URI.\n Topic: Cloudflare"}, {"role": "assistant", "content": "Cloudflare\n| where HttpRequestMethod =~ 'GET'\n| where DstBytes != 0 or SrcBytes != 0\n| where ClientRequestURI matches regex @'(127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})|(10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})|(172\\.1[6-9]\\.\\d{1,3}\\.\\d{1,3})|(172\\.2[0-9]\\.\\d{1,3}\\.\\d{1,3})|(172\\.3[0-1]\\.\\d{1,3}\\.\\d{1,3})|(192\\.168\\.\\d{1,3}\\.\\d{1,3})'\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The VMware Edge Cloud Orchestrator reported an edge congestion event, where the Edge is dropping a large number of packets on one of its interfaces. This could indicate an ongoing Denial of Service attack against an appliance. Please make sure that Network Flood Protection is turned on. Topic: VMware SD-WAN and SASE"}, {"role": "assistant", "content": "VMware_VECO_EventLogs_CL\n| where event == \"EDGE_CONGESTED\"\n| where message contains \"high number of packet drops\"\n| extend edgeSerialNumber = extract(\"edgeSerialNumber: (.+)$\", 1, detail)"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "User signed in using default credentials Topic: Cynerio"}, {"role": "assistant", "content": "CynerioEvent_CL\n| where TimeGenerated > ago(24h)\n| where module_s == 'IDS'\n| where title_s == 'Default Password'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for account is Disabled. Does not effect score as its easily enabled.\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'UserDisabled'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies evidence of failed login attempts from a large number of distinct users on a Pulse Connect Secure VPN server\n Topic: Pulse Connect Secure"}, {"role": "assistant", "content": "let threshold = 100;\nPulseConnectSecure\n| where Messages startswith \"Login failed\"\n| summarize dcount(User) by Computer, bin(TimeGenerated, 15m)\n| where dcount_User > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for users which joined channels without invites.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where TimeGenerated > ago(24h)\n| where DvcAction =~ 'user_channel_join'\n| where DetailsType =~ 'JOINED'\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "High severity  alerts found by Prancer.\n Topic: Prancer PenSuiteAI Integration"}, {"role": "assistant", "content": "union prancer_CL\n | where data_data_resourceID_s contains 'Microsoft.Compute' and severity_s == 'High'\n | project\n     Name = name_s,\n     Severity = severity_s,\n     Description = data_alert_description_s,\n     URL = data_alert_url_s,\n     Resource = data_data_resourceID_s,\n     Config_ID = data_data_configId_s,\n     Collection = data_data_applicationName_s,\n     MITRE = data_alert_mitreId_s,\n     Company = companyName_s,\n     Solution = data_alert_solution_s,\n     WASC_ID = data_alert_wascid_s,\n     CWE_ID = data_alert_cweid_s,\n     Evidence = data_alert_evidence_s,\n     Request_Header = data_data_requestHeader_s,\n     Request_Body = data_data_requestBody_s,\n     Response_Header = data_data_responseHeader_s,\n     Response_Body = data_data_responseBody_s,\n     Other_Data = data_alert_other_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection looks at process executions - in some cases with specific command line attributes to filter a lot of common noise.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let Timeframe = 1h;\nDeviceProcessEvents\n| where Timestamp > ago(Timeframe)\n| where (FileName has_any (\"msbuild.exe\", \"msxsl.exe\")\nor (FileName has_any (\"vbc.exe\",\"csc.exe\",\"jsc.exe\") and ProcessCommandLine has_any (\"/exe\",\"/dll\",\"/pe64\",\"-exe\",\"-dll\",\"-pe64\"))\nor (FileName == (\"ilsasm.exe\") and ProcessCommandLine has_any (\"out\",\"target\",\"t:\",\"reference\",\"r:\")))\n// Filter initations by Visual Studio since this is expected behavior.\n  and not(FolderPath startswith \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\" \n  or InitiatingProcessFolderPath startswith \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\" \n  and (InitiatingProcessFileName == \"devenv.exe\" or InitiatingProcessFileName == \"WDExpress.exe\"))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may circumvent mechanisms designed to control elevated privileges to gain higher-level permissions. The query below generates an output\nof all users performing an \"action\" operation regarding an access elevation, where one or more features of the activity deviate from the user,\nhis peers or the tenant profile.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "let operations = dynamic(['Create role assignment']);\nBehaviorAnalytics\n| where ActionType in~ (operations)\n| where ActivityInsights has \"True\"\n| project TimeGenerated, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights\n| extend Name=split(UserPrincipalName, \"@\")[0], UPNSuffix=split(UserPrincipalName, \"@\")[1]\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SourceIPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A successful brute force attack on an S3 bucket was detected. Verify these actions, and if needed, remediate the compromise.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let timeframe = 1h;\nlet failed_attempts = AWSCloudTrail\n| where TimeGenerated >= ago(timeframe)\n| where EventName == \"GetObject\" and isnotempty(ErrorMessage) and isnotempty(ErrorCode)\n| where UserIdentityAccountId == \"ANONYMOUS_PRINCIPAL\" or UserIdentityAccessKeyId <> RecipientAccountId\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| extend bucketName = tostring(parse_json(RequestParameters).bucketName), keyName = tostring(parse_json(RequestParameters).key)\n| summarize time_min_failed=arg_min(TimeGenerated, *), failed_keys = dcount(keyName) by RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityAccountId, SourceIpAddress, bucketName\n| where failed_keys > 20;\nlet success_attempts = AWSCloudTrail\n| where TimeGenerated >= ago(timeframe)\n| where EventName == \"GetObject\" and isempty(ErrorMessage) and isempty(ErrorCode)\n| where UserIdentityAccountId == \"ANONYMOUS_PRINCIPAL\" or UserIdentityAccessKeyId <> RecipientAccountId\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| extend bucketName = tostring(parse_json(RequestParameters).bucketName), keyName = tostring(parse_json(RequestParameters).key)\n| summarize time_min_success=arg_min(TimeGenerated, *), success_keys = dcount(keyName) by RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityAccountId, SourceIpAddress, bucketName\n| where success_keys >= 1;\nfailed_attempts\n| join kind=inner success_attempts on SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityAccountId, bucketName\n| where time_min_success > time_min_failed\n| project-away keyName\n| extend timestamp = time_min_success\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection mechanism identifies instances where requests are made to Discord CDN addresses for file extensions that are considered risky.\n  It triggers when a callout is made to a Discord server that has only been encountered once in your environment. The uniqueness of Discord servers is determined based on the server ID present in the request URL (DiscordServerId in the query).\n  Discord CDN has been utilized in numerous campaigns to download additional payloads, highlighting the importance of monitoring such activities.\n  The query includes a sample set of popular web script extensions (scriptExtensions), which should be customized to align with the specific requirements of your environment\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let lookback = 1d;\nlet connectionThreshold = 1;\nlet RiskyFileExtensions = materialize(externaldata(Extensions: string)\n    [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/RiskyFileExtensionsInUrl.csv\"]\n    with(format=\"csv\", ignoreFirstRecord=True));\nlet CustomRiskyFileExtensions = (_ASIM_GetWatchlistRaw(\"Web_RiskyFileExtensions\") // Create new Watchlist and add your custom indicators(Optional)\n    | extend\n        Extensions = tostring(WatchlistItem[\"Extensions\"])\n    | project Extensions\n    | where isnotempty(Extensions));\nlet CombinedRiskyFileExtensions = union RiskyFileExtensions, CustomRiskyFileExtensions;\nlet knownRiskyFileExtensions=toscalar(CombinedRiskyFileExtensions\n    | where isnotempty(Extensions)\n    | summarize make_set(Extensions, 1000));\nlet discord=dynamic([\"cdn.discordapp.com\", \"media.discordapp.com\"]);\nlet WebData = _Im_WebSession(starttime=ago(lookback), url_has_any=discord, eventresult='Success')\n    | where isnotempty(Url)\n    | project Url, SrcUsername, SrcIpAddr, TimeGenerated, SrcHostname\n    | where Url has \"attachments\"\n    | extend DiscordServerId = extract(@\"\\/attachments\\/([0-9]+)\\/\", 1, Url);\nWebData\n| summarize\n    dcount(Url),\n    min(TimeGenerated),\n    max(TimeGenerated)\n    by DiscordServerId\n| join kind=inner (WebData) on DiscordServerId\n| where dcount_Url <= connectionThreshold and Url has_any (knownRiskyFileExtensions)\n| summarize EventCount = count()\n    by\n    EventStartTime=min_TimeGenerated,\n    EventEndTime=max_TimeGenerated,\n    SrcUsername,\n    SrcHostname,\n    SrcIpAddr,\n    Url\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a user account is created and then deleted within 10 minutes. This can be an indication of compromise and an adversary attempting to hide in the noise.\n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = 1d;\nlet spanoftime = 10m;\nlet threshold = 0;\n(union isfuzzy=true\n    (SecurityEvent\n    | where TimeGenerated > ago(timeframe+spanoftime)\n    // A user account was created\n    | where EventID == 4720\n    | where AccountType =~ \"User\"\n    | project creationTime = TimeGenerated, CreateEventID = EventID, CreateActivity = Activity, Computer = toupper(Computer), \n    TargetAccount = tolower(TargetAccount), TargetUserName, TargetDomainName, TargetSid, \n    AccountUsedToCreate = SubjectAccount, CreatedBySubjectUserName = SubjectUserName, CreatedBySubjectDomainName = SubjectDomainName, SIDofAccountUsedToCreate = SubjectUserSid, UserPrincipalName\n    ),\n    (\n    WindowsEvent\n    | where TimeGenerated > ago(timeframe+spanoftime)\n    // A user account was created\n    | where EventID == 4720\n    | extend SubjectUserSid = tostring(EventData.SubjectUserSid)\n    | extend AccountType=case(EventData.SubjectUserName endswith \"$\" or SubjectUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(SubjectUserSid), \"\", \"User\")\n    | where AccountType =~ \"User\"\n    | extend SubjectAccount = strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n    | extend SubjectDomainName = tostring(EventData.SubjectDomainName), SubjectUserName = tostring(EventData.SubjectUserName)\n    | extend TargetAccount = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n    | extend TargetSid = tostring(EventData.TargetSid)\n    | extend UserPrincipalName = tostring(EventData.UserPrincipalName)\n    | extend Activity = \"4720 - A user account was created.\"\n    | extend TargetUserName = tostring(EventData.TargetUserName), TargetDomainName = tostring(EventData.TargetDomainName) \n    | project creationTime = TimeGenerated, CreateEventID = EventID, CreateActivity = Activity, Computer = toupper(Computer), \n    TargetAccount = tolower(TargetAccount), TargetUserName, TargetDomainName, TargetSid, \n    AccountUsedToCreate = SubjectAccount, CreatedBySubjectUserName = SubjectUserName, CreatedBySubjectDomainName = SubjectDomainName, SIDofAccountUsedToCreate = SubjectUserSid, UserPrincipalName\n    )\n  )\n| join kind = inner \n(\n  (union isfuzzy=true\n    (SecurityEvent\n    | where TimeGenerated > ago(timeframe)\n    // A user account was deleted\n    | where EventID == 4726\n    | where AccountType == \"User\"\n    | project deletionTime = TimeGenerated, DeleteEventID = EventID, DeleteActivity = Activity, Computer = toupper(Computer), \n    TargetAccount = tolower(TargetAccount), TargetUserName, TargetDomainName, TargetSid, \n    AccountUsedToDelete = SubjectAccount, DeletedBySubjectUserName = SubjectUserName, DeletedBySubjectDomainName = SubjectDomainName, SIDofAccountUsedToDelete = SubjectUserSid, UserPrincipalName\n    ),\n    (WindowsEvent\n    | where TimeGenerated > ago(timeframe)\n    // A user account was deleted\n    | where EventID == 4726\n    | extend SubjectUserSid = tostring(EventData.SubjectUserSid)\n    | extend SubjectAccount = strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n    | extend AccountType=case(SubjectAccount endswith \"$\" or SubjectUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(SubjectUserSid), \"\", \"User\")\n    | where AccountType == \"User\"\n    | extend SubjectDomainName = tostring(EventData.SubjectDomainName), SubjectUserName = tostring(EventData.SubjectUserName)\n    | extend TargetSid = tostring(EventData.TargetSid)\n    | extend UserPrincipalName = tostring(EventData.UserPrincipalName)\n    | extend Activity = \"4726 - A user account was deleted.\"\n    | extend TargetUserName = tostring(EventData.TargetUserName), TargetDomainName = tostring(EventData.TargetDomainName) \n    | extend TargetAccount = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n    | project deletionTime = TimeGenerated, DeleteEventID = EventID, DeleteActivity = Activity, Computer = toupper(Computer), \n    TargetAccount = tolower(TargetAccount), TargetUserName, TargetDomainName, TargetSid, \n    AccountUsedToDelete = SubjectAccount, DeletedBySubjectUserName = SubjectUserName, DeletedBySubjectDomainName = SubjectDomainName, SIDofAccountUsedToDelete = SubjectUserSid, UserPrincipalName\n    )\n  )\n) on Computer, TargetAccount\n| where deletionTime - creationTime < spanoftime\n| extend TimeDelta = deletionTime - creationTime\n| where tolong(TimeDelta) >= threshold\n| project TimeDelta, creationTime, CreateEventID, CreateActivity, Computer, TargetAccount, TargetSid, UserPrincipalName, AccountUsedToCreate, SIDofAccountUsedToCreate,\ndeletionTime, DeleteEventID, DeleteActivity, AccountUsedToDelete, SIDofAccountUsedToDelete, TargetUserName, TargetDomainName, \nCreatedBySubjectUserName, CreatedBySubjectDomainName, DeletedBySubjectUserName, DeletedBySubjectDomainName\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for top source IP addresses with protocol or network errors.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "ImpervaWAFCloud\n| where TimeGenerated > ago(24h)\n| where DvcAction startswith 'REQ_BAD_'\n| summarize count() by SrcIpAddr\n| top 100 by count_\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when unexpected file recieved via mail.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "let f_types = dynamic(['ps1', 'bat', 'scr', 'sh', 'exe', 'js', 'lnk']);\nTrendMicroCAS\n| where EventCategoryType in~ ('exchange', 'gmail', 'exchangeserver')\n| where isnotempty(SrcFileName)\n| extend file_type = extract(@'\\.(\\w+)$', 1, SrcFileName)\n| where file_type in~ (f_types)\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule is searching for configuration changes. Configuration changes can override security measures and the overarching security design. Therefore audit events must be accurately tracked. Topic: VMware SD-WAN and SASE"}, {"role": "assistant", "content": "VMware_VECO_EventLogs_CL\n| where event == \"EDIT_PROFILE\"\n| extend edgeProfile = extract(\"^profile \\\\[(.+)\\\\] [a-z]+ module\", 1, message)\n| extend configAction = extract(\"^profile \\\\[.+\\\\] (.+) module\", 1, message)\n| extend edgeModule = extract(\"^profile \\\\[.+\\\\] [a-z]+ module \\\\[(.+)\\\\]$\", 1, message)\n| extend configChange = todynamic(detail).diff\n| project TimeGenerated, severity, edgeProfile, configAction, edgeModule, configChange\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when an item was shared to external entity.\n Topic: Box"}, {"role": "assistant", "content": "BoxEvents\n| where EventType =~ 'COLLABORATION_INVITE'\n| extend corp_domain = tolower(extract(@'@(.*)', 1, SrcUserUpn))\n| extend accessibleby_domain = tolower(extract(@'@(.*)', 1, AccessibleByLogin))\n| where corp_domain != accessibleby_domain\n| extend AccountCustomEntity = SrcUserUpn\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows applications using by accounts.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "ZPAEvent\n| where isnotempty(Application)\n| summarize Users = make_set(DstUserName) by Application\n| extend AccountCustomEntity = Users\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies compromises and attacks and detect malicious activities in ones file hash entity from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now()\n    | extend FileHashValue = toupper(FileHashValue)\n    | where isnotempty(FileHashValue)\n    | join kind=innerunique (union isfuzzy=true\n    (CloudAppEvents\n        | join kind=innerunique (union isfuzzy=true(DeviceFileEvents\n        | extend CloudAppEvents_TimeGenerated = TimeGenerated, Event = ReportId, FileHash = toupper(MD5))) on $left.TenantId == $right.TenantId))\n    on $left.FileHashValue == $right.MD5\n| summarize CloudAppEvents_TimeGenerated = argmax(CloudAppEvents_TimeGenerated, *) by IndicatorId, FileHash, FileHashType, FileHashValue\n| extend Description = max_CloudAppEvents_TimeGenerated_Description, ActivityGroupNames = max_CloudAppEvents_TimeGenerated_ActivityGroupNames, ThreatType = max_CloudAppEvents_TimeGenerated_ThreatType, ExpirationDateTime = max_CloudAppEvents_TimeGenerated_ExpirationDateTime, ConfidenceScore = max_CloudAppEvents_TimeGenerated_ConfidenceScore, SourceIP = max_CloudAppEvents_TimeGenerated_NetworkSourceIP, SourcePort = max_CloudAppEvents_TimeGenerated_NetworkSourcePort, DestinationIP = max_CloudAppEvents_TimeGenerated_NetworkDestinationIP, DestinationPort = max_CloudAppEvents_TimeGenerated_NetworkDestinationPort, DeviceName = max_CloudAppEvents_TimeGenerated_DeviceName\n| project CloudAppEvents_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, SourceIP, SourcePort, DestinationIP, DestinationPort, DeviceName, FileHashType, FileHashValue, FileHash\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected publicly exposed RDS instance, which could lead to a leakage of sensitive data.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where  EventName in (\"CreateDBInstance\", \"ModifyDBInstance\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| where tostring(parse_json(RequestParameters).publiclyAccessible) == \"true\"\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Goal: To detect anomalous data exfiltration. This query detects SQL queries that accessed a large number of rows, which is significantly higher than normal for this database. This is a hunting query, so the training and the detection occur on the whole time window (controlled by queryPeriod parameter). The user can set the minimal threshold for anomaly by changing the threshold parameters volThresholdZ and volThresholdQ (higher thresholds will detect only more severe anomalies).\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let volumeThresholdZ = 3.0;                     // Minimal threshold for the Zscore to trigger anomaly (number of standard deviations above mean). If set higher, only very significant alerts will fire.\nlet volumeThresholdQ = volumeThresholdZ;        // Minimal threshold for the Qscore to trigger anomaly (number of Inter-Percentile Ranges above high percentile). If set higher, only very significant alerts will fire.\nlet volumeThresholdHardcoded = 500;             // Minimal value for the volume metric to trigger anomaly.\nlet monitoredColumn = 'ResponseRows';           // The name of the column for volumetric anomalies.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s, \n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0)\n    | extend QuantityColumn = column_ifexists(monitoredColumn, 0)\n    | sort by TimeGenerated desc\n    | extend RowNumber = row_number()\n    );\nlet trainingSet =\n    processedData\n    | summarize AvgVal = round(avg(QuantityColumn), 2), StdVal = round(stdev(QuantityColumn), 2), N = max(RowNumber),\n                P99Val = round(percentile(QuantityColumn, 99), 2), P50Val = round(percentile(QuantityColumn, 50), 2)\n      by Database;\nprocessedData\n| join kind = inner (trainingSet) on Database\n| extend ZScoreVal = iff(N >= 20, round(todouble(QuantityColumn - AvgVal) / todouble(StdVal + 1), 2), 0.00),\n         QScoreVal = iff(N >= 20, round(todouble(QuantityColumn - P99Val) / todouble(P99Val - P50Val + 1), 2), 0.00)\n| extend IsVolumeAnomalyOnVal = iff((ZScoreVal > volumeThresholdZ and QScoreVal > volumeThresholdQ and QuantityColumn > volumeThresholdHardcoded), true, false), AnomalyScore = round((ZScoreVal + QScoreVal)/2, 0)\n| project TimeGenerated, Database, PrincipalName, ClientIp, HostName, ApplicationName, ActionName, Statement,\n          IsSuccess, ResponseRows, AffectedRows, IsVolumeAnomalyOnVal, AnomalyScore\n| where IsVolumeAnomalyOnVal == 'true'\n| sort by AnomalyScore desc, TimeGenerated desc\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = ClientIp\n| extend Host_0_Hostname = HostName\n| extend CloudApplication_0_Name = ApplicationName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for project versions.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where TimeGenerated > ago(24h)\n| where EventMessage =~ 'Project version created'\n| project EventCreationTime, UserName, SrcIpAddr, ObjectItemName, ChangedValues, AssociatedItems\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when executable file types are uploaded to Office services such as SharePoint and OneDrive.\nList currently includes exe, inf, gzip, cmd, bat file extensions.\nAdditionally, identifies when a given user is uploading these files to another users workspace.\nThis may be an indication of a staging location for malware or other malicious activity.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "// Set query parameters\nlet threshold = 2;\nlet uploadOp = 'FileUploaded';\n// Extensions that are interesting. Add/Remove to this list as you see fit\nlet execExt = dynamic(['exe', 'inf', 'gzip', 'cmd', 'bat']);\nlet starttime = 8d;\nlet endtime = 1d;\n\n// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n    | where TimeGenerated >= ago(endtime)\n    | where Operation =~ uploadOp\n    | where SourceFileExtension has_any (execExt)\n    | extend RecordType = coalesce(tostring(RecordType), \"UnknownRecordType\")  // Ensure RecordType is a string\n    | project TimeGenerated, OfficeId, OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, UserAgent, Site_Url, SourceRelativeUrl, SourceFileName\n    | join kind=leftanti (\n        OfficeActivity\n        | where TimeGenerated between (ago(starttime) .. ago(endtime))\n        | where Operation =~ uploadOp\n        | where SourceFileExtension has_any (execExt)\n        | summarize SourceRelativeUrl = make_set(SourceRelativeUrl, 100000), UserId = make_set(UserId, 100000), PrevSeenCount = count() by SourceFileName\n        // Uncomment the line below to enforce the threshold\n        //| where PrevSeenCount > threshold\n        | mvexpand SourceRelativeUrl, UserId\n        | extend SourceRelativeUrl = tostring(SourceRelativeUrl), UserId = tostring(UserId)  // Ensure consistent types for SourceRelativeUrl and UserId\n    ) on SourceFileName, SourceRelativeUrl, UserId\n    | extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])\n    | extend UserIdUserFolderFormat = tolower(replace_regex(UserId, '@|\\\\.', '_'))\n    | extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true, false)\n    | summarize TimeGenerated = make_list(TimeGenerated, 100000), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), UserAgents = make_list(UserAgent, 100000), OfficeIds = make_list(OfficeId, 100000), SourceRelativeUrls = make_list(SourceRelativeUrl, 100000), FileNames = make_list(tostring(SourceFileName), 100000)  // Cast FileNames to string\n    by OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, Site_Url, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n\n// EnrichedMicrosoft365AuditLogs Query\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated >= ago(endtime)\n    | where Operation == uploadOp\n    | extend SourceFileExtension = extract(@\"\\.([^\\./]+)$\", 1, tostring(parse_json(tostring(AdditionalProperties)).SourceFileName))  // Extract file extension\n    | where SourceFileExtension in (execExt)\n    | extend Site_Url = tostring(parse_json(tostring(AdditionalProperties)).SiteUrl)\n    | extend SourceRelativeUrl = tostring(parse_json(tostring(AdditionalProperties)).SourceRelativeUrl)\n    | extend SourceFileName = tostring(parse_json(tostring(AdditionalProperties)).SourceFileName)\n    | extend RecordType = coalesce(tostring(RecordType), \"UnknownRecordType\")  // Ensure RecordType is a string\n    | project TimeGenerated, Id, Workload, RecordType, Operation, UserType, UserKey, UserId, ClientIp, UserAgent = tostring(parse_json(tostring(AdditionalProperties)).UserAgent), Site_Url, SourceRelativeUrl, SourceFileName\n    | join kind=leftanti (\n        EnrichedMicrosoft365AuditLogs\n        | where TimeGenerated between (ago(starttime) .. ago(endtime))\n        | where Operation == uploadOp\n        | extend SourceFileExtension = extract(@\"\\.([^\\./]+)$\", 1, tostring(parse_json(tostring(AdditionalProperties)).SourceFileName))  // Extract file extension\n        | where SourceFileExtension in (execExt)\n        | extend SourceRelativeUrl = tostring(parse_json(tostring(AdditionalProperties)).SourceRelativeUrl)\n        | summarize SourceRelativeUrl = make_set(SourceRelativeUrl, 100000), UserId = make_set(UserId, 100000), PrevSeenCount = count() by SourceFileName = tostring(parse_json(tostring(AdditionalProperties)).SourceFileName)\n        // Uncomment the line below to enforce the threshold\n        //| where PrevSeenCount > threshold\n        | mvexpand SourceRelativeUrl, UserId\n        | extend SourceRelativeUrl = tostring(SourceRelativeUrl), UserId = tostring(UserId)  // Ensure consistent types for SourceRelativeUrl and UserId\n    ) on SourceFileName, SourceRelativeUrl, UserId\n    | extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])\n    | extend UserIdUserFolderFormat = tolower(replace_regex(UserId, '@|\\\\.', '_'))\n    | extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true, false)\n    | summarize TimeGenerated = make_list(TimeGenerated, 100000), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), UserAgents = make_list(UserAgent, 100000), Ids = make_list(Id, 100000), SourceRelativeUrls = make_list(tostring(SourceRelativeUrl), 100000), FileNames = make_list(tostring(SourceFileName), 100000)  // Cast FileNames to string\n    by Workload, RecordType, Operation, UserType, UserKey, UserId, ClientIp, Site_Url, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n\n// Combine Office and Enriched Logs\nlet CombinedEvents = EnrichedEvents\n    | union isfuzzy=true OfficeEvents\n    | summarize arg_min(StartTime, *) by tostring(FileNames), UserId, Site_Url, tostring(RecordType)  // Ensure FileNames and RecordType are strings\n    | order by StartTime desc;\n\n// Final Output\nCombinedEvents\n    | project StartTime, EndTime, Workload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, Site_Url, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder, FileNames, UserAgents, AccountName, AccountUPNSuffix;\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "CMMC 2.0 Level 1 (Foundational) assessments have deviated from configured threshold baselines. This alert is triggered when CMMC2.0 policy compliance is assessed below 70% compliance in 7 days.\n Topic: CybersecurityMaturityModelCertification(CMMC)2.0"}, {"role": "assistant", "content": "SecurityRegulatoryCompliance\n| where ComplianceStandard == \"NIST-SP-800-171-R2\"\n| extend Level=iff(ComplianceControl in (\"3.1.1\",\"3.1.2\",\"3.1.20\",\"3.1.22\",\"3.4.1\",\"3.5.2\",\"3.5.2\",\"3.8.3\",\"3.13.1\",\"3.13.5\",\"3.14.1\",\"3.14.2\",\"3.14.4\",\"3.14.5\"), \"Level 1: Foundational\",\"Level 2: Advanced\")\n| where Level == \"Level 1: Foundational\"\n| summarize arg_max(TimeGenerated, *) by RecommendationName, AssessedResourceId, Level\n| summarize Failed=countif(State==\"Failed\"),Passed=countif(State==\"Passed\"),Total=countif(State==\"Passed\" or State == \"Failed\") by Level\n|extend PassedControlsPercentage = (Passed/todouble(Total))*100\n| where PassedControlsPercentage < 70 \n//Adjust Either Passed Thresholds within Organizational Needs\n| extend RemediationLink = strcat('https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/22')\n| project Level, Total, PassedControlsPercentage, Passed, Failed, RemediationLink, LastObserved=now()\n| extend URLCustomEntity = RemediationLink\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures related to privileged accounts issues\n Topic: Alsid For AD"}, {"role": "assistant", "content": "let SeverityTable=datatable(Severity:string,Level:int) [\n\"low\", 1,\n\"medium\", 2,\n\"high\", 3,\n\"critical\", 4\n];\nlet codeNameList = datatable(Codename:string)[\"C-PRIV-ACCOUNTS-SPN\", \"C-NATIVE-ADM-GROUP-MEMBERS\", \"C-KRBTGT-PASSWORD\", \"C-PROTECTED-USERS-GROUP-UNUSED\", \"C-ADMINCOUNT-ACCOUNT-PROPS\", \"C-ADM-ACC-USAGE\", \"C-LAPS-UNSECURE-CONFIG\", \"C-DISABLED-ACCOUNTS-PRIV-GROUPS\"];\nafad_parser\n| where MessageType == 0 and Codename in~ (codeNameList)\n| lookup kind=leftouter SeverityTable on Severity\n| order by Level\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New brand_impersonation with severity Low found\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL | where severity_s == \"Low\" | where type_s == \"Brand Impersonation\" | where status_s != \"Closed\" or status_s != \"Resolved\" | where remarks_s == \"New brand_impersonation with severity Low found\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for attempts to suspend the log collector.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "CiscoISEEvent\n| where TimeGenerated > ago(24h)\n| where EventId in ('59206', '59208')\n| extend IPCustomEntity = SrcIpAddr"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query finds matches in WireData Event data for known FileName Indicators of Compromise from Threat Intelligence sources. FileName matches may produce false positives, so use this for hunting rather than real-time detection.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| where Active == true\n| where isnotempty(FileName)\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n  WireData \n  | where TimeGenerated between(starttime..endtime)\n  | where isnotempty(ProcessName)\n  | extend Process =reverse(substring(reverse(ProcessName), 0, indexof(reverse(ProcessName), \"\\\\\")))\n  | extend WireData_TimeGenerated = TimeGenerated\n)\non $left.FileName == $right.Process\n| where WireData_TimeGenerated < ExpirationDateTime\n| summarize WireData_TimeGenerated = arg_max(WireData_TimeGenerated, *) by IndicatorId, Process\n| project WireData_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nFileName, Computer, Direction, LocalIP, RemoteIP, LocalPortNumber, RemotePortNumber\n| extend timestamp = WireData_TimeGenerated, HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n| extend IP_0_Address = RemoteIP\n| extend IP_1_Address = LocalIP\n| extend URL_0_Url = Url\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple connection errors to resource from risky category.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "let threshold = 10;\nlet risky_sites = dynamic(['IW_adlt', 'IW_hack', 'IW_porn']);\nCiscoWSAEvent\n| where DvcAction startswith 'BLOCK_'\n| where UrlCategory in~ (risky_sites)\n| summarize count() by SrcUserName, UrlOriginal, bin(TimeGenerated, 5m)\n| where count_ >= threshold\n| extend URLCustomEntity = UrlOriginal, AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare user agent strings with client errors\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 400 and HttpStatusCode <= 499\n| summarize Total_UA_Count = count() by tostring(HttpUserAgentOriginal)\n| top 20 by Total_UA_Count desc\n| extend UrlCustomEntity = HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when changes have been made to the firewall rules. Once this analytics rule is triggered it will group all related future alerts for upto an hour when all related entities are the same.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "OnePasswordEventLogs_CL\n| where log_source == \"auditevents\"\n| where action == \"updatfw\"\n| where object_type == \"account\"\n| extend\n    ActorUsername = actor_details.email\n    , SrcIpAddr = session.ip"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for vulnerable applications on hosts.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where TimeGenerated > ago(24h)\n| where EventMessage =~ 'Vulnerable Application Detected'\n| summarize by DstHostname\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create an incident when the host entity presents a specific tag. If the tag is present, an incident should be created and marked with highest priority. Topic: Vectra XDR"}, {"role": "assistant", "content": "Entities_Data_CL\n| where type_s == \"host\"\n| extend Tags = todynamic(tags_s)\n| where set_has_element(Tags, \"MDR - Customer Escalation\")\n| summarize arg_max(['last_modified_timestamp_t'], *) by ['name_s']\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unusual remote to local (R2L) DNS connections.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "let threshold = 50;\nUbiquitiAuditEvent\n| where EventCategory =~ 'firewall'\n| where ipv4_is_private(SrcIpAddr) == 'False'\n| where ipv4_is_private(DstIpAddr)\n| where DstPortNumber == '53'\n| summarize count() by SrcIpAddr, DstIpAddr\n| where count_ > threshold\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when the exchange audit logging has been disabled which may be an adversary attempt to evade detection or avoid other defenses.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "OfficeActivity\n| where OfficeWorkload =~ \"Exchange\" \n| where UserType in~ (\"Admin\",\"DcAdmin\")\n// Only admin or global-admin can disable audit logging\n| where Operation =~ \"Set-AdminAuditLogConfig\"\n| extend AdminAuditLogEnabledValue = tostring(parse_json(tostring(parse_json(tostring(array_slice(parse_json(Parameters),3,3)))[0])).Value)\n| where AdminAuditLogEnabledValue =~ \"False\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() by Operation, UserType, UserId, ClientIP, ResultStatus, Parameters, AdminAuditLogEnabledValue\n| extend AccountName = iff(UserId contains '@', tostring(split(UserId, '@')[0]), UserId)\n| extend AccountUPNSuffix = iff(UserId contains '@', tostring(split(UserId, '@')[1]), '')\n| extend AccountName = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[1]), AccountName)\n| extend AccountNTDomain = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[0]), '')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects first connection to an unpopular website (possible malicious payload delivery).\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "let top_million_list = Cisco_Umbrella\n| where EventType == \"proxylogs\"\n| extend Hostname = parse_url(UrlOriginal)[\"Host\"]\n| summarize count() by tostring(Hostname)\n| top 1000000 by count_\n| summarize make_list(Hostname);\nCisco_Umbrella\n| where EventType == \"proxylogs\"\n| extend Hostname = parse_url(UrlOriginal)[\"Host\"]\n| where Hostname !in (top_million_list)\n| extend Message = \"Connect to unpopular website (possible malicious payload delivery)\"\n| project TimeGenerated, Message, SrcIpAddr, DstIpAddr, UrlOriginal \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match for an XSS attack in the Front Door Premium WAF logs. The threshold value in the query can be changed as per your infrastructures requirements.\n References: https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\n Topic: Azure Web Application Firewall (WAF)"}, {"role": "assistant", "content": "let Threshold = 1;\nAzureDiagnostics\n| where Category =~ \"FrontDoorWebApplicationFirewallLog\"\n| where action_s =~ \"AnomalyScoring\"\n| where details_msg_s has \"XSS\"\n| parse details_data_s with MessageText \"Matched Data:\" MatchedData \"AND \" * \"table_name FROM \" TableName \" \" *\n| project trackingReference_s, host_s, requestUri_s, TimeGenerated, clientIP_s, details_matches_s, details_msg_s, details_data_s, TableName, MatchedData\n| join kind = inner(\nAzureDiagnostics\n| where Category =~ \"FrontDoorWebApplicationFirewallLog\"\n| where action_s =~ \"Block\") on trackingReference_s\n| summarize URI_s = make_set(requestUri_s,100), Table = make_set(TableName,100), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), TrackingReference = make_set(trackingReference_s,100), Matched_Data = make_set(MatchedData,100), Detail_Data = make_set(details_data_s,100), Detail_Message = make_set(details_msg_s,100), Total_TrackingReference = dcount(trackingReference_s) by clientIP_s, host_s, action_s\n| where Total_TrackingReference >= Threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests with different user agents from one source in short timeframe.\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "let threshold = 5;\nOracleWebLogicServerEvent\n| where isnotempty(HttpUserAgentOriginal)\n| summarize ua_count=makeset(HttpUserAgentOriginal) by SrcIpAddr, bin(TimeGenerated, 5m)\n| where array_length(ua_count) > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies the first time a source IP communicates with a destination based on a configurable learning period.\nConfigurable Parameters: - Learning period time - learning period for threshold calculation in days. Default is set to 7.\n Topic: Azure Firewall"}, {"role": "assistant", "content": "let LearningPeriod = 7d;\nlet RunTime = 1h;\nlet StartLearningPeriod = LearningPeriod + RunTime;\nlet EndRunTime = RunTime - 1d;\nlet TrafficLogs = (union isfuzzy=true\n(AzureDiagnostics\n  | where OperationName == \"AzureFirewallApplicationRuleLog\" or OperationName == \"AzureFirewallNetworkRuleLog\"\n  | parse msg_s with * \"from \" SourceIp \":\" SourcePort:int \" to \" Fqdn \":\" DestinationPort:int \".\" *\n  | where isnotempty(Fqdn) and isnotempty(SourceIp)),\n(AZFWApplicationRule),\n(AZFWNetworkRule\n| extend Fqdn = DestinationIp));\nlet LearningSrcIpToDstIpPort = (TrafficLogs\n| where TimeGenerated between (ago(StartLearningPeriod) .. ago(RunTime))\n| summarize LearningSrcToDsts = make_set(Fqdn,10000) by SourceIp, DestinationPort);\nlet AlertTimeSrcIpToDstIpPort = (TrafficLogs\n| where TimeGenerated between (ago(RunTime) .. ago(EndRunTime))\n| extend AlertTimeDst = Fqdn\n| distinct AlertTimeDst ,SourceIp, DestinationPort);\nAlertTimeSrcIpToDstIpPort\n| join kind=leftouter (LearningSrcIpToDstIpPort) on SourceIp, DestinationPort\n| mv-expand LearningSrcToDsts\n| where AlertTimeDst != LearningSrcToDsts\n| summarize LearningSrcToDsts = make_set(LearningSrcToDsts,10000) by SourceIp, AlertTimeDst\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect activities when a payment method was removed. This query runs every day and its severity is Medium.\n Topic: GitHub"}, {"role": "assistant", "content": "GitHubAuditData\n| where Action == \"payment_method.remove\"\n| extend AccountName = tostring(split(Actor, \"@\")[0]), AccountUPNSuffix = tostring(split(Actor, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Surfaces any Defender Alert for Solorigate Events. In Microsoft Sentinel the SecurityAlerts table includes only the Device Name of the affected device, this query joins the DeviceInfo table to clearly connect other information such as\n Device group, ip, logged on users etc. This way, the Microsoft Sentinel user can have all the pertinent device info in one view for all the the Solarigate Defender alerts.\n Topic: Detections"}, {"role": "assistant", "content": "DeviceInfo\n| extend DeviceName = tolower(DeviceName)\n| join (SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| where ThreatName has \"Solorigate\"\n) on $left.DeviceName == $right.CompromisedEntity\n| project TimeGenerated, DisplayName, ThreatName, CompromisedEntity, PublicIP, MachineGroup, AlertSeverity, Description, LoggedOnUsers, DeviceId, TenantId\n| extend HostName = tostring(split(CompromisedEntity, \".\")[0]), DomainIndex = toint(indexof(CompromisedEntity, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(CompromisedEntity, DomainIndex + 1), CompromisedEntity)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The rule detects internal admins accounts, its recommended to review any new administrative permission. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"Admin SaaS account detected\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for successful sign in attempts to the Azure Portal where the user who is signing in from another Azure tenant, and the IP address the login attempt is from is an Azure IP. A threat actor who compromises an Azure tenant may look to pivot to other tenants leveraging cross-tenant delegated access in this manner.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "// Get details of current Azure Ranges (note this URL updates regularly so will need to be manually updated over time)\n// You may find the name of the new JSON here: https://www.microsoft.com/download/details.aspx?id=56519\n// On the downloads page, click the 'details' button, and then replace just the filename in the URL below\nlet azure_ranges = externaldata(changeNumber: string, cloud: string, values: dynamic)\n[\"https://raw.githubusercontent.com/microsoft/mstic/master/PublicFeeds/MSFTIPRanges/ServiceTags_Public.json\"] with(format='multijson')\n| mv-expand values\n| mv-expand values.properties.addressPrefixes\n| mv-expand values_properties_addressPrefixes\n| summarize by tostring(values_properties_addressPrefixes)\n| extend isipv4 = parse_ipv4(values_properties_addressPrefixes)\n| extend isipv6 = parse_ipv6(values_properties_addressPrefixes)\n| extend ip_type = case(isnotnull(isipv4), \"v4\", \"v6\")\n| summarize make_list(values_properties_addressPrefixes) by ip_type\n;\nSigninLogs\n// Limiting to Azure Portal really reduces false positives and helps focus on potential admin activity\n| where ResultType == 0\n| where AppDisplayName =~ \"Azure Portal\"\n| extend isipv4 = parse_ipv4(IPAddress)\n| extend ip_type = case(isnotnull(isipv4), \"v4\", \"v6\")\n // Only get logons where the IP address is in an Azure range\n| join kind=fullouter (azure_ranges) on ip_type\n| extend ipv6_match = ipv6_is_in_any_range(IPAddress,  list_values_properties_addressPrefixes)\n| extend ipv4_match = ipv4_is_in_any_range(IPAddress,  list_values_properties_addressPrefixes)\n| where ipv4_match or ipv6_match \n// Limit to where the user is external to the tenant\n| where HomeTenantId != ResourceTenantId\n// Further limit it to just access to the current tenant (you can drop this if you wanted to look elsewhere as well but it helps reduce FPs)\n| where ResourceTenantId == AADTenantId\n| summarize FirstSeen = min(TimeGenerated), LastSeen = max(TimeGenerated), make_set(ResourceDisplayName) by UserPrincipalName, IPAddress, UserAgent, Location, HomeTenantId, ResourceTenantId, UserId\n| extend AccountName = split(UserPrincipalName, \"@\")[0]\n| extend UPNSuffix = split(UserPrincipalName, \"@\")[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query relies on Microsoft Entra ID sign-in activity when Microsoft Entra ID is used for SSO with GitLab to highlights GitLab accounts associated with multiple authentications from different geographical locations in a short space of time.\n Topic: GitLab"}, {"role": "assistant", "content": "let locationCountMin = 1;\nlet appRegistrationName = \"GitLab\";\nSigninLogs\n| where AppDisplayName == appRegistrationName\n| where ResultType == 0\n| where Location != \"\"\n| summarize CountOfLocations = dcount(Location), Locations = make_set(Location) by User = Identity\n| where CountOfLocations > locationCountMin\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates an incident in the event the requested URL accessed by the user has been identified as Suspicious, Phishing, or Hacking.\n Topic: SymantecProxySG"}, {"role": "assistant", "content": "SymantecProxySG\n| mv-expand cs_categories\n| where cs_categories has_any (\"Suspicious\",\"phishing\", \"hacking\")\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by sc_filter_result, cs_userdn, c_ip, cs_host, Computer,  tostring(cs_categories)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in DnsEvents from any Domain IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "// Define the lookback periods for time-based filters\nlet dt_lookBack = 1h; // Look back 1 hour for DNS events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to domains\nlet Domain_Indicators = ThreatIntelligenceIndicator\n  // Filter out indicators without domain names\n  | where isnotempty(DomainName)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | extend TI_DomainEntity = DomainName;\n// Create a list of TLDs in our threat feed for later validation\nlet maxListSize = 100000; // Define the maximum allowed size for each list\nlet list_tlds = Domain_Indicators\n  | extend parts = split(DomainName, '.')\n  | extend tld = parts[(array_length(parts)-1)]\n  | summarize count() by tostring(tld)\n  | project tld\n  | summarize make_list(tld, maxListSize);\n// Perform a join between domain indicators and DNS events to identify potential malicious activity\nDomain_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n    DnsEvents\n    | where TimeGenerated > ago(dt_lookBack)\n    // Extract domain patterns from syslog message\n    | where isnotempty(Name)\n    | extend parts = split(Name, '.')\n    | extend tld = parts[(array_length(parts)-1)]\n    // Validate parsed domain by checking if the TLD is in the list of TLDs in our threat feed\n    | where tld in~ (list_tlds)\n    | extend DNS_TimeGenerated = TimeGenerated\n  ) on $left.TI_DomainEntity==$right.Name\n  // Filter out DNS events that occurred after the expiration of the corresponding indicator\n  | where DNS_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and Name, and keep the DNS event with the latest timestamp\n  | summarize DNS_TimeGenerated = arg_max(DNS_TimeGenerated, *) by IndicatorId, Name\n  // Select the desired output fields\n  | project DNS_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, Computer, ClientIP, Name, QueryType, Type, TI_DomainEntity\n  // Extract hostname and DNS domain from the Computer field\n  | extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n  // Rename the timestamp field\n  | extend timestamp = DNS_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates an incident based based on Jamf Protects Network Threat Event Stream alerts.\n Topic: Jamf Protect"}, {"role": "assistant", "content": "JamfProtect\n| where EventProduct == \"Jamf Protect - Threat Events Stream\"\n    and EventResult == \"Blocked\"\n    and isnotempty(EventSeverity)\n| extend Tactics = \"Initial Access\"\n| extend Techniques = \"T1566\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible maldoc file name in Google drive.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where isnotempty(DocTitle)\n| where DocTitle contains \"invoice\" or DocTitle contains \"payment\" or DocTitle contains \"order\" or DocTitle contains \"fax\" or DocTitle contains \"scan\" or DocTitle contains \"transfer\" or DocTitle contains \"report\" or DocTitle contains \"bill\"\n| extend FileCustomEntity = DocTitle, AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for Golden Ticket attacks.\n Topic: TenableAD"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.kql parser into the workspace\n// Retrieve the parser here: https://raw.githubusercontent.com/tenable/Azure-Sentinel/Tenable.ad-connector/Solutions/TenableAD/Parsers/afad_parser.kql\n// Then, create the Kusto Function with alias afad_parser\nafad_parser\n  | where MessageType == 2 and Codename == \"Golden Ticket\"\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies external user accounts that are added to a Team and then removed within one hour.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "// If you want to look at user added further than 7 days ago adjust this value\n// If you want to change the timeframe of how quickly accounts need to be added and removed change this value\nlet time_delta = 1h;\nOfficeActivity\n| where OfficeWorkload =~ \"MicrosoftTeams\" \n| where Operation =~ \"MemberAdded\"\n| extend UPN = tostring(parse_json(Members)[0].UPN)\n| where UPN contains (\"#EXT#\")\n| project TimeAdded=TimeGenerated, Operation, UPN, UserWhoAdded = UserId, TeamName, TeamGuid\n| join kind=innerunique (\nOfficeActivity\n| where OfficeWorkload =~ \"MicrosoftTeams\" \n| where Operation =~ \"MemberRemoved\"\n| extend UPN = tostring(parse_json(Members)[0].UPN)\n| where UPN contains (\"#EXT#\")\n| project TimeDeleted=TimeGenerated, Operation, UPN, UserWhoDeleted = UserId, TeamName, TeamGuid) on UPN, TeamGuid\n| where TimeDeleted < (TimeAdded + time_delta)\n| project TimeAdded, TimeDeleted, UPN, UserWhoAdded, UserWhoDeleted, TeamName, TeamGuid\n| extend AccountName = tostring(split(UPN, \"@\")[0]), AccountUPNSuffix = tostring(split(UPN, \"@\")[1])\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies failed attempts to sign in to disabled accounts across multiple Azure Applications.\nDefault threshold for Azure Applications attempted to sign in to is 3.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n50057 - User account is disabled. The account has been disabled by an administrator.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let threshold = 3;\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where ResultType == \"50057\"\n| where ResultDescription =~ \"User account is disabled. The account has been disabled by an administrator.\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), applicationCount = dcount(AppDisplayName),\napplicationSet = make_set(AppDisplayName), count() by UserPrincipalName, IPAddress, Type\n| where applicationCount >= threshold\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies a web request with a user agent header known to belong to a hacking tool. This indicates a hacking tool is used on the host.<br>You can add custom hacking tool indicating User-Agent headers using a watchlist, for more information refer to the [UnusualUserAgents Watchlist](https://aka.ms/ASimUnusualUserAgentsWatchlist).\n This analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM WebSession schema (ASIM WebSession Schema)\n Topic: Detections"}, {"role": "assistant", "content": "let threatCategory=\"Hacking Tool\";\nlet knownUserAgentsIndicators = materialize(externaldata(UserAgent:string, Category:string)\n    [ @\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/UnusualUserAgents.csv\"] \n        with(format=\"csv\", ignoreFirstRecord=True));\nlet knownUserAgents=toscalar(knownUserAgentsIndicators | where Category==threatCategory | where isnotempty(UserAgent) | summarize make_list(UserAgent));\nlet customUserAgents=toscalar(_GetWatchlist(\"UnusualUserAgents\") | where SearchKey==threatCategory | extend UserAgent=column_ifexists(\"UserAgent\",\"\") | where isnotempty(UserAgent) | summarize make_list(UserAgent));\nlet fullUAList = array_concat(knownUserAgents,customUserAgents);\n_Im_WebSession(httpuseragent_has_any=fullUAList)\n| project SrcIpAddr, Url, TimeGenerated, HttpUserAgent, SrcUsername\n| extend AccountName = tostring(split(SrcUsername, \"@\")[0]), AccountUPNSuffix = tostring(split(SrcUsername, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which medium sensitivity business information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let mediumRisk = 2;\nlet business = 'Business Information';\nCognniIncidents_CL \n| where Severity == mediumRisk\n| where informationType_s == business\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which low sensitivity business information] was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let lowRisk = 1;\nlet business = 'Business Information';\nCognniIncidents_CL \n| where Severity == lowRisk\n| where informationType_s == business\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. \nDynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.\nRef: https://attack.mitre.org/techniques/T1546/010/\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "Event\n| where EventLog =~ \"Microsoft-Windows-Sysmon/Operational\" and EventID in (13)\n| parse EventData with * 'TargetObject\">' TargetObject \"<\" * 'Details\">' Details \"<\" * \n| where TargetObject has \"\\\\Windows NT\\\\CurrentVersion\\\\Windows\\\\AppInit_DLLs\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventID, Computer, TargetObject, Details\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "When the WDigest Authentication protocol is enabled, plain text passwords are stored in the Local Security Authority Subsystem Service (LSASS) exposing them to theft. This setting will prevent WDigest from storing credentials in memory.\nRef: https://www.stigviewer.com/stig/windows_7/2016-12-19/finding/V-72753\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "Event\n| where EventLog =~ \"Microsoft-Windows-Sysmon/Operational\" and EventID in (13)\n| parse EventData with * 'TargetObject\">' TargetObject \"<\" * 'Details\">' Details \"<\" * \n| where TargetObject=~\"HKLM\\\\System\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest\\\\UseLogonCredential\" and Details !=\"DWORD (0x00000000)\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventID, Computer,  TargetObject, Details\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a user or application signs in using Microsoft Entra ID PowerShell to access non-Active Directory resources, such as the Azure Key Vault, which may be undesired or unauthorized behavior.\nFor capabilities and expected behavior of the Microsoft Entra ID PowerShell module, see: https://docs.microsoft.com/powershell/module/azuread/?view=azureadps-2.0.\nFor further information on Microsoft Entra ID Signin activity reports, see: https://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let aadFunc = (tableName:string){\ntable(tableName)\n| where AppId =~ \"1b730954-1685-4b74-9bfd-dac224a7b894\" // AppDisplayName IS Azure Active Directory PowerShell\n| where TokenIssuerType =~ \"AzureAD\"\n| where ResourceIdentity !in (\"00000002-0000-0000-c000-000000000000\", \"00000003-0000-0000-c000-000000000000\") // ResourceDisplayName IS NOT Windows Azure Active Directory OR Microsoft Graph\n| extend Status = todynamic(Status)\n| where Status.errorCode == 0 // Success\n| project-reorder IPAddress, UserAgent, ResourceDisplayName, UserDisplayName, UserId, UserPrincipalName, Type\n| order by TimeGenerated desc\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected creation of new CRUD DynamoDB policy and usage of one of the attach policy operations (AttachUserPolicy/AttachRolePolicy/AttachGroupPolicy). This might indicate a privilege escalation technique that attackers could use.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\nlet createPolicy =  dynamic([\"CreatePolicy\", \"CreatePolicyVersion\"]);\nlet timeframe = 1d;\nlet lookback = 14d;\n// Creating Master table with all the events to use with materialize for better performance\nlet EventInfo = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName in (EventNameList) or EventName in (createPolicy)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\");\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\nlet FullAdminPolicyEvents =  materialize(  EventInfo\n| where TimeGenerated >= ago(lookback)\n| where EventName in (createPolicy)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and ((Action contains \"dynamodb:Create\" or Action contains \"dynamodb:Put\") and (Action contains \"dynamodb:Describe\" or Action contains \"dynamodb:Get\" or Action contains \"dynamodb:Scan\")  and Action contains \"dynamodb:Update\" and Action contains \"dynamodb:Delete\") and Resource == \"*\" and Condition == \"\"\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn\n| project-rename StartTime = TimeGenerated  );\nlet PolicyAttach = materialize(  EventInfo\n| where TimeGenerated >= ago(timeframe)\n| where EventName in (EventNameList) and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\"/\")[1])\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName,   UserIdentityType , RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, SourceIpAddress, PolicyName\n| extend AttachEvent = pack(\"StartTime\", StartTime, \"EndTime\", EndTime, \"EventName\", EventName, \"UserIdentityType\",   UserIdentityType, \"SourceIpAddress\", SourceIpAddress, \"AccountName\", AccountName, \"AccountUPNSuffix\", AccountUPNSuffix, \"RecipientAccountId\", RecipientAccountId, \"UserIdentityArn\", UserIdentityArn)\n| project EventSource, PolicyName, AttachEvent, AttachEventCount, RecipientAccountId, AccountName, AccountUPNSuffix\n);\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\nFullAdminPolicyEvents\n| join kind=leftouter\n(\n    PolicyAttach\n)\non PolicyName\n| project-away PolicyName1\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies instances when public IP addresses are assigned to Azure Resources and show connections to those resources.\n Topic: Cloud Service Threat Protection Essentials"}, {"role": "assistant", "content": "let OperationNames = dynamic([\"microsoft.compute/virtualMachines/write\", \"microsoft.resources/deployments/write\"]);\nAzureActivity\n// We look for any Operation that modified and then was accepted or succeeded where a public ip address component is referenced\n| where OperationNameValue in~ (OperationNames)\n| where ActivityStatusValue has_any (\"Succeeded\", \"Accepted\")\n| where Properties contains \"publicipaddress\"\n//| extend frontendIPConfigurations = Properties.responseBody.properties.frontendIPConfigurations\n// parsing the publicIPAddress from Properties. It is only available if the allocation method is Static.\n| parse Properties with * \"publicIPAddress\\\\\" PublicIPAddressParse\n| extend parsedProperties_ = parse_json(tostring(parse_json(Properties).responseBody)).properties\n| extend publicIPAddress_ = tostring(parse_json(tostring(parsedProperties_)).ipAddress) \n| extend publicIPAddressVersion_ = tostring(parse_json(tostring(parsedProperties_)).publicIPAddressVersion) \n| extend publicIPAllocationMethod_ = tostring(parse_json(tostring(parsedProperties_)).publicIPAllocationMethod) \n| extend scope_ = tostring(parse_json(Authorization).scope) \n| project TimeGenerated, OperationNameValue, publicIPAllocationMethod_ , publicIPAddressVersion_, scope_ , Caller, CallerIpAddress, ActivityStatusValue, Resource \n// Join in the AzureNetworkAnalytics so that we can determine if any connections were made via the public ip address and get the currently assigned ip address when allocation method is Dynamic\n| join kind= inner (\nunion isfuzzy=true\n(AzureNetworkAnalytics_CL\n// Controlling for Schema Version and later parsing - This is Version 2 and Public IPs only\n| where isnotempty(FASchemaVersion_s) and isnotempty(DestPublicIPs_s)\n| extend SchemaVersion = FASchemaVersion_s\n| extend PublicIPs = tostring(split(DestPublicIPs_s,\"|\")[0])\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), FirstProcessedTimeUTC = min(FlowStartTime_t), LastProcessedTimeUtc = max(FlowEndTime_t), \nRegions = make_set(Region_s, 1000), AzureRegions = make_set(AzureRegion_s, 1000), VMs = make_set(VM_s, 1000), MACAddresses = make_set(MACAddress_s, 1000), PublicIPs = make_set(PublicIPs, 1000), DestPort = make_set(DestPort_d, 1000), SrcIP = make_set(SrcIP_s, 1000), \nActivityCount = count() by NSGRule_s, NSGList_s, SubNet = Subnet1_s, FlowDirection_s, Subscription = Subscription1_g, Tags_s, SchemaVersion\n//NSGList_s contains the subscription ID, remove that as we already have a field for this and now it will match what we get for SchemaVersion 1\n| extend NSG = case(isnotempty(NSGList_s), strcat(split(NSGList_s, \"/\")[-2],\"/\",split(NSGList_s, \"/\")[-1]), \"NotAvailable\")\n// Depending on the SchemaVersion, we will need to provide the NSG_Name for matching against the resource identified in AzureActivity\n| extend NSG_Name = tostring(split(NSG, \"/\")[-1])\n),\n(\nAzureNetworkAnalytics_CL \n// Controlling for Schema Version and later parsing - This is Version 1\n| where isempty(FASchemaVersion_s)\n// Controlling for public IPs only\n| where isnotempty(PublicFrontendIPs_s) or isnotempty(PublicIPAddresses_s)\n| where PublicFrontendIPs_s != \"null\" or PublicIPAddresses_s != \"null\"\n| extend SchemaVersion = SchemaVersion_s\n// The Public IP can be indicated in one of 2 locations, assigning here for easy union results\n| extend PublicIPs = case(isnotempty(PublicFrontendIPs_s), PublicFrontendIPs_s,\nPublicIPAddresses_s) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), FirstProcessedTimeUTC = min(TimeProcessed_t), LastProcessedTimeUtc = max(TimeProcessed_t), \nRegions = make_set(Region_s, 1000), AzureRegions = make_set(DiscoveryRegion_s, 1000), VMs = make_set(VirtualMachine_s, 1000), MACAddresses = make_set(MACAddress_s, 1000), PublicIPs = make_set(PublicIPs, 1000), \nSrcIP = make_set(PrivateIPAddresses_s, 1000), Name = make_set(Name_s, 1000), DestPort = make_set(DestinationPortRange_s, 1000),\nActivityCount = count() by NSG = NSG_s, SubNet = Subnetwork_s, Subscription = Subscription_g, Tags_s, SchemaVersion\n// Some events don't have an NSG listed, populating so it is clear it is not available in the datatype\n| extend NSG = case(isnotempty(NSG), NSG, \"NotAvailable\")\n// Depending on the SchemaVersion, we will need to provide the NSG_Name for matching against the resource identified in AzureActivity\n| extend NSG_Name = tostring(split(NSG, \"/\")[-1])\n)\n| project StartTimeUtc, EndTimeUtc, FirstProcessedTimeUTC, LastProcessedTimeUtc, PublicIPs, NSG, NSG_Name, SrcIP, DestPort, SubNet, Name, VMs, MACAddresses, ActivityCount, Regions, AzureRegions, Subscription, Tags_s, SchemaVersion\n) on $left.Resource == $right.NSG_Name\n| extend UserName = iff(Caller contains '@', tostring(split(Caller, '@')[0]), '')\n| extend UPNSuffix = iff(Caller contains '@', tostring(split(Caller, '@')[1]), '')\n| extend AadUserId = iff(Caller !contains '@', tostring(Caller), '')\n| extend Account_0_Name = Caller\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_AadUserId = AadUserId\n| extend IP_0_Address = CallerIpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects all events with status failed.\n Topic: SailPointIdentityNow"}, {"role": "assistant", "content": "declare query_parameters(lbperiod:timespan = 14d);\n  SailPointIDN_Events_CL\n  | where TimeGenerated > ago(lbperiod) and status_s == \"FAILED\"\n  | project technicalName_s, operation_s, type_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies Office365 SharePoint file transfers with a distinct folder count above a certain threshold in a 15-minute time period. Please note that entity mapping for arrays is not supported, so when there is a single value in an array, we will pull that value from the array as a single string to populate the entity to support entity mapping features within Sentinel. Additionally, if the array is multivalued, we will input a string to indicate this with a unique hash so that matching will not occur.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let threshold = 5000;\n// EnrichedMicrosoft365AuditLogs Query\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n  | where Workload has_any(\"SharePoint\", \"OneDrive\")\n  | where Operation has_any(\"FileDownloaded\", \"FileSyncDownloadedFull\", \"FileSyncUploadedFull\", \"FileUploaded\")\n  | extend UserAgent = tostring(AdditionalProperties[\"UserAgent\"])\n  | summarize count_distinct_ObjectId = dcount(ObjectId),\n              fileslist = make_set(ObjectId, 10000),\n              any_UserAgent = any(UserAgent)\n    by UserId, ClientIP = ClientIp, bin(TimeGenerated, 15m)\n  | where count_distinct_ObjectId >= threshold\n  | extend FileSample = iff(array_length(fileslist) == 1, tostring(fileslist[0]),\n               strcat(\"SeeFilesListField_\", tostring(hash(tostring(fileslist)))))\n  | extend AccountName = tostring(split(UserId, \"@\")[0]),\n           AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n  | where EventSource == \"SharePoint\"\n  | where OfficeWorkload has_any(\"SharePoint\", \"OneDrive\")\n  | where Operation has_any(\"FileDownloaded\", \"FileSyncDownloadedFull\", \"FileSyncUploadedFull\", \"FileUploaded\")\n  | summarize count_distinct_ObjectId = dcount(OfficeObjectId),\n              fileslist = make_set(OfficeObjectId, 10000),\n              any_UserAgent = any(UserAgent)\n    by UserId, ClientIP, bin(TimeGenerated, 15m)\n  | where count_distinct_ObjectId >= threshold\n  | extend FileSample = iff(array_length(fileslist) == 1, tostring(fileslist[0]),\n               strcat(\"SeeFilesListField_\", tostring(hash(tostring(fileslist)))))\n  | extend AccountName = tostring(split(UserId, \"@\")[0]),\n           AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n// Combine Office and Enriched Logs\nlet CombinedEvents = OfficeEvents\n  | union EnrichedEvents\n  | summarize arg_min(TimeGenerated, *) by UserId, ClientIP, any_UserAgent;\n// Final Output\nCombinedEvents\n  | extend TransferCount = count_distinct_ObjectId\n  | project TimeGenerated, UserId, ClientIP, AccountName, AccountUPNSuffix, FileSample, UserAgent = any_UserAgent, TransferCount, fileslist\n  | order by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when root impersonation occurs.\n Topic: VMware vCenter"}, {"role": "assistant", "content": "vCenter\n | where Message has_all ('ImpersonateUser', 'VcIntegrity', 'root')\n | extend user = 'root'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for bruteforce Password Guessing attacks.\n Topic: Tenable App"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.yaml parser into the workspace\n// Retrieve the parser here: https://aka.ms/sentinel-TenableApp-afad-parser\n// Then, create the Kusto Function with alias afad_parser\nafad_parser\n  | where MessageType == 2 and Codename == \"Password Guessing\"\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for accounts that have been assigned Global Administrator do not need other roles assigned. \n  Global Administrators have access to all aspects of Azure\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'AzureSecureScoreRoleOverlap'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query uses Microsoft Defender for Endpoint data to look for IoCs associated with the SUNSPOT malware shared by Crowdstrike.\nMore details: \n  - https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/ \n  - https://techcommunity.microsoft.com/t5/azure-sentinel/monitoring-your-software-build-process-with-azure-sentinel/ba-p/2140807\n Topic: Microsoft Defender XDR"}, {"role": "assistant", "content": "let SUNSPOT_Hashes = dynamic([\"c45c9bda8db1d470f1fd0dcc346dc449839eb5ce9a948c70369230af0b3ef168\", \"0819db19be479122c1d48743e644070a8dc9a1c852df9a8c0dc2343e904da389\"]);\nunion isfuzzy=true(\nDeviceEvents\n| where InitiatingProcessSHA256 in (SUNSPOT_Hashes)),\n(DeviceImageLoadEvents\n| where InitiatingProcessSHA256 in (SUNSPOT_Hashes))\n| extend timestamp=TimeGenerated\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when an account is enabled with a default password and the password is not set by the user within 48 hours.\nEffectively, there is an event 4722 indicating an account was enabled and within 48 hours, no event 4723 occurs which\nindicates there was no attempt by the user to set the password. This will show any attempts (success or fail) that occur\nafter 48 hours, which can indicate too long of a time period in setting the password to something that only the user knows.\nIt is recommended that this time period is adjusted per your internal company policy.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = 3d;\nlet SecEvents = materialize ( SecurityEvent | where TimeGenerated >= ago(starttime)\n| where EventID in (4722,4723) | where TargetUserName !endswith \"$\"\n| project TimeGenerated, EventID, Activity, Computer, TargetAccount, TargetSid, SubjectAccount, SubjectUserSid);\nlet userEnable = SecEvents\n| extend EventID4722Time = TimeGenerated\n// 4722: User Account Enabled\n| where EventID == 4722\n| project Time_Event4722 = TimeGenerated, TargetAccount, TargetSid, SubjectAccount_Event4722 = SubjectAccount, SubjectUserSid_Event4722 = SubjectUserSid, Activity_4722 = Activity, Computer_4722 = Computer;\nlet userPwdSet = SecEvents\n// 4723: Attempt made by user to set password\n| where EventID == 4723\n| project Time_Event4723 = TimeGenerated, TargetAccount, TargetSid, SubjectAccount_Event4723 = SubjectAccount, SubjectUserSid_Event4723 = SubjectUserSid, Activity_4723 = Activity, Computer_4723 = Computer;\nuserEnable | join kind=leftouter userPwdSet on TargetAccount, TargetSid\n| extend PasswordSetAttemptDelta_Min = datetime_diff('minute', Time_Event4723, Time_Event4722)\n| where PasswordSetAttemptDelta_Min > 2880 or isempty(PasswordSetAttemptDelta_Min)\n| project-away TargetAccount1, TargetSid1\n| extend Reason = @\"User either has not yet attempted to set the initial password after account was enabled or it occurred after 48 hours\"\n| order by Time_Event4722 asc\n| project-reorder Time_Event4722, Time_Event4723, PasswordSetAttemptDelta_Min, TargetAccount, TargetSid\n| extend Computer = coalesce(Computer_4723, Computer_4722)\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(TargetAccount, \"\\\\\")[1]), AccountNTDomain = tostring(split(TargetAccount, \"\\\\\")[0])\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for risky users.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'swgweb'\n| where Action =~ 'block'\n| summarize count() by User\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows behavior monitoring actions taken for files.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where TimeGenerated > ago(24h)\n| where EventMessage has \"Behavior Monitoring\"\n| where isnotempty(DvcAction)\n| extend TranslatedAction = case(\nDvcAction == \"0\", \"Allow\", \nDvcAction == \"1\", \"Ask\",\nDvcAction == \"2\", \"Deny\",\nDvcAction == \"3\", \"Terminate\", \nDvcAction == \"4\", \"Read Only\",\nDvcAction == \"5\", \"Read/Write Only\",\nDvcAction == \"6\", \"Read/Execute Only\", \nDvcAction == \"7\", \"Feedback\",\nDvcAction == \"8\", \"Clean\",\nDvcAction == \"1002\", \"Unknown\", \nDvcAction == \"1003\", \"Assess\",\nDvcAction == \"1004\", \"Terminated. Files were recovered.\",\nDvcAction == \"1005\", \"Terminated. Some files were not recovered.\", \nDvcAction == \"1006\", \"Terminated. Files were not recovered.\",\nDvcAction == \"1007\", \"Terminated. Restart result: Files were recovered.\",\nDvcAction == \"1008\", \"Terminated: Restart result: Some files were not recovered.\", \nDvcAction == \"1009\", \"Terminated: Restart result: Riles were not recovered.\",\n\"unknown\")\n| summarize ActionByFiles = count() by TranslatedAction, FileName\n| top 20 by ActionByFiles asc\n| extend FileCustomEntity = FileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects ZPA connections by new user.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "let listUsers =\nZPAEvent \n| where TimeGenerated > ago(14d)\n| where DvcAction == 'open'\n| summarize ListofUsers = make_set(DstUserName) by DstUserName\n| project ListofUsers;\nZPAEvent\n| where DstUserName !in (listUsers)\n| summarize EventCount = count() by DstUserName\n| project-away EventCount\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Looks for rare processes that are running on Linux hosts. Looks for process seen less than 14 times in last 7 days,\n or observed rate is less than 1% of of the average for the environment and fewer than 100.\n Topic: Syslog"}, {"role": "assistant", "content": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet count_threshold = 100;\nlet perc_threshold = 0.01;\nlet host_threshold = 14;\nlet basic=materialize(\nSyslog | where TimeGenerated >= lookback\n| summarize FullCount = count(), Count= countif(TimeGenerated between (starttime .. endtime)), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated) \nby Computer, ProcessName\n| where Count > 0 and Count < count_threshold);\nlet basic_avg = basic\n| summarize Avg = avg(FullCount) by  ProcessName;\nbasic | project-away FullCount\n| join kind=inner\nbasic_avg\non ProcessName | project-away ProcessName1\n| where Count < host_threshold or (Count <= Avg*perc_threshold and Count < count_threshold)\n| extend timestamp = StartTime, HostCustomEntity=Computer\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query looks for source code files being modified immediately after a build process is started. The purpose of this is to look for malicious code injection during the build process. This query uses Microsoft Defender for Endpoint telemetry.\nMore details: https://techcommunity.microsoft.com/t5/azure-sentinel/monitoring-the-software-supply-chain-with-azure-sentinel/ba-p/2176463\n Topic: Microsoft Defender XDR"}, {"role": "assistant", "content": "// How far back to look for events from\nlet timeframe = 1d;\n// How close together build events and file modifications should occur to alert (make this smaller to reduce FPs)\nlet time_window = 5m;\n// Edit this to include build processes used\nlet build_processes = dynamic([\"MSBuild.exe\", \"dotnet.exe\", \"VBCSCompiler.exe\"]);\n// Include any processes that you want to allow to edit files during/around the build process\nlet allow_list = dynamic([]);\nDeviceProcessEvents\n| where TimeGenerated > ago(timeframe)\n// Look for build process starts\n| where FileName has_any (build_processes)\n| summarize by BuildParentProcess=InitiatingProcessFileName, BuildProcess=FileName, BuildAccount = AccountName, DeviceName, BuildCommand=ProcessCommandLine, \ntimekey= bin(TimeGenerated, time_window), BuildProcessTime=TimeGenerated\n| join kind=inner(\nDeviceFileEvents\n| where TimeGenerated > ago(timeframe)\n| where InitiatingProcessFileName !in (allow_list)\n| where ActionType == \"FileCreated\"  or ActionType == \"FileModified\"\n// Look for code files, edit this to include file extensions used in build.\n| where FileName endswith \".cs\" or FileName endswith \".cpp\"\n| summarize by FileEditParentProcess=InitiatingProcessParentFileName, FileEditAccount = InitiatingProcessAccountName, FileEditDomain = InitiatingProcessAccountDomain, FileEditUpn = InitiatingProcessAccountUpn, \nDeviceName, FileEdited=FileName, FileEditProcess=InitiatingProcessFileName, timekey= bin(TimeGenerated, time_window), FileEditTime=TimeGenerated)\n// join where build processes and file modifications seen at same time on same host\non timekey, DeviceName\n// Limit to only where the file edit happens after the build process starts\n| where BuildProcessTime <= FileEditTime\n| summarize make_set(FileEdited), make_set(FileEditProcess) by timekey, DeviceName, BuildParentProcess, BuildProcess, FileEditAccount, FileEditDomain, FileEditUpn\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows URLs list with client errors.\n Topic: Tomcat"}, {"role": "assistant", "content": "TomcatEvent\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 400 and HttpStatusCode <= 499\n| summarize TopUrls = count() by (tostring(UrlOriginal))\n| top 20 by TopUrls desc\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for new users.\n Topic: Bitglass"}, {"role": "assistant", "content": "let u_list = Bitglass\n| where TimeGenerated between(ago(30d) .. ago(1d))\n| where EventType =~ 'access'\n| where EventMessage =~ 'Login'\n| summarize l_usr = makeset(User)\n| extend k = 1;\nBitglass\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'access'\n| where EventMessage =~ 'Login'\n| extend k = 1\n| join (u_list) on k\n| where l_usr !contains User\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This Analytic rule will monitor Intrusion events in Cisco syslog data based on the provided Signature ID. This will create an incident if that Signature ID is found in the specified time range.\n Topic: Cisco SD-WAN"}, {"role": "assistant", "content": "CiscoSyslogUTD\n| where SignatureId == \"Enter SignatureId\"\n| distinct SignatureId,SourceIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies common deployed resources in Azure, like resource names and groups. It can be used with other suspicious deployment signals to evaluate if a resource is commonly deployed or unique.\n Topic: Azure Activity"}, {"role": "assistant", "content": "AzureActivity\n| where OperationNameValue has_any (@\"deployments/write\", @\"virtualMachines/write\")  \n| where ActivityStatusValue =~ \"Succeeded\"\n| summarize by bin(TimeGenerated,1d), Resource, ResourceGroup, ResourceId, OperationNameValue, Caller\n| evaluate basket()\n| where isnotempty(Caller) and isnotempty(Resource) and isnotempty(TimeGenerated)\n| order by Percent desc, TimeGenerated desc\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend AzureResource_0_ResourceId = ResourceId\n// remove comments below on filters if the goal is to see more common or more rare Resource, Resource Group and Caller combinations\n//| where Percent <= 40 // <-- more rare\n//| where Percent >= 60 // <-- more common\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for unapproved access events.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where TimeGenerated > ago(24h)\n| where EventSeverity =~ 'Unapproved'\n| where isnotempty(CategoryAccess)\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The following detection identifies excessive AccessDenied events within an hour timeframe. It is possible that an access key to AWS may have been stolen and is being misused to perform discovery events.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where ErrorMessage in (\"Access Denied\",\"AccessDenied\") and UserIdentityType == 'IAMUser' and UserAgent !endswith \".amazonaws.com\"\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| summarize failures = count(), Source_IP_Addresses=make_set(SourceIpAddress) by bin(TimeGenerated, 1h), UserIdentityUserName, UserIdentityArn\n| where failures >= 5\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a user consents to provide a previously-unknown Azure application with the same OAuth permissions used by the FireEye PwnAuth toolkit (https://github.com/fireeye/PwnAuth).\nThe default permissions/scope for the PwnAuth toolkit are user.read, offline_access, mail.readwrite, mail.send, and files.read.all.\nConsent to applications with these permissions should be rare, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let detectionTime = 1d;\nlet joinLookback = 14d;\nAuditLogs\n| where TimeGenerated > ago(detectionTime)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Consent to application\"\n| where TargetResources has \"offline\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\"\n      | extend AppDisplayName = tostring(TargetResource.displayName),\n               AppClientId = tostring(TargetResource.id),\n               props = TargetResource.modifiedProperties\n  )\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv\"] with (format=\"csv\")))\n| mv-apply ConsentFull = props on \n  (\n      where ConsentFull.displayName =~ \"ConsentAction.Permissions\"\n  )\n| parse ConsentFull with * \"ConsentType: \" GrantConsentType \", Scope: \" GrantScope1 \"]\" *\n| where ConsentFull has_all (\"user.read\", \"offline_access\", \"mail.readwrite\", \"mail.send\", \"files.read.all\")\n| where GrantConsentType != \"AllPrincipals\" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\n| extend GrantInitiatedByAppName = tostring(InitiatedBy.app.displayName)\n| extend GrantInitiatedByAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend GrantInitiatedByUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend GrantInitiatedByAadUserId = tostring(InitiatedBy.user.id)\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\n| extend GrantInitiatedBy = iff(isnotempty(GrantInitiatedByUserPrincipalName), GrantInitiatedByUserPrincipalName, GrantInitiatedByAppName)\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend GrantUserAgent = AdditionalDetail.value\n  )\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantInitiatedByUserPrincipalName, GrantInitiatedByAadUserId, GrantInitiatedByAppName, GrantInitiatedByAppServicePrincipalId, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\n| join kind = leftouter (AuditLogs\n| where TimeGenerated > ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add service principal\"\n  | mv-apply TargetResource = TargetResources on \n      (\n          where TargetResource.type =~ \"ServicePrincipal\"\n          | extend props = TargetResource.modifiedProperties,\n                  AppClientId = tostring(TargetResource.id)\n      )\n  | mv-apply Property = props on \n      (\n          where Property.displayName =~ \"AppAddress\" and Property.newValue has \"AddressType\"\n          | extend AppReplyURLs = trim('\"',tostring(Property.newValue))\n      )\n| distinct AppClientId, tostring(AppReplyURLs)\n)\non AppClientId\n| join kind = innerunique (AuditLogs\n| where TimeGenerated > ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add OAuth2PermissionGrant\" or OperationName =~ \"Add delegated permission grant\"\n      | mv-apply TargetResource = TargetResources on \n          (\n              where TargetResource.type =~ \"ServicePrincipal\" and array_length(TargetResource.modifiedProperties) > 0 and isnotnull(TargetResource.displayName)\n              | extend GrantAuthentication = tostring(TargetResource.displayName)\n          )\n| extend GrantOperation = OperationName\n| project GrantAuthentication, GrantOperation, CorrelationId\n) on CorrelationId\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantInitiatedByUserPrincipalName, GrantInitiatedByAadUserId, GrantInitiatedByAppName, GrantInitiatedByAppServicePrincipalId, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\n| extend timestamp = TimeGenerated, Name = tostring(split(GrantInitiatedByUserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(GrantInitiatedByUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "42Crunch API protection anomaly detection\n Topic: 42Crunch API Protection"}, {"role": "assistant", "content": "let infoRec = apifirewall_log_1_CL\n| where TimeGenerated >= ago(5m) \n| project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Request_Header_s, Response_Header_s, Errors_s, Type, UUID_g\n| where Instance_Name_s == \"Instance_4\" and URI_Path_s has \"/api/users/info\" and Status_d == 200;\nlet timestamp = toscalar(infoRec | top 1 by Timestamp_t desc | summarize by Timestamp_t);\nlet activityRec = apifirewall_log_1_CL\n  | where Timestamp_t < timestamp and TimeGenerated >= ago(5m)\n  | project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Request_Header_s, Response_Header_s, Errors_s, Type, UUID_g\n  | where Instance_Name_s == \"Instance_4\" and URI_Path_s has \"/api/users/activity\" and Status_d == 200;\nactivityRec\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which highly sensitive financial information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let highRisk = 3;\nlet financial = 'Financial Information';\nCognniIncidents_CL \n| where Severity == highRisk\n| where informationType_s == financial\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies sign-ins from non-compliant or MFA-less devices to privileged accounts using a pre-built watchlist. Microsoft Sentinel offers customizable watchlist templates for your environment.\n Topic: Cloud Identity Threat Protection Essentials"}, {"role": "assistant", "content": "let priv_users = ('_GetWatchlist(\"VIPUsers\")') ;\n(union isfuzzy=true\n(SigninLogs //when a device is registered/joined without MFA \n| where AuthenticationRequirement == \"multiFactorAuthentication\"\n| where ResourceDisplayName == \"Device Registration Service\" \n| where ConditionalAccessStatus == \"success\"\n| extend AccountName = tolower(split(UserPrincipalName, \"@\")[0]), WinSecEventDomain = \"-\"\n| where AccountName in (priv_users)\n| project-rename  ServiceOrSystem = AppDisplayName, ClientIP = IPAddress), \n(\n(SigninLogs //Sign-ins by non-compliant devices\n| where DeviceDetail.isCompliant == false\n| where ConditionalAccessStatus == \"success\"\n  | extend AccountName = tolower(split(UserPrincipalName, \"@\")[0]), WinSecEventDomain = \"-\"\n  | where AccountName in (priv_users)\n  | project-rename  ServiceOrSystem = AppDisplayName, ClientIP = IPAddress)\n),\n(SigninLogs //Sign-ins by unknown devices\n| where isempty(DeviceDetail.deviceId)\n| where AuthenticationRequirement == \"singleFactorAuthentication\"\n| where ResultType == \"0\"\n| where NetworkLocationDetails == \"[]\"\n| extend AccountName = tolower(split(UserPrincipalName, \"@\")[0]), WinSecEventDomain = \"-\"\n| where AccountName in (priv_users)\n| project-rename  ServiceOrSystem = AppDisplayName, ClientIP = IPAddress)\n)\n| project AccountCustomEntity =tolower(AccountName), AppId, Category, IPCustomEntity = ClientIP, CorrelationId, ResourceCustomEntity = ResourceId, Identity\n| join kind=leftouter (\n      IdentityInfo\n      | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n      | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n      | summarize\n          Tags = make_set(Tags, 1000),\n          GroupMembership = make_set(GroupMembership, 1000),\n          AssignedRoles = make_set(AssignedRoles, 1000),\n          UserType = make_set(UserType, 1000),\n          UserAccountControl = make_set(UserType, 1000)\n      by AccountUPN\n      | extend AccountCustomEntity = tolower(AccountUPN)\n) on AccountCustomEntity\n| join kind=leftouter (\n      BehaviorAnalytics\n      | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n      | where isnotempty(SourceIPAddress)\n      | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress\n      | project-rename IPCustomEntity = SourceIPAddress\n      | summarize\n        UsersInsights = make_set(UsersInsights, 1000),\n        DevicesInsights = make_set(DevicesInsights, 1000),\n        IPInvestigationPriority = sum(InvestigationPriority)\n      by IPCustomEntity\n) on IPCustomEntity\n| extend UEBARiskScore = IPInvestigationPriority\n| sort by UEBARiskScore desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests to unusual URL\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where UrlOriginal matches regex @'(10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})|(172\\.1[6-9]\\.\\d{1,3}\\.\\d{1,3})|(172\\.2[0-9]\\.\\d{1,3}\\.\\d{1,3})|(172\\.3[0-1]\\.\\d{1,3}\\.\\d{1,3})|(192\\.168\\.\\d{1,3}\\.\\d{1,3})'\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert audits your logging architecture for recommended data tables aligned to Basic Event Logging (EL1) of the Maturity Model for Event Log Management (M-21-31) standard. The alert triggers when recommended data tables in EL1 are not present.\n Topic: MaturityModelForEventLogManagementM2131"}, {"role": "assistant", "content": "let M2131Mapping = datatable(DataTable:string, MaturityLevel:string)\n[\n\"SigninLogs\",\t\"Event Logging (EL0)\",\n\"AADManagedIdentitySignInLogs\", \"Event Logging (EL0)\",\n\"AADServicePrincipalSignInLogs\",\t\"Event Logging (EL0)\",\n\"StorageBlobLogs\",\t\"Event Logging (EL0)\",\n\"StorageFileLogs\",\t\"Event Logging (EL0)\",\n\"AzureMetrics\",\t\"Event Logging (EL0)\",\n\"AuditLogs\",\t\"Event Logging (EL0)\",\n\"IdentityInfo\",\t\"Event Logging (EL0)\",\n\"CommonSecurityLog\",\t\"Event Logging (EL0)\",\n\"ThreatIntelligenceIndicator\",\t\"Event Logging (EL0)\",\n\"DeviceNetworkInfo\",\t\"Event Logging (EL0)\",\n\"DnsEvents\",\t\"Event Logging (EL0)\",\n\"DeviceNetworkEvents\",\t\"Event Logging (EL0)\",\n\"AzureDiagnostics\",\t\"Event Logging (EL0)\",\n\"Usage\",\t\"Event Logging (EL0)\",\n\"SecurityIncident\",\t\"Event Logging (EL0)\",\n\"SecurityAlert\",\t\"Event Logging (EL0)\",\n\"AzureActivity\",\t\"Event Logging (EL0)\",\n\"Heartbeat\",\t\"Event Logging (EL0)\",\n\"OfficeActivity\",\t\"Event Logging (EL0)\",\n\"SecurityEvent\",\t\"Event Logging (EL0)\",\n\"Syslog\",\t\"Event Logging (EL0)\",\n\"AWSCloudTrail\",\t\"Event Logging (EL0)\",\n\"GWorkspaceActivityReports\",\t\"Event Logging (EL0)\",\n\"AWSGuardDuty\",\t\"Event Logging (EL0)\",\n\"AWSVPCFlow\",\t\"Event Logging (EL0)\",\n\"Perf\",\t\"Basic Event Logging (EL1)\",\n\"SentinelHealth\",\t\"Basic Event Logging (EL1)\",\n\"DeviceLogonEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceNetworkEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceFileEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceRegistryEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceProcessEvents\",\t\"Basic Event Logging (EL1)\",\n\"VMConnection\",\t\"Basic Event Logging (EL1)\",\n\"EmailEvents\",\t\"Basic Event Logging (EL1)\",\n\"ThreatIntelligenceIndicator\",\t\"Basic Event Logging (EL1)\",\n\"SecurityRecommendation\",\t\"Basic Event Logging (EL1)\",\n\"DeviceProcessEvents\",\t\"Basic Event Logging (EL1)\",\n\"ConfigurationData\",\t\"Basic Event Logging (EL1)\",\n\"ConfigurationChange\",\t\"Basic Event Logging (EL1)\",\n\"GatewayDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"TunnelDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"IKEDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"RouteDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"PS2DiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"Event\",\t\"Basic Event Logging (EL1)\",\n\"SqlAtpStatus\",\t\"Basic Event Logging (EL1)\",\n\"ConstainerInstanceLog_CL\",\t\"Basic Event Logging (EL1)\",\n\"ContainerEvent_CL\",\t\"Basic Event Logging (EL1)\",\n\"InsightsMetrics\",\t\"Intermediate Event Logging (EL2)\",\n\"EmailUrlInfo\",\t\"Intermediate Event Logging (EL2)\",\n\"EmailAttachmentInfo\",\t\"Intermediate Event Logging (EL2)\",\n\"InformationProtectionLogs_CL\",\t\"Intermediate Event Logging (EL2)\",\n\"CloudAppEvents\",\t\"Intermediate Event Logging (EL2)\",\n\"ContainerInventory\",\t\"Intermediate Event Logging (EL2)\",\n\"Update\",\t\"Advanced Event Logging (EL3)\",\n\"BehaviorAnalytics\",\t\"Advanced Event Logging (EL3)\",\n\"Anomalies\",\t\"Advanced Event Logging (EL3)\",\n\"SecurityRegulatoryCompliance\",\t\"Advanced Event Logging (EL3)\"\n];\nUsage\n  | summarize Entries = count(), Size = sum(Quantity), last_log = datetime_diff(\"second\",now(), max(TimeGenerated)) by DataType\n  | join kind=fullouter(M2131Mapping) on $left.DataType == $right.DataTable\n  | project RecommendedDataTable=DataTable, ExistingDataTable=DataType, MaturityLevel, Size\n  | summarize Logged = countif(Size > 0), NotLogged = countif(isempty(Size)) by RecommendedDataTable, MaturityLevel\n  | where NotLogged > 0 and MaturityLevel == \"Basic Event Logging (EL1)\" and RecommendedDataTable <> \"Usage\"\n  //| where RecommendedDataTable <> \"Data Table Name\"\n  | project RecommendedDataTable, MaturityLevel, NotLogged, TimeObserved=now()\n  | extend CloudApplication = RecommendedDataTable\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies all classifications that have been detected on assets during a scan by Microsoft Purview within the last 24 hours.\n Topic: Microsoft Purview"}, {"role": "assistant", "content": "PurviewDataSensitivityLogs\n| where Classification != \"[]\" \n| where TimeGenerated > ago(24h)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create Microsoft Sentinel Incident When Firewall Is Tampered With\n Topic: IllumioSaaS"}, {"role": "assistant", "content": "Illumio_Auditable_Events_CL\n | union IllumioSyslogAuditEvents \n | where event_type has 'tampering'\n | extend ipaddress = action.src_ip,\n           hostname = created_by.agent.hostname,\n           ven_href = created_by.ven.href\n | project-away resource_changes, action, version\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects rare post requests to a single webserver location.\n Topic: Corelight"}, {"role": "assistant", "content": "let threshold = 3;\ncorelight_http\n| where method in~ ('POST', 'PUT')\n| where toint(status_code) !between (400 .. 499)\n| where request_body_len != 0 or response_body_len != 0\n| extend fe = extract(@'.*(\\.\\w+)$', 1, uri)\n| where fe in~ ('.aspx', '.asp', '.php', '.jsp', '.jspx', '.war', '.ashx', '.asmx', '.ascx', '.asx', '.cshtml', '.cfm', '.cfc', '.cfml', '.wss', '.do', '.action', '.pl', '.plx', '.pm', '.xs', '.t', '.pod', '.php-s', '.pht', '.phar', '.phps', '.php7', '.php5', '.php4', '.php3', '.phtml', '.py', '.rb', '.rhtml', '.cgi', '.dll', '.ayws', '.cgi', '.erb', '.rjs', '.hta', '.htc', '.cs', '.kt', '.lua', '.vbhtml')\n| summarize count() by uri, id_orig_h\n| where count_ < threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects policy violations.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where EventOriginalType has 'Policy Violation' or EventType has 'Policy Violation'\n| project TimeGenerated, DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query identifies hosts with WMI command runs, absent in last 7 days and filters for Impacket wmiexec arguments. Impacket filters can be adjusted for targeted hunting.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// Remove items from the artifacts list in order to expand hunting\n  let impacket_artifacts = dynamic([\"cmd.exe\", \"/c\", \"2>&1\", \"127.0.0.1\\\\ADMIN$\"]);\n  let starttime = todatetime('{{StartTimeISO}}');\n  let endtime = todatetime('{{EndTimeISO}}');\n  let lookback = starttime - 7d;\n  let wmi_hosts = (SecurityEvent\n  | where TimeGenerated between(lookback..starttime)\n  | where EventID == 4688\n  | where ParentProcessName endswith \"wmiprvse.exe\"\n  | where CommandLine has_all (impacket_artifacts)\n  | summarize by Computer);\n  SecurityEvent\n  | where TimeGenerated between(starttime..endtime)\n  | where EventID == 4688\n  | where Computer !in (wmi_hosts)\n  | where ParentProcessName endswith \"wmiprvse.exe\"\n  | where CommandLine has_all (impacket_artifacts)\n  | project-reorder TimeGenerated, Computer, CommandLine, Account\n  | extend NTDomain = tostring(split(Account,'\\\\',0)[0]), Name = tostring(split(Account,'\\\\',1)[0])\n  | extend Account_0_Name = Name\n  | extend Account_0_NTDomain = NTDomain\n  | extend Host_0_HostName = Computer\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects CVE-2021-34527 (PrintNightmare) external exploit\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "GCPCloudDNS\n| where Query has 'gentilkiwi'\n| extend DNSCustomEntity = Query, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows URLs list with client errors.\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "NGINXHTTPServer\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 400 and HttpStatusCode <= 499\n| summarize TopUrls = count() by (tostring(UrlOriginal))\n| top 20 by TopUrls desc \n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects command in URI\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "OracleWebLogicServerEvent\n| where UrlOriginal has_any ('cat%20/etc/passwd', '/etc/passwd', 'ping -i', '/usr/bin/id(', '%2f%75%73%72%2f%62%69%6e%2f%69%64', 'phpinfo()' , '%70%68%70%69%6e%66%6f%28%29', ';id', '%3b%69%64', '/bin/bash -c', '%2f%62%69%6e%2f%62%61%73%68%20%2d%63%27', '/bin/bash', '%2f%62%69%6e%2f%62%61%73%68', 'sleep(', '%73%6c%65%65%70%28', 'curl', '%63%75%72%6c', '&dir', '%26%64%69%72', '& dir', '%26%20%64%69%72', '<script>', '%3c%73%63%72%69%70%74%3e', 'eval(', '%65%76%61%6c%28', 'exec(', '%65%78%65%63%28' , 'whoami', '%77%68%6f%61%6d%69', 'wget', 'python', 'gcc' , 'uname', 'systeminfo', '%77%67%65%74', '%70%79%74%68%6f%6e', '%75%6e%61%6d%65', '%73%79%73%74%65%6d%69%6e%66%6f') \n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule detects IPAddress in the requested URL\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let lookback = 1d;\n// IPAddress Regex Pattern\nlet PlainText_IPv4_Regex_Pattern = @\"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b\";\n// Identified base64 encoded IPv4 addresses\nlet ipv4_encoded_identification_regex = @\"\\=([a-zA-Z0-9\\/\\+]*(?:(?:MC|Au|wL|MS|Eu|xL|Mi|Iu|yL|My|Mu|zL|NC|Qu|0L|NS|Uu|1L|Ni|Yu|2L|Ny|cu|3L|OC|gu|4L|OS|ku|5L){1}[a-zA-Z0-9\\/\\+]{2,4}){3}[a-zA-Z0-9\\/\\+\\=]*)\";\n// Extractes IPv4 addresses as hex values\nlet ipv4_decoded_hex_extract = @\"((?:(?:61|62|63|64|65|66|67|68|69|6a|6b|6c|6d|6e|6f|70|71|72|73|74|75|76|77|78|79|7a|41|42|43|44|45|46|47|48|49|4a|4b|4c|4d|4e|4f|50|51|52|53|54|55|56|57|58|59|5a|2f|2b|3d),){6,14}(?:61|62|63|64|65|66|67|68|69|6a|6b|6c|6d|6e|6f|70|71|72|73|74|75|76|77|78|79|7a|41|42|43|44|45|46|47|48|49|4a|4b|4c|4d|4e|4f|50|51|52|53|54|55|56|57|58|59|5a|2f|2b|3d))\";\nlet ipV4_FromPlainString = _Im_WebSession(starttime=ago(lookback), eventresult='Success')\n| where Url matches regex PlainText_IPv4_Regex_Pattern and not(ipv4_is_private(DstIpAddr)) // take URLs containing IPV4 address and the requests going to internet\n| project TimeGenerated, Url, SrcIpAddr, SrcUsername, SrcHostname\n| extend ip_candidate = extract(PlainText_IPv4_Regex_Pattern, 0, Url)\n| summarize EventEndTime = max(TimeGenerated), EventStartTime = min(TimeGenerated), Urls=tostring(make_set(Url,100)) by ip_candidate, SrcIpAddr, SrcUsername, SrcHostname;\nlet ipV4_FromEncodedString = _Im_WebSession(starttime=ago(lookback), eventresult='Success')\n// Identify requests with encoded IPv4 addresses\n| where Url matches regex ipv4_encoded_identification_regex and not(ipv4_is_private(DstIpAddr)) // take URLs containing encoded IPV4 address and the requests going to internet\n| project TimeGenerated, Url, SrcIpAddr, SrcUsername, SrcHostname\n// Extract IP candidates in their base64 encoded format, significantly reducing the dataset\n| extend extracted_encoded_ip_candidate = extract_all(ipv4_encoded_identification_regex, Url)\n// We could have more than one candidate, expand them out\n| mv-expand extracted_encoded_ip_candidate to typeof(string)\n| summarize EventStartTime=min(TimeGenerated), EventEndTime=max(TimeGenerated), make_set(Url,100) by extracted_encoded_ip_candidate, SrcIpAddr, SrcUsername, SrcHostname\n// Pad if we need to\n| extend extracted_encoded_ip_candidate = iff(strlen(extracted_encoded_ip_candidate) % 2 == 0, extracted_encoded_ip_candidate, strcat(extracted_encoded_ip_candidate, \"=\"))\n// Now decode the candidate to a long array, we cannot go straight to string as it cannot handle non-UTF8, we need to strip that first\n| extend extracted_encoded_ip_candidate = tostring(base64_decode_toarray(extracted_encoded_ip_candidate))\n// Extract the IP candidates from the array\n| extend hex_extracted = extract_all(ipv4_decoded_hex_extract, extracted_encoded_ip_candidate)\n// Expand, it's still possible that we might have more than 1 IP\n| mv-expand hex_extracted\n// Now we should have a clean string. We need to put it back into a dynamic array to convert back to a string.\n| extend hex_extracted = trim_end(\",\", tostring(hex_extracted))\n| extend hex_extracted = strcat(\"[\", hex_extracted, \"]\")\n| extend hex_extracted = todynamic(hex_extracted)\n// Convert the array back into a string\n| extend decoded_ip_candidate = unicode_codepoints_to_string(hex_extracted)\n| where decoded_ip_candidate matches regex PlainText_IPv4_Regex_Pattern\n| summarize by ip_candidate=decoded_ip_candidate, Urls=tostring(set_Url), EventStartTime, EventEndTime, SrcIpAddr, SrcUsername, SrcHostname;\nunion ipV4_FromPlainString,ipV4_FromEncodedString\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\")\n| extend IP_0_Address = SrcIpAddr\n| extend IP_1_Address = ip_candidate\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Host_0_HostName = SrcHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in CommonSecurityLog table from any Email IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$';\nThreatIntelligenceIndicator\n//Filtering the table for Email related IOCs\n| where isnotempty(EmailSenderAddress)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n    CommonSecurityLog | where TimeGenerated >= ago(dt_lookBack) and isnotempty(DestinationUserID)\n    // Filtering PAN Logs for specific event type to match relevant email entities\n    | where DeviceVendor == \"Palo Alto Networks\" and  DeviceEventClassID == \"wildfire\" and ApplicationProtocol in (\"smtp\",\"pop3\")\n    | extend DestinationUserID = tolower(DestinationUserID)\n    | where DestinationUserID matches regex emailregex\n    | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n)\non $left.EmailSenderAddress == $right.DestinationUserID\n| where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, DestinationUserID\n| project CommonSecurityLog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, EmailSenderName, EmailRecipient,\nEmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, DestinationUserID, DeviceEventClassID, LogSeverity, DeviceAction, SourceIP, SourcePort,\nDestinationIP, DestinationPort, Protocol, ApplicationProtocol\n| extend timestamp = CommonSecurityLog_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when root user login from uncommon IP address.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "let p_lookback = 14d;\nlet t_lookback = 1h;\nlet root_ips = VMwareESXi\n| where TimeGenerated between (ago(p_lookback) .. ago(t_lookback))\n| where SyslogMessage has_all ('UserLoginSessionEvent', 'root', 'logged in')\n| extend SrcIpAddr = extract(@'root@(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, SyslogMessage)\n| summarize makeset(SrcIpAddr);\nVMwareESXi\n| where TimeGenerated > ago(t_lookback)\n| where SyslogMessage has_all ('UserLoginSessionEvent', 'root', 'logged in')\n| extend SrcIpAddr = extract(@'root@(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, SyslogMessage)\n| where SrcIpAddr !in (root_ips)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows URLs list with server errors.\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 500 and HttpStatusCode <= 599\n| summarize TopUrls = count() by (tostring(UrlOriginal))\n| top 20 by TopUrls desc\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is designed to monitor Azure policies aligned with the Azure Security Benchmark Regulatory Compliance initiative. The alert triggers when policy compliance falls below 70% within a 1 week time-frame.\n Topic: AzureSecurityBenchmark"}, {"role": "assistant", "content": "let Last_Evaluated=SecurityRecommendation\n| join kind=fullouter(SecurityRegulatoryCompliance| where ComplianceStandard == \"Azure-Security-Benchmark\") on RecommendationName\n| summarize arg_max(TimeGenerated, *) by AssessedResourceId, RecommendationName\n| extend ComplianceDomain=iff(ComplianceControl contains \"NS.\", \"Network Security\", iff(ComplianceControl contains \"IM.\", \"Identity Management\", iff(ComplianceControl contains \"PA.\", \"Privileged Access\", iff(ComplianceControl contains \"DP.\", \"Data Protection\", iff(ComplianceControl contains \"AM.\", \"Asset Management\", iff(ComplianceControl contains \"LT.\", \"Logging & Threat Detection\", iff(ComplianceControl contains \"IR.\", \"Incident Response\", iff(ComplianceControl contains \"PV.\", \"Posture & Vulnerability Management\", iff(ComplianceControl contains \"ES.\", \"Endpoint Security\", iff(ComplianceControl contains \"BR.\", \"Backup & Recovery\", iff(ComplianceControl startswith \"DS.\", \"DevOps Security\", iff(ComplianceControl contains \"GS.\", \"Governance & Strategy\", \"Other\"))))))))))));\nSecurityRecommendation\n| join kind=fullouter(SecurityRegulatoryCompliance| where ComplianceStandard == \"Azure-Security-Benchmark\") on RecommendationName\n| extend ComplianceDomain=iff(ComplianceControl contains \"NS.\", \"Network Security\", iff(ComplianceControl contains \"IM.\", \"Identity Management\", iff(ComplianceControl contains \"PA.\", \"Privileged Access\", iff(ComplianceControl contains \"DP.\", \"Data Protection\", iff(ComplianceControl contains \"AM.\", \"Asset Management\", iff(ComplianceControl contains \"LT.\", \"Logging & Threat Detection\", iff(ComplianceControl contains \"IR.\", \"Incident Response\", iff(ComplianceControl contains \"PV.\", \"Posture & Vulnerability Management\", iff(ComplianceControl contains \"ES.\", \"Endpoint Security\", iff(ComplianceControl contains \"BR.\", \"Backup & Recovery\", iff(ComplianceControl startswith \"DS.\", \"DevOps Security\", iff(ComplianceControl contains \"GS.\", \"Governance & Strategy\", \"Other\"))))))))))))\n| summarize arg_max(TimeGenerated, *) by AssessedResourceId, RecommendationName\n| summarize Failed = countif(RecommendationState == \"Unhealthy\"), Passed = countif(RecommendationState == \"Healthy\"), Total = countif(RecommendationState == \"Healthy\" or RecommendationState == \"Unhealthy\") by ComplianceDomain\n| extend PassedControlsPercentage = (Passed/todouble(Total))*100\n| join (Last_Evaluated) on ComplianceDomain\n| project ComplianceDomain, Total, PassedControlsPercentage, Passed, Failed, LastEvaluated=TimeGenerated\n| summarize arg_max(LastEvaluated, *) by ComplianceDomain, Total, PassedControlsPercentage, Passed, Failed\n| where PassedControlsPercentage < 70 \n| sort by PassedControlsPercentage, Passed desc\n| extend RemediationLink = strcat('https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/22')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for files requested.\n Topic: Cloudflare"}, {"role": "assistant", "content": "Cloudflare\n| where TimeGenerated > ago(24h)\n| extend File = extract(@'\\/(\\w+\\.\\w+)', 1, ClientRequestURI)\n| summarize count() by File, SrcIpAddr\n| extend IPCustomEntity = SrcIpAddr\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in DeviceNetworkEvents Event data from any IP Indicator from TI.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet DeviceNetworkEvents_ = DeviceNetworkEvents\n| where isnotempty(RemoteIP)\n| where TimeGenerated > ago(dt_lookBack)\n| where ActionType !has \"ConnectionFailed\"\n| extend isPrivate = ipv4_is_private(RemoteIP)\n| where isPrivate != true;\nlet IPs = DeviceNetworkEvents_ | distinct RemoteIP | summarize make_list(RemoteIP);\nThreatIntelligenceIndicator\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n| where TimeGenerated >= ago(ioc_lookBack)\n| extend TI_ipEntity = coalesce(NetworkIP, EmailSourceIpAddress, NetworkDestinationIP, NetworkSourceIP)\n| where TI_ipEntity in (IPs)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\"\n| join kind=innerunique (DeviceNetworkEvents_) on $left.TI_ipEntity == $right.RemoteIP\n| summarize TimeGenerated = arg_max(TimeGenerated, *) by IndicatorId, TI_ipEntity, DeviceName\n// DeviceName, TI_ipEntity, RemoteUrl, InitiatingProcessAccountUpn\n| extend timestamp = TimeGenerated, Name = tostring(split(InitiatingProcessAccountUpn, '@', 0)[0]), UPNSuffix = tostring(split(InitiatingProcessAccountUpn, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An attacker could modify subnet attributes in order to access resources he couldnt access before.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where  EventName == \"ModifySubnetAttribute\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \nUserIdentityUserName, UserIdentityArn, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection focuses on identifying high-risk cross-cloud activities and sign-in anomalies that may indicate potential security threats. The query starts by analyzing Microsoft Entra ID Signin Logs to pinpoint instances where specific applications, risk levels, and result types align. It then correlates this information with relevant AWS CloudTrail events to identify activities across Azure and AWS environments.\n Topic: Multi Cloud Attack Coverage Essentials - Resource Abuse"}, {"role": "assistant", "content": "// Retrieve Azure AD SigninLogs within the last day\nSigninLogs \n// Filter for specific AppDisplayNames, ResultType, and Risk Levels\n| where AppDisplayName in (\"Azure Portal\", \"ADFS Trust\", \"Microsoft Azure PowerShell\")\n    and RiskLevelAggregated == \"high\"\n    and RiskLevelDuringSignIn == \"high\"\n// Summarize AppDisplayNames by relevant attributes\n| extend Result = iff(ResultType == 0, \"Successful Signin\", \"Failed Signin\")\n| summarize make_set(AppDisplayName)\n    by\n    IPAddress,\n    signInTime=TimeGenerated,\n    UserPrincipalName,\n    RiskEventTypes,\n    RiskEventTypes_V2\n// Inner join with AWS CloudTrail events\n| join kind=inner (\n    AWSCloudTrail\n    | where isempty(ErrorMessage)\n    | where EventSource in (\"iam.amazonaws.com\", \"identitystore.amazonaws.com\", \"workmail.amazonaws.com\", \"workdocs.amazonaws.com\")\n    // List of AWS event names\n    | where EventName in~ (\"CreateRole\", \"DeleteRole\", \"CreateUser\", \"CreateAccessKey\", \"DeleteAccessKey\", \"CreateGroup\", \"AddUserToGroup\", \"ChangePassword\", \"DeleteGroup\", \"DeleteUser\", \"RemoveUserFromGroup\", \"CreateVirtualMFADevice\", \"DeleteLoginProfile\", \"CreateOrganization\", \"SetDefaultMailDomain\", \"SetMailUserDetails\", \"CreateMailUser\", \"ResetPassword\", \"RegisterToWorkMail\", \"DisableMailUsers\", \"EnableMailUsers\", \"DeleteServiceSpecificCredential\", \"CreateServiceSpecificCredential\", \"UpdateAccountEmailAddress\", \"DeleteGroupPolicy\", \"UploadServerCertificate\")  \n    // Summarize relevant attributes\n    | summarize make_set(RequestParameters), make_set(ResponseElements)\n        by\n        SourceIpAddress,\n        UserIdentityArn,\n        UserIdentityType,\n        EventName,\n        EventTime=TimeGenerated,\n        EventSource\n    )\n    on $left.IPAddress == $right.SourceIpAddress  \n// Calculate time difference in hours between AWS event and Azure sign-in\n| extend timedef = datetime_diff(\"hour\", EventTime, signInTime)\n// Filter for time differences within a certain range\n| where timedef between (0 .. 8)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for Microsoft Defender AV detections related to  Zinc threat actor. In Microsoft Sentinel the SecurityAlerts table includes only the Device Name of the affected device, this query joins the DeviceInfo table to clearly connect other information such as Device group, ip, etc. \n This would allow the Microsoft Sentinel analyst to have more context related to the alert, if available.\n Reference: https://www.microsoft.com/security/blog/2022/09/29/zinc-weaponizing-open-source-software/\n Topic: Zinc Open Source"}, {"role": "assistant", "content": "let Zinc_threats = dynamic([\"Trojan:Win32/ZetaNile.A\", \"Trojan:Win32/EventHorizon.A\", \"Trojan:Win32/FoggyBrass.A\", \"Trojan:Win32/FoggyBrass.B\", \"Trojan:Win32/PhantomStar.A\",\"Trojan:Win32/PhantomStar.C\",\"TrojanDropper:Win32/PhantomStar.A\"]);\nDeviceInfo\n| extend DeviceName = tolower(DeviceName)\n| join kind=inner ( SecurityAlert\n| where ProviderName == \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| extend ThreatFamilyName = tostring(parse_json(ExtendedProperties).ThreatFamilyName)\n| where ThreatName in~ (Zinc_threats) or ThreatFamilyName in~ (Zinc_threats)\n| extend CompromisedEntity = tolower(CompromisedEntity)\n) on $left.DeviceName == $right.CompromisedEntity\n| summarize by DisplayName, ThreatName, ThreatFamilyName, PublicIP, AlertSeverity, Description, tostring(LoggedOnUsers), DeviceId, TenantId , bin(TimeGenerated, 1d), CompromisedEntity, tostring(LoggedOnUsers), ProductName, Entities\n| extend HostName = tostring(split(CompromisedEntity, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(CompromisedEntity, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects suspicious user agent strings used by exploit and pen test frameworks.\n Topic: Network Threat Protection Essentials"}, {"role": "assistant", "content": "let UserAgentList = \"Internet Explorer |Mozilla/4\\\\.0 \\\\(compatible; MSIE 6\\\\.0; Windows NT 5\\\\.1; SV1; InfoPath\\\\.2\\\\)|Mozilla/5\\\\.0 \\\\(Windows NT 10\\\\.0; Win32; x32; rv:60\\\\.0\\\\)|Mozilla/4\\\\.0 \\\\(compatible; Metasploit RSPEC\\\\)|Mozilla/4\\\\.0 \\\\(compatible; MSIE 6\\\\.1; Windows NT\\\\)|Mozilla/4\\\\.0 \\\\(compatible; MSIE 6\\\\.0; Windows NT 5\\\\.1\\\\)|Mozilla/4\\\\.0 \\\\(compatible; MSIE 8\\\\.0; Windows NT 6\\\\.0; Trident/4\\\\.0\\\\)|Mozilla/4\\\\.0 \\\\(compatible; MSIE 7\\\\.0; Windows NT 6\\\\.0; Trident/4\\\\.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; \\\\.N\\\\)|Mozilla/5\\\\.0 \\\\(Windows; U; Windows NT 5\\\\.1; en-US\\\\) AppleWebKit/525\\\\.13 \\\\(KHTML, like Gecko\\\\) Chrome/4\\\\.0\\\\.221\\\\.6 Safari/525\\\\.13|Mozilla/5\\\\.0 \\\\(compatible; MSIE 9\\\\.0; Windows NT 6\\\\.1; WOW64; Trident/5\\\\.0; MAAU\\\\)|Mozilla/5\\\\.0[^\\\\s]|Mozilla/4\\\\.0 \\\\(compatible; SPIPE/1\\\\.0\\\\)|Mozilla/5\\\\.0 \\\\(Windows NT 6\\\\.3; rv:39\\\\.0\\\\) Gecko/20100101 Firefox/35\\\\.0|Sametime Community Agent|X-FORWARDED-FOR|DotDotPwn v2\\\\.1|SIPDROID|wordpress hash grabber|exploit|okhttp/\";\n// Excluding for IIS, as the main malicious usage for okhttp that we have seen was in the OfficeActivity logs and this can create noise for IIS.\nlet ExcludeIIS = \"okhttp/\";\n(union isfuzzy=true\n(OfficeActivity\n| where ExtendedProperties has \"UserAgent\"\n| extend UserAgent = extractjson(\"$[0].Value\", ExtendedProperties, typeof(string))\n| where UserAgent matches regex UserAgentList\n| extend SourceIP = ClientIP\n| project TimeGenerated, Type, UserAgent, SourceIP\n),\n(\nW3CIISLog\n| extend UserAgent = replace('\\\\+', ' ', csUserAgent) \n| where UserAgent matches regex UserAgentList\n| where UserAgent !startswith ExcludeIIS\n| extend SourceIP = cIP\n| project TimeGenerated, Type, UserAgent, SourceIP\n),\n(\nAWSCloudTrail\n| where UserAgent matches regex UserAgentList\n| extend SourceIP = SourceIpAddress\n| project TimeGenerated, Type, UserAgent, SourceIP\n))\n| summarize min(TimeGenerated), max(TimeGenerated), count() by Type, UserAgent, SourceIP\n| extend timestamp = min_TimeGenerated\n| extend IP_0_Address = SourceIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies identity management actions whereby a user is added to a set of monitored privileged role collections. Topic: SAP BTP"}, {"role": "assistant", "content": "let monitored_rolecollections = dynamic([\"Subaccount Service Administrator\", \"Subaccount Administrator\", \"Connectivity and Destination Administrator\", \"Destination Administrator\", \"Cloud Connector Administrator\"]);\nSAPBTPAuditLog_CL\n| where Message.object has \"xs_rolecollection2user\"\n| extend ObjectId = parse_json((Message.object).id)\n| where ObjectId.crudType == \"CREATE\"\n| extend RoleCollection = ObjectId.rolecollection_name, TargetUserId = ObjectId.user_id\n| where RoleCollection in (monitored_rolecollections)\n| project UpdatedOn, UserName, RoleCollection, TargetUserId, Tenant, SpaceId, CloudApp = \"SAP BTP\"\n| extend AccountName = split(UserName, \"@\")[0], UPNSuffix = split(UserName, \"@\")[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows top connectors.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "ZPAEvent\n| where isnotempty(Connector) \n| where Connector != 0\n| summarize summ = sum(tolong(BytesRxInterface))by Connector\n| top 20 by summ desc \n| extend ProcessCustomEntity = Connector\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for OS Credentials dumping attacks\n Topic: Alsid For AD"}, {"role": "assistant", "content": "afad_parser\n| where MessageType == 2 and Codename == \"OS Credential Dumping: LSASS Memory\"\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Displays the client DNS request for any of the known domains linked to WannaCry.\nThese results may indicate a Wannacry/Wannacrypt ransomware infection.\nReference: Domain listing from https://pastebin.com/cRUii32E\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "let badDomains = dynamic([\"agrdwrtj.us\", \"bctxawdt.us\", \"cokfqwjmferc.us\", \"cxbenjiikmhjcerbj.us\", \"depuisgef.us\", \"edoknehyvbl.us\", \n\"enyeikruptiukjorq.com\", \"frullndjtkojlu.us\", \"gcidpiuvamynj.us\", \"gxrytjoclpvv.us\", \"hanoluexjqcf.us\", \"iarirjjrnuornts.us\", \n\"ifbjoosjqhaeqjjwaerri.us\", \"iouenviwrc.us\", \"kuuelejkfwk.us\", \"lkbsxkitgxttgaobxu.us\", \"nnnlafqfnrbynwor.us\", \"ns768.com\", \n\"ofdwcjnko.us\", \"peuwdchnvn.us\", \"pvbeqjbqrslnkmashlsxb.us\", \"pxyhybnyv.us\", \"qkkftmpy.us\", \"rkhlkmpfpoqxmlqmkf.us\", \n\"ryitsfeogisr.us\", \"srwcjdfrtnhnjekjerl.us\", \"thstlufnunxaksr.us\", \"udrgtaxgdyv.us\", \"w5q7spejg96n.com\", \"xmqlcikldft.us\", \n\"yobvyjmjbsgdfqnh.us\", \"yrwgugricfklb.us\", \"ywpvqhlqnssecpdemq.us\"]);\nDnsEvents\n| where Name in~ (badDomains)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by Computer, ClientIP, WannaCrypt_Related_Domain = Name\n| extend HostName = iff(Computer has '.', substring(Computer,0,indexof(Computer,'.')),Computer)\n| extend DnsDomain = iff(Computer has '.', substring(Computer,indexof(Computer,'.')+1),\"\")\n| extend DNS_0_DomainName = WannaCrypt_Related_Domain\n| extend IP_0_Address = ClientIP\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query hunts for file creation events linked to Dev-0322s compromise of ZOHO ManageEngine ADSelfService Plus software. It focuses on files dropped during post-exploitation activity. Hosts with higher risk scores should be prioritized.\n Topic: Legacy IOC based Threat Protection"}, {"role": "assistant", "content": "// Look for the specific files dropped by threat actor\nlet files = dynamic([\"C:\\\\ProgramData\\\\Microsoft\\\\Crypto\\\\RSA\\\\key.dat \", \"c:\\\\windows\\\\temp\\\\ccc.exe\"]);\nimFileEvent\n| where EventType =~ \"FileCreated\"\n| where FileName endswith \"elrs.exe\" or FilePath has_any (files)\n// Increase the risk score of command accessing file also seen\n| join kind=leftouter (imProcess\n| where CommandLine contains \"cmd /c elrs.exe\") on DvcId\n| extend RiskScore = iif(isnotempty(DvcId1), 1.0, 0.5)\n| project-reorder TimeGenerated, DvcId, FileName, FilePath, CommandLine, RiskScore\n// Increase risk score if recent alerts for the host\n| join kind=leftouter (SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| mv-expand todynamic(Entities)\n| extend DvcId = tostring(parse_json(Entities).MdatpDeviceId)\n| where isnotempty(DvcId)\n// Higher risk score are for Defender alerts related to threat actor\n| extend AlertRiskScore = iif(ThreatName has_any (\"Zebracon\", \"Trojan:MSIL/Gacker.A!dha\", \"Backdoor:MSIL/Kokishell.A!dha\"), 1.0, 0.5)\n| project DvcId, AlertRiskScore) on DvcId\n| extend AlertRiskScore = iif(isempty(AlertRiskScore), 0.0, AlertRiskScore)\n// Create agregate risk score\n| extend RiskScore = RiskScore + AlertRiskScore\n| extend timestamp = TimeGenerated, HostCustomEntity = Dvc, AccountCustomEntity = AccountName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible SSH scanning activity.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "let threshold = 5;\nOCILogs\n| where EventType contains 'vcn.flowlogs'\n| where data_action_s =~ 'REJECT'\n| where ipv4_is_private(DstIpAddr)\n| where ipv4_is_private(SrcIpAddr) == False\n| where DstPortNumber == 22\n| summarize p_count = dcount(DstIpAddr) by SrcIpAddr, bin(TimeGenerated, 5m)\n| where p_count > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The VMware SD-WAN Edge appliance received packets potentially part of an IP Fragmentation attack or indicating an MTU mismatch.\n\nAn IP fragmentation attack is a cyberattack that exploits how IP packets are fragmented and reassembled. IP fragmentation is a process by which large IP packets are broken down into smaller packets to transmit them over networks with smaller Maximum Transmission Unit (MTU) sizes.\n\nAttackers can exploit IP fragmentation in various ways, for example, Denial-of-service attacks, address spoofing, or even information disclosure.\n\nThis analytics rule analyzes Syslog streams; these alerts are not reported by default if Search API is used. Topic: VMware SD-WAN and SASE"}, {"role": "assistant", "content": "Syslog\n| where SyslogMessage contains \"VCF Drop\"\n| where SyslogMessage contains \"packet too big\"\n| project-rename EdgeName=HostName\n| project-away Computer, HostIP, SourceSystem, Type\n| extend OverlaySegmentName = extract(\"SEGMENT_NAME=(.+) COUNT=\", 1, SyslogMessage)\n| extend IpProtocol = extract(\"PROTO=(.+) SRC=\", 1, SyslogMessage)\n| extend SrcIpAddress = extract(\"SRC=(.+) DST=\", 1, SyslogMessage)\n| extend DstIpAddress = extract(\"DST=(.+) REASON=\", 1, SyslogMessage)\n| extend EdgeFwAction = extract(\"ACTION=(.+) SEGMENT=\", 1, SyslogMessage)\n| extend SyslogTag = extract(\"^(.+): ACTION=\", 1, SyslogMessage)\n| extend pcktCount = extract(\"COUNT=([0-9]+)$\", 1, SyslogMessage)\n| project\n    TimeGenerated,\n    EdgeFwAction,\n    EdgeName,\n    SrcIpAddress,\n    IpProtocol,\n    DstIpAddress,\n    pcktCount,\n    SyslogTag\n\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect if a server oriented cmdlet and a user oriented cmdlet that are monitored are launched by the same user in the same server within a 10 minutes timeframe\n Topic: Microsoft Exchange Security - Exchange On-Premises"}, {"role": "assistant", "content": "let timeframe = 1d;\nlet spanoftime = 10m;\nlet threshold = 0;\nExchangeAdminAuditLogs \n  | where TimeGenerated > ago(2 * timeframe)\n  | where isempty(UserOriented)\n  | project serverExecutedTime = TimeGenerated,\n    ServerCmdlet = CmdletName,\n    ServerCmdletParams = CmdletParameters,\n    Computer,\n    Caller,\n    ServerCmdletTargetObject = TargetObject\n  | join kind= inner (\n      ExchangeAdminAuditLogs\n      | where TimeGenerated > ago(timeframe)\n      | where UserOriented =~ 'Yes'\n      | project userExecutedTime = TimeGenerated,\n        UserCmdlet = CmdletName,\n        UserCmdletParams = CmdletParameters,\n        Computer,\n        Caller,\n        UserCmdletTargetObject = TargetObject,\n        userPrincipalName,\n        objectGUID,\n        sAMAccountName,\n        IsVIP)\n    on Computer, Caller\n  | where userExecutedTime - serverExecutedTime < spanoftime\n  | extend TimeDelta = userExecutedTime - serverExecutedTime\n  | extend TimeDeltaInverse = serverExecutedTime - userExecutedTime\n  | where tolong(TimeDelta) >= threshold or tolong(TimeDeltaInverse) >= threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The policy detects IaaS policies that no one in the account has been using during the last X days. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"Unused IaaS Policy\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "IP addresses of broadband links that usually indicates users attempting to access their home network, for example for a remote session to a home computer.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "Cisco_Umbrella\n| where EventType == 'proxylogs'\n| where DvcAction =~ 'Allowed'\n| where UrlCategory has_any ('Dynamic and Residential', 'Personal VPN')\n| project TimeGenerated, SrcIpAddr, DstIpAddr, Identities \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies processes spawned with high integrity from dllhost.exe with a command line that contains one of three specific CLSID GUIDs.\n Topic: FalconFriday"}, {"role": "assistant", "content": "DeviceProcessEvents\n| where InitiatingProcessFileName =~ \"dllhost.exe\"\n| where ProcessIntegrityLevel == \"High\"\n| where InitiatingProcessCommandLine has_any (\"E9495B87-D950-4AB5-87A5-FF6D70BF3E90\", \"3E5FC7F9-9A51-4367-9063-A120244FBEC7\", \"D2E7041B-2927-42fb-8E9F-7CE93B6DC937\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "When a Knox device user clicks on URLs or links detected as suspicious (potentially phishing or malicious) with a high degree of confidence.\n Topic: Samsung Knox Asset Intelligence"}, {"role": "assistant", "content": "Samsung_Knox_User_CL \n| where Name == \"SUSPICIOUS_URL_ACCESSED\" \nand ConfidenceScore > 0.9\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when device changes IP address in last 24 hours.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "let lbtime_48h = 48h;\nlet lbtime_24h = 24h;\nCiscoISEEvent\n| where TimeGenerated between (ago(lbtime_48h) .. ago(lbtime_24h))\n| where notempty(DvcIpAddr) and notempty(DvcHostname)\n| summarize knownIPs = make_set(DvcIpAddr) by DvcHostname\n| join (CiscoISEEvent\n      | where TimeGenerated > ago(lbtime_24h)\n      | where notempty(DvcIpAddr) and notempty(DvcHostname)\n      | summarize evts = count() by DvcHostname, DvcIpAddr\n      | project-away evts) on DvcHostname\n| project-away DvcHostname1\n| where knownIPs !contains DvcIpAddr\n| extend HostCustomEntity = DvcHostname\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when an RDP connection is made to multiple systems and above the normal connection count for the previous 7 days.\nConnections from the same system with the same account within the same day.\nRDP connections are indicated by the EventID 4624 with LogonType = 10\n Topic: Detections"}, {"role": "assistant", "content": "let endtime = 1d;\nlet starttime = 8d;\nlet threshold = 2.0;\n(union isfuzzy=true\n(SecurityEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4624 and LogonType == 10\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ComputerCountToday = dcount(Computer), ComputerSet = makeset(Computer), ProcessSet = makeset(ProcessName)\nby Account = tolower(Account), IpAddress, AccountType, Activity, LogonTypeName),\n(WindowsEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4624\n| extend LogonType = tostring(EventData.LogonType)\n| where  LogonType == 10\n| extend ProcessName = tostring(EventData.ProcessName)\n| extend Account = strcat(tostring(EventData.TargetDomainName),\"\\\\\", tostring(EventData.TargetUserName))\n| extend IpAddress = tostring(EventData.IpAddress)\n| extend TargetUserSid = tostring(EventData.TargetUserSid)\n| extend AccountType=case(Account endswith \"$\" or TargetUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(TargetUserSid), \"\", \"User\")\n| extend Activity=\"4624 - An account was successfully logged on.\"\n| extend LogonTypeName=\"10 - RemoteInteractive\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ComputerCountToday = dcount(Computer), ComputerSet = makeset(Computer), ProcessSet = makeset(ProcessName)\nby Account = tolower(Account), IpAddress, AccountType, Activity, LogonTypeName)\n)\n| join kind=inner (\n(union isfuzzy=true\n(SecurityEvent\n| where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime)\n| where EventID == 4624 and LogonType == 10\n| summarize ComputerCountPrev7Days = dcount(Computer) by Account = tolower(Account), IpAddress\n),\n( WindowsEvent\n| where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime)\n| where EventID == 4624  and EventData has (\"10\")\n| extend LogonType = toint(EventData.LogonType)\n| where  LogonType == 10\n| extend Account = strcat(tostring(EventData.TargetDomainName),\"\\\\\", tostring(EventData.TargetUserName))\n| extend IpAddress = tostring(EventData.IpAddress)\n| summarize ComputerCountPrev7Days = dcount(Computer) by Account = tolower(Account), IpAddress)\n)\n) on Account, IpAddress\n| extend Ratio = iff(isempty(ComputerCountPrev7Days), toreal(ComputerCountToday), ComputerCountToday / (ComputerCountPrev7Days * 1.0))\n// Where the ratio of today to previous 7 days is more than double.\n| where Ratio > threshold\n| project StartTime, EndTime, Account, IpAddress, ComputerSet, ComputerCountToday, ComputerCountPrev7Days, Ratio, AccountType, Activity, LogonTypeName, ProcessSet\n| extend AccountName = tostring(split(Account, @\"\\\")[1]), AccountNTDomain = tostring(split(Account, @\"\\\")[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows abnormal total bytes size.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "let Average_Body_Bytes = toscalar(ZPAEvent\n| summarize Avg_Size = avg(tolong(ZENTotalBytesRxConnector)));\nZPAEvent\n| where tolong(ZENTotalBytesRxConnector) > 1000*Average_Body_Bytes\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a threat was not blocked on a host.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "McAfeeEPOEvent\n| where ThreatActionTaken in~ ('none', 'IDS_ACTION_WOULD_BLOCK')\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Exploitation Attempt of IoT device - Attack detection Topic: Cynerio"}, {"role": "assistant", "content": "CynerioEvent_CL\n| where TimeGenerated > ago(24h)\n| where module_s == 'IDS'\n| where title_s == 'Exploitation Attempt'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests where user agent is empty.\n Topic: Cloudflare"}, {"role": "assistant", "content": "Cloudflare\n| where isempty(HttpUserAgentOriginal)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert leverages Defender for IoT to detect PLC operating mode changes indicating the PLC is potentially insecure. If the PLC is compromised, devices that interact with it may be impacted. This may affect overall system security and safety.\n Topic: IoTOTThreatMonitoringwithDefenderforIoT"}, {"role": "assistant", "content": "SecurityAlert\n| where ProviderName == \"IoTSecurity\"\n| where AlertName has \"PLC Operating Mode Changed\"\n| extend ExtendedProperties = parse_json(ExtendedProperties)\n| where tostring(ExtendedProperties.isNew) == \"True\"\n| extend DeviceId = tostring(ExtendedProperties.DeviceId), \n         SourceDeviceAddress = tostring(ExtendedProperties.SourceDeviceAddress), \n         DestDeviceAddress = tostring(ExtendedProperties.DestinationDeviceAddress), \n         RemediationSteps = tostring(parse_json(RemediationSteps)[0]), \n         Protocol = tostring(ExtendedProperties.Protocol), \n         AlertManagementUri = tostring(ExtendedProperties.AlertManagementUri)\n| project\n  TimeGenerated,\n  DeviceId,\n  ProductName,\n  ProductComponentName,\n  AlertSeverity,\n  AlertName,\n  Description,\n  Protocol,\n  SourceDeviceAddress,\n  DestDeviceAddress,\n  RemediationSteps,\n  Tactics,\n  Entities,\n  VendorOriginalId,\n  AlertLink,\n  AlertManagementUri,\n  Techniques\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates Incidents for Suspicious events sourced from the Contrast Protect agent.\n Topic: Contrast Protect"}, {"role": "assistant", "content": "let extract_data=(a:string, k:string) {\n  parse_urlquery(replace(@';', @'&', a))[\"Query Parameters\"][k]\n};\n\nCommonSecurityLog \n| where DeviceVendor == \"Contrast Security\"\n| where AdditionalExtensions contains \"SUSPICIOUS\"\n| extend DeviceProduct\n| extend SourceIP\n| extend DeviceVersion\n| extend Activity\n| extend ApplicationProtocol\n| extend RequestURL\n| extend RequestMethod\n| extend Rule = extract_data(AdditionalExtensions, 'pri')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checks if Sonrai tickets have been assigned. \nIt uses the action type to check if a ticket has been assigned\n Topic: SonraiSecurity"}, {"role": "assistant", "content": "Sonrai_Tickets_CL\n| where action_d == 4\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches actions made by user.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let lbtime = 24h;\nOracleDatabaseAuditEvent\n| where TimeGenerated > ago(lbtime)\n| where isnotempty(DbAction)\n| where isnotempty(DstUserName)\n| where DbAction in~ ('SELECT', 'DROP', 'INSERT')\n| extend TableName = replace(@'[,\\(\\)]', '', extract(@'(?i)SELECT(.*?)FROM\\s(.*?)\\s', 2, Action))\n| where isnotempty(TableName)\n| where TableName !~ 'select'\n| summarize TablesAffected = makeset(TableName) by DstUserName, DbAction\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of files requested\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "NGINXHTTPServer\n| where TimeGenerated > ago(24h)\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| summarize TotalFile = count() by File\n| top 20 by TotalFile desc\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects the installation of a Windows service that contains artifacts from credential dumping tools such as Mimikatz.\n Topic: Attacker Tools Threat Protection Essentials"}, {"role": "assistant", "content": "// Enter a reference list of decoy users (usernames) \"Case Sensitive\"\nlet MaliciousServiceArtifacts = dynamic ([\"fgexec\",\"cachedump\",\"mimikatz\",\"mimidrv\",\"wceservice\",\"pwdump\"]);\nEvent\n| where Source == \"Service Control Manager\" and EventID == 7045\n| parse EventData with * 'ServiceName\">' ServiceName \"<\" * 'ImagePath\">' ImagePath \"<\" *\n| where ServiceName has_any (MaliciousServiceArtifacts) or ImagePath has_any (MaliciousServiceArtifacts)\n| parse EventData with * 'AccountName\">' AccountName \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, ServiceName, ImagePath, AccountName\n| extend HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects mails with malicious attachments which were not blocked.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where NetworkDirection =~ 'Incoming'\n| where SimplifiedDeviceAction =~ 'DELIVERED'\n| where tostring(AdditionalFields) has 'ESAAMPVerdict'\n| extend amp_verdict = extract(@'ESAAMPVerdict\":\"(NOT_EVALUATED|CLEAN|FA_PENDING|UNKNOWN|SKIPPED|UNSCANNABLE|LOW_RISK|MALICIOUS)\"', 1, tostring(AdditionalFields))\n| where amp_verdict =~ 'MALICIOUS'\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in SigninLogs table from any Email IOC from ThreatConnect TI\n Topic: ThreatConnect"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$';\nlet aadFunc = (tableName:string){\nThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where ExpirationDateTime > now() and Active == true\n// Filter out non ThreatConnect TI Sources\n| where SourceSystem startswith \"ThreatConnect-\"\n//Filtering the table for Email related IOCs\n| where isnotempty(EmailSenderAddress)\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n    table(tableName) | where TimeGenerated >= ago(dt_lookBack) and isnotempty(UserPrincipalName)\n    //Normalizing the column to lower case for exact match with EmailSenderAddress column\n    | extend UserPrincipalName = tolower(UserPrincipalName)\n    | where UserPrincipalName matches regex emailregex\n    | extend Status = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n    | extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n    | extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city), Region = tostring(LocationDetails.countryOrRegion)\n    // renaming timestamp column so it is clear the log this came from SigninLogs table\n    | extend SigninLogs_TimeGenerated = TimeGenerated, Type = Type\n)\non $left.EmailSenderAddress == $right.UserPrincipalName\n| where SigninLogs_TimeGenerated < ExpirationDateTime\n| summarize SigninLogs_TimeGenerated = arg_max(SigninLogs_TimeGenerated, *) by IndicatorId, UserPrincipalName\n| project SigninLogs_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nEmailSenderName, EmailRecipient, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, IPAddress, UserPrincipalName, AppDisplayName,\nStatusCode, StatusDetails, NetworkIP, NetworkDestinationIP, NetworkSourceIP, Type\n| extend Name = tostring(split(UserPrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(UserPrincipalName, '@', 1)[0])\n| extend timestamp = SigninLogs_TimeGenerated\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for requests to TOR resources.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "GCPCloudDNS\n| where TimeGenerated > ago(24h)\n| where Query endswith '.onion'\n| extend DNSCustomEntity = Query, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query searches for modifications to system files or directories by a non system account (User Account). \n Topic: Malware Protection Essentials"}, {"role": "assistant", "content": "// List of system file and directories to monitor\nlet systemFilesAndDirs = dynamic([\n  \"\\\\Windows\\\\System32\", \n  \"//etc\", \n  \"//bin\", \n  \"//root\", \n  \"//lib\", \n  \"//usr\", \n  \"//dev\"\n]);\nlet systemUserTypes = dynamic([\n  'System',\n  'Service',\n  'Machine',\n  'Other'\n]);\n_ASim_FileEvent\n| where EventType in ('FileCreated' , 'FileModified')\n| where FilePath has_any (systemFilesAndDirs) and ActorUserType !in (systemUserTypes)\n| where isnotempty(ActorUserType)\n| project TimeGenerated, DvcHostname, DvcDomain, User, ActingProcessId, ActingProcessName, CommandLine, FileName, FilePath, Hash, HashType\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated) by DvcHostname, DvcDomain, User, ActingProcessId, ActingProcessName, CommandLine, FileName, FilePath, Hash, HashType\n| extend Username = iff(User contains '@', tostring(split(User, '@')[0]), User)\n| extend UPNSuffix = iff(User contains '@', tostring(split(User, '@')[1]), '')\n| extend Username = iff(User contains '\\\\', tostring(split(User, '\\\\')[1]), Username)\n| extend NTDomain = iff(User contains '\\\\', tostring(split(User, '\\\\')[0]), '')\n| extend Host_0_HostName = DvcHostname\n| extend Host_0_DnsDomain = DvcDomain\n| extend Host_0_NTDomain = NTDomain\n| extend Account_0_Name = Username\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend File_0_Name = FileName\n| extend File_0_Directory = FilePath\n| extend FileHash_0_Algorithm = HashType\n| extend FileHash_0_Value = Hash\n| extend Process_0_ProcessId = ActingProcessId\n| extend Process_0_CommandLine = CommandLine\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rare applications.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "CiscoWSAEvent\n| where TimeGenerated > ago(24h)\n| summarize count() by AvcApplicationName, SrcUserName\n| order by count_ asc\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection triggers when there is a Signin burst from multiple locations in GitHub (Entra ID SSO).\n This detection is based on configurable threshold which can be prone to false positives. To view the anomaly based equivalent of thie detection, please see here https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Microsoft%20Entra%20ID/Analytic%20Rules/AnomalousUserAppSigninLocationIncrease-detection.yaml. \n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let locationThreshold = 1;\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where AppDisplayName =~ \"GitHub.com\"\n| where ResultType == 0\n| summarize CountOfLocations = dcount(Location), Locations = make_set(Location,100), BurstStartTime = min(TimeGenerated), BurstEndTime = max(TimeGenerated) by UserPrincipalName, Type\n| where CountOfLocations > locationThreshold\n| extend timestamp = BurstStartTime\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The policy detects chains of more than 3 roles in the account, this is a misconfiguration that can enable lateral movement. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"Chain of 3 or more roles\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when admin user is deleted.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where DvcAction =~ \"admin_delete\"\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Extensions add additional features to Azure DevOps. An attacker could use a malicious extension to conduct malicious activity. \nThis query looks for new extensions that are not from a configurable list of approved publishers.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "let allowed_publishers = dynamic([]);\nAzureDevOpsAuditing\n| where OperationName =~ \"Extension.Installed\"\n| extend ExtensionName = tostring(Data.ExtensionName)\n| extend PublisherName = tostring(Data.PublisherName)\n| where PublisherName !in (allowed_publishers)\n| project-reorder TimeGenerated, OperationName, ExtensionName, PublisherName, ActorUPN, IpAddress, UserAgent, ScopeDisplayName, Data\n| extend timestamp = TimeGenerated\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Some TLDs, often linked to malware due to ease of obtaining, may be undesirable for enterprises. The clientCount column shows domain usage across the estate. Assumes default squid log format.\n Topic: Syslog"}, {"role": "assistant", "content": "\nlet suspicious_tlds = dynamic([ \".click\", \".club\", \".download\",  \".xxx\", \".xyz\"]);\nSyslog\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n         SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n         Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n         HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n         User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n         RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n         Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where TLD in (suspicious_tlds)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), clientCount = dcount(SourceIP) by TLD, User, URL\n| order by TLD asc, clientCount desc\n| extend timestamp = StartTime, AccountCustomEntity = User, URLCustomEntity = URL\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects logins from different geo locations.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where EventType =~ 'access'\n| where EventResultDetails startswith 'Simultaneous logins from geographically distant locations'\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query is designed to monitor Azure policies aligned with the Continuous Diagnostics & Mitigation (CDM) Program. It provides a policy check assessment of current CDM policy status across capability areas.\n Topic: ContinuousDiagnostics&Mitigation"}, {"role": "assistant", "content": "SecurityRecommendation\n| where RecommendationDisplayName <> \"\"\n| extend MaturityLevel=iff(RecommendationDisplayName has_any(\"log\", \"defender\", \"asset\", \"arc\"), \"Hardware Asset Management (HWAM)\",\n    iff(RecommendationDisplayName has_any(\"allow\", \"software\", \"application\"), \"Software Asset Management (SWAM)\",\n    iff(RecommendationDisplayName has_any(\"account\", \"user\", \"identity\", \"trust\"), \"User Trust (TRUST)\",\n    iff(RecommendationDisplayName has_any(\"access\", \"auth\", \"key\", \"cert\", \"token\"), \"Credentials & Authenticators (CRED)\",\n    iff(RecommendationDisplayName has_any(\"priv\", \"admin\", \"root\"), \"Privileges (PRIV)\",\n    iff(RecommendationDisplayName has_any(\"network\", \"internet\", \"traffic\", \"firewall\", \"intrusion\", \"bound\", \"tls\", \"gateway\", \"subnet\", \"web\", \"url\", \"proxy\", \"just\", \"port\", \"JIT\", \"http\"), \"Boundary Protection (BOUND)\",\n    iff(RecommendationDisplayName has_any(\"event\", \"agent\", \"incident\", \"back\", \"privacy\", \"audit\", \"collect\"), \"Manage Events (MNGEVT)\",\n    iff(RecommendationDisplayName has_any(\"edr\", \"malware\", \"endpoint protection\", \"detect\", \"respon\"), \"Endpoint Detection & Response (EDR)\",\n    iff(RecommendationDisplayName has_any(\"aks\", \"contain\", \"kube\", \"supply\"), \"Design & Build in Security (DBS)\",\n    iff(RecommendationDisplayName has_any(\"data\", \"storage\", \"sql\", \"cmk\", \"key\"), \"Data Protection Management (DPM)\", \"Other\"))))))))))\n| where MaturityLevel in ('Hardware Asset Management (HWAM)', 'Software Asset Management (SWAM)', 'User Trust (TRUST)', 'Credentials & Authenticators (CRED)', 'Privileges (PRIV)', 'Boundary Protection (BOUND)', 'Manage Events (MNGEVT)', 'Endpoint Detection & Response (EDR)', 'Design & Build in Security (DBS)', 'Data Protection Management (DPM)')\n| summarize arg_max(TimeGenerated, *) by AssessedResourceId, RecommendationDisplayName\n| summarize\n    Failed = countif(RecommendationState == \"Unhealthy\"),\n    Passed = countif(RecommendationState == \"Healthy\"),\n    NotApplicable = countif(RecommendationState == \"NotApplicable\" or RecommendationState == \"Removed\"),\n    Applicable = countif(RecommendationState == \"Unhealthy\" or RecommendationState == \"Healthy\"),\n    Total = countif(RecommendationState == \"Unhealthy\" or RecommendationState == \"Healthy\" or RecommendationState == \"NotApplicable\" or RecommendationState == \"Removed\")\n    by MaturityLevel\n| extend PassedControls = (Passed / todouble(Applicable)) * 100\n| project MaturityLevel, Total, PassedControls, Passed, Failed, Applicable, NotApplicable\n| sort by Total, Passed desc\n| project CapabilityArea=MaturityLevel, Total, PassedControls, Passed, Failed, LastObserved=now()\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query will alert on any Impossible travel activity in correlation with mailbox permission tampering followed by account being added to a PIM managed privileged group.\nEnsure this impossible travel incident with increase of privileges is legitimate in your environment.\n Topic: Detections"}, {"role": "assistant", "content": "SecurityAlert \n| where AlertName == \"Impossible travel activity\"\n| extend Extprop = parsejson(Entities)\n| mv-expand Extprop\n| extend Extprop = parsejson(Extprop)\n| extend CmdLine = iff(Extprop['Type']==\"process\", Extprop['CommandLine'], '')\n| extend File = iff(Extprop['Type']==\"file\", Extprop['Name'], '')\n| extend Account = Extprop['Name']\n| extend Domain = Extprop['UPNSuffix']\n| extend Account = iif(isnotempty(Domain) and Extprop['Type']==\"account\", tolower(strcat(Account, \"@\", Domain)), iif(Extprop['Type']==\"account\", tolower(Account), \"\"))\n| extend IpAddress = iff(Extprop[\"Type\"] == \"ip\",Extprop['Address'], '')\n| extend Process = iff(isnotempty(CmdLine), CmdLine, File)\n| project TimeGenerated,Account,IpAddress,CompromisedEntity,Description,ProviderName,ResourceId\n| join kind=inner\n(\nOfficeActivity\n| where Operation =~ \"Add-MailboxPermission\"\n| extend value = tostring(parse_json(Parameters)[3].Value)\n| where value contains \"FullAccess\"\n| where ResultStatus == \"True\"\n| project Parameters,TimeGenerated,value,RecordType,Operation,OrganizationId,UserType,UserKey,OfficeWorkload,ResultStatus,OfficeObjectId,UserId,ClientIP,ExternalAccess,OriginatingServer,OrganizationName,TenantId,ElevationTime,SourceSystem,OfficeId,OfficeTenantId,Type,SourceRecordId\n) on $left.Account == $right.UserId\n| join kind=inner\n(\nAuditLogs\n| where ActivityDisplayName =~ \"Add eligible member to role in PIM requested (timebound)\"\n| where AADOperationType =~ \"CreateRequestEligibleRole\"\n| where TargetResources has_any (\"-PRIV\", \"Administrator\", \"Security\")\n| extend BuiltinRole = tostring(parse_json(TargetResources[0].displayName))\n| extend CustomGroup = tostring(parse_json(TargetResources[3].displayName))\n| extend TargetAccount = tostring(parse_json(TargetResources[2].displayName))\n| extend Initiatedby = Identity\n| project TimeGenerated, ActivityDisplayName, AADOperationType, Initiatedby, TargetAccount, BuiltinRole, CustomGroup, LoggedByService, Result, ResourceId, Id\n| sort by TimeGenerated desc\n) on $left.UserId == $right.Initiatedby\n| extend AccountName = tostring(split(Initiatedby, \"@\")[0]), AccountUPNSuffix = tostring(split(Initiatedby, \"@\")[1])\n| project AADOperationType, ActivityDisplayName,AccountName, AccountUPNSuffix, Id,ResourceId,IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies user role altered on SQL Server. It relies on the SQLEvent KQL Parser function.\n Topic: Microsoft Windows SQL Server Database Audit"}, {"role": "assistant", "content": "// SQLEvent is not the table name, it is the function name that should already be imported into your workspace.\n// The underlying table where the data exists is the Event table.\n// This query looking for Alter role commands and extracts username which was altered and target objectName\nSQLEvent\n| where Statement has_all (\"Alter role\", \"add member\")\n| parse Statement with * \"ADD MEMBER [\" TargetUser:string \"]\" *\n| project TimeGenerated, Computer, Action, ClientIP, CurrentUser, DatabaseName, TargetUser, ObjectName, Statement\n| extend Name = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 0)[0]), CurrentUser)\n| extend UPNSuffix = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 1)[0]), '')\n| extend Name = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 1)[0]), Name)\n| extend NTDomain = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 0)[0]), '')\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query identifies unusual logon events outside a users normal hours by comparing with the last 14 days logon activity, flagging anomalies based on historical patterns.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet AllLogonEvents = materialize(\nSecurityEvent\n| where TimeGenerated between (lookback..starttime)\n| where EventID in (4624, 4625)\n| where LogonTypeName in~ ('2 - Interactive','10 - RemoteInteractive')\n| where AccountType =~ 'User'\n| extend HourOfLogin = hourofday(TimeGenerated), DayNumberofWeek = dayofweek(TimeGenerated)\n| extend DayofWeek = case(\nDayNumberofWeek == \"00:00:00\", \"Sunday\",\nDayNumberofWeek == \"1.00:00:00\", \"Monday\",\nDayNumberofWeek == \"2.00:00:00\", \"Tuesday\",\nDayNumberofWeek == \"3.00:00:00\", \"Wednesday\",\nDayNumberofWeek == \"4.00:00:00\", \"Thursday\",\nDayNumberofWeek == \"5.00:00:00\", \"Friday\",\nDayNumberofWeek == \"6.00:00:00\", \"Saturday\",\"InvalidTimeStamp\")\n// map the most common ntstatus codes\n| extend StatusDesc = case(\nStatus =~ \"0x80090302\", \"SEC_E_UNSUPPORTED_FUNCTION\",\nStatus =~ \"0x80090308\", \"SEC_E_INVALID_TOKEN\",\nStatus =~ \"0x8009030E\", \"SEC_E_NO_CREDENTIALS\",\nStatus =~ \"0xC0000008\", \"STATUS_INVALID_HANDLE\",\nStatus =~ \"0xC0000017\", \"STATUS_NO_MEMORY\",\nStatus =~ \"0xC0000022\", \"STATUS_ACCESS_DENIED\",\nStatus =~ \"0xC0000034\", \"STATUS_OBJECT_NAME_NOT_FOUND\",\nStatus =~ \"0xC000005E\", \"STATUS_NO_LOGON_SERVERS\",\nStatus =~ \"0xC000006A\", \"STATUS_WRONG_PASSWORD\",\nStatus =~ \"0xC000006D\", \"STATUS_LOGON_FAILURE\",\nStatus =~ \"0xC000006E\", \"STATUS_ACCOUNT_RESTRICTION\",\nStatus =~ \"0xC0000073\", \"STATUS_NONE_MAPPED\",\nStatus =~ \"0xC00000FE\", \"STATUS_NO_SUCH_PACKAGE\",\nStatus =~ \"0xC000009A\", \"STATUS_INSUFFICIENT_RESOURCES\",\nStatus =~ \"0xC00000DC\", \"STATUS_INVALID_SERVER_STATE\",\nStatus =~ \"0xC0000106\", \"STATUS_NAME_TOO_LONG\",\nStatus =~ \"0xC000010B\", \"STATUS_INVALID_LOGON_TYPE\",\nStatus =~ \"0xC000015B\", \"STATUS_LOGON_TYPE_NOT_GRANTED\",\nStatus =~ \"0xC000018B\", \"STATUS_NO_TRUST_SAM_ACCOUNT\",\nStatus =~ \"0xC0000224\", \"STATUS_PASSWORD_MUST_CHANGE\",\nStatus =~ \"0xC0000234\", \"STATUS_ACCOUNT_LOCKED_OUT\",\nStatus =~ \"0xC00002EE\", \"STATUS_UNFINISHED_CONTEXT_DELETED\",\nEventID == 4624, \"Success\",\n\"See - https://docs.microsoft.com/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\"\n)\n| extend SubStatusDesc = case(\nSubStatus =~ \"0x80090325\", \"SEC_E_UNTRUSTED_ROOT\",\nSubStatus =~ \"0xC0000008\", \"STATUS_INVALID_HANDLE\",\nSubStatus =~ \"0xC0000022\", \"STATUS_ACCESS_DENIED\",\nSubStatus =~ \"0xC0000064\", \"STATUS_NO_SUCH_USER\",\nSubStatus =~ \"0xC000006A\", \"STATUS_WRONG_PASSWORD\",\nSubStatus =~ \"0xC000006D\", \"STATUS_LOGON_FAILURE\",\nSubStatus =~ \"0xC000006E\", \"STATUS_ACCOUNT_RESTRICTION\",\nSubStatus =~ \"0xC000006F\", \"STATUS_INVALID_LOGON_HOURS\",\nSubStatus =~ \"0xC0000070\", \"STATUS_INVALID_WORKSTATION\",\nSubStatus =~ \"0xC0000071\", \"STATUS_PASSWORD_EXPIRED\",\nSubStatus =~ \"0xC0000072\", \"STATUS_ACCOUNT_DISABLED\",\nSubStatus =~ \"0xC0000073\", \"STATUS_NONE_MAPPED\",\nSubStatus =~ \"0xC00000DC\", \"STATUS_INVALID_SERVER_STATE\",\nSubStatus =~ \"0xC0000133\", \"STATUS_TIME_DIFFERENCE_AT_DC\",\nSubStatus =~ \"0xC000018D\", \"STATUS_TRUSTED_RELATIONSHIP_FAILURE\",\nSubStatus =~ \"0xC0000193\", \"STATUS_ACCOUNT_EXPIRED\",\nSubStatus =~ \"0xC0000380\", \"STATUS_SMARTCARD_WRONG_PIN\",\nSubStatus =~ \"0xC0000381\", \"STATUS_SMARTCARD_CARD_BLOCKED\",\nSubStatus =~ \"0xC0000382\", \"STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED\",\nSubStatus =~ \"0xC0000383\", \"STATUS_SMARTCARD_NO_CARD\",\nSubStatus =~ \"0xC0000384\", \"STATUS_SMARTCARD_NO_KEY_CONTAINER\",\nSubStatus =~ \"0xC0000385\", \"STATUS_SMARTCARD_NO_CERTIFICATE\",\nSubStatus =~ \"0xC0000386\", \"STATUS_SMARTCARD_NO_KEYSET\",\nSubStatus =~ \"0xC0000387\", \"STATUS_SMARTCARD_IO_ERROR\",\nSubStatus =~ \"0xC0000388\", \"STATUS_DOWNGRADE_DETECTED\",\nSubStatus =~ \"0xC0000389\", \"STATUS_SMARTCARD_CERT_REVOKED\",\nEventID == 4624, \"Success\",\n\"See - https://docs.microsoft.com/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\"\n)\n| project StartTime = TimeGenerated, DayofWeek, HourOfLogin, EventID, Activity, IpAddress, WorkstationName, Computer, TargetUserName, TargetDomainName, ProcessName, SubjectUserName, PrivilegeList, LogonTypeName, StatusDesc, SubStatusDesc\n);\nAllLogonEvents\n| where TargetDomainName !in (\"Window Manager\",\"Font Driver Host\")\n| summarize max(HourOfLogin), min(HourOfLogin), historical_DayofWeek=make_set(DayofWeek, 10) by TargetUserName\n| join kind= inner\n(\n    AllLogonEvents\n    | where StartTime between(starttime..endtime)\n)\non TargetUserName\n// Filtering for logon events based on range of max and min of historical logon hour values seen\n| where HourOfLogin > max_HourOfLogin or HourOfLogin < min_HourOfLogin\n// Also populating additional column showing historical days of week when logon was seen\n| extend historical_DayofWeek = tostring(historical_DayofWeek)\n| summarize Total= count(), max(HourOfLogin), min(HourOfLogin), current_DayofWeek =make_set(DayofWeek, 10), StartTime=max(StartTime), EndTime = min(StartTime), SourceIP = make_set(IpAddress, 10000), SourceHost = make_set(WorkstationName, 10000), SubjectUserName = make_set(SubjectUserName, 10000), HostLoggedOn = make_set(Computer, 10000) by EventID, Activity, TargetDomainName, TargetUserName , ProcessName , LogonTypeName, StatusDesc, SubStatusDesc, historical_DayofWeek\n| extend historical_DayofWeek = todynamic(historical_DayofWeek)\n| extend timestamp = StartTime, NTDomain = split(TargetUserName, '\\\\', 0)[0], Name = split(TargetUserName, '\\\\', 1)[0]\n| extend Account_0_NTDomain = NTDomain \n| extend Account_0_Name = Name\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule would generate an alert if EvenSeverity is High or ThreatRiskLevel or ThreatOriginalConfidence value is greater than 90.\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let lookback= 5m;\n_Im_WebSession(starttime=ago(lookback))\n| project\n    EventSeverity,\n    ThreatName,\n    ThreatCategory,\n    ThreatRiskLevel,\n    ThreatOriginalConfidence,\n    ThreatField,\n    TimeGenerated,\n    SrcIpAddr,\n    SrcUsername,\n    SrcHostname,\n    Url,\n    DstIpAddr\n| where ThreatRiskLevel >= 90\n    or toint(ThreatOriginalConfidence) >= 90\n    or EventSeverity =~ \"High\"\n| summarize\n    EventCount = count(),\n    EventStartTime=min(TimeGenerated),\n    EvenEndTime=max(TimeGenerated)\n    by\n    SrcIpAddr,\n    SrcUsername,\n    SrcHostname,\n    Url,\n    DstIpAddr,\n    ThreatName,\n    ThreatCategory,\n    ThreatRiskLevel,\n    ThreatOriginalConfidence,\n    ThreatField\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare URLs requested.\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "NGINXHTTPServer\n| where TimeGenerated > ago(24h)\n| summarize count() by tostring(UrlOriginal)\n| top 20 by count_ asc \n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects Network ACLs with Inbound rule to allow All Traffic.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where Reason =~ 'NEW_ALERT'\n| where Status =~ 'open'\n| where AlertMessage has 'Network ACLs with Inbound rule to allow All Traffic'\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies beaconing patterns from PAN traffic logs based on recurrent timedelta patterns.\n Reference Blog:https://techcommunity.microsoft.com/t5/microsoft-sentinel-blog/detect-network-beaconing-via-intra-request-time-delta-patterns/ba-p/779586\n Topic: PaloAlto-PAN-OS"}, {"role": "assistant", "content": "let starttime = 2d;\nlet endtime = 1d;\nlet TimeDeltaThreshold = 25;\nlet TotalEventsThreshold = 30;\nlet MostFrequentTimeDeltaThreshold = 25;\nlet PercentBeaconThreshold = 80;\nCommonSecurityLog\n| where DeviceVendor == \"Palo Alto Networks\" and Activity == \"TRAFFIC\"\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where ipv4_is_private(DestinationIP)== false\n| project TimeGenerated, DeviceName, SourceUserID, SourceIP, SourcePort, DestinationIP, DestinationPort, ReceivedBytes, SentBytes\n| sort by SourceIP asc,TimeGenerated asc, DestinationIP asc, DestinationPort asc\n| serialize\n| extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceIP = next(SourceIP, 1)\n| extend TimeDeltainSeconds = datetime_diff('second',nextTimeGenerated,TimeGenerated)\n| where SourceIP == nextSourceIP\n//Whitelisting criteria/ threshold criteria\n| where TimeDeltainSeconds > TimeDeltaThreshold\n| summarize count(), sum(ReceivedBytes), sum(SentBytes)\nby TimeDeltainSeconds, bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort\n| summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds), TotalEvents=sum(count_), TotalSentBytes = sum(sum_SentBytes), TotalReceivedBytes = sum(sum_ReceivedBytes)\nby bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort\n| where TotalEvents > TotalEventsThreshold and MostFrequentTimeDeltaCount > MostFrequentTimeDeltaThreshold\n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent > PercentBeaconThreshold\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIP, AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Medical device is scanned with vulnerability scanner Topic: Cynerio"}, {"role": "assistant", "content": "CynerioEvent_CL\n| where TimeGenerated > ago(24h)\n| where module_s == 'IDS'\n| where title_s == 'Scanner Activity'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when the Microsoft Graph RoleManagement.ReadWrite.Directory (Delegated or Application) permission is granted to a service principal.\nThis permission allows an application to read and manage the role-based access control (RBAC) settings for your companys directory.\nAn adversary could use this permission to add an Microsoft Entra ID object to an Admin directory role and escalate privileges.\nRef : https://docs.microsoft.com/graph/permissions-reference#role-management-permissions\nRef : https://docs.microsoft.com/graph/api/directoryrole-post-members?view=graph-rest-1.0&tabs=http\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where Category =~ \"ApplicationManagement\" and LoggedByService =~ \"Core Directory\" and OperationName in~ (\"Add delegated permission grant\", \"Add app role assignment to service principal\")\n| mv-apply TargetResource = TargetResources on\n  (\n      where TargetResource.type =~ \"ServicePrincipal\" and array_length(TargetResource.modifiedProperties) > 0 and isnotnull(TargetResource.displayName)\n      | extend props = TargetResource.modifiedProperties\n  )\n| mv-apply Property = props on\n  (\n      where Property.displayName in~ (\"AppRole.Value\",\"DelegatedPermissionGrant.Scope\")\n      | extend DisplayName = tostring(Property.displayName), PermissionGrant = trim('\"',tostring(Property.newValue))\n  )\n| where PermissionGrant has \"RoleManagement.ReadWrite.Directory\"\n| mv-apply Property = props on\n  (\n      where Property.displayName =~ \"ServicePrincipal.DisplayName\"\n      | extend TargetAppDisplayName = trim('\"',tostring(Property.newValue))\n  )\n| mv-apply Property = props on\n  (\n      where Property.displayName =~ \"ServicePrincipal.ObjectID\"\n      | extend TargetAppServicePrincipalId = trim('\"',tostring(Property.newValue))\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| project TimeGenerated, OperationName, Result, PermissionGrant, TargetAppDisplayName, TargetAppServicePrincipalId, InitiatingAppName, InitiatingAppServicePrincipalId,\nInitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIpAddress, TargetResources, AdditionalDetails, CorrelationId\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when 30 or more ports are used for a given client IP in 10 minutes occurring on the IIS server.\nThis could be indicative of attempted port scanning or exploit attempt at internet facing web applications.\nThis could also simply indicate a misconfigured service or device.\nReferences:\nIIS status code mapping - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\nWin32 Status code mapping - https://msdn.microsoft.com/library/cc231199.aspx\n Topic: Detections"}, {"role": "assistant", "content": "let timeBin = 10m;\nlet portThreshold = 30;\nW3CIISLog\n| extend scStatusFull = strcat(scStatus, \".\",scSubStatus)\n// Map common IIS codes\n| extend scStatusFull_Friendly = case(\nscStatusFull == \"401.0\", \"Access denied.\",\nscStatusFull == \"401.1\", \"Logon failed.\",\nscStatusFull == \"401.2\", \"Logon failed due to server configuration.\",\nscStatusFull == \"401.3\", \"Unauthorized due to ACL on resource.\",\nscStatusFull == \"401.4\", \"Authorization failed by filter.\",\nscStatusFull == \"401.5\", \"Authorization failed by ISAPI/CGI application.\",\nscStatusFull == \"403.0\", \"Forbidden.\",\nscStatusFull == \"403.4\", \"SSL required.\",\n\"See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\")\n// Mapping to Hex so can be mapped using website in comments above\n| extend scWin32Status_Hex = tohex(tolong(scWin32Status))\n// Map common win32 codes\n| extend scWin32Status_Friendly = case(\nscWin32Status_Hex =~ \"775\", \"The referenced account is currently locked out and cannot be logged on to.\",\nscWin32Status_Hex =~ \"52e\", \"Logon failure: Unknown user name or bad password.\",\nscWin32Status_Hex =~ \"532\", \"Logon failure: The specified account password has expired.\",\nscWin32Status_Hex =~ \"533\", \"Logon failure: Account currently disabled.\",\nscWin32Status_Hex =~ \"2ee2\", \"The request has timed out.\",\nscWin32Status_Hex =~ \"0\", \"The operation completed successfully.\",\nscWin32Status_Hex =~ \"1\", \"Incorrect function.\",\nscWin32Status_Hex =~ \"2\", \"The system cannot find the file specified.\",\nscWin32Status_Hex =~ \"3\", \"The system cannot find the path specified.\",\nscWin32Status_Hex =~ \"4\", \"The system cannot open the file.\",\nscWin32Status_Hex =~ \"5\", \"Access is denied.\",\nscWin32Status_Hex =~ \"8009030e\", \"SEC_E_NO_CREDENTIALS\",\nscWin32Status_Hex =~ \"8009030C\", \"SEC_E_LOGON_DENIED\",\n\"See - https://msdn.microsoft.com/library/cc231199.aspx\")\n// decode URI when available\n| extend decodedUriQuery = url_decode(csUriQuery)\n// Count of attempts by client IP on many ports\n| summarize makeset(sPort), makeset(decodedUriQuery), makeset(csUserName), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), ConnectionsCount = count() by bin(TimeGenerated, timeBin), cIP, Computer, sIP\n| extend portCount = arraylength(set_sPort)\n| where portCount >= portThreshold\n| project TimeGenerated, cIP, set_sPort, set_csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, ConnectionsCount, portCount\n| order by portCount\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects changes to permissions assigned to admin users. Threat actors may try and increase permission scope by adding additional roles to already privileged accounts.\nReview any modifications to ensure they were made legitimately.\nRef: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#changes-to-privileged-accounts\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "let admin_users = (IdentityInfo\n  | where TimeGenerated > ago(2d)\n  | summarize arg_max(TimeGenerated, *) by AccountUPN\n  | where AssignedRoles contains \"admin\" or GroupMembership has \"Admin\"\n  | summarize by tolower(AccountUPN));\n  AuditLogs\n  | where Category =~ \"RoleManagement\"\n  | where OperationName has \"Add eligible member\"\n  | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n  | where tolower(TargetUserPrincipalName) in (admin_users)\n  | extend TargetAadUserId = tostring(TargetResources[0].id)\n  | extend Group = tostring(TargetResources[0].displayName)\n  | extend RoleAddedTo = iif(isnotempty(TargetUserPrincipalName), TargetUserPrincipalName, Group)\n  | extend mod_props = TargetResources[0].modifiedProperties\n  | extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n  | extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n  | extend RoleAddedBy = iif(isnotempty(InitiatingAppName), InitiatingAppName, InitiatingUserPrincipalName)\n  | mv-expand mod_props\n  | where mod_props.displayName == \"Role.DisplayName\"\n  | extend UserAgent = tostring(AdditionalDetails[0].value)\n  | extend RoleAdded = tostring(parse_json(tostring(mod_props.newValue)))\n  | extend TargetAccountName = tostring(split(TargetUserPrincipalName, \"@\")[0]), TargetAccountUPNSuffix = tostring(split(TargetUserPrincipalName, \"@\")[1])\n  | extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n  | project-reorder TimeGenerated, OperationName, TargetUserPrincipalName, RoleAddedTo, RoleAdded, RoleAddedBy, InitiatingUserPrincipalName, InitiatingAppName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0032 (Theom has observed shadow (or clone) databases/tables that have a large financial value. Additionally, it has observed roles that are overprovisioned for these data stores. As per this requirement, use this information to apply data access control lists or access permissions and enforce data retention policies)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0032\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies instances where Wazuh logged over 400 403 Web Errors from one IP Address. To onboard Wazuh data into Sentinel please view: https://github.com/wazuh/wazuh-documentation/blob/master/source/azure/monitoring%20activity.rst\n Topic: Detections"}, {"role": "assistant", "content": "CommonSecurityLog\n| where DeviceProduct =~ \"Wazuh\"\n| where Activity has \"Web server 400 error code.\"\n| where Message has \"403\"\n| extend HostName=substring(split(DeviceCustomString1,\")\")[0],1)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), NumberOfErrors = dcount(SourceIP) by HostName, SourceIP\n| where NumberOfErrors > 400\n| sort by NumberOfErrors desc\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Based on a Watchlist Detects when a user has been added to a privileged group/role. We can exclude from the wathclist the users for whom we do not want this alert to be triggered\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "let PrivilegedUsers = (_GetWatchlist('Accounts') | project SearchKey);\nlet timeRange = 3d;\nlet lookBack = 7d;\nAuditLogs\n| where LoggedByService == 'Core Directory' or LoggedByService == 'PIM'\n| where ActivityDisplayName has_any (\"Add eligible member to role\", \"Add member to role\")\n| where Identity !in (PrivilegedUsers)\n| mv-expand TargetResources\n| extend modProps = parse_json(TargetResources).modifiedProperties\n| mv-expand bagexpansion=array modProps\n| evaluate bag_unpack(modProps)\n| extend displayName = column_ifexists(\"displayName\", \"NotAvailable\"), newValue = column_ifexists(\"newValue\", \"NotAvailable\")\n//if you want only extract hig privilege Rol display or WellKnowObject\n| where newValue contains \"UserAccountAdmins\" or newValue contains \"User Administrator\" or newValue contains \"ApplicationAdministrators\" or newValue contains \"BuiltInRole\"\n //| project TimeGenerated, displayName, newValue, OperationName, Category, Identity, LoggedByService, Location, ResourceGroup \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects user login to uncommon location.\n Topic: Claroty"}, {"role": "assistant", "content": "let usr_sites = ClarotyEvent\n| where TimeGenerated > ago(14d)\n| where EventType has 'Login to SRA succeeded'\n| extend Site = column_ifexists(\"site_name\",\"\")\n| where isnotempty(Site)\n| extend SrcUsername = extract(@'User\\s(.*?)\\slogged', 1, EventMessage)\n| summarize all_loc = makeset(tostring(Site)) by SrcUsername\n| extend k = 1;\nClarotyEvent\n| where EventType has 'Login to SRA succeeded'\n| extend Site = column_ifexists(\"site_name\",\"\")\n| where isnotempty(Site)\n| extend SrcUsername = extract(@'User\\s(.*?)\\slogged', 1, EventMessage)\n| extend k = 1\n| join kind=innerunique (usr_sites) on k\n| where all_loc !contains Site\n| extend SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for requiring multi-factor authentication (MFA) for all administrative roles makes it harder for attackers to access accounts. Administrative roles have higher permissions than typical users. If any of those accounts are compromised, critical devices and data is open to attack.\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'AzureSecureScoreAdminMFAV2'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple client errors from one source in short timeframe\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "let threshold = 100;\nApacheHTTPServer\n| where HttpStatusCode >= 400 and HttpStatusCode <= 499\n| summarize MultipleClientErrors = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleClientErrors > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert leverages Defender for IoT to detect a new device indicating a legitimate device recently installed on the network or an indication of malicious activity such as a cyber threat attempting to manipulate the SCADA network.\n Topic: IoTOTThreatMonitoringwithDefenderforIoT"}, {"role": "assistant", "content": "SecurityAlert\n| where ProviderName == \"IoTSecurity\"\n| where AlertName in (\"Field Device Discovered Unexpectedly\", \"New Asset Detected\", \"Abnormal usage of MAC Addresses\", \"New LLDP Device Configuration\")\n| extend ExtendedProperties = parse_json(ExtendedProperties)\n| where tostring(ExtendedProperties.isNew) == \"True\"\n| extend DeviceId = tostring(ExtendedProperties.DeviceId), \n         SourceDeviceAddress = tostring(ExtendedProperties.SourceDeviceAddress), \n         DestDeviceAddress = tostring(ExtendedProperties.DestinationDeviceAddress), \n         RemediationSteps = tostring(parse_json(RemediationSteps)[0]), \n         Protocol = tostring(ExtendedProperties.Protocol), \n         AlertManagementUri = tostring(ExtendedProperties.AlertManagementUri)\n| project\n  TimeGenerated,\n  DeviceId,\n  ProductName,\n  ProductComponentName,\n  AlertSeverity,\n  AlertName,\n  Description,\n  Protocol,\n  SourceDeviceAddress,\n  DestDeviceAddress,\n  RemediationSteps,\n  Tactics,\n  Entities,\n  VendorOriginalId,\n  AlertLink,\n  AlertManagementUri,\n  Techniques\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query looks for users conducting Dataverse/Dynamics 365 activity shortly after a Microsoft Entra Identity Protection alert for that user. The query only looks for users not seen before or conducting Dynamics activity not previously seen. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let match_window = 1h;\nlet analysis_window = 1d;\nlet lookback_window = 7d;\nSecurityAlert\n| where TimeGenerated > ago(analysis_window)\n| where ProviderName == 'IPC'\n| extend UserName = tostring(parse_json(ExtendedProperties).[\"User Account\"])\n| extend UserName = tolower(UserName)\n| extend TimeKey = bin(TimeGenerated, match_window)\n| join kind=inner(DataverseActivity\n    | where TimeGenerated > ago(analysis_window)\n    | extend UserName = tolower(UserId)\n    | extend TimeKey = bin(TimeGenerated, match_window))\n    on UserName, TimeKey\n| join kind=leftanti(DataverseActivity\n    | where TimeGenerated between(ago(lookback_window) .. ago(analysis_window))\n    | extend UserName = tolower(UserId))\n    on UserName, OriginalObjectId\n| summarize\n    Actions = make_set(OriginalObjectId),\n    MostRecentAction = max(TimeGenerated1),\n    IPs = make_set(split(tostring(ClientIp), ':')[0]),\n    AADAlerts=make_set(Description),\n    MostRecentAlert = max(TimeGenerated)\n    by UserName\n| extend timestamp = MostRecentAction, AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects exfiltration to external domain.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "let corp_domain = dynamic(['example.com']);     //add all corporate domains to this list\nDigitalGuardianDLPEvent\n| where NetworkApplicationProtocol =~ 'SMTP'\n| where isnotempty(inspected_document)\n| extend s_domain = extract(@'@(.*)', 1, SrcUserName)\n| extend d_domain = extract(@'@(.*)', 1, DstUserName)\n| where s_domain in~ (corp_domain)\n| where d_domain !in (corp_domain)\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Azure DevOps allow for audit logs to be streamed to external storage solutions such as SIEM solutions. An attacker looking to hide malicious Azure DevOps activity from defenders may look to disable data streams before conducting activity and then re-enabling the stream after (so as not to raise data threshold-based alarms). Looking for disabled audit streams can identify this activity, and due to the nature of the action its unlikely to have a high false positive rate.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where OperationName =~ \"AuditLog.StreamDisabledByUser\"\n| extend StreamType = tostring(Data.ConsumerType)\n| project-reorder TimeGenerated, Details, ActorUPN, IpAddress, UserAgent, StreamType\n| extend timestamp = TimeGenerated\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query is used to show privileged identity administration operations in Dataverse made by accounts that signed in without using MFA Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let event_types = dynamic(['Associate', 'Disassociate', 'Create', 'Delete', 'Upsert', 'Update']);\nlet excluded_accounts = dynamic(['cdsusermanagement@onmicrosoft.com', 'unknown', 'powervirtualagentsprod@onmicrosoft.com']);\nSigninLogs\n| where AuthenticationRequirement == \"singleFactorAuthentication\"\n| where ResourceIdentity == \"00000007-0000-0000-c000-000000000000\" or AppId == \"00000007-0000-0000-c000-000000000000\"\n| where ResultType == 0\n| summarize by UserId = tolower(UserPrincipalName)\n| join kind=inner (DataverseActivity\n    | where EntityName =~ 'systemuser' and Message in (event_types)\n    | project TimeGenerated, UserId = tolower(UserId), ClientIp, InstanceUrl, OriginalObjectId\n    | where UserId !in (excluded_accounts))\n    on UserId\n| extend CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    TimeGenerated,\n    UserId,\n    ClientIp,\n    OriginalObjectId,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects large amounts of DNS resolution failures.\n Topic: Corelight"}, {"role": "assistant", "content": "let threshold = 25;\nunion corelight_dns, corelight_dns_red\n// rcodes: SERVFAIL=2, NXDOMAIN=3\n| where rcode in (2, 3)\n| summarize count() by query, id_orig_h, bin(TimeGenerated, 5m)\n| where count_ > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects UNC2452 (Nobelium) APT Group activity.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "GCPCloudDNS\n| where Query has_any ('tomasubiera.com', 'theandersonco.com', 'stonecrestnews.com', 'nordicmademedia.com')\n| extend DNSCustomEntity = Query, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies mass download (in the last hour) of files from SharePoint sites configured for document management in Dynamics 365. This analytics rule utilizes the MSBizApps-Configuration watchlist to identify SharePoint sites used for Document Management. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// Set threshold for number of downloaded files\nlet detection_threshold = 10000;\nlet query_frequency = 1h;\nDataverseSharePointSites\n| join kind=inner (\n    OfficeActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where OfficeWorkload == \"SharePoint\" and Operation == \"FileDownloaded\")\n    on $left.SharePointUrl == $right.Site_Url\n| summarize FileDownloadCount = count() by UserId, SharePointUrl, InstanceUrl, ClientIP\n| where FileDownloadCount > detection_threshold\n| extend\n    CloudAppId = int(32780),\n    SharePointId = int(20892),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    UserId,\n    ClientIP,\n    FileDownloadCount,\n    SharePointUrl,\n    InstanceUrl,\n    CloudAppId,\n    SharePointId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for usage of attack toolkits associated with massive scanning or exploitation of remote code execution vulnerability in Log4j component of Apache.\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "Syslog\n| where Facility == 'user'\n| where SyslogMessage has \"AUOMS_EXECVE\"\n| parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n| where EventType =~ \"AUOMS_EXECVE\"\n| parse EventData with * \"syscall=\" syscall \" syscall_r=\" * \" success=\" success \" exit=\" exit \" a0\" * \" ppid=\" ppid \" pid=\" pid \" audit_user=\" audit_user \" auid=\" auid \" user=\" user \" uid=\" uid \" group=\" group \" gid=\" gid \"effective_user=\" effective_user \" euid=\" euid \" set_user=\" set_user \" suid=\" suid \" filesystem_user=\" filesystem_user \" fsuid=\" fsuid \" effective_group=\" effective_group \" egid=\" egid \" set_group=\" set_group \" sgid=\" sgid \" filesystem_group=\" filesystem_group \" fsgid=\" fsgid \" tty=\" tty \" ses=\" ses \" comm=\\\"\" comm \"\\\" exe=\\\"\" exe \"\\\"\" * \"cwd=\\\"\" cwd \"\\\"\" * \"name=\\\"\" name \"\\\"\" * \"cmdline=\" cmdline  \n| extend cmdline = trim_end('redactors=.*',cmdline) \n| where (exe has \"java\" and cmdline has \"JNDI-Injection-Exploit\") or (exe has \"javac\" and cmdline has \"log4j-payload-generator\") or (cmdline has \"LogMePwn\" and cmdline has \"git clone\")\n| project TimeGenerated, Computer, audit_user, user, cmdline\n| extend timestamp = TimeGenerated\n| extend Host_0_HostName = Computer\n| extend Account_0_Name = user\n| sort by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of top sources with blocked connections.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "UbiquitiAuditEvent\n| where TimeGenerated > ago(24h)\n| where EventCategory =~ 'firewall'\n| where DvcAction =~ 'Blocked'\n| summarize count() by SrcIpAddr\n| top 10 by count_\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "SSL Certificate registration found\n Topic: Flare"}, {"role": "assistant", "content": "Firework_CL\n| where source_s contains \"certstream\" and (risk_score_d == \"3\" or risk_score_d == \"4\" or risk_score_d == \"5\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query looks for file paths/hashes related to observed activity by Dev-0228. The actor is known to use custom version of popular tool like PsExec, Procdump etc. to carry its activity.\n The risk score associated with each result is based on a number of factors, hosts with higher risk events should be investigated first.\n Topic: Detections"}, {"role": "assistant", "content": "let files1 = dynamic([\"C:\\\\Windows\\\\TAPI\\\\lsa.exe\", \"C:\\\\Windows\\\\TAPI\\\\pa.exe\", \"C:\\\\Windows\\\\TAPI\\\\pc.exe\", \"C:\\\\Windows\\\\TAPI\\\\Rar.exe\"]);\nlet files2 = dynamic([\"svchost.exe\",\"wdmsvc.exe\"]);\nlet FileHash1 = dynamic([\"43109fbe8b752f7a9076eaafa417d9ae5c6e827cd5374b866672263fdebd5ec3\", \"ab50d8d707b97712178a92bbac74ccc2a5699eb41c17aa77f713ff3e568dcedb\", \"010e32be0f86545e116a8bc3381a8428933eb8789f32c261c81fd5e7857d4a77\",         \"56cd102b9fc7f3523dad01d632525ff673259dbc9a091be0feff333c931574f7\"]);\nlet FileHash2 = dynamic([\"2a1044e9e6e87a032f80c6d9ea6ae61bbbb053c0a21b186ecb3b812b49eb03b7\", \"9ab7e99ed84f94a7b6409b87e56dc6e1143b05034a5e4455e8c555dbbcd0d2dd\", \"18a072ccfab239e140d8f682e2874e8ff19d94311fc8bb9564043d3e0deda54b\"]);\nDeviceProcessEvents\n| where ( FolderPath has_any (files1) and SHA256 has_any (FileHash1)) or (FolderPath has_any (files2) and SHA256 has_any (FileHash2))\n| extend DvcId = DeviceId\n| join kind=leftouter (SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| mv-expand todynamic(Entities)\n| extend DvcId = tostring(parse_json(Entities).MdatpDeviceId)\n| where isnotempty(DvcId)\n// Higher risk score are for Defender alerts related to threat actor\n| extend AlertRiskScore = iif(ThreatName has_any (\"Backdoor:MSIL/ShellClient.A\", \"Backdoor:MSIL/ShellClient.A!dll\", \"Trojan:MSIL/Mimikatz.BA!MTB\"), 1.0, 0.5)\n| project DvcId, AlertRiskScore) on DvcId\n| extend AlertRiskScore = iif(isempty(AlertRiskScore), 0.0, AlertRiskScore)\n| extend InitiatingProcessAccount = strcat(InitiatingProcessAccountDomain, \"\\\\\", InitiatingProcessAccountName)\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries often abuse email-forwarding rules to monitor victim activities, steal information, and gain intelligence on the victim or their organization. This query highlights cases where user mail is being forwarded, including to external domains.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\n  let endtime = todatetime('{{EndTimeISO}}');\n  \n  // Enriched Logs Query for forwarding rule operations\n  let EnrichedForwardRules = EnrichedMicrosoft365AuditLogs\n      | where TimeGenerated between (starttime .. endtime)\n      | where Workload == \"Exchange\"\n      | where (Operation == \"Set-Mailbox\" and tostring(parse_json(tostring(AdditionalProperties))) contains 'ForwardingSmtpAddress') \n          or (Operation in ('New-InboxRule', 'Set-InboxRule') and (tostring(parse_json(tostring(AdditionalProperties))) contains 'ForwardTo' or tostring(parse_json(tostring(AdditionalProperties))) contains 'RedirectTo'))\n      | extend parsed = parse_json(tostring(AdditionalProperties))\n      | extend fwdingDestination_initial = iif(Operation == \"Set-Mailbox\", tostring(parsed.ForwardingSmtpAddress), coalesce(tostring(parsed.ForwardTo), tostring(parsed.RedirectTo)))\n      | where isnotempty(fwdingDestination_initial)\n      | extend fwdingDestination = iff(fwdingDestination_initial has \"smtp\", (split(fwdingDestination_initial, \":\")[1]), fwdingDestination_initial)\n      | parse fwdingDestination with * '@' ForwardedtoDomain \n      | parse UserId with * '@' UserDomain\n      | extend subDomain = ((split(strcat(tostring(split(UserDomain, '.')[-2]), '.', tostring(split(UserDomain, '.')[-1])), '.'))[0])\n      | where ForwardedtoDomain !contains subDomain\n      | extend Result = iff(ForwardedtoDomain != UserDomain, \"Mailbox rule created to forward to External Domain\", \"Forward rule for Internal domain\")\n      | extend ClientIPAddress = case(ClientIp has \".\", tostring(split(ClientIp, \":\")[0]), ClientIp has \"[\", tostring(trim_start(@'[[]', tostring(split(ClientIp, \"]\")[0]))), ClientIp)\n      | extend Port = case(ClientIp has \".\", (split(ClientIp, \":\")[1]), ClientIp has \"[\", tostring(split(ClientIp, \"]:\")[1]), ClientIp)\n      | extend Host = tostring(parse_json(tostring(AdditionalProperties)).OriginatingServer)\n      | extend HostName = tostring(split(Host, \".\")[0])\n      | extend DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n      | project TimeGenerated, UserId, UserDomain, subDomain, Operation, ForwardedtoDomain, ClientIPAddress, Result, Port, ObjectId, fwdingDestination, HostName, DnsDomain\n      | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n      | extend IP_0_Address = ClientIPAddress, Host_0_HostName = HostName, Host_0_DnsDomain = DnsDomain, Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix;\n  // Office Activity Query for forwarding rule operations\n  let OfficeForwardRules = OfficeActivity\n      | where TimeGenerated between (starttime .. endtime)\n      | where OfficeWorkload == \"Exchange\"\n      | where (Operation =~ \"Set-Mailbox\" and Parameters contains 'ForwardingSmtpAddress') \n          or (Operation in~ ('New-InboxRule', 'Set-InboxRule') and (Parameters contains 'ForwardTo' or Parameters contains 'RedirectTo'))\n      | extend parsed = parse_json(Parameters)\n      | extend fwdingDestination_initial = (iif(Operation =~ \"Set-Mailbox\", tostring(parsed[1].Value), tostring(parsed[2].Value)))\n      | where isnotempty(fwdingDestination_initial)\n      | extend fwdingDestination = iff(fwdingDestination_initial has \"smtp\", (split(fwdingDestination_initial, \":\")[1]), fwdingDestination_initial)\n      | parse fwdingDestination with * '@' ForwardedtoDomain \n      | parse UserId with * '@' UserDomain\n      | extend subDomain = ((split(strcat(tostring(split(UserDomain, '.')[-2]), '.', tostring(split(UserDomain, '.')[-1])), '.') [0]))\n      | where ForwardedtoDomain !contains subDomain\n      | extend Result = iff(ForwardedtoDomain != UserDomain, \"Mailbox rule created to forward to External Domain\", \"Forward rule for Internal domain\")\n      | extend ClientIPAddress = case(ClientIP has \".\", tostring(split(ClientIP, \":\")[0]), ClientIP has \"[\", tostring(trim_start(@'[[]', tostring(split(ClientIP, \"]\")[0]))), ClientIP)\n      | extend Port = case(ClientIP has \".\", (split(ClientIP, \":\")[1]), ClientIP has \"[\", tostring(split(ClientIP, \"]:\")[1]), ClientIP)\n      | extend Host = tostring(split(OriginatingServer, \" (\")[0])\n      | extend HostName = tostring(split(Host, \".\")[0])\n      | extend DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n      | project TimeGenerated, UserId, UserDomain, subDomain, Operation, ForwardedtoDomain, ClientIPAddress, Result, Port, HostName, DnsDomain\n      | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n      | extend IP_0_Address = ClientIPAddress, Host_0_HostName = HostName, Host_0_DnsDomain = DnsDomain, Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix;\n  // Combine the results from both Enriched and Office Activity logs\n  let CombinedForwardRules = EnrichedForwardRules\n      | union OfficeForwardRules\n      | summarize arg_min(TimeGenerated, *) by UserId, ForwardedtoDomain, Operation\n      | project TimeGenerated, UserId, UserDomain, subDomain, Operation, ForwardedtoDomain, ClientIPAddress, Result, Port, ObjectId, fwdingDestination, Host_0_HostName, Host_0_DnsDomain, IP_0_Address, Account_0_Name, Account_0_UPNSuffix;  \n  // Final output\n  CombinedForwardRules\n      | order by TimeGenerated desc;\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for roles modifications.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where TimeGenerated > ago(24h)\n| where PayloadMethodname =~ 'google.iam.admin.v1.UpdateRole'\n| extend result = parse_json(todynamic(PayloadAuthorizationinfo))[0]['granted']\n| where result =~ 'true'\n| project-away result\n| extend timestamp = TimeGenerated, AccountCustomEntity = PayloadRequestAccountId, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for successful user logins from different countries within 30 mins.\n Topic: Salesforce Service Cloud"}, {"role": "assistant", "content": "let threshold = 2;\nlet Countrydb = externaldata(Network:string, geoname_id:string, continent_code:string, continent_name:string, country_iso_code:string, country_name:string)\n[@\"https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv\"];\nlet UsersLocation = SalesforceServiceCloud\n| where EventType =~ 'Login' and LoginStatus=~'LOGIN_NO_ERROR'\n| project TimeGenerated, ClientIp, UserId, User, UserType ;\nUsersLocation\n| extend Dummy=1\n| summarize count() by Hour=bin(TimeGenerated,30m), ClientIp,User, Dummy\n| partition by Hour(\n                lookup (Countrydb|extend Dummy=1) on Dummy\n              | where ipv4_is_match(ClientIp, Network)\n              )\n| summarize NumOfCountries = dcount(country_name) by User, Hour\n| where NumOfCountries >= threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert joins Azure Information Protection Logs (InformationProtectionLogs_CL) with Microsoft Entra ID Sign in Logs (SigninLogs) to provide a correlation of sensitive data access by geo-location. Results include User Principal Name, Label Name, Activity, City, State, Country/Region, and Time Generated. Recommended configuration is to include (or exclude) Sign in geo-locations (City, State, Country and/or Region) for trusted organizational locations. There is an option for configuration of correlations against Microsoft Sentinel watchlists. Accessing sensitive data from a new or unauthorized geo-location warrants further review. For more information see [Sign-in logs in Microsoft Entra ID: Location Filtering](https://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins)\n Topic: MicrosoftPurviewInsiderRiskManagement"}, {"role": "assistant", "content": "InformationProtectionLogs_CL\n| extend UserPrincipalName = UserId_s\n| where LabelName_s <> \"\"\n| join kind=inner (SigninLogs) on UserPrincipalName\n| extend City = tostring(LocationDetails.city)\n// | where City <> \"New York\" // Configure Location Details within Organizational Requirements\n| extend State = tostring(LocationDetails.state)\n// | where State <> \"Texas\" // Configure Location Details within Organizational Requirements\n| extend Country_Region = tostring(LocationDetails.countryOrRegion)\n// | where Country_Region <> \"US\" // Configure Location Details within Organizational Requirements\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UserPrincipalName == $right.SearchKey\n| summarize count() by UserPrincipalName, LabelName_s, Activity_s, City, State, Country_Region, TimeGenerated\n| sort by count_ desc\n| extend AccountName = tostring(split(UserPrincipalName, \"@\")[0]), AccountUPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This creates an incident in the event a client generates excessive amounts of DNS queries for non-existent domains. \nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM DNS schema\n Topic: Detections"}, {"role": "assistant", "content": "let threshold = 200;\n_Im_Dns(responsecodename='NXDOMAIN')\n| where isnotempty(DnsResponseCodeName)\n//| where DnsResponseCodeName =~ \"NXDOMAIN\"\n| summarize count() by SrcIpAddr, bin(TimeGenerated,15m)\n| where count_ > threshold\n| join kind=inner (_Im_Dns(responsecodename='NXDOMAIN')\n    ) on SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies user accounts flagged at risk in Microsoft Entra Identity Protection and correlates these users with sign-in activity in Power Platform, including Power Apps, Power Automate and Power Platform Admin Center. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let power_automate_appid = \"6204c1d1-4712-4c46-a7d9-3ed63d992682\";\nlet power_apps_appid = \"a8f7a65c-f5ba-4859-b2d6-df772c264e9d\";\nlet ppac_appid = \"065d9450-1e87-434e-ac2f-69af271549ed\";\nlet query_frequency = 1h;\nSigninLogs\n| where ingestion_time() >= ago(query_frequency)\n| where array_length(todynamic(RiskEventTypes)) != 0 or array_length(todynamic(RiskEventTypes_V2)) != 0\n| where AppId in (power_automate_appid, power_apps_appid, ppac_appid)\n| extend AffectedPlatform = case(\n                                AppId == ppac_appid,\n                                \"Power Platform Admin Center\",\n                                AppId == power_apps_appid,\n                                \"Power Apps\",\n                                AppId == power_automate_appid,\n                                \"Power Automate\",\n                                \"Unknown\"\n                            )\n| extend\n    Severity = iif(AffectedPlatform in (\"Power Apps\", \"Power Automate\"), \"Medium\", \"High\"),\n    CloudAppId = case(AffectedPlatform == \"Power Apps\", int(27593), AffectedPlatform == \"Power Automate\", int(27592), 0),\n    AccountName = tostring(split(UserPrincipalName, '@')[0]),\n    UPNSuffix = tostring(split(UserPrincipalName, '@')[1])\n| project\n    TimeGenerated,\n    UserId,\n    UniqueTokenIdentifier,\n    Identity,\n    RiskEventTypes,\n    RiskEventTypes_V2,\n    UserPrincipalName,\n    AppId,\n    AppDisplayName,\n    AffectedPlatform,\n    IPAddress,\n    Severity,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for updated workflows.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where TimeGenerated > ago(24h)\n| where EventMessage =~ 'Workflow updated'\n| project EventCreationTime, UserName, SrcIpAddr, ObjectItemName, ChangedValues\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query batches of distinct SQL queries that failed with error codes that might indicate malicious attempts to gain illegitimate access to the data. When blind type of attacks are performed (such as SQL injection of fuzzying), the attempted queries are often malformed and fail on wrong syntax (error 102) or wrong escaping (error 105). Thus, if a large number of different queries fail on such errors in a short amount of time, this might indicate attempted attack.\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet monitoredErrors = pack_array(102, 105);     // List of sql error codes relevant for this detection.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | summarize countEvents = count(), countStatements = dcount(Statement), countStatementsWithError = dcountif(Statement, Error in (monitoredErrors))\n        , anyMonitoredStatement = anyif(Statement, Error in (monitoredErrors)), anyInfo = anyif(AdditionalInfo, Error in (monitoredErrors))\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId\n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithErrors = dcountif(timeSlice, countStatementsWithError >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsErrorAnomalyOnStatement = iff(((countStatementsWithError >= monitoredStatementsThreshold) and (countSlicesWithErrors <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithError/monitoredStatementsThreshold, 0)\n| where IsErrorAnomalyOnStatement == 'true'\n| sort by anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])    \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "GuardDuty Detector was disabled or suspended, possibly by an attacker trying to avoid detection of its malicious activities. Verify with the user identity that this activity is legitimate.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where (EventName == \"DeleteDetector\" and isempty(ErrorCode) and isempty( ErrorMessage)) or (EventName == \"UpdateDetector\" and tostring(parse_json(RequestParameters).enable) == \"false\" and isempty(ErrorCode) and isempty( ErrorMessage))\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies sign-in anomalies from an IP in the last hour, targeting multiple users where the password is correct after multiple attempts\n Topic: Detections"}, {"role": "assistant", "content": "let LookBack = 1h;\nlet Data = (\nSigninLogs\n| where TimeGenerated >= ago(LookBack)\n| where parse_json(NetworkLocationDetails)[0].networkType != \"trustedNamedLocation\" // Excludes known tagged networks\n// Counts the number of sign in events in the last hour every 15 minutes by IP\n| make-series EventCounts = count() on TimeGenerated from ago(LookBack) to now() step 15m by IPAddress \n);\nlet AnomalyAlert = (\nData\n| extend (Anomalies, Score, Baseline) = series_decompose_anomalies(EventCounts,1.5,-1,'linefit')\n| mv-expand EventCounts,TimeGenerated,Anomalies to typeof(double),Baseline to typeof(long),Score to typeof(double)\n| where Anomalies > 0\n);\nAnomalyAlert\n| join kind = inner (SigninLogs\n| where TimeGenerated between (ago(LookBack) .. now())\n| where parse_json(NetworkLocationDetails)[0].networkType != \"trustedNamedLocation\"\n| extend PasswordResult = tostring(parse_json(AuthenticationDetails).authenticationStepResultDetail)\n| summarize UserCount = dcount(UserPrincipalName), UserList = make_set(UserPrincipalName), AppName = make_set(AppDisplayName), PasswordResult = make_list(PasswordResult) by IPAddress) on IPAddress\n| where PasswordResult has \"Correct Password\"\n| where UserCount > 1 // looks for events targeting more than one user.\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects exploitation of Oracle WebLogic vulnerability CVE-2021-2109\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "OracleWebLogicServerEvent\n| where HttpRequestMethod =~ \"GET\"\n| where UrlOriginal has_all (\"ldap://\", \"com.bea.console.handles.JndiBindingHandle\", \"AdminServer\")\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects common known SQL injection patterns used in automated scripts.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "OracleDatabaseAuditEvent\n| where isnotempty(DstUserName)\n| where Action has_any (\"admin' --\" ,\"admin' #\", \"admin'/*\", \"0=1\", \"1=0\", \"1=1\", \"1=2\", \"' or 1=1--\", \"' or 1=1#\", \"' or 1=1/*\", \"') or '1'='1--\", \"') or ('1'='1--\")\n| project SrcIpAddr, DstUserName, Action\n| extend AccountCustomEntity = DstUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies SolarWinds TEARDROP memory-only dropper IOCs in Windows defender Exploit Guard activity\nReferences:\n- https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html\n- https://gist.github.com/olafhartong/71ffdd4cab4b6acd5cbcd1a0691ff82f\n Topic: Microsoft Defender XDR"}, {"role": "assistant", "content": "DeviceEvents\n| where ActionType has \"ExploitGuardNonMicrosoftSignedBlocked\"\n| where InitiatingProcessFileName has \"svchost.exe\" and FileName has \"NetSetupSvc.dll\"\n| extend HashAlgorithm = \"SHA1\"\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of least used internal destination ports.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "UbiquitiAuditEvent\n| where TimeGenerated > ago(24h)\n| where EventCategory =~ 'firewall'\n| where ipv4_is_private(DstIpAddr)\n| where DvcAction =~ 'Accepted'\n| where isnotempty(DstPortNumber)\n| summarize count() by DstPortNumber, DstIpAddr\n| top 10 by count_ asc\n  | extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies users exporting a large amount of records from Dynamics 365 to Excel, significantly more records exported than any other recent activity by that user. Large exports from users with no recent activity are identified using a predefined threshold. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// Set a mass export threshold for users who have no historical activity.\nlet mass_export_threshold = 10000;\nlet query_lookback = 14d;\nlet query_frequency = 1h;\nlet export_activity = DataverseActivity\n    | where Message == \"ExportToExcel\"\n    | extend QueryCount = iif(QueryResults has \",\", todouble(countof(tostring(QueryResults), ',') + 1), double(1));\nlet current_activity = export_activity\n    | where TimeGenerated > ago(query_frequency)\n    | extend RecordId = split(QueryResults, \",\")\n    | summarize\n        FirstEvent = min(TimeGenerated),\n        CurrentExportRate = sum(QueryCount),\n        SampleRecordIds = make_set(RecordId, 1000)\n        by UserId, InstanceUrl;\nlet historical_activity = export_activity\n    | where TimeGenerated between(ago(query_lookback) .. ago(query_frequency))\n    | summarize HistoricalBaseline = sum(QueryCount) by HistoricalUserId = UserId, InstanceUrl;\ncurrent_activity\n| join kind=leftouter(historical_activity) on $left.UserId == $right.HistoricalUserId, InstanceUrl\n| extend BaselineThreshold = iif(isnotnull(HistoricalBaseline), HistoricalBaseline, todouble(mass_export_threshold))\n| where CurrentExportRate > BaselineThreshold\n| join kind=inner(export_activity\n    | where TimeGenerated > ago(query_frequency)\n    | summarize EntityCount = sum(QueryCount) by UserId, ClientIp, InstanceUrl, EntityName\n    | extend Details = bag_pack(\"EntityName\", EntityName, \"EntityCount\", EntityCount)\n    | summarize Details = make_set(Details, 100) by UserId, ClientIp, InstanceUrl)\n    on UserId, InstanceUrl\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    FirstEvent,\n    UserId,\n    ClientIp,\n    BaselineThreshold,\n    CurrentExportRate,\n    Details,\n    SampleRecordIds,\n    InstanceUrl,\n    AccountName,\n    UPNSuffix,\n    CloudAppId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unexpected user agent strings.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where isnotempty(HttpUserAgentOriginal)\n| where strlen(HttpUserAgentOriginal) <= 10\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Attackers could update the SAML provider in order to create unauthorized but valid tokens and represent them to services that trust SAML tokens from the environment. These tokens can then be used to access resources. More about this API at https://docs.aws.amazon.com/IAM/latest/APIReference/API_UpdateSAMLProvider.html \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"UpdateSAMLProvider\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for an active Azure Premium P2 license is required to use and edit this policy. \n You will be required to have setup the MFA Policy before activating this policy\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'AzureSecureScoreSignInRiskPolicy'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects malicious users blocked by CTERA Ransom Protect AI engine. Topic: CTERA"}, {"role": "assistant", "content": "Syslog\n| where SyslogMessage contains \"Ransom Protect mechanism blocked\"\n| extend \n    Portal = extract(\"portal:(\\\\w+)\", 1, SyslogMessage),\n    EdgeFiler = extract(\"Edge Filer:(\\\\w+-\\\\d+)\", 1, SyslogMessage),\n    IP = extract(\"IP:([0-9.]+)\", 1, SyslogMessage),\n    User = extract(\"user:(\\\\w+)\", 1, SyslogMessage),\n    BlockedTime = extract(\"at ([^ ]+)\", 1, SyslogMessage)\n| project TimeGenerated, Portal, EdgeFiler, IP, User, BlockedTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects query on sensitive or restricted table.\n Topic: Snowflake"}, {"role": "assistant", "content": "let r_tbl = dynamic(['table_name']);\nSnowflake\n| where QUERY_TYPE_s =~ 'SELECT'\n| where EXECUTION_STATUS_s =~ 'SUCCESS'\n| extend tbl = extract(@'(FROM|from)\\s(\\S+)\\s', 2, QUERY_TEXT_s)\n| where tbl in~ (r_tbl)\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches top WAF rules triggered.\n Topic: Cloudflare"}, {"role": "assistant", "content": "Cloudflare\n| where TimeGenerated > ago(24h)\n| where isnotempty(WAFRuleID)\n| summarize count() by WAFRuleID, WAFRuleMessage, EdgeRequestHost\n| order by count_\n| extend CloudAppCustomEntity = EdgeRequestHost\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection method identifies potential cases of file enumeration activity. The query is designed to identify client sources that generate multiple requests resulting in 404 error codes\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "// HTTP response status codes indicate whether a specific HTTP request has been successfully completed.\n// Please refer this for more details: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\nlet HTTPErrorCode=dynamic([\"404\"]);\nlet threshold = 10; // You can update this threshold to the value that suites your environment\n// let FileNotFoundRequests = \n_Im_WebSession (starttime=ago(1h))\n| where EventResultDetails in~ (HTTPErrorCode)\n// Filter the logs to include only HTTP GET requests with an HTTP status code of 404 and '/' in the URL\n| where HttpRequestMethod =~ \"GET\" and Url contains \"/\"\n| summarize\n    RequestCount = count(),\n    FileCount=dcount(Url),\n    EventStartTime=min(TimeGenerated),\n    EventEndTime=max(TimeGenerated),\n    RequestURLs = make_set(Url, 100),\n    DestinationIPList=make_set(DstIpAddr, 100)\n    by SrcIpAddr, SrcUsername, SrcHostname, DstHostname\n| where RequestCount > threshold  // Adjust the threshold as per your requirements\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when executable file types are uploaded to Office services such as SharePoint and OneDrive.\nList currently includes exe, inf, gzip, cmd, bat file extensions.\nAdditionally, identifies when a given user is uploading these files to another users workspace.\nThis may be indication of a staging location for malware or other malicious activity.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "// a threshold can be enabled, see commented line below for PrevSeenCount\nlet threshold = 2;\nlet uploadOp = 'FileUploaded';\n// Extensions that are interesting. Add/Remove to this list as you see fit\nlet execExt = dynamic(['exe', 'inf', 'gzip', 'cmd', 'bat']);\nlet starttime = 8d;\nlet endtime = 1d;\nOfficeActivity | where TimeGenerated >= ago(endtime)\n// Limited to File Uploads due to potential noise, comment out the Operation statement below to include any operation type\n// Additional, but potentially noisy operation types that include Uploads and Downloads can be included by adding the following - Operation contains \"upload\" or Operation contains \"download\"\n| where Operation =~ uploadOp\n| where SourceFileExtension has_any (execExt)\n| project TimeGenerated, OfficeId, OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, UserAgent, Site_Url, SourceRelativeUrl, SourceFileName\n| join kind= leftanti (\nOfficeActivity | where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where Operation =~ uploadOp\n| where SourceFileExtension has_any (execExt)\n| summarize SourceRelativeUrl = make_set(SourceRelativeUrl, 100000), UserId = make_set(UserId, 100000) , PrevSeenCount = count() by SourceFileName\n// To exclude previous matches when only above a specific count, change threshold above and uncomment the line below\n//| where PrevSeenCount > threshold\n| mvexpand SourceRelativeUrl, UserId\n| extend SourceRelativeUrl = tostring(SourceRelativeUrl), UserId = tostring(UserId)\n) on SourceFileName, SourceRelativeUrl, UserId\n| extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])\n| extend UserIdUserFolderFormat = tolower(replace_regex(UserId, '@|\\\\.', '_'))\n// identify when UserId is not a match to the specific site url personal folder reference\n| extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true , false )\n| summarize TimeGenerated = make_list(TimeGenerated, 100000), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated),\nUserAgents = make_list(UserAgent, 100000), OfficeIds = make_list(OfficeId, 100000), SourceRelativeUrls = make_list(SourceRelativeUrl, 100000), FileNames = make_list(SourceFileName, 100000)\nby OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, Site_Url, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when file was added to exception list on a host.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "McAfeeEPOEvent\n| where EventId in ('1029', '2005', '2015')\n| project DvcIpAddr, DstFileName\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates an informational incident based on Jamf Protect Unified Log data in Microsoft Sentinel\n Topic: Jamf Protect"}, {"role": "assistant", "content": "JamfProtect\n| where EventType == \"UnifiedLog\"\n| where isnotempty(EventSeverity)\n| extend Host_IPs = tostring(parse_json(DvcIpAddr)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when global permission added.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where EventMessage =~ 'Global permission added'\n| project EventCreationTime, ObjectItemName, UserName, SrcIpAddr, ChangedValues\n| extend AccountCustomEntity = UserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection monitors for the behavior that SharpRDP exhibits on the target system. The most relevant is leveraging taskmgr.exe to gain elevated execution, which means that taskmgr.exe is creating unexpected child processes.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let executions = DeviceProcessEvents\n| where InitiatingProcessFileName contains \"taskmgr\" and AccountName !contains \"_ladm\" // Include your LAPS /RID500 admin naming convention here. \n// Add the below filter to look for stock SharpRDP behavior. However, with minorchanges to the stock version of SharpRDP the filter below can be bypassed.\n//| where not(InitiatingProcessCommandLine has_any (\"/1\",\"/2\",\"/3\",\"/4\"))\n| where not(FolderPath =~ @\"c:\\Windows\\system32\\WerFault.exe\" and ProcessCommandLine contains \"-u -p\")\n| where not(FolderPath =~ @\"c:\\windows\\system32\\mmc.exe\" and ProcessCommandLine contains @\"C:\\WINDOWS\\System32\\services.msc\")\n| where not(FolderPath =~ @\"c:\\windows\\system32\\resmon.exe\");\nexecutions\n| join kind=leftsemi  (DeviceLogonEvents\n| where LogonType in ('Unlock', 'RemoteInteractive') and not (LogonType == 'Unlock' and RemoteIP == '127.0.0.1') and RemoteIP != \"\" and ActionType == \"LogonSuccess\") on DeviceId, LogonId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The policy detects AWS policies attached to IAM users or roles that have not used it during the last X days. It is recommended to remove unused policies from identities to reduce risk. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"Stale AWS policy attachment to identity\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects internet access from public IP.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "let ip_except = dynamic(['127.0.0.2']);    //Add exceptions to this list\nCiscoWSAEvent\n| where ipv4_is_private(SrcIpAddr) == false\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in CommonSecurityLog Event data from any FileHash published in the Microsoft COVID-19 Threat Intel Feed - as described at https://www.microsoft.com/security/blog/2020/05/14/open-sourcing-covid-threat-intelligence/\n Topic: PaloAlto-PAN-OS"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet covidIndicators = (externaldata(TimeGenerated:datetime, FileHashValue:string, FileHashType: string, TlpLevel: string, Product: string, ThreatType: string, Description: string )\n[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.Covid19.Indicators.csv\"] with (format=\"csv\"));\nlet fileHashIndicators = covidIndicators\n| where isnotempty(FileHashValue);\n// Handle matches against both lower case and uppercase versions of the hash:\n(fileHashIndicators | extend FileHashValue = tolower(FileHashValue)\n| union (fileHashIndicators | extend FileHashValue = toupper(FileHashValue)))\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n|  join kind=innerunique (\n   CommonSecurityLog | where TimeGenerated >= ago(dt_lookBack)\n   | where isnotempty(FileHash)\n   | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n   )\non $left.FileHashValue == $right.FileHash\n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by FileHashValue\n| project CommonSecurityLog_TimeGenerated, FileHashValue, FileHashType, Description, ThreatType,\nSourceIP, SourcePort, DestinationIP, DestinationPort, SourceUserID, SourceUserName, DeviceName, DeviceAction,\nRequestURL, DestinationUserName, DestinationUserID, ApplicationProtocol, Activity\n| extend AccountName = tostring(split(SourceUserName, \"@\")[0]), AccountUPNSuffix = tostring(split(SourceUserName, \"@\")[1])\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "There are several potential pipeline steps that could be modified by an attacker to inject malicious code into the build cycle. A likely attacker path is the modification to an existing pipeline that they have access to. \nThis detection looks for users modifying a pipeline when they have not previously been observed modifying or creating that pipeline before. This query also joins events with data to Microsoft Entra ID Protection in order to show if the user conducting the action has any associated Microsoft Entra ID Protection alerts. You can also choose to filter this detection to only alert when the user also has Microsoft Entra ID Protection alerts associated with them.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "// Set the lookback to determine if user has created pipelines before\nlet timeback = 14d;\n// Set the period for detections\nlet timeframe = 1d;\n// Get a list of previous Release Pipeline creators to exclude\nlet releaseusers = AzureDevOpsAuditing\n| where TimeGenerated > ago(timeback) and TimeGenerated < ago(timeframe)\n| where OperationName in (\"Release.ReleasePipelineCreated\", \"Release.ReleasePipelineModified\")\n// We want to look for users performing actions in specific projects so we create this userscope object to match on\n| extend UserScope = strcat(ActorUserId, \"-\", ProjectName)\n| summarize by UserScope;\n// Get Release Pipeline creations by new users\nAzureDevOpsAuditing\n| where TimeGenerated > ago(timeframe)\n| where OperationName =~ \"Release.ReleasePipelineModified\"\n| extend UserScope = strcat(ActorUserId, \"-\", ProjectName)\n| where UserScope !in (releaseusers)\n| extend ActorUPN = tolower(ActorUPN)\n| project-away Id, ActivityId, ActorCUID, ScopeId, ProjectId, TenantId, SourceSystem, UserScope\n// See if any of these users have Azure AD alerts associated with them in the same timeframe\n| join kind = leftouter (\nSecurityAlert\n| where TimeGenerated > ago(timeframe)\n| where ProviderName == \"IPC\"\n| extend AadUserId = tostring(parse_json(Entities)[0].AadUserId)\n| summarize Alerts=count() by AadUserId) on $left.ActorUserId == $right.AadUserId\n| extend Alerts = iif(isnotempty(Alerts), Alerts, 0)\n// Uncomment the line below to only show results where the user as AADIdP alerts\n//| where Alerts > 0\n| extend timestamp = TimeGenerated\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New Subdomain Infringement with severity Low found\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL\n| where severity_s == \"Low\"\n| where type_s == \"Subdomain Infringement\"\n| where status_s != \"Closed\" or status_s != \"Resolved\"\n| where remarks_s == \"New Subdomain Infringement with severity Low found\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for new custom roles created for the last 24 hours.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where TimeGenerated > ago(24h)\n| where PayloadMethodname =~ 'google.iam.admin.v1.CreateRole'\n| extend result = parse_json(todynamic(PayloadAuthorizationinfo))[0]['granted']\n| where result =~ 'true'\n| project-away result\n| extend timestamp = TimeGenerated, AccountCustomEntity = PayloadRequestAccountId, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when multiple admin 2FA failures occurs.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "let threshold = 10;\nCiscoDuo\n| where DvcAction =~ \"admin_2fa_error\"\n| summarize count() by DstUserName, bin(TimeGenerated, 10m)\n| where count_ > threshold\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects any failed event for a particular user.\n Topic: SailPointIdentityNow"}, {"role": "assistant", "content": "declare query_parameters(lbperiod:timespan = 14d, type:string = \"ACCESS_ITEM\", actorName:string = \"test.tester\", targetName:string = \"test.tester\");\n  SailPointIDN_Events_CL\n  | where TimeGenerated > ago(lbperiod)\n  | where type_s == type\n  | where status_s == \"FAILED\"\n  | where actor_name_s == actorName\n  | where target_name_s == targetName\n  | sort by created_t\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects request to sensitive files.\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "let forbidden_files = dynamic(['shadow', 'passwd', 'hosts', 'id_rsa']);\nOracleWebLogicServerEvent    \n| extend File = extract(@'(.*\\/)?(.*)', 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| where File in~ (forbidden_files)\n| extend FileCustomEntity = File, UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies compromises and attacks and detect malicious activities in ones URL entity from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack)\n| where isnotempty(Url)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| join kind=innerunique (CloudAppEvents\n| where TimeGenerated >= ago(dt_lookBack)\n| extend Url = extract(\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\", 1, tostring(ActivityObjects))\n| extend userPrincipalName = tostring(RawEventData.UserId)\n| extend TargetResourceDisplayName = tostring(ActivityObjects[0].displayName)\n| extend CloudApps_TimeGenerated = TimeGenerated) on Url\n| where CloudApps_TimeGenerated < ExpirationDateTime\n| summarize CloudApps_TimeGenerated = argmax(CloudApps_TimeGenerated, *) by IndicatorId, Url\n| extend Description = max_CloudApps_TimeGenerated_Description, ActivityGroupNames = max_CloudApps_TimeGenerated_ActivityGroupNames, ThreatType = max_CloudApps_TimeGenerated_ThreatType, ExpirationDateTime = max_CloudApps_TimeGenerated_ExpirationDateTime, ConfidenceScore = max_CloudApps_TimeGenerated_ConfidenceScore, IPAddress = max_CloudApps_TimeGenerated_IPAddress, AccountObjectId = max_CloudApps_TimeGenerated_AccountObjectId, AccountDisplayName = max_CloudApps_TimeGenerated_AccountDisplayName, ObjectName = max_CloudApps_TimeGenerated_ObjectName, Application= max_CloudApps_TimeGenerated_Application, ApplicationID = max_CloudApps_TimeGenerated_ApplicationId, userPrincipalName = max_CloudApps_TimeGenerated_userPrincipalName\n| project CloudApps_TimeGenerated, Description, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, IPAddress, userPrincipalName, AccountObjectId, AccountDisplayName, ObjectName, Application, ApplicationID\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An Active Directory domain privilege escalation vulnerability that enables a privileged user to access the Domain Controller by abusing Active Directory Certificate Service\n Topic: Silverfort"}, {"role": "assistant", "content": "CommonSecurityLog \n| where DeviceVendor has 'Silverfort'\n| where DeviceProduct has 'Admin Console'\n| where DeviceEventClassID == \"NewIncident\"\n| where Message has \"Certifried\"\n| extend UserName = parse_json(replace('^\"\"|\"\"$', '', Message))['userName']"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures related to password issues\n Topic: Alsid For AD"}, {"role": "assistant", "content": "let SeverityTable=datatable(Severity:string,Level:int) [\n\"low\", 1,\n\"medium\", 2,\n\"high\", 3,\n\"critical\", 4\n];\nlet codeNameList = datatable(Codename:string)[\"C-CLEARTEXT-PASSWORD\", \"C-PASSWORD-DONT-EXPIRE\", \"C-USER-REVER-PWDS\", \"C-PASSWORD-POLICY\", \"C-USER-PASSWORD\", \"C-KRBTGT-PASSWORD\", \"C-AAD-SSO-PASSWORD\", \"C-REVER-PWD-GPO\"];\nafad_parser\n| where MessageType == 0 and Codename in~ (codeNameList)\n| lookup kind=leftouter SeverityTable on Severity\n| order by Level\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A normal user activity consists mostly of downloading data. Uploaded data is usually small unless there is a file/data upload to a website. Calculate the sum of BytesOut per Source-Destination pair over 12/24 hours.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "let timeframe = 1d;\nCisco_Umbrella \n| where EventType == \"proxylogs\"\n| where TimeGenerated > ago(timeframe)\n| summarize sum(DstBytes) by SrcIpAddr,DstIpAddr\n| sort by sum_DstBytes desc\n| extend Message = \"Possible data exfiltration\"\n| extend IPCustomEntity = SrcIpAddr"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a user viewed agents passphrase.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where ActivityType == 64\n| extend AccountCustomEntity = SrcUserName, HostCustomEntity = DataComputerName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects attempts to delete backups, which could be ransomware activity to prevent file restoration and disrupt business services.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "( union isfuzzy=true\n(SecurityEvent\n| where EventID==4688\n| extend FileName = Process, ProcessCommandLine = CommandLine\n| where FileName =~ \"vssadmin.exe\" and ProcessCommandLine has \"delete shadows\"\n or ProcessCommandLine has(\"bcdedit\") and ProcessCommandLine has_any(\"recoveryenabled no\", \"bootstatuspolicy ignoreallfailures\")\n or (ProcessCommandLine has \"wmic\" and ProcessCommandLine has \"shadowcopy delete\")\n or ProcessCommandLine has \"wbadmin\" and ProcessCommandLine has \"delete\" and ProcessCommandLine has_any(\"backup\", \"catalog\", \"systemstatebackup\")\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, ProcessCustomEntity = NewProcessName\n),\n(WindowsEvent\n| where EventID == 4688 \n| extend ProcessCommandLine = tostring(EventData.CommandLine)\n| where  EventData has \"vssadmin.exe\" and ProcessCommandLine has \"delete shadows\"\n or ProcessCommandLine has(\"bcdedit\") and ProcessCommandLine has_any(\"recoveryenabled no\", \"bootstatuspolicy ignoreallfailures\")\n or (ProcessCommandLine has \"wmic\" and ProcessCommandLine has \"shadowcopy delete\")\n or ProcessCommandLine has \"wbadmin\" and ProcessCommandLine has \"delete\" and ProcessCommandLine has_any(\"backup\", \"catalog\", \"systemstatebackup\") \n| extend Account = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account, ProcessCustomEntity = tostring(EventData.NewProcessName)\n),\n(DeviceProcessEvents\n| where FileName =~ \"vssadmin.exe\" and ProcessCommandLine has \"delete shadows\"\n or ProcessCommandLine has(\"bcdedit\") and ProcessCommandLine has_any(\"recoveryenabled no\", \"bootstatuspolicy ignoreallfailures\")\n or (ProcessCommandLine has \"wmic\" and ProcessCommandLine has \"shadowcopy delete\")\n or ProcessCommandLine has \"wbadmin\" and ProcessCommandLine has \"delete\" and ProcessCommandLine has_any(\"backup\", \"catalog\", \"systemstatebackup\")\n| extend Account = strcat(AccountDomain,\"\\\\\", AccountName)\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = DeviceName, ProcessCustomEntity = InitiatingProcessFileName\n),\n(imProcessCreate\n| extend FileName = Process, ProcessCommandLine = CommandLine\n| where FileName =~ \"vssadmin.exe\" and ProcessCommandLine has \"delete shadows\"\n or ProcessCommandLine has(\"bcdedit\") and ProcessCommandLine has_any(\"recoveryenabled no\", \"bootstatuspolicy ignoreallfailures\")\n or (ProcessCommandLine has \"wmic\" and ProcessCommandLine has \"shadowcopy delete\")\n or ProcessCommandLine has \"wbadmin\" and ProcessCommandLine has \"delete\" and ProcessCommandLine has_any(\"backup\", \"catalog\", \"systemstatebackup\")\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUsername, HostCustomEntity = Dvc, ProcessCustomEntity = Process\n)\n)\n| extend NTDomain = tostring(split(AccountCustomEntity, '\\\\', 0)[0]), UserName = tostring(split(AccountCustomEntity, '\\\\', 1)[0])\n| extend HostName = tostring(split(HostCustomEntity, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(HostCustomEntity, '.'), 1, -1), '.'))\n| extend Account_0_Name = UserName\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n| extend Process_0_ProcessId = ProcessCustomEntity\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches users with multi IP addresses.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where TimeGenerated > ago(24h)\n| where isnotempty(SrcIpAddr)\n| summarize UserIP = make_set(SrcIpAddr) by ActorEmail\n| where array_length(UserIP) > 3\n| extend IPCustomEntity = UserIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies users accessing Dynamics with a User Agent that has not been seen in any Office 365 workloads in the last 14 days. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_lookback = 14d;\nlet query_frequency = 1h;\nlet known_useragents = dynamic([\n    // Enter known user agents to exclude.\n    // example:\n    // \"Agent1\", \"Agent2\", \"Agent3\"\n    ]);\nDataverseActivity\n| where TimeGenerated > ago(query_frequency)\n| where not (UserId has_any (\"@onmicrosoft.com\", \"@microsoft.com\", \"Unknown\"))\n| where isnotempty(UserAgent)\n| where UserAgent !in~ (known_useragents)\n| where UserAgent !hasprefix \"azure-logic-apps\" and UserAgent !hasprefix \"PowerApps\"\n| join kind = leftanti (\n    OfficeActivity\n    | where TimeGenerated between(ago(query_lookback) .. ago(query_frequency))\n    | where isnotempty(UserAgent)\n    | summarize by UserAgent)\n    on UserAgent\n// Exclude user agents with a render agent to reduce noise.\n| join kind = leftanti(\n    DataverseActivity\n    | where TimeGenerated > ago(query_frequency)\n    | where UserAgent has_any (\"Gecko\", \"WebKit\", \"Presto\", \"Trident\", \"EdgeHTML\", \"Blink\"))\n    on UserAgent\n| summarize\n    FirstSeen = min(TimeGenerated),\n    LatestIP = arg_max(ClientIp, TimeGenerated)\n    by UserAgent, UserId, InstanceUrl\n| extend\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1]),\n    CloudAppId = int(32780)\n| project\n    FirstSeen,\n    UserId,\n    UserAgent,\n    LatestIP,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies users who created new package feed to Azure DevOps pipelines, having no prior history of feed creation, suggesting possible unauthorized activity and requiring verification.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = 30d;\n// Set the period for detections\n// Get a list of previous Release Pipeline creators to exclude\nlet releaseusers = AzureDevOpsAuditing\n| where TimeGenerated between(ago(lookback)..starttime)\n| where OperationName =~ \"Release.ReleasePipelineCreated\"\n// We want to look for users performing actions in specific organizations so we creat this userscope object to match on\n| extend UserScope = strcat(ActorUPN, \"-\", ProjectName)\n| summarize by UserScope;\n// Get Release Pipeline creations by new users\nAzureDevOpsAuditing\n| where TimeGenerated between(starttime..endtime)\n| where OperationName =~ \"Release.ReleasePipelineCreated\"\n| extend UserScope = strcat(ActorUPN, \"-\", ProjectName)\n| where UserScope !in (releaseusers)\n| extend ActorUPN = tolower(ActorUPN)\n| project-away Id, ActivityId, ActorCUID, ScopeId, ProjectId, TenantId, SourceSystem, UserScope\n// See if any of these users have Azure AD alerts associated with them in the same timeframe\n| join kind = leftouter (\nSecurityAlert\n| where TimeGenerated between(starttime..endtime)\n| where ProviderName == \"IPC\"\n| extend AadUserId = tostring(parse_json(Entities)[0].AadUserId)\n| summarize Alerts=count() by AadUserId) on $left.ActorUserId == $right.AadUserId\n| project-reorder TimeGenerated, ProjectName, Details, ActorUPN, IpAddress, UserAgent, Alerts\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a user account has been added to a privileged built in domain local group or global group such as the Enterprise Admins, Cert Publishers or DnsAdmins. Be sure to verify this is an expected addition.\n Topic: Detections"}, {"role": "assistant", "content": "// For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$\";\nunion isfuzzy=true\n(\nSecurityEvent\n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group\n| where EventID in (4728, 4732, 4756)\n| where AccountType == \"User\"\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| extend SimpleMemberName = iff(MemberName == \"-\", MemberName, substring(MemberName, 3, indexof_regex(MemberName, @\",OU|,CN\") - 3))\n| project TimeGenerated, EventID, Activity, Computer, SimpleMemberName, MemberName, MemberSid, TargetAccount, TargetUserName, TargetDomainName, TargetSid, UserPrincipalName, \nSubjectAccount, SubjectUserName, SubjectDomainName, SubjectUserSid\n),\n(\nWindowsEvent\n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group\n| where EventID in (4728, 4732, 4756) and not(EventData has \"S-1-5-32-555\")\n| extend SubjectUserSid = tostring(EventData.SubjectUserSid)\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend AccountType=case(Account endswith \"$\" or SubjectUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(SubjectUserSid), \"\", \"User\")\n| extend MemberName = tostring(EventData.MemberName)\n| where AccountType == \"User\"\n| extend TargetSid = tostring(EventData.TargetSid)\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| extend SimpleMemberName = iff(MemberName == \"-\", MemberName, substring(MemberName, 3, indexof_regex(MemberName, @\",OU|,CN\") - 3))\n| extend MemberSid = tostring(EventData.MemberSid)\n| extend TargetUserName = tostring(EventData.TargetUserName), TargetDomainName = tostring(EventData.TargetDomainName), \nTargetAccount = strcat(tostring(EventData.TargetDomainName),\"\\\\\", tostring(EventData.TargetUserName))\n| extend UserPrincipalName = tostring(EventData.UserPrincipalName)\n| extend SubjectUserName = tostring(EventData.SubjectUserName), SubjectDomainName = tostring(EventData.SubjectDomainName), \nSubjectAccount = strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| project TimeGenerated, EventID, Computer, SimpleMemberName, MemberName, MemberSid, TargetAccount, TargetUserName, TargetDomainName, TargetSid, UserPrincipalName, \nSubjectAccount, SubjectUserName, SubjectDomainName, SubjectUserSid\n)\n| extend GroupAddedMemberTo = TargetAccount, AddedByAccount = SubjectAccount, AddedByAccountName = SubjectUserName, AddedByAccountDomainName = SubjectDomainName, \nAddedByAccountSid = SubjectUserSid, AddedMemberName = SimpleMemberName, AddedMemberSid = MemberSid\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for most compromising sign-in attempts come from legacy authentication. \n Older office clients such as Office 2010 do not support modern authentication and use legacy protocols such as IMAP, SMTP, and POP3. \n Legacy authentication does not support multi-factor authentication (MFA).\n Even if an MFA policy is configured in your environment, bad actors can bypass these enforcements through legacy protocols.\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'AzureSecureScoreBlockLegacyAuthentication'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may steal the credentials of a specific user or service account using credential access techniques or capture credentials earlier in their reconnaissance process through social engineering as a means of gaining initial access. APT33, for example, has used valid accounts for initial access. The query below generates an output of a successful sign-in performed by a user from a new geolocation he has never connected to before and none of his peers as well.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "BehaviorAnalytics\n| where ActionType =~ \"Sign-in\"\n| where ActivityInsights.FirstTimeConnectionFromCountryObservedInTenant == True and ActivityInsights.CountryUncommonlyConnectedFromAmongPeers == True\n    | join kind=inner (\nSigninLogs\n) on $left.SourceRecordId == $right._ItemId\n| extend UserPrincipalName = iff(UserPrincipalName has \"#EXT#\",replace_string(tostring(split(UserPrincipalName, \"#\")[0]),\"_\",\"@\"),UserPrincipalName),\nUserName = iff(UserName has \"#EXT#\",replace_string(tostring(split(UserPrincipalName, \"#\")[0]),\"_\",\"@\"),UserName)\n| project TimeGenerated, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"Evidence\"]=ActivityInsights, ResourceDisplayName, AppDisplayName, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, ResourceId\n| extend Name=split(UserPrincipalName, \"@\")[0], UPNSuffix=split(UserPrincipalName, \"@\")[1]\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SourceIPAddress\n| extend AzureResource_0_ResourceId = ResourceId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects external email forwarding with SAP download for sensitive financial transactions. Such activity by attackers may lead to financial gain, IP theft, or operational disruption.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "let Keywords = dynamic([\"payroll\", \"invoice\", \"payment\", \"statement\", \"confidential\", \"bank account\", \"wire\", \"wire transfer\"]);\nEmailEvents\n| extend Account = tostring(split(SenderFromAddress, '@', 0)[0]), UPNSuffix = tostring(split(SenderFromAddress, '@', 1)[0])\n| project NetworkMessageId, Account, RecipientEmailAddress, SenderIPv4, Subject, EmailAction, DeliveryLocation, TenantId\n| join kind=innerunique \n(OfficeActivity \n| where OfficeWorkload =~ \"Exchange\"\n| where Operation in~ (\"Set-Mailbox\", \"New-InboxRule\", \"Set-InboxRule\")\n| where Parameters has_any (\"ForwardTo\", \"RedirectTo\", \"ForwardingSmtpAddress\")\n| extend Events=todynamic(Parameters)\n| where UserId has \"@\"\n| extend Account = tostring(split(UserId, '@', 0)[0]), UPNSuffix = tostring(split(UserId, '@', 1)[0])\n| parse Events  with * \"SubjectContainsWords\" SubjectContainsWords '}'*\n| parse Events  with * \"BodyContainsWords\" BodyContainsWords '}'*\n| parse Events  with * \"SubjectOrBodyContainsWords\" SubjectOrBodyContainsWords '}'*\n| where SubjectContainsWords has_any (Keywords) or BodyContainsWords has_any (Keywords) or SubjectOrBodyContainsWords has_any (Keywords)\n| extend ClientIPAddress = case( ClientIP has \".\", tostring(split(ClientIP,\":\")[0]), ClientIP has \"[\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))), ClientIP )\n| extend Keyword = iff(isnotempty(SubjectContainsWords), SubjectContainsWords, (iff(isnotempty(BodyContainsWords),BodyContainsWords,SubjectOrBodyContainsWords )))\n| extend RuleDetail = case(OfficeObjectId contains '/' , tostring(split(OfficeObjectId, '/')[-1]) , tostring(split(OfficeObjectId, '\\\\')[-1]))\n| summarize count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by  UserId, ClientIPAddress, ResultStatus, Keyword, OriginatingServer, OfficeObjectId, RuleDetail,Account) \non Account\n| join kind=inner \n(\nSAPAuditLog \n| where MessageID == \"AUY\" //AUY= Download bytes\n| extend ByteCount= toint(replace_string(replace_string(Variable1, \".\",\"\"), \",\",\"\")), Code=Variable2, Path= Variable3\n| summarize DownloadsByUser = count(), Paths= make_set(Variable3, 10), ByteCount=sum(ByteCount) by SystemID, ClientID, User, TerminalIPv6, Email, Host, TransactionCode, Instance\n| where Paths has_any (Keywords)\n) on $left.Account == $right.User, $left.RecipientEmailAddress == $right. Email\n| project StartTimeUtc, Account, SenderIPv4, Email, Host, Keyword, NetworkMessageId, OfficeObjectId, Paths, Subject, SystemID, TenantId, ClientID, DeliveryLocation, TransactionCode\n| extend UserName = tostring(split(Account, '@', 0)[0]), UPNSuffix = tostring(split(Account, '@', 1)[0])\n| extend Account_0_Name = UserName\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SenderIPv4\n| extend Host_0_HostName = Host\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies ransomware attacks detected by the Ransomware Protection service running on a Nasuni Edge Appliance. Topic: Nasuni"}, {"role": "assistant", "content": "Syslog\n| project TimeGenerated, Computer, SyslogMessage\n| where SyslogMessage has \"The Filer has detected a new ransomware attack\"\n| extend pattern = substring(SyslogMessage, indexof(SyslogMessage, \"(\")+1, indexof(SyslogMessage, \")\") - indexof(SyslogMessage,\"(\")-1)\n| extend volume_name = substring(SyslogMessage, indexof(SyslogMessage, \"volume\")+7, indexof(SyslogMessage,\". Visit\") - (indexof(SyslogMessage, \"volume\")+7))\n| sort by TimeGenerated desc"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies Device Registration from IP addresses identified as malicious by Okta ThreatInsight.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let Events = dynamic([\"device.enrollment.create\"]);\nlet ThreatInsightOperations = dynamic([\"security.threat.detected\", \"security.attack.start\", \"security.attack.end\" ]);\nlet DeviceRegistrations =  OktaSSO\n| where eventType_s in (Events)\n| where outcome_result_s == \"SUCCESS\"\n| extend oktaDeviceId_ = tostring(parse_json(tostring(parse_json(target_s)[0].detailEntry)).oktaDeviceId), NewDevice_osPlatform = tostring(parse_json(tostring(parse_json(target_s)[0].detailEntry)).osPlatform),  NewDevice_osVersion = tostring(parse_json(tostring(parse_json(target_s)[0].detailEntry)).osVersion), displayName_ = tostring(parse_json(target_s)[0].displayName)\n| extend Location = strcat(client_geographicalContext_city_s,  \" | \", client_geographicalContext_state_s,\" | \", client_geographicalContext_country_s)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by actor_alternateId_s, actor_displayName_s, client_userAgent_os_s, client_ipAddress_s, displayMessage_s, outcome_result_s,\noutcome_reason_s, column_ifexists('debugContext_debugData_logOnlySecurityData_s', \"\"), column_ifexists('debugContext_debugData_threatSuspected_s',\"\"), client_userAgent_rawUserAgent_s,client_userAgent_browser_s, severity_s, NewDevice_osPlatform, NewDevice_osVersion, eventType_s, Location ;\nlet ThreatInsightEvents = OktaSSO\n| where eventType_s in (ThreatInsightOperations)\n| extend SuspiciousIP = actor_displayName_s\n| project TimeGenerated, column_ifexists('debugContext_debugData_threatDetections_s', \"\"), client_userAgent_rawUserAgent_s, severity_s, outcome_result_s, eventType_s, displayMessage_s, SuspiciousIP, transaction_id_s;\nDeviceRegistrations \n| join kind=inner (ThreatInsightEvents) on $left.client_ipAddress_s == $right.SuspiciousIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for Microsoft Defender AV detections related to  Dev-0530 actors.\nIn Microsoft Sentinel the SecurityAlerts table includes only the Device Name of the affected device, this query joins the DeviceInfo table to clearly connect other information such as Device group, ip, logged on users etc. This would allow the Microsoft Sentinel analyst to have more context related to the alert, if available.\n Topic: Detections"}, {"role": "assistant", "content": "let Dev0530_threats = dynamic([\"Trojan:Win32/SiennaPurple.A\", \"Ransom:Win32/SiennaBlue.A\", \"Ransom:Win32/SiennaBlue.B\"]);\nSecurityAlert\n| where ProviderName == \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| extend ThreatFamilyName = tostring(parse_json(ExtendedProperties).ThreatFamilyName)\n| where ThreatName in~ (Dev0530_threats) or ThreatFamilyName in~ (Dev0530_threats)\n| extend CompromisedEntity = tolower(CompromisedEntity)\n| join kind=inner (DeviceInfo\n    | extend DeviceName = tolower(DeviceName)\n) on $left.CompromisedEntity == $right.DeviceName\n| summarize by bin(TimeGenerated, 1d), DisplayName, ThreatName, ThreatFamilyName, PublicIP, AlertSeverity, Description, tostring(LoggedOnUsers), DeviceId, TenantId, CompromisedEntity, tostring(LoggedOnUsers), ProductName, Entities\n| extend HostName = tostring(split(CompromisedEntity, \".\")[0]), DomainIndex = toint(indexof(CompromisedEntity, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(CompromisedEntity, DomainIndex + 1), CompromisedEntity)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for devices with high severity event(s). Topic: AristaAwakeSecurity"}, {"role": "assistant", "content": "CommonSecurityLog\n| where DeviceVendor == \"Arista Networks\" and DeviceProduct == \"Awake Security\" and toint(LogSeverity) > 6\n| summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), Models=make_set(Activity), ASPMatchURLs=make_set(DeviceCustomString2), SourceIPs=make_set(SourceIP),\n  DestinationIPs=make_set(DestinationIP), ModelMatchCount=sum(EventCount), MaxSeverity=max(todecimal  (LogSeverity)) by SourceHostName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Flags builds/releases that use a large number of service connections if they arent manually in the allow list.\nThis is to determine if someone is hijacking a build/release and adding many service connections in order to abuse or dump credentials from service connections.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "// How many greater than Service Connections you want to view per build/release\nlet ServiceConnectionThreshold = 4;\nlet BypassDefIds = datatable(DefId:string, Type:string, ProjectName:string)\n[\n//\"103\", \"Release\", \"ProjectA\",\n//\"42\", \"Release\", \"ProjectB\",\n//\"122\", \"Build\", \"ProjectB\"\n];\nAzureDevOpsAuditing\n| where OperationName == \"Library.ServiceConnectionExecuted\"\n| extend DefId = tostring(Data.DefinitionId), Type = tostring(Data.PlanType), ConnectionId = tostring(Data.ConnectionId)\n| parse ScopeDisplayName with OrganizationName ' (Organization)'\n| summarize CurrentCount = dcount(tostring(ConnectionId)), ConnectionNames = make_set(tostring(Data.ConnectionName)), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated)\n  by OrganizationName, tostring(DefId), tostring(Type), ProjectId, ProjectName, ActorUPN, IpAddress\n| where CurrentCount > ServiceConnectionThreshold\n| join kind=anti BypassDefIds on $left.DefId==$right.DefId and $left.Type == $right.Type and $left.ProjectName == $right.ProjectName\n| extend link = iif(\n  Type == \"Build\", strcat('https://dev.azure.com/', OrganizationName, '/', ProjectName, '/_build?definitionId=', DefId),\n  strcat('https://dev.azure.com/', OrganizationName, '/', ProjectName, '/_release?_a=releases&view=mine&definitionId=', DefId))\n| extend timestamp = StartTime\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for successful logons from known VPS provider network ranges.\n This is not an exhaustive list of VPS provider ranges but covers some of the most prevalent providers observed.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let IP_Data = (externaldata(network:string)\n[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/VPS_Networks.csv\"] with (format=\"csv\"));\nOktaSSO\n| where eventType_s =~ \"user.session.start\"\n| where outcome_result_s =~ \"SUCCESS\"\n| evaluate ipv4_lookup(IP_Data, client_ipAddress_s, network, return_unmatched = false)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by actor_alternateId_s, actor_displayName_s, client_userAgent_os_s, client_ipAddress_s, client_geographicalContext_state_s,displayMessage_s, outcome_result_s,\noutcome_reason_s, column_ifexists('debugContext_debugData_logOnlySecurityData_s', \"\"), debugContext_debugData_threatSuspected_s, client_userAgent_rawUserAgent_s,client_userAgent_browser_s, severity_s\n| extend Account_0_Name = actor_displayName_s\n| extend IP_0_Address = client_ipAddress_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for password reset requests events.\n Topic: PingFederate"}, {"role": "assistant", "content": "PingFederateEvent\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'PWD_RESET_REQUEST' or EventSubType =~ 'PWD_RESET_REQUEST'\n| extend AccountCustomEntity = DstUserName\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects DLP policy violation.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where NetworkDirection =~ 'Outgoing'\n| where tostring(AdditionalFields) has 'ESADLPVerdict'\n| extend dlp_verdict = extract(@'ESADLPVerdict\":\"(NOT_EVALUATED|NO TRIGGER|VIOLATION|NO VIOLATION)\"', 1, tostring(AdditionalFields))\n| where dlp_verdict =~ 'VIOLATION'\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows powershell scripts execution parameters.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where TimeGenerated > ago(24h)\n| where ActingProcessFileInternalName =~ 'powershell.exe'\n| summarize count() by ActorUsername, ActingProcessCommandLine\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Some top level domains (TLDs) are more commonly associated with malware for a range of \nreasons - including how easy domains on these TLDs are to obtain. Many of these may be undesirable \nfrom an enterprise policy perspective. You can update and extend the list of TLDs  you wish to search for.\nThe NameCount column provides an initial insight into how widespread the domain usage is across the environment.\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "// Add additional TLDs to this list are required.\nlet abusedTLD = dynamic([\"click\", \"club\", \"download\",  \"xxx\", \"xyz\"]);\nDnsEvents\n| where Name has \".\" \n| extend tld = tostring(split(Name, \".\")[-1])\n| where tld in~ (abusedTLD)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), NameCount = count() by Name, ClientIP, tld\n| order by NameCount desc\n| extend DNS_0_DomainName = Name\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a set of Azure NSG administrative and operational detection queries for hunting activities.\n Topic: Azure Activity"}, {"role": "assistant", "content": "let opValues = dynamic([\"Microsoft.Network/networkSecurityGroups/write\", \"Microsoft.Network/networkSecurityGroups/delete\"]);\n// Azure NSG Create / Update / Delete\nAzureActivity\n| where Category =~ \"Administrative\"\n| where OperationNameValue in~ (opValues)\n| where ActivitySubstatusValue in~ (\"Created\", \"OK\",\"Accepted\")\n| sort by TimeGenerated desc\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = CallerIpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests with commands in URI.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "let cmd_lst = dynamic(['%2fetc%2fpasswd', '%2fetc%2fshadow', 'ping', 'whoami', 'phpinfo', '%2fbin%2fbash', 'curl', 'exec(', 'wget', 'python', 'gcc' , 'uname', 'systeminfo', 'rout', 'hostname', 'ifconfig']);\nImpervaWAFCloud\n| where QueryString has_any (cmd_lst)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects Base64-encoded IPv4 addresses in outbound request URLs. It uses pre-computed base64 offsets for IPv4 sequences, eliminating the need for decoding. After identifying a candidate,the query extracts the plaintext IPv4 address pattern.\n Topic: Network Threat Protection Essentials"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet ipv4_plaintext_extraction_regex = @\"((?:(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.)){3}(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1,3})\";\nlet ipv4_encoded_identification_regex = @\"\\=([a-zA-Z0-9\\/\\+]*(?:(?:MC|Au|wL|MS|Eu|xL|Mi|Iu|yL|My|Mu|zL|NC|Qu|0L|NS|Uu|1L|Ni|Yu|2L|Ny|cu|3L|OC|gu|4L|OS|ku|5L){1}[a-zA-Z0-9\\/\\+]{2,4}){3}[a-zA-Z0-9\\/\\+\\=]*)\";\nlet ipv4_decoded_hex_extract = @\"((?:(?:61|62|63|64|65|66|67|68|69|6a|6b|6c|6d|6e|6f|70|71|72|73|74|75|76|77|78|79|7a|41|42|43|44|45|46|47|48|49|4a|4b|4c|4d|4e|4f|50|51|52|53|54|55|56|57|58|59|5a|2f|2b|3d),){7,15})\";\nCommonSecurityLog\n| where TimeGenerated between(starttime .. endtime)\n| where isnotempty(RequestURL)\n// Identify requests with encoded IPv4 addresses\n| where RequestURL matches regex ipv4_encoded_identification_regex\n| project TimeGenerated, RequestURL\n// Extract IP candidates in their base64 encoded format, significantly reducing the dataset\n| extend extracted_encoded_ip_candidate = extract_all(ipv4_encoded_identification_regex, RequestURL)\n// We could have more than one candidate, expand them out\n| mv-expand extracted_encoded_ip_candidate to typeof(string)\n| summarize Start=min(TimeGenerated), End=max(TimeGenerated), make_set(RequestURL,100) by extracted_encoded_ip_candidate\n// Pad if we need to\n| extend extracted_encoded_ip_candidate = iff(strlen(extracted_encoded_ip_candidate) % 2 == 0, extracted_encoded_ip_candidate, strcat(extracted_encoded_ip_candidate, \"=\"))\n// Now decode the candidate to a long array, we cannot go straight to string as it cannot handle non-UTF8, we need to strip that first\n| extend extracted_encoded_ip_candidate = tostring(base64_decode_toarray(extracted_encoded_ip_candidate))\n// Extract the IP candidates from the array\n| extend hex_extracted = extract_all(ipv4_decoded_hex_extract, extracted_encoded_ip_candidate)\n// Expand, it's still possible that we might have more than 1 IP\n| mv-expand hex_extracted\n// Now we should have a clean string. We need to put it back into a dynamic array for converting back to a string\n| extend hex_extracted = trim_end(\",\", tostring(hex_extracted))\n| extend hex_extracted = strcat(\"[\",hex_extracted,\"]\")\n| extend hex_extracted = todynamic(hex_extracted)\n| extend extracted_encoded_ip_candidate = todynamic(extracted_encoded_ip_candidate)\n// Convert the array back into a string\n| extend decoded_ip_candidate = make_string(hex_extracted)\n| summarize by decoded_ip_candidate, tostring(set_RequestURL), Start, End\n// Now the IP candidates will be in plaintext, extract the IPs using a regex\n| extend ipmatch = extract_all(ipv4_plaintext_extraction_regex, decoded_ip_candidate)\n// If it's not an IP, throw it out\n| where isnotnull(ipmatch)\n| mv-expand ipmatch to typeof(string)\n| extend timestamp = Start\n| extend IP_0_Address = ipmatch\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS).\nAfter a user logs on, the system generates and stores a variety of credential materials in LSASS process memory.\nThese credential materials can be harvested by an administrative user or system and used to conduct lateral movement using alternate authentication materials.\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\nRef: https://attack.mitre.org/techniques/T1003/001/\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "Event\n| where EventLog =~ \"Microsoft-Windows-Sysmon/Operational\" and EventID==10\n| parse EventData with * 'TargetImage\">' TargetImage \"<\" * 'GrantedAccess\">' GrantedAccess \"<\" * 'CallTrace\">' CallTrace \"<\" * \n| where GrantedAccess =~ \"0x1FFFFF\" and TargetImage =~ \"C:\\\\Windows\\\\System32\\\\lsass.exe\" and CallTrace has_any (\"dbghelp.dll\",\"dbgcore.dll\")\n| parse EventData with * 'SourceProcessGUID\">' SourceProcessGUID \"<\" * 'SourceImage\">' SourceImage \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, SourceProcessGUID, SourceImage, GrantedAccess, TargetImage, CallTrace\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies user added in the SecurityAdmin group of SQL Server.\n Topic: Microsoft Windows SQL Server Database Audit"}, {"role": "assistant", "content": "// SQLEvent is not the table name, it is the function name that should already be imported into your workspace.\n// The underlying table where the data exists is the Event table.\n// This query tracks user added into SecurityAdmingroup\nSQLEvent\n| where Statement has_all (\"Alter Server role\", \"add member\")\n| parse Statement with * \"ADD MEMBER [\" TargetUser:string \"]\" *\n| where ObjectName has \"securityadmin\"\n| project TimeGenerated, Computer, Action, ClientIP, CurrentUser, DatabaseName, TargetUser, ObjectName, Statement \n| extend Name = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 0)[0]), CurrentUser)\n| extend UPNSuffix = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 1)[0]), '')\n| extend Name = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 1)[0]), Name)\n| extend NTDomain = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 0)[0]), '')\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This indicator looks for security vulnerability to CVE-2020-1472, which was patched by Microsoft in August 2020. Without this patch, an unauthenticated attacker can exploit CVE-2020-1472 to elevate their privileges and get administrative access on the domain.\n Topic: Semperis Directory Services Protector"}, {"role": "assistant", "content": "dsp_parser\n| where EventID == 9212\n| where SecurityIndicatorName == \"Zerologon vulnerability\"\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query checks for any file which has been created/written by an Office application and shortly after renamed to one of the deny-listed \"executable extensions\" which are text files. (e.g. ps1, .js, .vbs).\n Topic: FalconFriday"}, {"role": "assistant", "content": "let timeframe = 1d;\nlet executableExtensions = dynamic([\".js\", \".hta\", \".lnk\", \".application\", \".vb\", \".vba\", \".vbs\", \".ps\", \".ps1\", \".bat\", \".cmd\"]);\nDeviceFileEvents\n| where Timestamp >= ago(timeframe)\n| where InitiatingProcessFileName in~ (\"winword.exe\", \"excel.exe\", \"outlook.exe\", \"powerpnt.exe\")\n| where ActionType == \"FileRenamed\"\n// The mv-apply is less performance compared to doing a full written out !endswith. We kept the mv-apply since We don't hit any limits and get more readable/maintainable code.\n| mv-apply ext=executableExtensions to typeof(string) on\n(\n    where PreviousFileName !endswith ext and FileName endswith ext\n)\n| project-reorder PreviousFileName, FileName\n// Begin allow-list.\n// End allow-list.\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects network ACLs with outbound rule to allow all traffic.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where Reason =~ 'NEW_ALERT'\n| where Status =~ 'open'\n| where AlertMessage has 'Network ACLs with Outbound rule to allow All Traffic'\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "These are AWS Ec2 machines that are exposed to the internet. You can further filter by tags so that you can, for example, find exposed machines that are also \"privileged\". Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"Privileged Machines Exposed to the Internet\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for emails with high score of adult filter classifier value.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let scoreThreshold = 80;\nProofpointPOD\n| where EventType == 'message'\n| where NetworkDirection == 'inbound'\n| where todynamic(FilterModulesSpamScoresClassifiers).adult > scoreThreshold"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Recorded Future  URL  Threat Actor Hunt.\n Topic: Recorded Future"}, {"role": "assistant", "content": "imWebSession\n| where isnotempty(Url)\n| join kind=inner (\nThreatIntelligenceIndicator\n// Only look for IOCs\n| where isnotempty(Url)\n// Only look at Recorded Future Threat Hunt Indicators.\n| where Description startswith \"Recorded Future - Threat Hunt\"\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n) on $left.Url == $right.Url\n| project Url\n| extend URL_0_Url = Url\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for login failures.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'access'\n| where EventResultDetails =~ 'Failed login attempt.'\n| order by TimeGenerated\n| extend AccountCustomEntity = User, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The krbtgt user account is a special (disabled) user account in every Active Directory domain that has a special role in Kerberos function. If this accounts password is compromised, Golden Ticket attacks can be performed to get access to any resource in the AD domain. This indicator looks for a krbtgt user account whose password hasnt been changed in the past 180 days. While Microsoft recommends changing the password every year, STIG recommends changing it every 180 days.\n Topic: Semperis Directory Services Protector"}, {"role": "assistant", "content": "dsp_parser\n| where EventID == 9212\n| where SecurityIndicatorName == \"Kerberos krbtgt account with old password\"\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query over Microsoft Entra ID sign-in considers all user sign-ins for each Microsoft Entra ID application and picks out the most anomalous change in location profile for a user within an individual application.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "// Adjust this figure to adjust how sensitive this detection is\nlet sensitivity = 2.5;\nlet AuthEvents = materialize(\nunion isfuzzy=True SigninLogs, AADNonInteractiveUserSignInLogs\n| where TimeGenerated > ago(7d)\n| where ResultType == 0\n| extend LocationDetails = LocationDetails_dynamic\n| extend Location = strcat(LocationDetails.countryOrRegion, \"-\", LocationDetails.state,\"-\", LocationDetails.city)\n| where Location != \"--\");\nAuthEvents\n| summarize dcount(Location) by AppDisplayName, AppId, UserPrincipalName, UserId, bin(startofday(TimeGenerated), 1d)\n| where dcount_Location > 2\n| make-series CountOfLocations = sum(dcount_Location) on TimeGenerated  step 1d by AppId, UserId\n| extend (Anomalies, Score, Baseline) = series_decompose_anomalies(CountOfLocations, sensitivity, -1, 'linefit')\n| mv-expand CountOfLocations to typeof(double), TimeGenerated to typeof(datetime), Anomalies to typeof(double), Score to typeof(double), Baseline to typeof(long)\n| where Anomalies > 0 and Baseline > 0\n| join kind=inner( AuthEvents | extend TimeStamp = startofday(TimeGenerated)) on UserId, AppId\n| extend SignInDetails = bag_pack(\"TimeGenerated\", TimeGenerated1, \"Location\", Location, \"Source\", IPAddress, \"Device\", DeviceDetail_dynamic)\n| summarize SignInDetailsSet=make_set(SignInDetails, 1000) by UserId, UserPrincipalName, CountOfLocations, TimeGenerated, AppId, AppDisplayName\n| extend Name = split(UserPrincipalName, \"@\")[0], UPNSuffix = split(UserPrincipalName, \"@\")[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query shows failed login attempts where username is unknown.\n Topic: SlackAudit"}, {"role": "assistant", "content": "let lbtime = 24h;\nlet lbperiod = 30d;\nlet known_users = SlackAudit\n| where TimeGenerated > ago(lbperiod)\n| where DvcAction =~ 'user_login'\n| where isnotempty(SrcUserName)\n| summarize makeset(SrcUserName);\nSlackAudit\n| where TimeGenerated > ago(lbtime)\n| where DvcAction =~ 'user_login_failed'\n| where isnotempty(SrcUserName)\n| where SrcUserName !in (known_users)\n| project SrcUserName, SrcIpAddr\n| extend AccountCustomEntity = SrcUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for users source IP addresses.\n Topic: Snowflake"}, {"role": "assistant", "content": "Snowflake\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'LOGIN'\n| where IS_SUCCESS_s =~ 'Yes'\n| summarize ip_lst = makeset(SrcDvcIpAddr) by TargetUsername\n| extend AccountCustomEntity = TargetUsername, IPCustomEntity = ip_lst\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for top files recieved via email services.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where TimeGenerated > ago(24h)\n| where EventCategoryType in~ ('exchange', 'gmail', 'exchangeserver')\n| where isnotempty(MailMessageFileName)\n| summarize count() by MailMessageFileName, EventOriginalResultDetails\n| extend FileCustomEntity = MailMessageFileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for accounts being created where the name does not match a defined pattern.\n  Attackers may attempt to add accounts as a means of establishing persistant access to an environment, looking for anomalies in created accounts may help identify illegitimately created accounts.\n  Created accounts should be investigated to ensure they were legitimated created.\n  The user_regex field in the query needs to be populated with the expected pattern for the environment before deployment.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#accounts-not-following-naming-policies\n Topic: Detections"}, {"role": "assistant", "content": "// Add the environments expected username format regex below before deploying\nlet user_regex = \"\";\nAuditLogs\n| where OperationName =~ \"Add user\"\n| where Result =~ \"success\"\n| extend userAgent = tostring(AdditionalDetails[0].value)\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n| extend InitiatedBy = tostring(iff(isnotempty(InitiatingUserPrincipalName),InitiatingUserPrincipalName, InitiatingAppName))\n| extend AddedUser = tostring(TargetResources[0].userPrincipalName)\n| where AddedUser matches regex user_regex\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n| extend TargetAccountName = tostring(split(AddedUser, \"@\")[0]), TargetAccountUPNSuffix = tostring(split(AddedUser, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Looks across your environment for least common Process Command Lines, may be noisy and require allowlisting.  By ZanCo\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 7d;  \nlet Allowlist = dynamic (['foo.exe', 'baz.exe']);\nlet Sensitivity = 5;  \nSecurityEvent\n| where TimeGenerated between(lookback..endtime)\n| where EventID == 4688 and NewProcessName !endswith 'conhost.exe'\n| extend ProcArray = split(NewProcessName, '\\\\')\n// ProcArrayLength is Folder Depth\n| extend ProcArrayLength = array_length(ProcArray)\n| extend LastIndex = ProcArrayLength - 1\n| extend Proc = ProcArray[LastIndex]\n| where Proc !in (Allowlist)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TimesSeen = count(), HostCount = dcount(Computer), Hosts = make_set(Computer,maxSize=500), UserCount = dcount(SubjectUserName), Users = make_set(SubjectUserName,maxSize=500) by CommandLine\n| where TimesSeen < Sensitivity\n| extend timestamp = StartTimeUtc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for new service accounts keys created for the last 24 hours.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where TimeGenerated > ago(24h)\n| where PayloadMethodname =~ 'google.iam.admin.v1.CreateServiceAccountKey'\n| extend result = parse_json(todynamic(PayloadAuthorizationinfo))[0]['granted']\n| where result =~ 'true'\n| project-away result\n| extend timestamp = TimeGenerated, AccountCustomEntity = PayloadRequestAccountId, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for download errors.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "VMwareESXi\n| where TimeGenerated > ago(24h)\n| where SyslogMessage has_any ('Download failed', 'Failed to download file', 'File download error')\n| extend URLCustomEntity = SyslogMessage\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for having found that when periodic password resets are enforced, passwords become less secure. Users tend to pick a weaker password and vary it slightly for each reset. \n If a user creates a strong password (long, complex and without any pragmatic words present) it should remain just as strong in the future as it is today. It is Microsofts official security position to not expire passwords periodically without a specific reason, and recommends that cloud-only tenants set the password policy to never expire.\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'AzureSecureScorePWAgePolicyNew'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches web proxy logs for a specific type of beaconing behavior by caparing with a known request pattern.\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let timeframe = 1d; // Timeframe during which to search for beaconing behavior.\nlet lookback = 7d; // lookback period to find if browser was used for other domains by user.\nlet min_requests = 50; // Minimum number of requests to consider it beacon traffic.\nlet min_hours=8; // Minimum number of different hours during which connections were made to consider it beacon traffic.\nlet trusted_user_count=10; // If visited by these many users a domain is considered 'trusted'.\nlet Total_Visited_Sites=3; // Number of different sites visited using this user-agent.\n// Client-specific query to obtain 'browser-like' traffic from proxy logs.\nlet BrowserTraffic = materialize (\n_Im_WebSession(starttime=ago(timeframe))\n| project  TimeGenerated, DestHostname = tostring(parse_url(Url)[\"Host\"]), HttpUserAgent, SrcIpAddr, DstIpAddr\n| where not(ipv4_is_private(DstIpAddr)) // Take only those requests that are going to internet\n| where HttpUserAgent has_any (\"Mozilla\",\"Gecko\")\n);\nlet CommonDomains = BrowserTraffic\n| summarize source_count=dcount(SrcIpAddr) by DestHostname\n| where source_count > trusted_user_count\n| project DestHostname; // These are list of common domains that we will filter out.  \nlet CommonUA = BrowserTraffic\n| summarize source_count=dcount(SrcIpAddr), dhost_count=dcount(DestHostname) by HttpUserAgent\n| where source_count >trusted_user_count and dhost_count > 100 // Normal browsers are used by many people visiting many different sites.\n| project HttpUserAgent;\n// Some users only use the browsers to visit a very limited set of sites.\n// These are considered suspicious, since they might be an attacker masquerading a beacon as a legitimate browser.\nlet SuspiciousClients = BrowserTraffic\n| where HttpUserAgent in (CommonUA)\n| summarize Destination_Hosts = make_set(DestHostname,100), request_count=count() by HttpUserAgent, SrcIpAddr\n| where array_length(Destination_Hosts) <=Total_Visited_Sites and request_count >= min_requests\n| project HttpUserAgent, SrcIpAddr, Destination_Hosts;\n// Just reporting on suspicious browsers gives too many false positives.\n// For example, users that have the browser open on the login screen of 1 specific application.\n// In the suspicious browsers we can search for 'beacon-like' behavior.\n// Get all browser traffic by the suspicious browsers.\nlet PotentialBeaconingTraffic=SuspiciousClients\n| join kind=inner (BrowserTraffic) on HttpUserAgent, SrcIpAddr\n// Find beaconing-like traffic - i.e. contacting the same host in many different hours.\n| summarize hour_count=dcount(bin(TimeGenerated,1h)), Destination_Hosts=take_any(Destination_Hosts), request_count=count() by HttpUserAgent, SrcIpAddr, DestHostname\n| where hour_count >=min_hours and request_count >= min_requests \n// Remove common domains i.e. visited by atleast trusted_user_count number of users.\n| join kind=leftanti CommonDomains on DestHostname // leftanti=> Returns all the records from the left side that don't have matches from the right\n| summarize RareHosts=make_set(DestHostname,100), TotalRequestCount=sum(request_count), BrowserHosts=take_any(Destination_Hosts) by HttpUserAgent, SrcIpAddr\n// Remove browsers that visit any common domains.\n| where array_length(RareHosts) == array_length(BrowserHosts);\n// Look back for X days to see if the browser was not used to visit more hosts.\n// This is to exclude someone that started up the browser a long time ago, and left only a single tab open\nPotentialBeaconingTraffic\n| join kind=inner (_Im_WebSession(starttime=lookback)\n| project  TimeGenerated, DestHostname = tostring(parse_url(Url)[\"Host\"]), HttpUserAgent, SrcIpAddr, DstIpAddr\n| where not(ipv4_is_private(DstIpAddr)) // Take only those requests that are going to internet\n| where HttpUserAgent has_any (\"Mozilla\",\"Gecko\")\n) on SrcIpAddr, HttpUserAgent\n| summarize RareHosts=take_any(RareHosts),BrowserHosts1d=take_any(BrowserHosts),BrowserHostsLookback=make_set(DestHostname,100) by SrcIpAddr, HttpUserAgent\n| where array_length(RareHosts) == array_length(BrowserHostsLookback)\n| extend IP_0_Address = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for outbound SSH/SCP connections identified by the expected port number (22) or by the SonicWall Deep Packet Inspection services. This query leverages the SonicWall Firewall ASIM Network Session parser.\n Topic: SonicWall Firewall"}, {"role": "assistant", "content": "ASimNetworkSessionSonicWallFirewall\n| where NetworkBytes > 0 and NetworkDirection == \"Outbound\"\n| extend ServiceName = coalesce(SrcAppName, DstAppName)\n| where ( DstPortNumber == 22 and NetworkProtocol in (\"TCP\", \"UDP\") ) or ServiceName contains \"General SSH\" or ServiceName == \"SSH Protocol\" or ServiceName == \"Bitvise SSH\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Calculate the count of BytesIn per Source-Destination pair over 24 hours. Higher values may indicate beaconing.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "let timeframe = 1d;\nCisco_Umbrella \n| where EventType == \"proxylogs\"\n| where TimeGenerated > ago(timeframe)\n| summarize count() by SrcIpAddr,DstIpAddr, SrcBytes\n| sort by count_ desc\n| extend Message = \"Possible communication with C2\"\n| project Message, SrcIpAddr, DstIpAddr\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects Network ACLs allow ingress traffic to server administration ports.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where Reason =~ 'NEW_ALERT'\n| where Status =~ 'open'\n| where AlertMessage has 'Network ACLs allow ingress traffic to server administration ports'\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Clients with a high NXDomain count could be indicative of a DGA (cycling through possible C2 domains\nwhere most C2s are not live). Based on quartile percent analysis algorithm.\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet timeframe = 1d;\nlet excludeTLD = dynamic([\"arris\",\"ati\",\"virtusa\",\"unknowndomain\",\"onion\",\"corp\",\"domain\",\"local\",\"localdomain\",\"host\",\"home\",\"gateway\",\"lan\",\n\"services\",\"hub\",\"domain.name\",\"WirelessAP\",\"Digicom-ADSL\",\"OpenDNS\",\"dlinkrouter\",\"Dlink\",\"ASUS\",\"device\",\"router\",\"Belkin\",\"DHCP\",\"Cisco\"]);\nlet nxDomainDnsEvents = DnsEvents\n| where TimeGenerated between(starttime..endtime)\n| where ResultCode == 3 \n| where QueryType in (\"A\", \"AAAA\")\n| where ipv4_is_match(\"127.0.0.1\", ClientIP) == False\n| where Name !contains \"/\"\n| where Name contains \".\"\n| extend mytld = tostring(split(Name, '.')[-1])\n| where mytld !in~ (excludeTLD)\n| extend truncatedDomain = iff((strlen(Name) - indexof(Name, tostring(split(Name, \".\")[-2])) ) >= 7, \nstrcat(tostring(split(Name, \".\")[-2]), \".\", tostring(split(Name, \".\")[-1])) , \nstrcat(tostring(split(Name, \".\")[-3]), \".\", tostring(split(Name, \".\")[-2]), \".\", tostring(split(Name, \".\")[-1])));\nlet quartileFunctionForIPThreshold = view (mypercentile:long, startTimeSpan:timespan, endTimeSpan:timespan) {\n(nxDomainDnsEvents\n| where TimeGenerated between (ago(startTimeSpan)..ago(endTimeSpan))\n| summarize domainCount = dcount(truncatedDomain) by ClientIP, bin(TimeGenerated, 1d)\n| project SearchList = (domainCount), ClientIP\n| summarize qPercentiles = percentiles(SearchList, mypercentile) by ClientIP);\n};\nlet firstQT = quartileFunctionForIPThreshold(25, 7d, 2d) | project-rename percentile_SearchList_25 = qPercentiles;\nlet thirdQT = quartileFunctionForIPThreshold(75, 7d, 2d) | project-rename percentile_SearchList_75 = qPercentiles;\n// The IP threshold could be adjusted for based on the skewness of the IPthreshold distribution per IP - https://wis.kuleuven.be/stat/robust/papers/2008/outlierdetectionskeweddata-revision.pdf\nlet threshold = (firstQT\n| join thirdQT on ClientIP\n| extend IPthreshold = percentile_SearchList_75 + (1.5*exp(3)*(percentile_SearchList_75 - percentile_SearchList_25))\n| project ClientIP, IPthreshold);\nlet FilterOnIPThreshold_MainTable = (\nnxDomainDnsEvents\n| summarize TotalNXLookups=dcount(truncatedDomain) by ClientIP\n| sort by TotalNXLookups desc\n| join ['threshold'] on ClientIP\n// Comment the line below in order to view results filtered by Global Threshold only. \n| where TotalNXLookups > IPthreshold \n| join kind = leftouter (nxDomainDnsEvents\n    | where TimeGenerated > ago(timeframe)\n    | summarize domainCount = dcount(Name) by truncatedDomain, ClientIP\n    | project SearchList = strcat(truncatedDomain,\" (\",tostring(domainCount),\")\"), ClientIP\n    ) on ClientIP\n| summarize SLDs_DistinctLookups = make_list(SearchList) by ClientIP, TotalNXLookups, IPthreshold\n| sort by TotalNXLookups desc);\n//\nlet quartileFunctionForGlobalThreshold = view (mypercentile:long, startTimeSpan:timespan) {\n(nxDomainDnsEvents\n| where TimeGenerated > ago(startTimeSpan)\n| summarize domainCount = dcount(truncatedDomain) by ClientIP\n| summarize event_count = count() by domainCount\n| summarize perc2 = percentilesw(domainCount, event_count, mypercentile));\n};\nlet firstQ = toscalar(quartileFunctionForGlobalThreshold(25, 1d));\nlet thirdQ = toscalar(quartileFunctionForGlobalThreshold(75, 1d));\n// The Global threshold could be adjusted for based on the skewness of the GlobalThreshold distribution per IP - https://wis.kuleuven.be/stat/robust/papers/2008/outlierdetectionskeweddata-revision.pdf\nlet GlobalThreshold = toscalar(thirdQ + (1.5*exp(3)*(thirdQ - firstQ)));\nlet FilterOnGlobalThreshold_MainTable = (\nnxDomainDnsEvents\n| where TimeGenerated > ago(timeframe)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), TotalNXLookups = dcount(truncatedDomain) by ClientIP\n| sort by TotalNXLookups desc\n// Comment the line below in order to view results filtered by IPThreshold only. \n| where TotalNXLookups > GlobalThreshold \n| join kind = leftouter (nxDomainDnsEvents\n    | where TimeGenerated > ago(timeframe)\n    | summarize domainCount = dcount(Name) by truncatedDomain, ClientIP\n    | project truncatedDomain = strcat(truncatedDomain,\" (\",tostring(domainCount),\")\"), ClientIP\n    ) on ClientIP\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), SLDs_DistinctLookups = make_list(truncatedDomain), UniqueSLDsCount=dcount(truncatedDomain) by ClientIP, TotalNXLookups, GlobalThreshold\n| sort by TotalNXLookups desc);\nFilterOnIPThreshold_MainTable\n| join FilterOnGlobalThreshold_MainTable on ClientIP\n| project StartTime, EndTime, ClientIP, TotalNXLookups, IPthreshold, GlobalThreshold, SLDs_DistinctLookups, UniqueSLDsCount\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for devices with unexpectedly large number of activity match. Topic: AristaAwakeSecurity"}, {"role": "assistant", "content": "CommonSecurityLog\n| where DeviceVendor == \"Arista Networks\" and DeviceProduct == \"Awake Security\"\n| summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), Models=make_set(Activity), ASPMatchURLs=make_set(DeviceCustomString2), SourceIPs=make_set(SourceIP),\n  DestinationIPs=make_set(DestinationIP), ModelMatchCount=sum(EventCount), MaxSeverity=max(toint(LogSeverity)) by SourceHostName\n| where ModelMatchCount > 1000 and MaxSeverity > 2\n| extend SeverityName=iff(MaxSeverity == 0, \"Informational\", iff(MaxSeverity < 5, \"Low\", iff(MaxSeverity < 8, \"Medium\", \"High\")))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Use this query to look for activity related to AtomicStealer activity, known to affect macOS devices via a MachO binary\n Topic: Jamf Protect"}, {"role": "assistant", "content": "JamfProtect\n| where TargetProcessSHA256 in (\n  \"ce3c57e6c025911a916a61a716ff32f2699f3e3a84eb0ebbe892a5d4b8fb9c7a\", \n  \"91cca8b573d9bfdbe2d7ff74ce31acee7a3a9f8e0034841af38d96a1d4ad02f4\", \n  \"7668dcab16c2f16396dd0d3a580bca89a3675462c1e9f98e79d75d6e7e6c8c1f\")\nor TargetFileSHA256 has \"6b0bde56810f7c0295d57c41ffa746544a5370cedbe514e874cf2cd04582f4b0\"\nor DnsQueryName contains \"app-downloads.org\"\nor DnsQueryName contains \"trabingviews.com\"\nor DstIpAddr contains \"185.106.93.154\"\nor EventMatch contains \"atomicstealer\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in SQL Security Audit Events.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour for AzureDiagnostics logs\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and AzureDiagnostics logs for SQL Security Audit events\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      AzureDiagnostics\n      | where TimeGenerated >= ago(dt_lookBack)\n      | where ResourceProvider == 'MICROSOFT.SQL'\n      | where Category == 'SQLSecurityAuditEvents'\n      | extend SQLSecurityAuditEvents_TimeGenerated = TimeGenerated\n      | extend ClientIP = column_ifexists(\"client_ip_s\", \"Not Available\")\n      | extend Action = column_ifexists(\"action_name_s\", \"Not Available\")\n      | extend Application = column_ifexists(\"application_name_s\", \"Not Available\")\n      | extend HostName = column_ifexists(\"host_name_s\", \"Not Available\")\n  )\n  on $left.TI_ipEntity == $right.ClientIP\n  // Filter out logs that occurred after the expiration of the corresponding indicator\n  | where SQLSecurityAuditEvents_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and ClientIP, and keep the log entry with the latest timestamp\n  | summarize SQLSecurityAuditEvents_TimeGenerated = arg_max(SQLSecurityAuditEvents_TimeGenerated, *) by IndicatorId, ClientIP\n  // Select the desired output fields\n  | project SQLSecurityAuditEvents_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\n    TI_ipEntity, ResourceId, ClientIP, Action, Application, HostName, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n  // Rename the timestamp field\n  | extend timestamp = SQLSecurityAuditEvents_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected modification of bucket encryption. An attacker could modify encryption of existing buckets for denial of service attacks.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName in (\"PutBucketEncryption\",\"DeleteBucketEncryption\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend encryptionConfig = tostring(parse_json(RequestParameters).ServerSideEncryptionConfiguration.Rule)\n| where encryptionConfig contains RecipientAccountId\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for login failure events.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where TimeGenerated > ago(24h)\n| where EventType has 'Login to SRA'\n| where EventType !has 'succeeded'\n| extend SrcUsername = extract(@'User\\s(.*?)\\sfailed', 1, EventMessage)\n| summarize count() by SrcUsername\n| extend AccountCustomEntity = SrcUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in AzureNetworkAnalytics_CL (NSG Flow Logs) from any IP IOC from TI that was Allowed\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour for AzureNetworkAnalytics_CL logs\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and AzureNetworkAnalytics_CL logs for NSG Flow information\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      AzureNetworkAnalytics_CL\n      | where TimeGenerated >= ago(dt_lookBack)\n      | extend AzureNetworkAnalytics_CL_TimeGenerated = TimeGenerated\n      | extend PIPs = split(PublicIPs_s, '|', 0)\n      | extend PIP = tostring(PIPs[0])\n  )\n  on $left.TI_ipEntity == $right.PIP\n  // Filter out logs that occurred after the expiration of the corresponding indicator\n  | where AzureNetworkAnalytics_CL_TimeGenerated < ExpirationDateTime\n  // Filter out NSG Flow logs that are not allowed (FlowStatus_s == \"A\")\n  | where FlowStatus_s == \"A\"\n  // Group the results by IndicatorId and PIP (Public IP), and keep the log entry with the latest timestamp\n  | summarize AzureNetworkAnalytics_CL_TimeGenerated = arg_max(AzureNetworkAnalytics_CL_TimeGenerated, *) by IndicatorId, PIP\n  // Select the desired output fields\n  | project AzureNetworkAnalytics_CL_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\n    TI_ipEntity, Computer, FlowDirection_s, FlowStatus_s, FlowType_s, SrcPublicIPs_s, DestPublicIPs_s, PublicIPs_s, L7Protocol_s, DestPort_d, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n  // Extract hostname and DNS domain from the Computer field\n  | extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n  // Rename the timestamp field\n  | extend timestamp = AzureNetworkAnalytics_CL_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Attackers may introduce upstream packages into the build process to insert malicious code. This query searches for such malicious activity. If an environment has low number of events, it can be upgraded to a detection.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = totimespan((endtime-starttime)*10);\n// Add any known allowed sources and source locations to the filter below.\nlet allowed_sources = dynamic([]);\nlet allowed_locations = dynamic([]);\nlet known_packages = (\nAzureDevOpsAuditing\n| where TimeGenerated > ago(lookback) and TimeGenerated < starttime\n// Look for feeds created or modified at either the organization or project level\n| where OperationName matches regex \"Artifacts.Feed.(Org|Project).Modify\"\n| where Details has \"UpstreamSources, added\"\n| extend UpstreamsAdded = Data.UpstreamsAdded\n// As multiple feeds may be added expand these out\n| mv-expand UpstreamsAdded\n// Only focus on internal feeds\n| where UpstreamsAdded.UpstreamSourceType =~ \"internal\"\n| extend SourceLocation = tostring(UpstreamsAdded.Location)\n| summarize by SourceLocation);\n// Look for internal feeds being added from a new location\nAzureDevOpsAuditing\n| where TimeGenerated between(starttime..endtime)\n| where OperationName matches regex \"Artifacts.Feed.(Org|Project).Modify\"\n| where Details has \"UpstreamSources, added\"\n| extend FeedName = tostring(Data.FeedName)\n| extend FeedId = tostring(Data.FeedId)\n| extend UpstreamsAdded = Data.UpstreamsAdded\n// As multiple feeds may be added expand these out\n| mv-expand UpstreamsAdded\n// Only focus on internal feeds\n| where UpstreamsAdded.UpstreamSourceType =~ \"internal\"\n| extend SourceLocation = tostring(UpstreamsAdded.Location)\n| extend SourceName = tostring(UpstreamsAdded.Name)\n// Exclude sources and locations in the allow list\n| where SourceLocation !in (known_packages)\n| where SourceLocation !in (allowed_locations) and SourceName !in (allowed_sources)\n| extend SourceProtocol = tostring(UpstreamsAdded.Protocol)\n| extend SourceStatus = tostring(UpstreamsAdded.Status)\n| project-reorder TimeGenerated, OperationName, ScopeDisplayName, ProjectName, FeedName, SourceName, SourceLocation, SourceProtocol, ActorUPN, UserAgent, IpAddress\n// See if there are details of who created this feed and when to add context\n| join kind=leftouter (AzureDevOpsAuditing\n| where TimeGenerated > ago(lookback)\n| where OperationName matches regex \"Artifacts.Feed.(Org|Project).Create\"\n| extend FeedId = tostring(Data.FeedId)\n| project FeedId, FeedCreatedBy=ActorUPN, TimeCreated=TimeGenerated) on FeedId, $left.ActorUPN==$right.FeedCreatedBy\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for blocked tasks.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where TimeGenerated > ago(24h)\n| where EventMessage in ('Status updated', 'Status created')\n| where ObjectItemTypeName =~ 'STATUS'\n| where ObjectItemName =~ 'Blocked'\n| extend ProcessCustomEntity = ObjectItemName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies SUPERNOVA webshell based on W3CIISLog data.\n References:\n - https://unit42.paloaltonetworks.com/solarstorm-supernova/\n Topic: Web Shells Threat Protection"}, {"role": "assistant", "content": "W3CIISLog\n| where csMethod == 'GET'\n| where isnotempty(csUriStem) and isnotempty(csUriQuery)\n| where csUriStem contains \"logoimagehandler.ashx\"\n| where csUriQuery contains \"codes\" and csUriQuery contains \"clazz\" and csUriQuery contains \"method\" and csUriQuery contains \"args\"\n| extend timestamp = TimeGenerated\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(csUserName, \"@\")[0]), AccountUPNSuffix = tostring(split(csUserName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "CreepyDrive uses OneDrive for command and control. This detection identifies URLs specific to CreepyDrive.\n Topic: Detections"}, {"role": "assistant", "content": "let oneDriveCalls = dynamic(['graph.microsoft.com/v1.0/me/drive/root:/Documents/data.txt:/content','graph.microsoft.com/v1.0/me/drive/root:/Documents/response.json:/content']);\nlet oneDriveCallsRegex = dynamic([@'graph\\.microsoft\\.com\\/v1\\.0\\/me\\/drive\\/root\\:\\/Uploaded\\/.*\\:\\/content',@'graph\\.microsoft\\.com\\/v1\\.0\\/me\\/drive\\/root\\:\\/Downloaded\\/.*\\:\\/content']);\nCommonSecurityLog\n| where RequestURL has_any (oneDriveCalls) or RequestURL matches regex tostring(oneDriveCallsRegex[0]) or RequestURL matches regex tostring(oneDriveCallsRegex[1])\n| project TimeGenerated, DeviceVendor, DeviceProduct, DeviceAction, DestinationDnsDomain, DestinationIP, RequestURL, SourceIP, SourceHostName, RequestClientApplication\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies Azure Operation anomalies during threat hunts. It detects new callers, IPs, IP ranges, and anomalous operations. Initially set for Run Command operations, it can be configured for other operations and resource types.\n Topic: Azure Activity"}, {"role": "assistant", "content": "// When the detection window will end (3 days prior to now)\nlet startDetectDate = 3d;\n// When the detection window will start (now)\nlet endDetectDate = 0d;\n// When to start collecting data for detection\nlet startDate = startDetectDate + 30d;\n// Operation to monitor, in this case Run Command\nlet monitoredOps = dynamic(['microsoft.compute/virtualmachines/runcommand/action']);\n// The resource type to monitor, in this case virtual machines\nlet monitoredResource = pack_array('microsoft.compute/virtualmachines');\nlet pair_probabilities_fl = (tbl:(*), A_col:string, B_col:string, scope_col:string)\n{\nlet T = (tbl | extend _A = column_ifexists(A_col, ''), _B = column_ifexists(B_col, ''), _scope = column_ifexists(scope_col, ''));\nlet countOnScope = T | summarize countAllOnScope = count() by _scope;\nlet probAB = T | summarize countAB = count() by _A, _B, _scope | join kind = leftouter (countOnScope) on _scope | extend P_AB = todouble(countAB)/countAllOnScope;\nlet probA  = probAB | summarize countA = sum(countAB), countAllOnScope = max(countAllOnScope) by _A, _scope | extend P_A = todouble(countA)/countAllOnScope;\nlet probB  = probAB | summarize countB = sum(countAB), countAllOnScope = max(countAllOnScope) by _B, _scope | extend P_B = todouble(countB)/countAllOnScope;\n    probAB\n    | join kind = leftouter (probA) on _A, _scope\n    | join kind = leftouter (probB) on _B, _scope\n    | extend P_AUB = P_A + P_B - P_AB\n           , P_AIB = P_AB/P_B\n           , P_BIA = P_AB/P_A\n    | extend Lift_AB = P_AB/(P_A * P_B)\n           , Jaccard_AB = P_AB/P_AUB\n    | project _A, _B, _scope, floor(P_A, 0.00001), floor(P_B, 0.00001), floor(P_AB, 0.00001), floor(P_AUB, 0.00001), floor(P_AIB, 0.00001)\n    , floor(P_BIA, 0.00001), floor(Lift_AB, 0.00001), floor(Jaccard_AB, 0.00001)\n    | sort by _scope, _A, _B\n};\nlet eventsTable = materialize (\nAzureActivity\n| where TimeGenerated between (ago(startDate) .. ago(endDetectDate))\n| where isnotempty(CallerIpAddress)\n| where ActivityStatusValue has_any ('Success', 'Succeeded')\n| extend ResourceId = iff(isempty(_ResourceId), ResourceId, _ResourceId)\n| extend splitOp = split(OperationNameValue, '/')\n| extend splitRes = split(ResourceId, '/')\n| project TimeGenerated , subscriptionId=SubscriptionId\n            , ResourceProvider\n            , ResourceName = tolower(tostring(splitRes[-1]))\n            , OperationNameValue = tolower(OperationNameValue)\n            , timeSlice = floor(TimeGenerated, 1d)\n            , clientIp = tostring(CallerIpAddress)\n            , Caller\n            , isMonitoredOp = iff(OperationNameValue has_any (monitoredOps), 1, 0)\n            , isMonitoredResource = iff(OperationNameValue has_any (monitoredResource), 1, 0)\n            , CorrelationId\n| extend clientIpMask = format_ipv4_mask(clientIp, 16)\n);\nlet modelData =  (\neventsTable\n| where TimeGenerated < ago(startDetectDate) and isnotempty(Caller) and isnotempty(subscriptionId)\n| summarize countEvents = count(), countMonRes = countif(isMonitoredResource == 1), counMonOp = countif(isMonitoredOp == 1)\n    , firstSeen = min(timeSlice), firstSeenOnMonRes = minif(timeSlice, isMonitoredResource == 1), firstSeenOnMonOp = minif(timeSlice, isMonitoredOp == 1)\n    by subscriptionId, Caller, clientIpMask\n);\nlet monOpProbs = materialize (\neventsTable\n| where TimeGenerated < ago(startDetectDate) and isnotempty(Caller) and isnotempty(subscriptionId)\n| invoke pair_probabilities_fl('Caller', 'isMonitoredResource','subscriptionId')\n| where _B == 1\n| sort by P_AIB desc\n| extend rankOnMonRes = row_rank(P_AIB), sumBiggerCondProbs = row_cumsum(P_AIB) - P_AIB\n| extend avgBiggerCondProbs = floor(iff(rankOnMonRes > 1, sumBiggerCondProbs/(rankOnMonRes-1), max_of(0.0, prev(sumBiggerCondProbs))), 0.00001)\n| project-away sumBiggerCondProbs\n);\neventsTable\n| where TimeGenerated between (ago(startDetectDate) .. ago(endDetectDate))\n| join kind = leftouter (modelData | summarize countEventsPrincOnSub = sum(countEvents), countEventsMonResPrincOnSub = sum(countMonRes),  countEventsMonOpPrincOnSub = sum(counMonOp)\n    , firstSeenPrincOnSubs = min(firstSeen), firstSeenMonResPrincOnSubs = min(firstSeenOnMonRes), firstSeenMonOpPrincOnSubs = min(firstSeenOnMonOp) by subscriptionId, Caller) \n        on subscriptionId, Caller\n| join kind = leftouter (modelData | summarize countEventsIpMaskOnSub = sum(countEvents), countEventsMonResIpMaskOnSub = sum(countMonRes),  countEventsMonOpIpMaskOnSub = sum(counMonOp)\n    , firstSeenIpMaskOnSubs = min(firstSeen), firstSeenMonResIpMaskOnSubs = min(firstSeenOnMonRes), firstSeenMonOpIpMaskOnSubs = min(firstSeenOnMonOp) by subscriptionId, clientIpMask) \n        on subscriptionId, clientIpMask\n| join kind = leftouter (modelData | summarize countEventsOnSub = sum(countEvents), countEventsMonResOnSub = sum(countMonRes),  countEventsMonOpOnSub = sum(counMonOp)\n    , firstSeenOnSubs = min(firstSeen), firstSeenMonResOnSubs = min(firstSeenOnMonRes), firstSeenMonOpOnSubs = min(firstSeenOnMonOp)\n    , countCallersOnSubs = dcount(Caller), countIpMasksOnSubs = dcount(clientIpMask) by subscriptionId)\n        on subscriptionId        \n| project-away subscriptionId1, Caller1, subscriptionId2\n| extend daysOnSubs = datetime_diff('day', timeSlice, firstSeenOnSubs)\n| extend avgMonOpOnSubs = floor(1.0*countEventsMonOpOnSub/daysOnSubs, 0.01), avgMonResOnSubs = floor(1.0*countEventsMonResOnSub/daysOnSubs, 0.01)\n| join kind = leftouter(monOpProbs) on $left.subscriptionId == $right._scope, $left.Caller == $right._A\n| project-away _A, _B, _scope\n| sort by subscriptionId asc, TimeGenerated asc\n| extend rnOnSubs = row_number(1, subscriptionId != prev(subscriptionId))\n| sort by subscriptionId asc, Caller asc, TimeGenerated asc\n| extend rnOnCallerSubs = row_number(1, (subscriptionId != prev(subscriptionId) and (Caller != prev(Caller))))\n| extend newCaller = iff(isempty(firstSeenPrincOnSubs), 1, 0)\n    , newCallerOnMonRes = iff(isempty(firstSeenMonResPrincOnSubs), 1, 0)\n    , newIpMask = iff(isempty(firstSeenIpMaskOnSubs), 1, 0)\n    , newIpMaskOnMonRes = iff(isempty(firstSeenMonResIpMaskOnSubs), 1, 0)\n    , newMonOpOnSubs = iff(isempty(firstSeenMonResOnSubs), 1, 0)\n    , anomCallerMonRes = iff(((Jaccard_AB <= 0.1) or (P_AIB <= 0.1)), 1, 0)\n| project TimeGenerated, subscriptionId,  ResourceProvider, ResourceName, OperationNameValue, Caller, CorrelationId, ClientIP=clientIp, ActiveDaysOnSub=daysOnSubs, avgMonOpOnSubs, newCaller, newCallerOnMonRes, newIpMask, newIpMaskOnMonRes, newMonOpOnSubs, anomCallerMonRes, isMonitoredOp, isMonitoredResource\n| order by TimeGenerated\n| where isMonitoredOp == 1\n// Optional - focus only on monitored operations or monitored resource in detection window\n| where isMonitoredOp == 1\n//| where isMonitoredResource == 1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a chain of events, where a new Power App is created, followed by mulitple users launching the app within the detection window and clicking on the same malicious URL. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// Define a threshold (distinct_user_launch_threshold) for\n// the minimum number of users who launched an app\n// to be in scope of this detection\nlet distinct_user_launch_threshold = 2;\n// Define a threshold for the minumum number of users\n// who clicked the same malicious link after launching the app\n// to be in scope of this detection\nlet distinct_user_url_click_threshold = 2;\nlet query_frequency = 1h;\nlet query_lookback = 14d;\nlet new_app_creation_activity = materialize(\n    PowerPlatformAdminActivity\n    | where TimeGenerated >= ago (query_lookback)\n    | where EventOriginalType == \"CreatePowerApp\"\n    | extend Properties = tostring(PropertyCollection)\n    | extend SrcIpAddr = extract(@'\"enduser.ip_address\",\"Value\":\"([^\"]+)\"', 1, Properties)\n    | extend SrcIpAddr = iif(SrcIpAddr startswith '::ffff:', replace_string(SrcIpAddr, '::ffff:', ''), SrcIpAddr)\n    | extend AppId = extract(@'\"powerplatform.analytics.resource.power_app.id\",\"Value\":\"([^\"]+)\"', 1, Properties)\n    | extend AppId = tolower(replace_string(AppId, '/providers/Microsoft.PowerApps/apps/', ''))\n    | extend\n        AppName = extract(@'\"powerplatform.analytics.resource.power_app.display_name\",\"Value\":\"([^\"]+)\"', 1, Properties),\n        EnvironmentId = extract(@'\"powerplatform.analytics.resource.environment.id\",\"Value\":\"([^\"]+)\"', 1, Properties)\n    | project-rename\n        AppCreatedTime = TimeGenerated,\n        AppCreator = ActorName,\n        AppCreatorIpAddr = SrcIpAddr\n    );\nlet distinct_apps = new_app_creation_activity\n    | distinct AppName;\nlet new_app_launch_activity = materialize(\n    new_app_creation_activity\n    | join kind=inner (\n        PowerPlatformAdminActivity\n        | where TimeGenerated >= ago (query_lookback)\n        | where EventOriginalType == \"LaunchPowerApp\"\n        | where PropertyCollection has_any (distinct_apps)\n        | extend Properties = tostring(PropertyCollection)\n        | extend AppName = extract(@'\"powerplatform.analytics.resource.power_app.display_name\",\"Value\":\"([^\"]+)\"', 1, Properties)\n        | summarize FirstAppLaunchTime = min(TimeGenerated) by ActorName, AppName)\n        on AppName\n    | where FirstAppLaunchTime > AppCreatedTime\n    );\nlet new_app_launch_users = new_app_launch_activity\n    | summarize LaunchCount = dcount(ActorName) by AppName\n    | where LaunchCount > distinct_user_launch_threshold\n    | join kind=inner new_app_launch_activity on AppName\n    | summarize\n        by\n        ActorName,\n        FirstAppLaunchTime,\n        AppName,\n        AppId,\n        EnvironmentId,\n        AppCreator,\n        AppCreatorIpAddr;\nlet detected_urls = union isfuzzy=true\n        (\n        SecurityAlert\n        | where TimeGenerated >= ago (query_lookback)\n        | where Entities has_cs '\"Type\":\"url\"'\n        | mv-expand todynamic(Entities)\n        | where tostring(Entities.Type) == \"url\"\n        | project Url = tostring(Entities.Url), Source = \"SecurityAlert\"\n        ),\n        (\n        ThreatIntelligenceIndicator\n        | where TimeGenerated >= ago(query_lookback)\n        | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n        | where Active == true and ExpirationDateTime > now()\n        | where isnotempty(isnotempty(Url))\n        | project Url, Source = \"ThreatIntelligence\"\n        )\n    | summarize by Url, Source;\nlet url_click_events = materialize(\n    union isfuzzy=true\n        (\n        UrlClickEvents\n        | where TimeGenerated >= ago(query_frequency)\n        | where isnotempty(ThreatTypes)\n        | join kind=inner (new_app_launch_users) on $left.AccountUpn == $right.ActorName\n        | where TimeGenerated between (FirstAppLaunchTime .. (FirstAppLaunchTime + 1h))\n        | summarize by ActorName, Url, Source = \"MicrosoftDefender\"\n        ),\n        (\n        _Im_WebSession\n        | where TimeGenerated >= ago(query_frequency)\n        | join kind=inner (new_app_launch_users) on $left.SrcUsername == $right.ActorName\n        | join kind=inner (detected_urls) on Url\n        | where TimeGenerated between (FirstAppLaunchTime .. (FirstAppLaunchTime + 1h))\n        | summarize by ActorName, Url, Source\n        )\n    );\nlet distinct_url_click_events_count = toscalar(\n    url_click_events\n    | summarize DistinctUserCount = dcount(ActorName) by Url\n    | where DistinctUserCount > distinct_user_url_click_threshold\n    | summarize sum(DistinctUserCount)\n    );\nurl_click_events\n| summarize DistinctUserCount = dcount(ActorName) by Url\n| where DistinctUserCount >= distinct_user_url_click_threshold\n| join kind=inner url_click_events on Url\n| join kind=inner (new_app_launch_users) on ActorName\n| extend\n    PowerAppsEntityId = 27593,\n    DataverseId = 32780,\n    AccountName = tostring(split(ActorName, '@')[0]),\n    UPNSuffix = tostring(split(ActorName, '@')[1])\n| project\n    FirstAppLaunchTime,\n    AppCreator,\n    AppName,\n    AppId,\n    ImpactedUser = ActorName,\n    AccountName,\n    UPNSuffix,\n    EnvironmentId,\n    Url,\n    Source,\n    PowerAppsEntityId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Sysmon telemetry detects Certutil activities, a tool for cryptographic operations and certificate management. While legitimate, its also used by malware.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "Event\n//This query uses sysmon data and depending on table name used, this may need to be updated\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend RenderedDescription = tostring(split(RenderedDescription, \":\")[0])\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| extend RuleName = column_ifexists(\"RuleName\", \"\"), TechniqueId = column_ifexists(\"TechniqueId\", \"\"),  TechniqueName = column_ifexists(\"TechniqueName\", \"\")\n| parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName\n| extend Image = column_ifexists(\"Image\", \"\")\n| where Image has \"certutil.exe\"\n// Uncomment the next line and add your commandLine Whitelisted/ignore terms.For example \"urlcache\"\n// | where CommandLine !contains (\"urlcache\") \n| extend NTDomain = tostring(split(UserName, '\\\\', 0)[0]), Name = tostring(split(UserName, '\\\\', 1)[0])\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Generates an incident when a network scan is detected either by Radiflows iSID.\n Topic: Radiflow"}, {"role": "assistant", "content": "RadiflowEvent\n| where DeviceProduct =~ 'iSID'\n| where\n    (\n        EventClassID in (52, 105, 150, 151, 152, 153, 158, 166, 175)\n        or EventMessage has 'Scan'\n    )\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possibly malicious attachments.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where NetworkDirection =~ 'Incoming'\n| where tostring(AdditionalFields) has 'ESAAttachmentDetails'\n| extend attachment = replace_string(tostring(extract(@'\"ESAAttachmentDetails\":\"{(.*?):', 1, tostring(AdditionalFields))), \"'\", \"\")\n| where attachment endswith '.ps1' or attachment endswith '.lnk' or attachment endswith '.exe'\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Result found on code Snippet (paste) sharing platform\n Topic: Flare"}, {"role": "assistant", "content": "Firework_CL\n| where source_s in (\"gist_github\",\"Pastebin\",\"driller_stackexchange\") and (risk_score_d == \"3\" or risk_score_d == \"4\" or risk_score_d == \"5\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects CVE-2021-40444 exploitation.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "GCPCloudDNS\n| where Query has_any ('hidusi.com', 'dodefoh.com', 'joxinu.com')\n| extend DNSCustomEntity = Query, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for malware threats stopped by MailGuard 365.\n Topic: MailGuard 365"}, {"role": "assistant", "content": "MailGuard365_Threats_CL\n| where Category == \"Malicious Attachment\"\n| extend MailMessage_0_NetworkMessageId = MessageId_s\n| extend MailMessage_0_Recipient = Email_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare user agent strings with server errors\n Topic: Tomcat"}, {"role": "assistant", "content": "TomcatEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(HttpUserAgentOriginal)\n| where HttpStatusCode >= 500 and HttpStatusCode <= 599\n| summarize UAs = count() by tostring(HttpUserAgentOriginal)\n| top 20 by UAs asc\n| extend UrlCustomEntity = HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect activities when a user was invited to the repository. This query runs every day and its severity is Medium.\n Topic: GitHub"}, {"role": "assistant", "content": "GitHubAuditData \n| where Action == \"org.invite_member\"\n| project Actor, Action\n| extend Name = iif(Actor contains \"@\", split(Actor, \"@\")[0], Actor)\n| extend UPNSuffix = iif(Actor contains \"@\", split(Actor, \"@\")[1], \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for successful user logins to the Okta Console from different countries within 3 hours.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let timeframe = ago(3h);\nlet threshold = 2;\nOktaSSO\n| where column_ifexists('published_t', now()) >= timeframe\n| where eventType_s =~ \"user.session.start\"\n| where outcome_result_s =~ \"SUCCESS\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), NumOfCountries = dcount(column_ifexists('client_geographicalContext_country_s', int(null))) by actor_alternateId_s\n| where NumOfCountries >= threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows all update Key Vault activities done by a user with a High blast radius. If the activity is performed for the first time (by the user or in the tenant) or if the activity originated in a never seen before country\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "BehaviorAnalytics\n| where ActivityType =~ \"Administrative\"\n| where ActionType =~ \"Update Key Vault\"\n| where UsersInsights.BlastRadius =~ \"High\"\n| where ActivityInsights.FirstTimeActionPerformedInTenant == true or\n  ActivityInsights.FirstTimeUserPerformedAction == true or\n  ActivityInsights.FirstTimeConnectionFromCountryObservedInTenant == true\n| extend AadUserId = UsersInsights.AccountObjectID\n|extend Account_0_AadUserId = AadUserId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects public links for files which potentialy may contain sensitive data such as passwords, authentication tokens, secret keys.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where Action =~ 'file_public_link_created'\n| where EntityFileName == 'id_rsa' or EntityFileName contains 'password' or EntityFileName contains 'key' or EntityFileName contains '_key' or EntityFileName contains '.ssh' or EntityFileName endswith '.npmrc' or EntityFileName endswith '.muttrc' or EntityFileName contains 'config.json' or EntityFileName contains '.gitconfig' or EntityFileName endswith '.netrc' or EntityFileName endswith 'package.json' or EntityFileName endswith 'Gemfile' or EntityFileName endswith 'bower.json' or EntityFileName endswith 'config.gypi' or EntityFileName endswith 'travis.yml'\n| extend AccountCustomEntity = SrcUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for infected systems based on scan results.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "let lbtime = 24h;\nMcAfeeEPOEvent\n| where TimeGenerated > ago(lbtime)\n| where EventId in ('1038', '3043')\n| project DvcIpAddr, DvcHostname\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects commands in URI\n Topic: Tomcat"}, {"role": "assistant", "content": "let commands = dynamic(['cat%20/etc/passwd', '/etc/passwd', 'ping -i', '/usr/bin/id(', '%2f%75%73%72%2f%62%69%6e%2f%69%64', 'phpinfo()', '%70%68%70%69%6e%66%6f%28%29', ';id', '%3b%69%64', '/bin/bash -c', '%2f%62%69%6e%2f%62%61%73%68%20%2d%63%27', '/bin/bash', '%2f%62%69%6e%2f%62%61%73%68', 'sleep(', '%73%6c%65%65%70%28', 'curl', '%63%75%72%6c', '&dir', '%26%64%69%72', '& dir', '%26%20%64%69%72', '<script>', '%3c%73%63%72%69%70%74%3e', 'eval(', '%65%76%61%6c%28', 'exec(', '%65%78%65%63%28', 'whoami', '%77%68%6f%61%6d%69', 'wget', 'python', 'gcc', 'uname', 'systeminfo', '%70%79%74%68%6f%6e', '%75%6e%61%6d%65', '%73%79%73%74%65%6d%69%6e%66%6f']);\nTomcatEvent\n| where UrlOriginal has_any (commands)\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows deleted rules.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where TimeGenerated > ago(24h)\n| where ActivityType == 3602\n| order by EventCreationTime\n| project EventCreationTime, DataRuleName, DataRuleQueryDetails, DataStatus, DataUserName\n| extend AccountCustomEntity = DataUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows abnormal request size.\n Topic: Tomcat"}, {"role": "assistant", "content": "let Average_Body_Bytes = TomcatEvent\n| where TimeGenerated > ago(30d)\n| summarize Avg_Size = avg(HttpResponseBodyBytes)\n| extend K = 1;\nTomcatEvent\n| where TimeGenerated > ago(24h)\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| extend K = 1\n| join kind=inner Average_Body_Bytes on K\n| where tolong(HttpResponseBodyBytes) > Avg_Size\n| extend FileCustomEntity = File, UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A security weakness that allows attackers to gain unauthorized access to user accounts by systematically guessing the username and password combinations.\n Topic: Silverfort"}, {"role": "assistant", "content": "CommonSecurityLog \n| where DeviceVendor has 'Silverfort'\n| where DeviceProduct has 'Admin Console'\n| where DeviceEventClassID == \"NewIncident\"\n| where Message has \"UserBruteForce\"\n| extend UserName = parse_json(replace('^\"\"|\"\"$', '', Message))['userName']"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Microsoft Sentinel incidents for critical risk Theom alerts.\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n | where priority_s == \"P1\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when the Azure Run Command operation is executed by a UserPrincipalName and IP Address that has resulted in a recent user entity behaviour alert.\n Topic: Detections"}, {"role": "assistant", "content": "AzureActivity\n// Isolate run command actions\n| where OperationNameValue =~ \"MICROSOFT.COMPUTE/VIRTUALMACHINES/RUNCOMMAND/ACTION\"\n// Confirm that the operation impacted a virtual machine\n| where Authorization has \"virtualMachines\"\n// Each runcommand operation consists of three events when successful, Started, Accepted (or Rejected), Successful (or Failed).\n| summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), max(CallerIpAddress), make_list(ActivityStatusValue) by CorrelationId, Authorization, Caller\n// Limit to Run Command executions that Succeeded\n| where list_ActivityStatusValue has_any (\"Success\", \"Succeeded\")\n// Extract data from the Authorization field\n| extend Authorization_d = parse_json(Authorization)\n| extend Scope = Authorization_d.scope\n| extend Scope_s = split(Scope, \"/\")\n| extend Subscription = tostring(Scope_s[2])\n| extend VirtualMachineName = tostring(Scope_s[-1])\n| project StartTime, EndTime, Subscription, VirtualMachineName, CorrelationId, Caller, CallerIpAddress=max_CallerIpAddress\n// Create a join key using  the Caller (UPN)\n| extend joinkey = tolower(Caller)\n// Join the Run Command actions to UEBA data\n| join kind = inner (\n    BehaviorAnalytics\n    // We are specifically interested in unusual logins\n    | where EventSource == \"Azure AD\" and ActivityInsights.ActionUncommonlyPerformedByUser == \"True\"\n    | project UEBAEventTime=TimeGenerated, UEBAActionType=ActionType, UserPrincipalName, UEBASourceIPLocation=SourceIPLocation, UEBAActivityInsights=ActivityInsights, UEBAUsersInsights=UsersInsights\n    | where isnotempty(UserPrincipalName) and isnotempty(UEBASourceIPLocation)\n    | extend joinkey = tolower(UserPrincipalName)\n) on joinkey\n// Create a window around the UEBA event times, check to see if the Run Command action was performed within them\n| extend UEBAWindowStart = UEBAEventTime - 1h, UEBAWindowEnd = UEBAEventTime + 6h\n| where StartTime between (UEBAWindowStart .. UEBAWindowEnd)\n| project StartTime, EndTime, Subscription, VirtualMachineName, Caller, CallerIpAddress, UEBAEventTime, UEBAActionType, UEBASourceIPLocation, UEBAActivityInsights, UEBAUsersInsights\n| extend AccountName = tostring(split(Caller, \"@\")[0]), AccountUPNSuffix = tostring(split(Caller, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert leverages Defender for IoT to detect attacks that would prevent the use or proper operation of a DCS system including Denial of Service events.\n Topic: IoTOTThreatMonitoringwithDefenderforIoT"}, {"role": "assistant", "content": "SecurityAlert\n| where ProviderName == \"IoTSecurity\"\n| where AlertName == \"Suspicion of Denial Of Service Attack\"\n| extend ExtendedProperties = parse_json(ExtendedProperties)\n| where tostring(ExtendedProperties.isNew) == \"True\"\n| extend DeviceId = tostring(ExtendedProperties.DeviceId), \n         SourceDeviceAddress = tostring(ExtendedProperties.SourceDeviceAddress), \n         DestDeviceAddress = tostring(ExtendedProperties.DestinationDeviceAddress), \n         RemediationSteps = tostring(parse_json(RemediationSteps)[0]), \n         Protocol = tostring(ExtendedProperties.Protocol), \n         AlertManagementUri = tostring(ExtendedProperties.AlertManagementUri)\n| project\n  TimeGenerated,\n  DeviceId,\n  ProductName,\n  ProductComponentName,\n  AlertSeverity,\n  AlertName,\n  Description,\n  Protocol,\n  SourceDeviceAddress,\n  DestDeviceAddress,\n  RemediationSteps,\n  Tactics,\n  Entities,\n  VendorOriginalId,\n  AlertLink,\n  AlertManagementUri,\n  Techniques\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when multiple attempts to download unwanted file occur.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "let threshold = 2;\nCiscoWSAEvent\n| where DvcAction =~ 'BLOCK_ADMIN_FILE_TYPE'\n| summarize i_src = makeset(SrcIpAddr) by UrlOriginal, bin(TimeGenerated, 15m)\n| where array_length(i_src) >= threshold\n| extend IPCustomEntity = i_src, UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. \nDynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec.\nRef: https://attack.mitre.org/techniques/T1546/009/\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "Event\n| where EventLog =~ \"Microsoft-Windows-Sysmon/Operational\" and EventID in (13)\n| parse EventData with * 'TargetObject\">' TargetObject \"<\" * 'Details\">' Details \"<\" * \n| where TargetObject has (\"\\\\Control\\\\Session Manager\\\\AppCertDLLs\\\\\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventID, Computer,  TargetObject, Details\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This indicator detects any recent changes to sIDHistory on AD objects, including changes to non-privileged accounts where privileged SIDs are added.\n Topic: Semperis Directory Services Protector"}, {"role": "assistant", "content": "dsp_parser\n| where EventID == 9212\n| where SecurityIndicatorName == \"Recent sIDHistory changes on objects\"\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps GreyNoise IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in CommonSecurityLog.\n Topic: GreyNoiseThreatIntelligence"}, {"role": "assistant", "content": "let IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\nlet dt_lookBack = 1h; // Look back 1 hour for CommonSecurityLog events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | where SourceSystem == 'GreyNoise'\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\";\n// Perform a join between IP indicators and CommonSecurityLog events\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      CommonSecurityLog\n      | where TimeGenerated >= ago(dt_lookBack)\n      | extend MessageIP = extract(IPRegex, 0, Message)\n      | extend CS_ipEntity = iff(isnotempty(SourceIP), SourceIP, DestinationIP)\n      | extend CS_ipEntity = iff(isempty(CS_ipEntity) and isnotempty(MessageIP), MessageIP, CS_ipEntity)\n      | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n  )\n  on $left.TI_ipEntity == $right.CS_ipEntity\n  // Filter out logs that occurred after the expiration of the corresponding indicator\n  | where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and CS_ipEntity, and keep the log entry with the latest timestamp\n  | summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, CS_ipEntity\n  // Select the desired output fields\n  | project timestamp = CommonSecurityLog_TimeGenerated, SourceIP, DestinationIP, MessageIP, Message, DeviceVendor, DeviceProduct, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, TI_ipEntity, CS_ipEntity, LogSeverity, DeviceAction, Type\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in GitHub_CL table from any IP IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour for VMConnection events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\nThreatIntelligenceIndicator\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n| where Action == true\n| where TimeGenerated >= ago(ioc_lookBack)\n// Taking the first non-empty value based on potential IOC match availability\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| join (\n  GitHubAudit\n  | where TimeGenerated >= ago(dt_lookBack)\n  | extend GitHubAudit_TimeGenerated = TimeGenerated\n)\non $left.TI_ipEntity == $right.IPaddress\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, GitHubAudit_TimeGenerated, TI_ipEntity, IPaddress, Actor, Action, Country, OperationType, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for a few sensitive subscription-level events based on Azure Activity Logs. For example, this monitors for the operation name Create or Update Snapshot, which is used for creating backups but could be misused by attackers to dump hashes or extract sensitive information from the disk.\n Topic: Azure Activity"}, {"role": "assistant", "content": "let starttime = 14d;\nlet endtime = 1d;\n// The number of operations above which an IP address is considered an unusual source of role assignment operations\nlet alertOperationThreshold = 5;\n// Add or remove operation names below as per your requirements. For operations lists, please refer to https://learn.microsoft.com/en-us/Azure/role-based-access-control/resource-provider-operations#all\nlet SensitiveOperationList =  dynamic([\"microsoft.compute/snapshots/write\", \"microsoft.network/networksecuritygroups/write\", \"microsoft.storage/storageaccounts/listkeys/action\"]);\nlet SensitiveActivity = AzureActivity\n| where OperationNameValue in~ (SensitiveOperationList) or OperationNameValue hassuffix \"listkeys/action\"\n| where ActivityStatusValue =~ \"Success\";\nSensitiveActivity\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| summarize count() by CallerIpAddress, Caller, OperationNameValue, bin(TimeGenerated,1d)\n| where count_ >= alertOperationThreshold\n// Returns all the records from the right side that don't have matches from the left\n| join kind = rightanti (\nSensitiveActivity\n| where TimeGenerated >= ago(endtime)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = make_list(TimeGenerated), ActivityStatusValue = make_list(ActivityStatusValue), CorrelationIds = make_list(CorrelationId), ResourceGroups = make_list(ResourceGroup), ResourceIds = make_list(_ResourceId), ActivityCountByCallerIPAddress = count()\nby CallerIpAddress, Caller, OperationNameValue\n| where ActivityCountByCallerIPAddress >= alertOperationThreshold\n) on CallerIpAddress, Caller, OperationNameValue\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "AWS ECR Image scan detected low severity vulnerabilities in your container image.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"DescribeImageScanFindings\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend repoName = tostring(parse_json(ResponseElements).repositoryName)\n| extend imageId = tostring(parse_json(ResponseElements).imageId.imageDigest)\n| extend Low = toint(parse_json(ResponseElements).imageScanFindings.findingSeverityCounts.LOW)\n| where Low > 0\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies repeating authentication attempts (5 or higher attempts) from a single source IP. These could be failed automation or service accounts, however, it is worth investigating these events.\n Topic: VMware SD-WAN and SASE"}, {"role": "assistant", "content": "let failureThreshold = 5; VMware_VECO_EventLogs_CL | where event in (\"USER_LOGIN_FAILURE\", \"USER_LOGIN_FAILURE_SSO\") | extend loginRemoteIp = todynamic(detail).remoteIp | summarize loginAttempts = count() by tostring(loginRemoteIp) | where loginAttempts >= failureThreshold | project loginRemoteIp, loginAttempts | extend IP_0_Address = loginRemoteIp"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows destination ports by IP address.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "ZPAEvent\n| where isnotempty(DstPortNumber)\n| summarize IP_Dst = make_set(DstIpAddr) by DstPortNumber\n| extend IPCustomEntity = IP_Dst\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is capturing events when VMware CWS policies were published. During publish, the VMware Edge Cloud Orchestrator deploys the CWS policies in SASE POPs, making them effective. All new rules will be enforced. Depending on the contents of the policy, this might create an impact on the CWS Data Plane traffic. Topic: VMware SD-WAN and SASE"}, {"role": "assistant", "content": "VMware_VECO_EventLogs_CL\n| where event == \"CWS_EVENT\"\n| extend cwsPolicyAction = todynamic(detail).subEvent\n| where cwsPolicyAction == \"CWS_POLICY_PUBLISHED\"\n| extend cwsPolicyName = todynamic(detail).policyName\n\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies bulk deletion of Power Automate flows that exceed a predefined threshold defined in the query and deviate from activity patterns observed in the last 14 days. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// minThreshold: Minimum number of apps to be deleted to be considered an anomaly;\n// This is to prevent one-off isolated delete flow to be considered outlier.\n// The Min Threshold can be reduced or increased according to the traffic in the organization.\nlet minThreshold=10;\nlet interval = 1h;\nlet startTime = ago(14d);\nlet endTime = now();\nlet query_frequency = 1h;\nlet flow_deletion_events = PowerAutomateActivity\n    | where TimeGenerated >= startTime\n    | where EventOriginalType =~ \"DeleteFlow\"\n    | extend IngestionTimeGenerated = TimeGenerated;\nflow_deletion_events\n| make-series DeletedFlowCount=count() on IngestionTimeGenerated from startTime to endTime step interval by ActorName, UserUpn, ActorUserId\n| extend(Anomalies, AnomalyScore, ExpectedUsage) = series_decompose_anomalies(DeletedFlowCount)\n| mv-expand\n    DeletedFlowCount to typeof(double),\n    IngestionTimeGenerated to typeof(datetime),\n    Anomalies to typeof(double),\n    AnomalyScore to typeof(double),\n    ExpectedUsage to typeof(long)\n| where IngestionTimeGenerated >= ago(query_frequency)\n| where Anomalies != 0 and DeletedFlowCount >= minThreshold\n| lookup (flow_deletion_events\n    | where IngestionTimeGenerated >= ago(query_frequency))\n    on ActorName, UserUpn, ActorUserId\n| extend\n    AccountName = tostring(split(ActorName, \"@\")[0]),\n    UPNSuffix = tostring(split(ActorName, \"@\")[1]),\n    PowerAutomateAppId = 27592\n| project\n    TimeGenerated,\n    ActorName,\n    DeletedFlowCount,\n    ExpectedUsage,\n    Anomalies,\n    AnomalyScore,\n    AccountName,\n    UPNSuffix,\n    PowerAutomateAppId,\n    UserUpn,\n    ActorUserId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies requests made to atypical URLs, as malware can exploit IP addresses for communication with command-and-control (C2) servers. The detection identifies network requests that contain either plain text or Base64 encoded IP addresses. Alerts are triggered when a private IP address is observed as plain text or base64 encoded in an outbound web request. This method of concealing the IP address was observed in the utilization of the RunningRAT tool by POLONIUM.\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let lookback = 1h;\n// Identified base64 encoded IPv4 addresses\nlet ipv4_encoded_identification_regex = @\"\\=([a-zA-Z0-9\\/\\+]*(?:(?:MC|Au|wL|MS|Eu|xL|Mi|Iu|yL|My|Mu|zL|NC|Qu|0L|NS|Uu|1L|Ni|Yu|2L|Ny|cu|3L|OC|gu|4L|OS|ku|5L){1}[a-zA-Z0-9\\/\\+]{2,4}){3}[a-zA-Z0-9\\/\\+\\=]*)\";\n// Extractes IPv4 addresses as hex values\nlet ipv4_decoded_hex_extract = @\"((?:(?:61|62|63|64|65|66|67|68|69|6a|6b|6c|6d|6e|6f|70|71|72|73|74|75|76|77|78|79|7a|41|42|43|44|45|46|47|48|49|4a|4b|4c|4d|4e|4f|50|51|52|53|54|55|56|57|58|59|5a|2f|2b|3d),){6,14}(?:61|62|63|64|65|66|67|68|69|6a|6b|6c|6d|6e|6f|70|71|72|73|74|75|76|77|78|79|7a|41|42|43|44|45|46|47|48|49|4a|4b|4c|4d|4e|4f|50|51|52|53|54|55|56|57|58|59|5a|2f|2b|3d))\";\nlet ipV4_Private_FromPlainString = _Im_WebSession(starttime=ago(lookback), eventresult='Success')\n    | where isnotempty(Url)\n    | extend ip_inURL = extract(@\"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b\", 0, Url)\n    | where ipv4_is_private(ip_inURL)\n    | where not(ipv4_is_private(DstIpAddr)) // only take traffic going to internet\n    | summarize\n        EventCount=count(),\n        EventEndTime = max(TimeGenerated),\n        EventStartTime = min(TimeGenerated),\n        Urls=tostring(make_set(Url, 100))\n        by SrcIpAddr, SrcUsername, SrcHostname, ip_inURL;\nlet ipV4_Private_FromEncodedString = \n    _Im_WebSession(starttime=ago(lookback), eventresult='Success')\n    | where isnotempty(Url)\n    // Identify requests with encoded IPv4 addresses\n    | where Url matches regex ipv4_encoded_identification_regex\n    | where not(ipv4_is_private(DstIpAddr)) // only take traffic going to internet\n    | project TimeGenerated, Url, SrcIpAddr, SrcUsername, SrcHostname\n    // Extract IP candidates in their base64 encoded format, significantly reducing the dataset\n    | extend extracted_encoded_ip_inURL = extract_all(ipv4_encoded_identification_regex, Url)\n    // We could have more than one ip, expand them out\n    | mv-expand extracted_encoded_ip_inURL to typeof(string)\n    | summarize\n        EventStartTime=min(TimeGenerated),\n        EventEndTime=max(TimeGenerated),\n        make_set(Url, 100),\n        EventCount=count()\n        by extracted_encoded_ip_inURL, SrcIpAddr, SrcUsername, SrcHostname\n    // Pad if we need to\n    | extend extracted_encoded_ip_inURL = iff(strlen(extracted_encoded_ip_inURL) % 2 == 0, extracted_encoded_ip_inURL, strcat(extracted_encoded_ip_inURL, \"=\"))\n    // Now decode the candidate to a long array, we cannot go straight to string as it cannot handle non-UTF8, we need to strip that first\n    | extend extracted_encoded_ip_inURL = tostring(base64_decode_toarray(extracted_encoded_ip_inURL))\n    // Extract the IP candidates from the array\n    | extend hex_extracted = extract_all(ipv4_decoded_hex_extract, extracted_encoded_ip_inURL)\n    // Expand, it's still possible that we might have more than 1 IP\n    | mv-expand hex_extracted\n    // Now we should have a clean string. We need to put it back into a dynamic array to convert back to a string.\n    | extend hex_extracted = trim_end(\",\", tostring(hex_extracted))\n    | extend hex_extracted = strcat(\"[\", hex_extracted, \"]\")\n    | extend hex_extracted = todynamic(hex_extracted)\n    // Convert the array back into a string\n    | extend decoded_ip_inURL = unicode_codepoints_to_string(hex_extracted)\n    | where ipv4_is_private(decoded_ip_inURL)\n    | project\n        ip_inURL=decoded_ip_inURL,\n        Urls=tostring(set_Url),\n        EventStartTime,\n        EventEndTime,\n        EventCount,\n        SrcIpAddr,\n        SrcUsername,\n        SrcHostname;\nunion ipV4_Private_FromPlainString, ipV4_Private_FromEncodedString\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query below identifies powershell commands used by the threat actor Mango Sandstorm.\nReference:  https://www.microsoft.com/security/blog/2022/08/25/mercury-leveraging-log4j-2-vulnerabilities-in-unpatched-systems-to-target-israeli-organizations/\n Topic: Detections"}, {"role": "assistant", "content": "(union isfuzzy=true\n(SecurityEvent\n| where EventID == 4688\n| where Process has_any (\"powershell.exe\",\"powershell_ise.exe\",\"pwsh.exe\") and CommandLine has_cs \"-exec bypass -w 1 -enc\"\n| where CommandLine  contains_cs \"UwB0AGEAcgB0AC0ASgBvAGIAIAAtAFMAYwByAGkAcAB0AEIAbABvAGMAawAgAHsAKABzAGEAcABzACAAKAAiAHAA\"\n| extend DvcHostname = Computer, ProcessId = tostring(ProcessId), ActorUsername = Account\n),\n(DeviceProcessEvents\n| where FileName =~ \"powershell.exe\" and ProcessCommandLine has_cs \"-exec bypass -w 1 -enc\"\n| where ProcessCommandLine contains_cs \"UwB0AGEAcgB0AC0ASgBvAGIAIAAtAFMAYwByAGkAcAB0AEIAbABvAGMAawAgAHsAKABzAGEAcABzACAAKAAiAHAA\"\n| extend DvcHostname = DeviceName, ProcessId = tostring(InitiatingProcessId), ActorUsername = strcat(AccountDomain, @\"\\\", AccountName)\n),\n(imProcessCreate\n| where Process has_any (\"powershell.exe\",\"powershell_ise.exe\",\"pwsh.exe\") and CommandLine has_cs \"-exec bypass -w 1 -enc\"\n| where CommandLine  contains_cs \"UwB0AGEAcgB0AC0ASgBvAGIAIAAtAFMAYwByAGkAcAB0AEIAbABvAGMAawAgAHsAKABzAGEAcABzACAAKAAiAHAA\"\n| extend ProcessId = tostring(TargetProcessId)\n)\n)\n| extend AccountName = tostring(split(ActorUsername, \"\\\\\")[0]), AccountNTDomain = tostring(split(ActorUsername, \"\\\\\")[1])\n| extend HostName = tostring(split(DvcHostname, \".\")[0]), DomainIndex = toint(indexof(DvcHostname, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DvcHostname, DomainIndex + 1), DvcHostname)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection watches the commandline logs for known commands that are used to disable the Defender AV. This is based on research performed by @olafhartong on a large sample of malware for varying purposes. \nNote that this detection is imperfect and is only meant to serve as basis for building a more resilient detection rule. Make the detection more resilient, currently the order of parameters matters. You dont want that for a production rule. \nSee blogpost (https://medium.com/falconforce/falconfriday-av-manipulation-0xff0e-67ed4387f9ab?source=friends_link&sk=3c7c499797bbb4d74879e102ef3ecf8f) for more resilience considerations. The current approach can easily be bypassed by not using the powershell.exe executable. \nConsider adding more ways to detect this behavior.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let defendertampering=dynamic([\"Set-MpPreference -DisableRealtimeMonitoring $true\",\"sc stop WinDefend\",\"sc delete WinDefend\",\"Set-MpPreference -DisableBehaviorMonitoring $true\",\"Set-MpPreference -ExclusionProcess\", \"Set-MpPreference -ExclusionExtension dll\",\"net stop security center\"]);\nDeviceProcessEvents\n| where ProcessCommandLine has_any (defendertampering)\n// If you have a lot of false positives coming from JetBrains, you can use the line below. \n//| where InitiatingProcessFolderPath !startswith @\"c:\\program files\\jetbrains\\\" and InitiatingProcessVersionInfoProductName !~ (\"Android Studio\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is desinged to monitor Azure policies aligned with the Maturity Model for Event Log Management (M-21-31) standard. The alert triggers when EL0 policy compliance falls below 70% within a 1 week timeframe.\n Topic: MaturityModelForEventLogManagementM2131"}, {"role": "assistant", "content": "SecurityRecommendation\n| where RecommendationDisplayName <> \"\"\n| extend MaturityLevel=iff(RecommendationDisplayName has_any(\"agent\",\"extension\",\"retention\",\"logs encryption\",\"collect\",\"retained\",\"log profile\",\"CloudTrail\",\"metric\",\"AWS\",\"GCP\",\"DNS\",\"Auditing\",\"Flow\",\"logging\",\"usage\"), \"Event Logging (EL0)\",\niff(RecommendationDisplayName has_any(\"container registries\",\"logic apps\",\"Enhanced monitoring\",\"IoT Hub\",\"Event Hub\",\"App Service\", \"Kubernetes\",\"updates\",\"email\", \"automation\", \"adaptive\"), \"Advanced Event Logging (EL3)\",\niff(RecommendationDisplayName has_any(\"signatures\",\"CMK\",\"CMEK\",\"double encryption\",\"managed key\",\"KMS\",\"container\",\"Watcher\"), \"Intermediate Event Logging (EL2)\",\niff(RecommendationDisplayName has_any(\"Exploit Guard\",\"endpoint protection\",\"Antimalware\",\"health\",\"VPC\",\"Defender\",\"Vulnerabilities\",\"vulnerability\",\"diagnostic\",\"Key\",\"activity log alert\",\"\"), \"Basic Event Logging (EL1)\",\"Other\"))))\n| summarize arg_max(TimeGenerated, *) by RecommendationDisplayName, AssessedResourceId, MaturityLevel\n| summarize Failed = countif(RecommendationState == \"Unhealthy\"), Passed = countif(RecommendationState == \"Healthy\"), Total = countif(RecommendationState == \"Healthy\" or RecommendationState == \"Unhealthy\") by MaturityLevel\n| extend PassedControls = (Passed/todouble(Total))*100\n| extend RemediationLink = strcat('https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/22')\n| project MaturityLevel, Total, PassedControls, Passed, Failed, RemediationLink, LastObserved=now()\n| where MaturityLevel <> ''\n| where MaturityLevel == \"Event Logging (EL0)\"\n| where PassedControls < 70 \n//Adjust Either FailedRatePercentage or PasedRatePercentage Thresholds within   Organizational Needs\n| sort by PassedControls desc\n| extend URLCustomEntity = RemediationLink\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": " This query will detect when an attempt is made to update an existing user and link it to an guest or external identity. These activities are unusual and such linking of external \nidentities should be investigated. In some cases you may see internal Entra ID sync accounts (Sync_) do this which may be benign\n Topic: Detections"}, {"role": "assistant", "content": "AuditLogs\n| where OperationName=~ \"Update user\" \n| where Result =~ \"success\" \n| mv-expand TargetResources \n| mv-expand TargetResources.modifiedProperties \n| extend displayName = tostring(TargetResources_modifiedProperties.displayName), \nTargetUPN_oldValue = tostring(parse_json(tostring(TargetResources_modifiedProperties.oldValue))[0]), \nTargetUPN_newValue = tostring(parse_json(tostring(TargetResources_modifiedProperties.newValue))[0])\n| where displayName == \"UserPrincipalName\" and TargetUPN_oldValue !has \"#EXT\" and TargetUPN_newValue has \"#EXT\"\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n| extend InitiatedBy = tostring(iff(isnotempty(InitiatingUserPrincipalName),InitiatingUserPrincipalName, InitiatingAppName))\n| summarize arg_max(TimeGenerated, *) by CorrelationId\n| project-reorder TimeGenerated, InitiatedBy, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIPAddress, TargetUPN_oldValue, TargetUPN_newValue\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n| extend TargetAccountName = tostring(split(TargetUPN_oldValue, \"@\")[0]), TargetUPNSuffix = tostring(split(TargetUPN_oldValue, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The policy detects user accounts without mutli-factor authentication Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"User without MFA\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Multi-Factor Authentication (MFA) helps prevent credential compromise. This alert identifies when an attempt has been made to deactivate MFA for a user.\n Topic: Cloud Identity Threat Protection Essentials"}, {"role": "assistant", "content": "(union isfuzzy=true\n(AuditLogs\n| where OperationName =~ \"Disable Strong Authentication\"\n| extend _parsedIntiatedByUser = parse_json(tostring(InitiatedBy.user))\n| extend _parsedIntiatedByApp = parse_json(tostring(InitiatedBy.app))\n| extend IPAddress = tostring(_parsedIntiatedByUser.ipAddress)\n| extend InitiatedByUser = iff(isnotempty(tostring(_parsedIntiatedByUser.userPrincipalName)),\n tostring(_parsedIntiatedByUser.userPrincipalName), tostring(_parsedIntiatedByApp.displayName))\n| extend Targetprop = todynamic(TargetResources)\n| extend TargetUser = tostring(Targetprop[0].userPrincipalName)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by User = TargetUser, InitiatedByUser , Operation = OperationName , CorrelationId, IPAddress, Category, Source = SourceSystem , AADTenantId, Type\n),\n(AWSCloudTrail\n| where EventName in~ (\"DeactivateMFADevice\", \"DeleteVirtualMFADevice\")\n| extend _parsedRequestParameters = parse_json(RequestParameters)\n| extend InstanceProfileName = tostring(_parsedRequestParameters.InstanceProfileName)\n| extend TargetUser = tostring(_parsedRequestParameters.userName)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by User = TargetUser, Source = EventSource , Operation = EventName , TenantorInstance_Detail = InstanceProfileName, IPAddress = SourceIpAddress\n)\n)\n| extend timestamp = StartTimeUtc, UserName = tostring(split(User, '@', 0)[0]), UPNSuffix = tostring(split(User, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query will alert on any sign-ins from devices infected with malware in correlation with workspace deletion activity. \nAttackers may attempt to delete workspaces containing compute instances after successful compromise to cause service unavailability to regular business operation.\n Topic: Detections"}, {"role": "assistant", "content": "SecurityAlert\n| where TimeGenerated > ago(1d)\n| where ProductName == \"Azure Active Directory Identity Protection\"\n| where AlertName == \"Sign-in from an infected device\"\n| mv-apply EntityAccount=todynamic(Entities) on\n(\nwhere EntityAccount.Type == \"account\"\n| extend AadTenantId = tostring(EntityAccount.AadTenantId), AadUserId = tostring(EntityAccount.AadUserId)\n)\n| mv-apply EntityIp=todynamic(Entities) on\n(\nwhere EntityIp.Type == \"ip\"\n| extend IpAddress = tostring(EntityIp.Address)\n)\n| join kind=inner (\nIdentityInfo\n| distinct AccountTenantId, AccountObjectId, AccountUPN, AccountDisplayName\n| extend UserAccount = AccountUPN\n| extend UserName = AccountDisplayName\n| where isnotempty(AccountDisplayName) and isnotempty(UserAccount)\n| project AccountTenantId, AccountObjectId, UserAccount, UserName\n)\non\n$left.AadTenantId == $right.AccountTenantId,\n$left.AadUserId == $right.AccountObjectId\n| extend CompromisedEntity = iff(CompromisedEntity == \"N/A\" or isempty(CompromisedEntity), UserAccount, CompromisedEntity)\n| project  AlertName, AlertSeverity, CompromisedEntity, UserAccount, IpAddress, TimeGenerated, UserName\n| join kind=inner \n(\nAzureActivity\n| where OperationNameValue has_any (\"/workspaces/computes/delete\", \"workspaces/delete\") \n| where ActivityStatusValue has_any (\"Succeeded\", \"Success\")\n| project TimeGenerated, ResourceProviderValue, _ResourceId, SubscriptionId, UserAccount=Caller, IpAddress=CallerIpAddress, CorrelationId, OperationId, ResourceGroup, TenantId\n) on IpAddress, UserAccount\n| extend AccountName = tostring(split(UserAccount, \"@\")[0]), AccountUPNSuffix = tostring(split(UserAccount, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in DataverseActivity from any URL IOC from Microsoft Sentinel Threat Intelligence. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true\n| where isnotempty(Url)\n| join kind=innerunique (\n    DataverseActivity\n    | where TimeGenerated >= ago(dt_lookBack)\n    | where Message in (\"Create\", \"Update\")\n    | where isnotempty(Fields) and Fields has \"http\"\n    | extend\n        ExtractedUrls = extract_all(\"(http[s]?://(?:[a-zA-Z\\\\.-]|[0-9])+)\", tostring(Fields)),\n        DataverseActivity_TimeGenerated = TimeGenerated\n    | mv-expand Url = ExtractedUrls\n    | project\n        DataverseActivity_TimeGenerated,\n        tostring(Url),\n        UserId,\n        ClientIp,\n        InstanceUrl,\n        EntityName\n    )\n    on Url\n| where DataverseActivity_TimeGenerated < ExpirationDateTime\n| summarize DataverseActivity_TimeGenerated  = arg_max(DataverseActivity_TimeGenerated, *) by IndicatorId, Url\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    DataverseActivity_TimeGenerated,\n    Description,\n    ActivityGroupNames,\n    IndicatorId,\n    ThreatType,\n    ExpirationDateTime,\n    ConfidenceScore,\n    UserId,\n    ClientIp,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix,\n    Url\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects a service installation that is originated from a user writable directory.\nRef: https://attack.mitre.org/techniques/T1569/002/\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// Enter a reference list for writable user paths\"\nlet WritableUserPaths = dynamic ([\"\\\"C:\\\\Users\\\\\",\"\\\"C:\\\\ProgramData\\\\\"]);\nEvent\n| where Source == \"Service Control Manager\" and EventID == 7045\n| parse EventData with * 'ServiceName\">' ServiceName \"<\" * 'ImagePath\">' ImagePath \"<\" *\n| where ImagePath has_any (WritableUserPaths)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, ImagePath, ServiceName, UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for potentially suspicious files or files which can contain sensitive information such as passwords, secrets.\n Topic: Box"}, {"role": "assistant", "content": "BoxEvents\n| where TimeGenerated > ago(24h)\n| where SourceItemName =~ 'id_rsa' or SourceItemName contains 'password' or SourceItemName contains 'key' or SourceItemName contains '_key' or SourceItemName contains '.ssh' or SourceItemName endswith '.npmrc' or SourceItemName endswith '.muttrc' or SourceItemName contains 'config.json' or SourceItemName contains '.gitconfig' or SourceItemName endswith '.netrc' or SourceItemName endswith 'package.json' or SourceItemName endswith 'Gemfile' or SourceItemName endswith 'bower.json' or SourceItemName endswith 'config.gypi' or SourceItemName endswith 'travis.yml' or SourceItemName endswith '.ps1' or SourceItemName endswith '.bat' or SourceItemName endswith '.scr' or SourceItemName endswith '.sh' or SourceItemName endswith '.exe' or SourceFileName =~ 'id_rsa' or SourceFileName contains 'password' or SourceFileName contains 'key' or SourceFileName contains '_key' or SourceFileName contains '.ssh' or SourceFileName endswith '.npmrc' or SourceFileName endswith '.muttrc' or SourceFileName contains 'config.json' or SourceFileName contains '.gitconfig' or SourceFileName endswith '.netrc' or SourceFileName endswith 'package.json' or SourceFileName endswith 'Gemfile' or SourceFileName contains 'bower.json' or SourceFileName contains 'config.gypi' or SourceFileName contains 'travis.yml' or SourceFileName endswith '.ps1' or SourceFileName endswith '.bat' or SourceFileName endswith '.scr' or SourceFileName endswith '.sh' or SourceFileName endswith '.exe'\n| project TimeGenerated, SourceName, SourceLogin\n| extend AccountCustomEntity = SourceLogin\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for destination ports of inbound traffic.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where TimeGenerated > ago(24h)\n| where EventType contains 'vcn.flowlogs'\n| where data_action_s =~ 'ACCEPT'\n| where ipv4_is_private(DstIpAddr)\n| where ipv4_is_private(SrcIpAddr) == False\n| summarize count() by DstIpAddr, DstPortNumber\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows multiple Deny results by user\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "let threshold = 20;\nPaloAltoCDLEvent\n| where TimeGenerated > ago(24h)\n| where DvcAction has 'deny'\n| summarize DenyCount = count() by DvcAction, DstUsername\n| where DenyCount > threshold\n| extend AccountCustomEntity = DstUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for dropped tables.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let lbtime = 24h;\nOracleDatabaseAuditEvent\n| where TimeGenerated > ago(lbtime)\n| where DbAction =~ 'DROP'\n| extend TableName = replace(@'[,\\(\\)]', '', extract(@'(?i)SELECT(.*?)FROM\\s(.*?)\\s', 2, Action))\n| where isnotempty(TableName)\n| where TableName !~ 'select'\n| project TimeGenerated, DstUserName, TableName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when multiple user login failures occurs.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "let threshold = 10;\nCiscoDuo\n| where EventType =~ 'authentication'\n| where EventResult in~ ('denied', 'failure')\n| summarize count() by DstUserName, bin(TimeGenerated, 10m)\n| where count_ > threshold\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies evidence of potential brute force attack by looking at multiple failed attempts to log into the VPN server\n Topic: Pulse Connect Secure"}, {"role": "assistant", "content": "let threshold = 20;\nPulseConnectSecure\n| where Messages contains \"Login failed\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by User, Source_IP\n| where count_ > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query searches for event 5143, which is triggered when a share is created or changed and includes de share permissions.\nFirst it checks to see if this is a whitelisted share for the system (e.g. domaincontroller netlogon, printserver print$ etc.).\nThe share permissions are then checked against allow rule (A) for a number of well known overly permissive groups, like all users, guests, authenticated users etc.\nIf these are found, an alert is raised so the share creation may be audited.\nNote: this rule only checks for changed permissions, to prevent repeat alerts if for example a comment is changed, but the permissions are not altered.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let timeframe=1h;\nlet system_roles = datatable(role:string, system:string)                  // Link roles to systems.\n  [\"DC\",\"dc1.corp.local\",\n  \"DC\",\"dc2.corp.local\",\n  \"PRINT\",\"printer.corp.local\"\n  ];\nlet share_roles = datatable(role:string, share:string)                    // Link roles to shares.\n  [\"DC\", @\"\\\\*\\sysvol\",\n  \"DC\",@\"\\\\*\\netlogon\",\n  \"PRINT\",@\"\\\\*\\print$\"];\nlet allowed_system_shares = system_roles                                  // Link systems to shares.\n  | join kind=inner share_roles on role\n  | extend system = tolower(system), share = tolower(share)\n  | project-away role\n  | summarize allowed_shares = make_set(share) by system;\nlet monitored_principals=datatable(identifier:string, Group_Name:string)  // Define a data-table with groups to monitor.\n  [\"AN\", \"Anonymous Logon\",            // We accept the 'alias' for these well-known SIDS.\n  \"AU\", \"Authenticated Users\",\n  \"BG\",\"Built-in guests\",\n  \"BU\",\"Built-in users\",\n  \"DG\",\"Domain guests\",\n  \"DU\",\"Domain users\",\n  \"WD\",\"Everyone\",\n  \"IU\",\"Interactively Logged-on users\",\n  \"LG\",\"Local Guest\",\n  \"NU\",\"Network logon users\",\n  \"513\", \"Domain Users\",                                                  // Support matching on the last part of a SID.\n  \"514\", \"Domain Guests\",\n  \"545\", \"Builtin Users\",\n  \"546\", \"Builtin Guests\",\n  \"S-1-5-7\", \"Anonymous Logon\"                                            // For the global SIDS, we accept them as-is.\n  ];\nSecurityEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 5143\n| extend EventXML = parse_xml(EventData)\n| extend OldSD = tostring(EventXML[\"EventData\"][\"Data\"][13][\"#text\"])     // Grab the previous Security Descriptor.\n| extend NewSD = tostring(EventXML[\"EventData\"][\"Data\"][14][\"#text\"])     // Grab the new Security Descriptor.\n| project-away EventXML\n| where tostring(OldSD) !~ tostring(NewSD)                                // Don't bother with unchanged permissions.\n| extend system = tolower(Computer), share=tolower(ShareName)             // Normalize system and share name for matching with whitelist.\n| join kind=leftouter allowed_system_shares on system                     // Retrieve the allowed shares per system.\n| where not(set_has_element(allowed_shares, share))                       // Check if the current share is an allowed share.\n| project-away system, share, allowed_shares                              // Get rid of temporary fields.\n| extend DACLS = extract_all(@\"(D:(?:\\((?:[\\w\\-]*;){5}(?:[\\w\\-]*)\\))*)\", tostring(NewSD)) // Grab all instances of D:(DACL), in case there are multiple sets.\n| project-away OldSD, NewSD                                               // Get rid of data we no longer need.\n| mv-expand DACLS to typeof(string)                                       // In case there are any duplicate/subsequent D: entries (e.g., D:<dacls>S:<sacls>D:<dacls>) split them out to individual D: sets.\n| extend DACLS = substring(DACLS,2)                                       // Strip the leading D:.\n| extend DACLS = split(DACLS, \")\")                                        // Split the sets of DACLS ()() to an array of individual DACLS (). This removes the trailing ) character.\n| mv-expand DACLS to typeof(string)                                       // Duplicate the records in such a way that only 1 DACL per record exist. We will aggregate them back later.\n| extend DACLS = substring(DACLS, 1)                                      // Also remove the leading ( character.\n| where not(isempty(DACLS)) and DACLS startswith \"A;\"                     // Remove any empty or non-allow DACLs.\n| extend allowed_principal = tostring(split(DACLS,\";\",5)[0])              // Grab the SID what is affected by this DACL.\n| extend allowed_principal = iff(not(allowed_principal startswith \"S-\" and string_size(allowed_principal) > 15), allowed_principal, split(allowed_principal,\"-\",countof(allowed_principal,\"-\"))[0]) // This line takes only the last part (e.g., 513) of a long SID, so you can refer to groups/users without needing to supply the full SID above.\n| join kind=inner monitored_principals on $left.allowed_principal == $right.identifier // Join the found groups to the table of groups to be monitored above. Adds the more readable 'group_name).\n| project-away allowed_principal, identifier, DACLS\n| summarize Authorized_Public_Principals = make_set(Group_Name), take_any(*) by TimeGenerated, SourceComputerId, EventData // Summarize the fields back, making a set of the various group_name values for this record.\n| project-away Group_Name\n// Begin client-specific filter.\n// End client-specific filter.\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule helps to detect Powershell user-agent activity by an unusual process other than a web browser.\n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = 15m;\nCisco_Umbrella\n| where EventType == \"proxylogs\"\n| where TimeGenerated > ago(timeframe)\n| where HttpUserAgentOriginal contains \"WindowsPowerShell\"\n| extend Message = \"Windows PowerShell User Agent\"\n| project Message, SrcIpAddr, DstIpAddr, UrlOriginal, TimeGenerated,HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible port scan.\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "let threshold = 10;\nPaloAltoCDLEvent\n| where EventResourceId =~ 'TRAFFIC'\n| where isnotempty(DstPortNumber) and isnotempty(SrcIpAddr)\n| summarize PortSet = make_set(DstPortNumber) by SrcIpAddr, bin(TimeGenerated, 5m)\n| where array_length(PortSet) > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches rare application protocols by Ip address.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(ApplicationProtocol)\n| extend AppProtocol = case(\nApplicationProtocol == \"0\", \"Unknown\", \nApplicationProtocol == \"1\", \"SMTP\",\nApplicationProtocol == \"2\", \"POP3\",\nApplicationProtocol == \"3\", \"IRC\", \nApplicationProtocol == \"4\", \"DNS Response\",\nApplicationProtocol == \"5\", \"HTTP\",\nApplicationProtocol == \"6\", \"FTP\", \nApplicationProtocol == \"7\", \"TFTP\",\nApplicationProtocol == \"8\", \"SMB\",\nApplicationProtocol == \"9\", \"Windows Live Messenger (MSN)\", \nApplicationProtocol == \"10\", \"AIM\",\nApplicationProtocol == \"11\", \"Yahoo! Messenger\",\nApplicationProtocol == \"12\", \"Gmail\",\nApplicationProtocol == \"13\", \"Yahoo! Mail\", \nApplicationProtocol == \"14\", \"Windows Live Hotmail\",\nApplicationProtocol == \"15\", \"RDP\",\nApplicationProtocol == \"16\", \"DHCP\",\nApplicationProtocol == \"17\", \"Telnet\", \nApplicationProtocol == \"18\", \"LDAP\",\nApplicationProtocol == \"19\", \"File transfer\",\nApplicationProtocol == \"20\", \"SSH\",\nApplicationProtocol == \"21\", \"Dameware\", \nApplicationProtocol == \"22\", \"VNC\",\nApplicationProtocol == \"23\", \"Cisco Telnet\",\nApplicationProtocol == \"24\", \"Kerberos\", \nApplicationProtocol == \"25\", \"DCE RPC\",\nApplicationProtocol == \"26\", \"SQL\",\nApplicationProtocol == \"27\", \"pcAnywhere\", \nApplicationProtocol == \"28\", \"ICMP\",\nApplicationProtocol == \"29\", \"SNMP\",\nApplicationProtocol == \"30\", \"Virus pattern TCP\", \nApplicationProtocol == \"31\", \"Virus pattern UDP\",\nApplicationProtocol == \"32\", \"HTTPS\",\nApplicationProtocol == \"33\", \"SMB2\",\nApplicationProtocol == \"34\", \"MMS\", \nApplicationProtocol == \"35\", \"IMAP4\",\nApplicationProtocol == \"36\", \"RADIUS\",\nApplicationProtocol == \"37\", \"Radmin\",\nApplicationProtocol == \"38\", \"FTP_Response\", \nApplicationProtocol == \"48\", \"RTSP/RTP-UDP\",\nApplicationProtocol == \"49\", \"RTSP/RTP-TCP\",\nApplicationProtocol == \"50\", \"RTSP/RDT-UDP\",\nApplicationProtocol == \"51\", \"RTSP/RDT-TCP\",\nApplicationProtocol == \"52\", \"WMSP\",\nApplicationProtocol == \"53\", \"SHOUTCast\", \nApplicationProtocol == \"54\", \"RTMP\",\nApplicationProtocol == \"68\", \"DNS Request\",\nApplicationProtocol == \"256\", \"BitTorrent\", \nApplicationProtocol == \"257\", \"Kazaa\",\nApplicationProtocol == \"258\", \"Limewire\",\nApplicationProtocol == \"259\", \"Bearshare\", \nApplicationProtocol == \"260\", \"Bluester\",\nApplicationProtocol == \"261\", \"Edonkey emule\",\nApplicationProtocol == \"262\", \"Edonkey2000\",\nApplicationProtocol == \"263\", \"Filezilla\", \nApplicationProtocol == \"264\", \"Guncleus\",\nApplicationProtocol == \"265\", \"Gnutella\",\nApplicationProtocol == \"266\", \"Winny\",\nApplicationProtocol == \"267\", \"Napster\", \nApplicationProtocol == \"268\", \"Morpheus\",\nApplicationProtocol == \"269\", \"Napster\",\nApplicationProtocol == \"270\", \"Shareaza\",\nApplicationProtocol == \"271\", \"WinMX\", \nApplicationProtocol == \"272\", \"Mldonkey\",\nApplicationProtocol == \"273\", \"Direct Connect\",\nApplicationProtocol == \"274\", \"Soulseek\", \nApplicationProtocol == \"275\", \"OpenAP\",\nApplicationProtocol == \"276\", \"Kuro\",\nApplicationProtocol == \"277\", \"Imesh\", \nApplicationProtocol == \"278\", \"Skype\",\nApplicationProtocol == \"279\", \"Google Talk\",\nApplicationProtocol == \"317\", \"Cabos\", \nApplicationProtocol == \"318\", \"Zultrax\",\nApplicationProtocol == \"319\", \"Foxy\",\nApplicationProtocol == \"320\", \"eDonkey\",\nApplicationProtocol == \"321\", \"Ares\", \nApplicationProtocol == \"322\", \"Miranda\",\nApplicationProtocol == \"323\", \"Kceasy\",\nApplicationProtocol == \"324\", \"MoodAmp\",\nApplicationProtocol == \"325\", \"Deepnet Explorer\", \nApplicationProtocol == \"326\", \"FreeWire\",\nApplicationProtocol == \"327\", \"Gimme\",\nApplicationProtocol == \"328\", \"GnucDNA GWebCache\",\nApplicationProtocol == \"329\", \"Jubster\",\nApplicationProtocol == \"330\", \"MyNapster\", \nApplicationProtocol == \"331\", \"Nova GWebCache\",\nApplicationProtocol == \"332\", \"Swapper GWebCache\",\nApplicationProtocol == \"333\", \"Xnap\",\nApplicationProtocol == \"334\", \"Xolox\", \nApplicationProtocol == \"335\", \"Ppstream\",\nApplicationProtocol == \"640\", \"AIM Express\",\nApplicationProtocol == \"641\", \"Chikka SMS Messenger\",\nApplicationProtocol == \"642\", \"eBuddy\", \nApplicationProtocol == \"643\", \"ICQ2Go\",\nApplicationProtocol == \"644\", \"ILoveIM Web Messenger\",\nApplicationProtocol == \"645\", \"IMUnitive\",\nApplicationProtocol == \"646\", \"Mabber\",\nApplicationProtocol == \"647\", \"Meebo\",\nApplicationProtocol == \"648\", \"Yahoo! Web Messenger\", \nApplicationProtocol == \"848\", \"SIP2\",\nApplicationProtocol == \"1024\", \"GPass\",\nApplicationProtocol == \"10001\", \"IP\",\nApplicationProtocol == \"10002\", \"ARP\",\nApplicationProtocol == \"10003\", \"TCP\", \nApplicationProtocol == \"10004\", \"UDP\",\nApplicationProtocol == \"10005\", \"IGMP\",\nApplicationProtocol == \"60\", \"ORACLE\", \nApplicationProtocol == \"44\", \"MySQL\",\nApplicationProtocol == \"520\", \"MSSQL\",\nApplicationProtocol == \"337\", \"Postgres\", \nApplicationProtocol == \"41\", \"ICMPv6\",\nApplicationProtocol == \"10006\", \"GGP\",\nApplicationProtocol == \"10007\", \"PUP\",\nApplicationProtocol == \"10008\", \"IDP\", \nApplicationProtocol == \"10009\", \"ND\",\nApplicationProtocol == \"10010\", \"RAW\",\n\"unknown\")\n| summarize ProtocolCount = count() by AppProtocol, SrcIpAddr, DstUserName\n| top 20 by ProtocolCount asc \n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in the Security Alert table for MDATP hits related to the Aqua Blizzard actor\n Topic: MicrosoftDefenderForEndpoint"}, {"role": "assistant", "content": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/ActiniumIOC.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet AVHits = (iocs | where Type =~ \"AVDetection\"| project IoC);\nSecurityAlert\n| where ProviderName == 'MDATP'\n| extend ThreatName_ = tostring(parse_json(ExtendedProperties).ThreatName)\n| where ThreatName_ has_any (AVHits)\n| extend Directory = tostring(parse_json(Entities)[0].Directory), SHA256 = tostring(parse_json(tostring(parse_json(Entities)[0].FileHashes))[2].Value), FileName = tostring(parse_json(Entities)[0].Name), Hostname = tostring(parse_json(Entities)[6].FQDN)| extend AccountName = tostring(parse_json(tostring(parse_json(Entities)[6].LoggedOnUsers))[0].AccountName)\n| project TimeGenerated, AlertName, ThreatName_, ProviderName, AlertSeverity, Description, RemediationSteps, ExtendedProperties, Entities, FileName,SHA256, Directory, Hostname, AccountName\n| extend FileHash = SHA256, FileHashType = \"SHA256\"\n| extend Name = tostring(split(AccountName, \"@\")[0]), AccountUPNSuffix = tostring(split(AccountName, \"@\")[1])\n| extend Host = tostring(split(Hostname, \".\")[0]), DomainIndex = toint(indexof(Hostname, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Hostname, DomainIndex + 1), Hostname)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple failed logins for the same user account.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "let threshold = 10;\nPaloAltoPrismaCloud\n| where ResourceType =~ 'Login'\n| where EventResult =~ 'Failed'\n| where EventMessage !has 'access key'\n| summarize count() by UserName, bin(TimeGenerated, 5m)\n| where count_ > threshold\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule helps to detect a new breach generated in BitSight.\n Topic: BitSight"}, {"role": "assistant", "content": "let timeframe = 24h;\nBitSightBreaches\n| where ingestion_time() > ago(timeframe)\n| extend Severity = toreal(Severity)\n| extend Severity = case( Severity == 1, \"Low\",\n                          Severity == 2, \"Medium\",\n                          Severity == 3, \"High\",\n                          \"Informational\")\n| project DateCreated, Companyname, Severity, PreviwURL, GUID\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Created to detect new Threat events from the data which is recently synced by Lookout Solution.\n Topic: Lookout"}, {"role": "assistant", "content": "Lookout_CL\n| where details_action_s == 'DETECTED' and type_s == 'THREAT'\n| extend DetailsPackageName = details_packageName_s\n| extend TargetPlatform = target_platform_s\n| extend TargetOsVersion = target_osVersion_s\n| extend Type = type_s\n| extend Severity = details_severity_s\n| extend Classifications = details_classifications_s\n| extend Platform = target_platform_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection correlates AWS GuardDuty Credential Access alerts related to Amazon Relational Database Service (RDS) activity with Azure portal sign-in activities. It identifies successful and failed logins, anomalous behavior, and malicious IP access. By joining these datasets on network entities and IP addresses, it detects unauthorized credential access attempts across AWS and Azure resources, enhancing cross-cloud security monitoring.\n Topic: Multi Cloud Attack Coverage Essentials - Resource Abuse"}, {"role": "assistant", "content": "// Define variable 'AwsAlert' to collect AWS GuardDuty CredentialAccess alerts related to Amazon Relational Database Service (RDS) activity\nlet AwsAlert = materialize (\n    AWSGuardDuty\n    | where ActivityType has_any (\n        \"CredentialAccess:RDS/TorIPCaller.SuccessfulLogin\",\n        \"CredentialAccess:RDS/TorIPCaller.FailedLogin\",\n        \"CredentialAccess:RDS/AnomalousBehavior.SuccessfulBruteForce\",\n        \"CredentialAccess:RDS/AnomalousBehavior.SuccessfulLogin\",\n        \"CredentialAccess:RDS/MaliciousIPCaller.SuccessfulLogin\",\n        \"CredentialAccess:RDS/MaliciousIPCaller.FailedLogin\"\n        )\n    | extend\n        AWSAlertId = Id, \n        AWSAlertTitle = Title,\n        AWSAlertDescription = Description,\n        AWSresourceType = tostring(parse_json(ResourceDetails).resourceType),\n        AWSNetworkEntity = tostring(parse_json(ServiceDetails).action.rdsLoginAttemptAction.remoteIpDetails.ipAddressV4),\n        RDSInstanceId = tostring(parse_json(ResourceDetails).rdsDbInstanceDetails.dbInstanceIdentifier),\n        RDSUser = tostring(parse_json(ResourceDetails).rdsDbUserDetails.user),\n        RDSApplication = tostring(parse_json(ResourceDetails).rdsDbUserDetails.application),\n        RDSactionType = tostring(parse_json(ServiceDetails).action.actionType),\n        AWSAlertTime = TimeCreated,\n        AWSAlertLink= tostring(strcat('https://us-east-1.console.aws.amazon.com/guardduty/home?region=us-east-1#/findings?macros=current&fId=',Id)),\n        Severity = \n  case (\n    Severity >= 7.0, \"High\",\n    Severity between (4.0 .. 6.9), \"Medium\",\n    Severity between (1.0 .. 3.9), \"Low\",\n    \"Unknown\")\n    | distinct\n        AWSAlertTime,\n        ActivityType,\n        AWSAlertId,\n        AWSAlertLink,\n        AWSAlertTitle,\n        AWSAlertDescription,\n        AWSresourceType,\n        Arn,\n        Severity,\n        RDSactionType,\n        RDSApplication,\n        RDSInstanceId,\n        RDSUser,\n        AWSNetworkEntity\n    );\n  // Define variable 'Azure_sigin' to collect Azure portal sign-in activities\n  let Azure_sigin = materialize (\n      SigninLogs\n      | where AppDisplayName == \"Azure Portal\"\n      | where isnotempty(OriginalRequestId)\n      | summarize \n          AzureSuccessfulEvent = countif(ResultType == 0), \n          AzureFailedEvent = countif(ResultType != 0), \n          totalAzureLoginEventId = dcount(OriginalRequestId), \n          AzureFailedEventsCount = dcountif(OriginalRequestId, ResultType != 0), \n          AzureSuccessfuleventsCount = dcountif(OriginalRequestId, ResultType == 0),\n          AzureSetOfFailedevents = makeset(iff(ResultType != 0, OriginalRequestId, \"\"), 5), \n          AzureSetOfSuccessfulEvents = makeset(iff(ResultType == 0, OriginalRequestId, \"\"), 5) \n          by \n          IPAddress, \n          UserPrincipalName, \n          bin(TimeGenerated, 1min), \n          UserAgent,\n          ConditionalAccessStatus,\n          OperationName,\n          RiskDetail,\n          AuthenticationRequirement,\n          ClientAppUsed\n      // Extracting the name and UPN suffix from UserPrincipalName\n      | extend\n          Name = tostring(split(UserPrincipalName, '@')[0]),\n          UPNSuffix = tostring(split(UserPrincipalName, '@')[1])\n      );\n  // Join 'AwsAlert' and 'Azure_sigin' on the AWS Network Entity and Azure IP Address\n  AwsAlert\n  | join kind=inner Azure_sigin on $left.AWSNetworkEntity == $right.IPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects exfiltration using DNS protocol.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where DstPortNumber == 53\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches unknown login type.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where TimeGenerated > ago(24h)\n| where EventType =~ \"login\"\n| where LoginType has \"unknown\"\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of files requested\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where TimeGenerated > ago(24h)\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| summarize TotalFile = count() by File\n| top 20 by TotalFile desc\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in PaloAlto Data.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(Url)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n  CommonSecurityLog\n  | extend IngestionTime = ingestion_time()\n  | where IngestionTime > ago(dt_lookBack)\n  // Select on Palo Alto logs\n  | where DeviceVendor =~ \"Palo Alto Networks\"\n  | where DeviceEventClassID =~ 'url'\n  //Uncomment the line below to only alert on allowed connections\n  //| where DeviceAction !~ \"block-url\"\n  //Select logs where URL data is populated\n  | extend PA_Url = column_ifexists(\"RequestURL\", \"None\")\n  | extend PA_Url = iif(isempty(PA_Url), extract(\"([^\\\"]+)\", 1, tolower(AdditionalExtensions)), trim('\"', PA_Url))\n  | extend PA_Url = iif(PA_Url !startswith \"http://\" and ApplicationProtocol !~ \"ssl\", strcat('http://', PA_Url), iif(PA_Url !startswith \"https://\" and ApplicationProtocol =~ \"ssl\", strcat('https://', PA_Url), PA_Url))\n  | where isnotempty(PA_Url)\n  | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n) on $left.Url == $right.PA_Url\n| where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, PA_Url\n| project timestamp = CommonSecurityLog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DeviceAction, SourceIP, PA_Url, DeviceName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for requests from unusual countries.\n Topic: PingFederate"}, {"role": "assistant", "content": "let known_geo = \nPingFederateEvent\n| where TimeGenerated between (ago(30d) .. (1d))\n| where isnotempty(DstGeoCountry)\n| summarize makeset(DstGeoCountry);\nPingFederateEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(DstGeoCountry)\n| where DstGeoCountry !in (known_geo)\n| extend IpCustomEntity = SrcIpAddr\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when new admin user is created.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where DvcAction =~ \"admin_create\"\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a new integration has been created. Once this analytics rule is triggered it will group all related future alerts for upto an hour when all related entities are the same.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "OnePasswordEventLogs_CL\n| where log_source == \"auditevents\"\n| where action == \"create\"\n| where object_type == \"sa\"\n| extend\n    ActorUsername = actor_details.email\n    , SrcIpAddr = session.ip"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches sources from which DbActions were made.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let lbtime = 24h;\nOracleDatabaseAuditEvent\n| where TimeGenerated > ago(lbtime)\n| where isnotempty(DbAction)\n| where isnotempty(SrcIpAddr)\n| where DbAction in~ ('SELECT', 'DROP', 'INSERT')\n| extend TableName = replace(@'[,\\(\\)]', '', extract(@'(?i)SELECT(.*?)FROM\\s(.*?)\\s', 2, Action))\n| where isnotempty(TableName)\n| where TableName !~ 'select'\n| summarize TablesAffected = makeset(TableName) by SrcIpAddr, DbAction\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule helps to detect when there is a drop of 10% or more in BitSight company ratings.\n Topic: BitSight"}, {"role": "assistant", "content": "let timeframe = 24h;\nBitSightGraphData\n| where ingestion_time() > ago(timeframe)and toint(RatingDifferance) < 0\n| extend percentage = -(toreal(RatingDifferance)/toreal(Rating))*100\n| where percentage >= 10\n| project RatingDate, Rating, CompanyName, percentage\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection highlights executables deployed to hosts via either the Default Domain or Default Domain Controller Policies. These policies apply to all hosts or Domain Controllers and best practice is that these policies should not be used for deployment of files.\nA threat actor may use these policies to deploy files or scripts to all hosts in a domain.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let known_processes = (\n  SecurityEvent\n  // If adjusting Query Period or Frequency update these\n  | where TimeGenerated between(ago(14d)..ago(1d))\n  | where EventID == 4688\n  | where NewProcessName has_any (\"Policies\\\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\", \"Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\")\n  | summarize by Process);\n  SecurityEvent\n  // If adjusting Query Period or Frequency update these\n  | where TimeGenerated > ago(1d)\n  | where EventID == 4688\n  | where NewProcessName has_any (\"Policies\\\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\", \"Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\")\n  | where Process !in (known_processes)\n  // This will likely apply to multiple hosts so summarize these data\n  | summarize FirstSeen=min(TimeGenerated), LastSeen=max(TimeGenerated) by Process, NewProcessName, CommandLine, Computer\n  | extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n  | extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies cretion of files with ransomware extensions. Ransomware file extensions are defined in a watchlist named RansomwareFileExtensions.\n Topic: Malware Protection Essentials"}, {"role": "assistant", "content": "// Get list of ransomware file extensions from watchlist RansomwareFileExtension\nlet RansomwareFileExtensions = _GetWatchlist('RansomwareFileExtensions') | where Enabled == 'Yes' | project FileExtension;\n_ASim_FileEvent\n| where EventType !in ('FileDeleted' , 'DeleteFile')\n| extend FileExtension =  tostring(split(FileName, '.')[1])\n| where FileExtension in~ (RansomwareFileExtensions)\n| project TimeGenerated, DvcHostname, DvcDomain, User, ActingProcessId, ActingProcessName, CommandLine, FileName, FilePath, Hash, HashType\n| extend Username = iff(User contains '@', tostring(split(User, '@')[0]), User)\n| extend UPNSuffix = iff(User contains '@', tostring(split(User, '@')[1]), '')\n| extend Username = iff(User contains '\\\\', tostring(split(User, '\\\\')[1]), Username)\n| extend NTDomain = iff(User contains '\\\\', tostring(split(User, '\\\\')[0]), '')\n| extend Host_0_HostName = DvcHostname\n| extend Host_0_DnsDomain = DvcDomain\n| extend Host_0_NTDomain = NTDomain\n| extend Account_0_Name = Username\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend File_0_Name = FileName\n| extend File_0_Directory = FilePath\n| extend FileHash_0_Algorithm = HashType\n| extend FileHash_0_Value = Hash\n| extend Process_0_ProcessId = ActingProcessId\n| extend Process_0_CommandLine = CommandLine\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures\n Topic: Alsid For AD"}, {"role": "assistant", "content": "let SeverityTable=datatable(Severity:string,Level:int) [\n\"low\", 1,\n\"medium\", 2,\n\"high\", 3,\n\"critical\", 4\n];\nafad_parser\n| where MessageType == 0\n| lookup kind=leftouter SeverityTable on Severity\n| order by Level\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies changes to privileged directory roles impacting Power Platform:\n- Dynamics 365 Admins\n- Power Platform Admins\n- Fabric Admins\n Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// 44367163-eba1-44c3-98af-f5787879f96a = Dynamics 365 Administrator\n// 11648597-926c-4cf3-9c36-bcebb0ba8dcc = Power Platform Administrator\n// a9ea8996-122f-4c74-9520-8edcd192826c = Fabric Administrator\nlet query_frequency = 1h;\nlet role_template_ids = dynamic([\"44367163-eba1-44c3-98af-f5787879f96a\", \"11648597-926c-4cf3-9c36-bcebb0ba8dcc\", \"a9ea8996-122f-4c74-9520-8edcd192826c\"]);\nlet monitored_activities = dynamic([\"Assign\", \"AssignGrantedRole\", \"AssignPermanentGrantedRole\", \"AssignPermanentEligibleRole\", \"RoleElevatedOutsidePimAlert\"]);\nAuditLogs\n| where TimeGenerated >= ago(query_frequency)\n| where Category == \"RoleManagement\"\n    and TargetResources has_any (role_template_ids)\n    and AADOperationType in (monitored_activities)\n    and Identity != \"MS-PIM\"\n| extend\n    UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName),\n    AadUserId = tostring(parse_json(tostring(InitiatedBy.user)).id),\n    IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress),\n    RoleName = tostring(TargetResources[0].displayName),\n    UserAdded = tostring(TargetResources[2].userPrincipalName)\n| extend\n    RoleName = iif(isempty(RoleName), tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue), RoleName),\n    UserAdded = iif(isempty(UserAdded), tostring(parse_json(tostring(TargetResources[0].userPrincipalName))), UserAdded),\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserPrincipalName, '@')[0]),\n    UPNSuffix = tostring(split(UserPrincipalName, '@')[1])\n| project\n    TimeGenerated,\n    Identity,\n    UserPrincipalName,\n    AadUserId,\n    RoleName,\n    OperationName,\n    UserAdded,\n    TargetResources,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The VMware SD-WAN Edge appliance received packets that failed a Reverse Path Forwarding (RPF) Check.\n\nReverse path forwarding (RPF) check is a network security mechanism that verifies whether the source IP address of a packet is reachable through the incoming interface on which the packet is received. The packet is dropped if the source IP address is not reachable through the incoming interface.\n\nRPF checks prevent spoofing attacks, in which an attacker uses a forged source IP address to make it appear that the packets are coming from a trusted source. This can allow the attacker to gain unauthorized network access or launch a denial-of-service attack against a target system.\n\nAn IP fragmentation attack is a cyberattack that exploits how IP packets are fragmented and reassembled. IP fragmentation is a process by which large IP packets are broken down into smaller packets to transmit them over networks with smaller Maximum Transmission Unit (MTU) sizes.\n\nThis analytics rule analyzes Syslog streams; these alerts are not reported by default if Search API is used. Topic: VMware SD-WAN and SASE"}, {"role": "assistant", "content": "Syslog\n| where SyslogMessage contains \"VCF Drop\"\n| where SyslogMessage contains \"Reverse path forwarding check fail\"\n| project-rename EdgeName=HostName\n| project-away Computer, HostIP, SourceSystem, Type\n| extend OverlaySegmentName = extract(\"SEGMENT_NAME=(.+) COUNT=\", 1, SyslogMessage)\n| extend IpProtocol = extract(\"PROTO=(.+) SRC=\", 1, SyslogMessage)\n| extend SrcIpAddress = extract(\"SRC=(.+) DST=\", 1, SyslogMessage)\n| extend DstIpAddress = extract(\"DST=(.+) REASON=\", 1, SyslogMessage)\n| extend EdgeFwAction = extract(\"ACTION=(.+) SEGMENT=\", 1, SyslogMessage)\n| extend SyslogTag = extract(\"^(.+): ACTION=\", 1, SyslogMessage)\n| extend pcktCount = extract(\"COUNT=([0-9]+)$\", 1, SyslogMessage)\n| project\n    TimeGenerated,\n    EdgeFwAction,\n    EdgeName,\n    SrcIpAddress,\n    IpProtocol,\n    DstIpAddress,\n    pcktCount,\n    SyslogTag\n\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects inbound remote access connection.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where EventSubType has \"WB\"\n| where NetworkDirection == 1\n| where ApplicationProtocol in ('15', '17', '20', '22', '23', '27', '36', '37')\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query uses the Azure Defender Security Nested Recommendations data to find machines vulnerable to log4j CVE-2021-44228.\nLog4j is an open-source Apache logging library that is used in many Java-based applications. Security Nested Recommendations data is sent to Microsoft Sentinel using the continuous export feature of Azure Defender(refrence link below).\n Reference: https://msrc-blog.microsoft.com/2021/12/11/microsofts-response-to-cve-2021-44228-apache-log4j2/\n Reference: https://docs.microsoft.com/azure/security-center/continuous-export?tabs=azure-portal\n Reference: https://techcommunity.microsoft.com/t5/microsoft-defender-for-cloud/how-defender-for-cloud-displays-machines-affected-by-log4j/ba-p/3037271\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "SecurityNestedRecommendation\n| where RemediationDescription has 'CVE-2021-44228'\n| parse ResourceDetails with * 'virtualMachines/' VirtualMachine '\"' *\n| summarize arg_min(TimeGenerated, *) by TenantId, RecommendationSubscriptionId, VirtualMachine, RecommendationName,Description,RemediationDescription, tostring(AdditionalData),VulnerabilityId\n| extend Timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects SMB requests that originate internally and communicate with an external IP address.\n Topic: Corelight"}, {"role": "assistant", "content": "union corelight_conn, corelight_conn_red\n| where local_orig == true\n| where local_resp == false\n| where history hasprefix 'Sh' and service hasprefix 'smb'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of files with error requests.\n Topic: Tomcat"}, {"role": "assistant", "content": "TomcatEvent\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 400 and HttpStatusCode <= 599 \n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| summarize TotalFile = count() by File\n| top 20 by TotalFile desc\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks multiple failed logon attempts from the same IP within a short span of time. It relies on the SQLEvent KQL Parser function. \n Topic: Microsoft Windows SQL Server Database Audit"}, {"role": "assistant", "content": "// SQLEvent is not the table name, it is the function name that should already be imported into your workspace.\n// The underlying table where the data exists is the Event table.\n// the threshold can be changed below as per requirement\n//\nlet failedThreshold = 3;\nSQLEvent\n| where LogonResult has \"failed\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), TotalFailedLogons = count() by CurrentUser, ClientIP\n| where TotalFailedLogons >= failedThreshold\n| project StartTime, EndTime, CurrentUser, TotalFailedLogons, ClientIP\n| extend Name = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 0)[0]), CurrentUser)\n| extend UPNSuffix = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 1)[0]), '')\n| extend Name = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 1)[0]), Name)\n| extend NTDomain = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 0)[0]), '')\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "It is reccomended that these Categories shoud be blocked by policies because they provide harmful/malicious content..\n Topic: Detections"}, {"role": "assistant", "content": "let lbtime = 10m;\nCisco_Umbrella\n| where TimeGenerated > ago(lbtime)\n| where EventType == 'proxylogs'\n| where DvcAction =~ 'Allowed'\n| where UrlCategory contains 'Adult Themes' or\n      UrlCategory contains 'Adware' or\n      UrlCategory contains 'Alcohol' or\n      UrlCategory contains 'Illegal Downloads' or\n      UrlCategory contains 'Drugs' or\n      UrlCategory contains 'Child Abuse Content' or\n      UrlCategory contains 'Hate/Discrimination' or\n      UrlCategory contains 'Nudity' or\n      UrlCategory contains 'Pornography' or\n      UrlCategory contains 'Proxy/Anonymizer' or\n      UrlCategory contains 'Sexuality' or\n      UrlCategory contains 'Tasteless' or\n      UrlCategory contains 'Terrorism' or\n      UrlCategory contains 'Web Spam' or\n      UrlCategory contains 'German Youth Protection' or\n      UrlCategory contains 'Illegal Activities' or\n      UrlCategory contains 'Lingerie/Bikini' or\n      UrlCategory contains 'Weapons'\n| project TimeGenerated, SrcIpAddr, Identities\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for update activities performed by users.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where TimeGenerated > ago(24h)\n| where data_eventName_s startswith 'Update'\n| project TimeGenerated, data_eventName_s, data_definedTags_Oracle_Tags_CreatedBy_s\n| extend AccountCustomEntity = data_definedTags_Oracle_Tags_CreatedBy_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rare application protocols.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "ImpervaWAFCloud\n| where TimeGenerated > ago(24h)\n| where isnotempty(NetworkApplicationProtocol)\n| summarize count() by NetworkApplicationProtocol\n| top 5 by count_ asc\n| extend AppCustomEntity = NetworkApplicationProtocol\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies IP addresses performing DNS lookups associated with common ToR proxies.\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM DNS schema\n Topic: Detections"}, {"role": "assistant", "content": "let torProxies=dynamic([\"tor2web.org\", \"tor2web.com\", \"torlink.co\", \"onion.to\", \"onion.ink\", \"onion.cab\", \"onion.nu\", \"onion.link\", \n\"onion.it\", \"onion.city\", \"onion.direct\", \"onion.top\", \"onion.casa\", \"onion.plus\", \"onion.rip\", \"onion.dog\", \"tor2web.fi\", \n\"tor2web.blutmagie.de\", \"onion.sh\", \"onion.lu\", \"onion.pet\", \"t2w.pw\", \"tor2web.ae.org\", \"tor2web.io\", \"tor2web.xyz\", \"onion.lt\", \n\"s1.tor-gateways.de\", \"s2.tor-gateways.de\", \"s3.tor-gateways.de\", \"s4.tor-gateways.de\", \"s5.tor-gateways.de\", \"hiddenservice.net\"]);\n_Im_Dns(domain_has_any=torProxies)\n| extend HostName = tostring(split(Dvc, \".\")[0]), DomainIndex = toint(indexof(Dvc, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Dvc, DomainIndex + 1), Dvc)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for most compromising sign-in attempts come from legacy authentication. \n Older office clients such as Office 2010 do not support modern authentication \n and use legacy protocols such as IMAP, SMTP, and POP3.\n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'AzureSecureScoreBlockLegacyAuthentication'"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in AWSCloudTrail from any IP IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour for AWSCloudTrail logs\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  // Filter out indicators without relevant IP address fields\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  // Select the IP entity based on availability of different IP fields\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  // Exclude local addresses using the ipv4_is_private operator and filtering out specific address prefixes\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and AWSCloudTrail logs to identify potential malicious activity\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      AWSCloudTrail\n      | where TimeGenerated >= ago(dt_lookBack)\n      | extend AWSCloudTrail_TimeGenerated = TimeGenerated // Rename time column for clarity\n    )\n    on $left.TI_ipEntity == $right.SourceIpAddress\n  // Filter out logs that occurred after the expiration of the corresponding indicator\n  | where AWSCloudTrail_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and SourceIpAddress, and keep the log entry with the latest timestamp\n  | summarize AWSCloudTrail_TimeGenerated = arg_max(AWSCloudTrail_TimeGenerated, *) by IndicatorId, SourceIpAddress\n  // Select the desired output fields\n  | project AWSCloudTrail_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\n    TI_ipEntity, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserIdentityUserName, SourceIpAddress,\n    NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n  // Rename the timestamp field\n  | extend timestamp = AWSCloudTrail_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects the use of the built-in \"Dynamics 365 Example Application\" to access production environments. This generic app can not be restricted by Azure AD authorization controls and could be abused to gain unauthorized access via Web API. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "SigninLogs\n| where AppId == \"51f81489-12ee-4a9e-aaae-a2591f45987d\"\n| where ResourceIdentity == \"00000007-0000-0000-c000-000000000000\"\n| project-rename SigninTime = TimeGenerated\n| where ResultType == 0\n| join kind=inner(DataverseActivity\n    | where Message == \"UserSignIn\")\n    on $left.UserPrincipalName == $right.UserId\n| where TimeGenerated between (SigninTime .. (SigninTime + 1h))\n| summarize D365SigninTime = arg_min(TimeGenerated, *) by SigninTime, UserPrincipalName, IPAddress, UserAgent\n| extend CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    SigninTime,\n    D365SigninTime,\n    UserPrincipalName,\n    IPAddress,\n    UserAgent,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule is triggered when temp directory space is detected.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "let threshold = 10;\nVMwareESXi\n| where SyslogMessage has_all ('Temp directory', 'free space')\n| extend sp = toreal(extract(@'free space is:\\s(\\d+)', 1, SyslogMessage)) / 1000000000\n| where sp < threshold\n| extend h = 'Hypervisor'\n| extend HostCustomEntity = h\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule helps to track error occurred in Netskope WebTransaction Data Connector.\n Topic: Netskopev2"}, {"role": "assistant", "content": "NetskopeWebtxErrors_CL\n|where error_s has_any (\"Invalid Netskope Hostname\", \"Webtx Authentication\", \"Webtx Token Empty\", \"Webtx Exponential Backoff\", \"Webtx Idle Time\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Escalates threats detected by ESET.\n Topic: ESETPROTECT"}, {"role": "assistant", "content": "ESETPROTECT\n| where EventType == \"Threat_Event\"\n| extend DvcHostname, SrcUserName, DvcIpAddr, FileHashSha1, FileHashAlgo = \"SHA1\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "High severity flow Log alerts found by Prancer.\n Topic: Prancer PenSuiteAI Integration"}, {"role": "assistant", "content": "union prancer_CL\n| where deviceProduct_s == 'azure'\n| where parse_json(data_data_snapshots_s)[0].type == 'Microsoft.Network/networkWatchers/flowLogs'\n| where data_data_severity_s == 'High' and data_data_result_s == 'failed'\n| extend snapshot = parse_json(data_data_snapshots_s)\n| mv-expand snapshot \n| extend\n    id = tostring(snapshot.id),\n    structure = tostring(snapshot.structure),\n    reference = tostring(snapshot.reference),\n    source = tostring(snapshot.source),\n    collection = tostring(snapshot.collection),\n    type = tostring(snapshot.type),\n    region = tostring(snapshot.region),\n    resourceTypes = tostring(snapshot.resourceTypes),\n    path = tostring(snapshot.path)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Anomaly Rules generate events in the Anomalies table. This scheduled rule tries to detect Anomalies that are not usual, they could be a type of Anomaly that has recently been activated, or an infrequent type. The detected Anomaly should be reviewed, if it is relevant enough, eventually a separate scheduled Analytics Rule could be created specifically for that Anomaly Type, so an alert and/or incident is generated everytime that type of Anomaly happens.\n Topic: Detections"}, {"role": "assistant", "content": "// You can leave out Anomalies that are already monitored through other Analytics Rules\n//let _MonitoredRules = dynamic([\"TestAlertName\"]);\nlet query_frequency = 1h;\nlet query_lookback = 3d;\nAnomalies\n| where TimeGenerated > ago(query_frequency)\n//| where not(RuleName has_any (_MonitoredRules))\n| join kind = leftanti (\n    Anomalies\n    | where TimeGenerated between (ago(query_frequency + query_lookback)..ago(query_frequency))\n    | distinct RuleName\n) on RuleName\n| extend Name = tostring(split(UserPrincipalName, \"@\")[0]), UPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An attacker with limited permissions, or a sophisticated attacker disguising his activity, may have launched an EC2 instance without a key pair, allowing him to execute code on the machine using the UserData attribute (for example, by executing a reverse shell).\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"RunInstances\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend items = tostring(parse_json(RequestParameters).instancesSet.items)\n| mv-expand todynamic(items)\n| extend keyName=tostring(todynamic(items.['keyName']))\n| where isempty(keyName) and RequestParameters contains \"userData\" and SourceIpAddress !contains \"amazonaws.com\"\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects low severity alerts from ZeroFox\n Topic: ZeroFox"}, {"role": "assistant", "content": "ZeroFoxAlertPoller_CL\n| where Severity in (3)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which low sensitivity governance information] was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let lowRisk = 1;\nlet governance = 'Governance Information';\nCognniIncidents_CL \n| where Severity == lowRisk\n| where informationType_s == governance\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a Temporary Access Pass (TAP) is created for a Privileged Account.\n  A Temporary Access Pass is a time-limited passcode issued by an admin that satisfies strong authentication requirements and can be used to onboard other authentication methods, including Passwordless ones such as Microsoft Authenticator or even Windows Hello.\n  A threat actor could use a TAP to register a new authentication method to maintain persistance to an account.\n  Review any TAP creations to ensure they were used legitimately.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#changes-to-privileged-accounts\n Topic: Detections"}, {"role": "assistant", "content": "let admin_users = (IdentityInfo\n  | summarize arg_max(TimeGenerated, *) by AccountUPN\n  | where AssignedRoles contains \"admin\"\n  | summarize by tolower(AccountUPN));\n  AuditLogs\n  | where OperationName =~ \"Admin registered security info\"\n  | where ResultReason =~ \"Admin registered temporary access pass method for user\"\n  | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n  | where tolower(TargetUserPrincipalName) in (admin_users)\n  | extend TargetAadUserId = tostring(TargetResources[0].id)\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n  | extend TargetAccountName = tostring(split(TargetUserPrincipalName, \"@\")[0]), TargetAccountUPNSuffix = tostring(split(TargetUserPrincipalName, \"@\")[1])\n  | extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "User account created by an unauthorized user, pass in a list\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// Create DataTable with your own values, example below shows dummy usernames that are authorized and for what domain\nlet List = datatable(AuthorizedUser:string, Domain:string)[\"Bob\", \"Domain\", \"joe\", \"domain\", \"MATT\", \"DOMAIN\"];\nSecurityEvent\n| where EventID == 4720\n| where AccountType == \"User\"\n| join kind= leftanti (\n    List\n    | project SubjectUserName = tolower(AuthorizedUser), SubjectDomainName = toupper(Domain)\n) on SubjectUserName, SubjectDomainName\n| project TimeGenerated, Computer, Account, SubjectUserName, SubjectDomainName, TargetAccount, EventID, Activity\n| extend timestamp = TimeGenerated, HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = SubjectUserName\n| extend Account_0_NTDomain = SubjectDomainName\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple password reset for user.\n Topic: PingFederate"}, {"role": "assistant", "content": "let threshold = 10;\nPingFederateEvent\n| where EventType =~ 'PWD_RESET'\n| summarize count() by DstUserName\n| where count_ > threshold\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleIds TRIS0007 to TRIS0010 and TRIS0014\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where ( customProps_RuleId_s == \"TRIS0007\" or customProps_RuleId_s == \"TRIS0008\" or\n    customProps_RuleId_s == \"TRIS0009\" or customProps_RuleId_s == \"TRIS0010\" or customProps_RuleId_s == \"TRIS0014\" )  \n    and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "At least 1 high threat level query generated by single host in 1 hour that is not blocked or redirected. Customize query count, scheduling, responses and more. This rule depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC**](https://aka.ms/sentinel-InfobloxCloudDataConnector-parser).\n Topic: Infoblox Cloud Data Connector"}, {"role": "assistant", "content": "let threshold = 1;\nInfobloxCDC\n| where DeviceEventClassID has_cs \"RPZ\"\n| where ThreatLevel_Score >=80\n| where InfobloxB1PolicyAction == \"Log\" or SimplifiedDeviceAction == \"PASSTHRU\"\n| summarize count() by SourceIP\n| where count_ > threshold\n| join kind=inner (InfobloxCDC\n  | where DeviceEventClassID has_cs \"RPZ\"\n  | where ThreatLevel_Score >=80\n  | where InfobloxB1PolicyAction == \"Log\" or SimplifiedDeviceAction == \"PASSTHRU\"\n  ) on SourceIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects command in URI\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "let cmd_list = dynamic(['whoami', 'dpkg', 'useradd', 'sudo', 'cat']);\nApacheHTTPServer\n| where UrlOriginal has_any (cmd_list)\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects high counts of download from a sensitive SAP Privileged account. A pre-built watchlist is leveraged to identify the privileged users that are under extra restrictions.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "let priv_users = ('_GetWatchlist(\"VIPUsers\") | distinct [\"User Principal Name\"]');\nSAPAuditLog \n| where User in (priv_users)\n| where (MessageID in ('AU1') and Variable1 in ('A','H')) //AU1 = Logon Successful\n| where MessageText has \"Logon successful\"\n| project MessageID, LogonTypes=Variable1, ClientID, Email, User\n| join kind=inner \n(\nSAPAuditLog \n| where MessageID == \"AUY\" //AUY= Download bytes\n| extend ByteCount= toint(replace_string(replace_string(Variable1, \".\",\"\"), \",\",\"\")), Code=Variable2, Path= Variable3\n| summarize DownloadsByUser = count(), Paths= make_set(Variable3, 10), ByteCount=sum(ByteCount) by SystemID, ClientID, User, TerminalIPv6, Email, Host, TransactionCode, Instance\n| where ByteCount > 5000\n) on Email, User\n| project  User, Computer = Host, ClientID, Email, MessageID, LogonTypes, SystemID, ByteCount, DownloadsByUser, TerminalIPv6, TransactionCode\n| extend UserName = tostring(split(User, '@', 0)[0]), UPNSuffix = tostring(split(User, '@', 1)[0])\n| extend Account_0_Name = UserName\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = TerminalIPv6\n| extend Host_0_HostName = Computer\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when multiple (more than one) users mailboxes are configured to forward to the same destination. \nThis could be an attacker-controlled destination mailbox configured to collect mail from multiple compromised user accounts.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "// Set query parameters\nlet queryfrequency = 1d;\nlet queryperiod = 7d;\n// EnrichedMicrosoft365AuditLogs Query\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated > ago(queryperiod)\n    | where Workload =~ \"Exchange\"\n    // Uncomment or adjust the following line based on actual field usage\n    // | where Operation in (\"Set-Mailbox\", \"New-InboxRule\", \"Set-InboxRule\")\n    | where tostring(AdditionalProperties.Parameters) has_any (\"ForwardTo\", \"RedirectTo\", \"ForwardingSmtpAddress\")\n    | mv-apply DynamicParameters = todynamic(tostring(AdditionalProperties.Parameters)) on (\n        summarize ParsedParameters = make_bag(pack(tostring(DynamicParameters.Name), DynamicParameters.Value))\n      )\n    | evaluate bag_unpack(ParsedParameters, columnsConflict='replace_source')\n    | extend DestinationMailAddress = tolower(case(\n        isnotempty(column_ifexists(\"ForwardTo\", \"\")), column_ifexists(\"ForwardTo\", \"\"),\n        isnotempty(column_ifexists(\"RedirectTo\", \"\")), column_ifexists(\"RedirectTo\", \"\"),\n        isnotempty(column_ifexists(\"ForwardingSmtpAddress\", \"\")), trim_start(@\"smtp:\", column_ifexists(\"ForwardingSmtpAddress\", \"\")),\n        \"\"))\n    | where isnotempty(DestinationMailAddress)\n    | mv-expand split(DestinationMailAddress, \";\")\n    | extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIp)[0]\n    | extend ClientIP = tostring(ClientIPValues[0]), Port = tostring(ClientIPValues[1])\n    | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DistinctUserCount = dcount(UserId), UserId = make_set(UserId, 250), Ports = make_set(Port, 250), EventCount = count() by tostring(DestinationMailAddress), ClientIP\n    | where DistinctUserCount > 1 and EndTime > ago(queryfrequency)\n    | mv-expand UserId to typeof(string)\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n    | where TimeGenerated > ago(queryperiod)\n    | where OfficeWorkload =~ \"Exchange\"\n    // Uncomment or adjust the following line based on actual field usage\n    // | where Operation in (\"Set-Mailbox\", \"New-InboxRule\", \"Set-InboxRule\")\n    | where Parameters has_any (\"ForwardTo\", \"RedirectTo\", \"ForwardingSmtpAddress\")\n    | mv-apply DynamicParameters = todynamic(Parameters) on (\n        summarize ParsedParameters = make_bag(pack(tostring(DynamicParameters.Name), DynamicParameters.Value))\n      )\n    | evaluate bag_unpack(ParsedParameters, columnsConflict='replace_source')\n    | extend DestinationMailAddress = tolower(case(\n        isnotempty(column_ifexists(\"ForwardTo\", \"\")), column_ifexists(\"ForwardTo\", \"\"),\n        isnotempty(column_ifexists(\"RedirectTo\", \"\")), column_ifexists(\"RedirectTo\", \"\"),\n        isnotempty(column_ifexists(\"ForwardingSmtpAddress\", \"\")), trim_start(@\"smtp:\", column_ifexists(\"ForwardingSmtpAddress\", \"\")),\n        \"\"))\n    | where isnotempty(DestinationMailAddress)\n    | mv-expand split(DestinationMailAddress, \";\")\n    | extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIP)[0]\n    | extend ClientIP = tostring(ClientIPValues[0]), Port = tostring(ClientIPValues[1])\n    | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DistinctUserCount = dcount(UserId), UserId = make_set(UserId, 250), Ports = make_set(Port, 250), EventCount = count() by tostring(DestinationMailAddress), ClientIP\n    | where DistinctUserCount > 1 and EndTime > ago(queryfrequency)\n    | mv-expand UserId to typeof(string)\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n// Combine and Deduplicate Office and Enriched Logs\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize arg_min(StartTime, *) by tostring(DestinationMailAddress), ClientIP;\n// Final Output\nCombinedEvents\n    | project StartTime, EndTime, DestinationMailAddress, ClientIP, DistinctUserCount, UserId, Ports, EventCount, AccountName, AccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected creation of new Cloudformation policy and usage of one of the attach policy events (AttachUserPolicy/AttachRolePolicy/AttachGroupPolicy). This might indicate a privilege escalation technique that attackers could use.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\nlet createPolicy =  dynamic([\"CreatePolicy\", \"CreatePolicyVersion\"]);\nlet timeframe = 1d;\nlet lookback = 14d;\n// Creating Master table with all the events to use with materialize for better performance\nlet EventInfo = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName in (EventNameList) or EventName in (createPolicy)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\");\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\nlet FullAdminPolicyEvents =  materialize(  EventInfo\n| where TimeGenerated >= ago(lookback)\n| where EventName in (createPolicy)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and (((Action has \"iam:*\" or Action has \"iam:PassRole\") and Action has \"cloudformation:*\") or ((Action has \"iam:*\" or Action has \"iam:PassRole\") and Action contains \"cloudformation:DescribeStacks\" and Action contains \"cloudformation:CreateStack\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"cloudformation:Describe*\" and Action contains \"cloudformation:Create*\")) and Resource == \"*\" and Condition == \"\"\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn,  RecipientAccountId, AccountName, AccountUPNSuffix\n| project-rename StartTime = TimeGenerated  );\nlet PolicyAttach = materialize(  EventInfo\n| where TimeGenerated >= ago(timeframe)\n| where EventName in (EventNameList) and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\"/\")[1])\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName,   RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityType , UserIdentityArn, SourceIpAddress, PolicyName\n| extend AttachEvent = pack(\"StartTime\", StartTime, \"EndTime\", EndTime, \"EventName\", EventName, \"UserIdentityType\",   UserIdentityType, \"SourceIpAddress\", SourceIpAddress, \"AccountName\", AccountName, \"AccountUPNSuffix\", AccountUPNSuffix, \"RecipientAccountId\", RecipientAccountId, \"UserIdentityArn\", UserIdentityArn)\n| project EventSource, PolicyName, AttachEvent, AttachEventCount, RecipientAccountId, AccountName, AccountUPNSuffix\n);\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\nFullAdminPolicyEvents\n| join kind=leftouter\n(\n    PolicyAttach\n)\non PolicyName\n| project-away PolicyName1\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches rare document types by users.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where TimeGenerated > ago(24h)\n| where isnotempty(DocType)\n| summarize users = make_set(ActorEmail), count() by DocType\n| top 20 by count_ asc \n| extend AccountCustomEntity = users\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for Base64-encoded commands associated with the Nishang reverse TCP shell.\nRef: https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID == 4688\n| where Process in(\"powershell.exe\",\"powershell_ise.exe\") and CommandLine has \"-e\" \n| mv-expand SS = split(CommandLine, \" \") \n| where SS matches regex \"[A-Za-z0-9+/]{50,}[=]{0,2}\" \n| extend DecodeString = base64_decode_tostring(tostring(SS)) \n| extend FinalString = replace(\"\\\\0\", \"\", DecodeString) \n| where FinalString has \"tcpclient\" and FinalString contains \"$\" and (FinalString contains \"invoke\" or FinalString contains \"iex\") \n| extend timestamp = TimeGenerated, HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n| extend Account_0_Name = SubjectUserName\n| extend Account_0_NTDomain = SubjectDomainName\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects multiple failed logon attempts from the same IP within a short span of time. It relies on the SQLEvent KQL Parser function. \n Topic: Microsoft Windows SQL Server Database Audit"}, {"role": "assistant", "content": "// SQLEvent is not the table name, it is the function name that should already be imported into your workspace.\n// The underlying table where the data exists is the Event table.\n// the threshold can be changed below as per requirement.\n//\nlet failedThreshold = 3;\nSQLEvent\n| where LogonResult has \"failed\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), TotalFailedLogons = count() by ClientIP, CurrentUser, Computer\n| where TotalFailedLogons >= failedThreshold\n| project StartTime, EndTime, ClientIP, TotalFailedLogons, CurrentUser, Computer\n| extend Name = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 0)[0]), CurrentUser)\n| extend UPNSuffix = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 1)[0]), '')\n| extend Name = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 1)[0]), Name)\n| extend NTDomain = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 0)[0]), '')\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects identity administration events in Dataverse/Dynamics 365 made by accounts which are not members of privileged directory roles Dynamics 365 Admins, Power Platform Admins or Global Admins Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let admin_role_names = dynamic(['Dynamics 365 Administrator', 'Power Platform Administrator', 'Global Administrator']);\nlet event_types = dynamic(['Associate', 'Disassociate', 'Create', 'Delete', 'Upsert', 'Update']);\nlet excluded_accounts = dynamic(['cdsusermanagement@onmicrosoft.com', 'unknown', 'powervirtualagentsprod@onmicrosoft.com']);\nIdentityInfo\n| where TimeGenerated > ago(14d)\n| where array_length(AssignedRoles) > 0\n| mv-expand AssignedRoles\n| where AssignedRoles in (admin_role_names)\n| summarize by UserId = tolower(AccountUPN)\n| join kind=rightanti (DataverseActivity\n    | where EntityName =~ 'systemuser' and Message in (event_types)\n    | project TimeGenerated, UserId = tolower(UserId), ClientIp, InstanceUrl, OriginalObjectId\n    | where UserId !in (excluded_accounts))\n    on UserId\n| extend CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    TimeGenerated,\n    UserId,\n    ClientIp,\n    OriginalObjectId,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checking for a threefold increase or more of domain lookups per client IP address for the current day compared to the daily average for the previous week.\nThis can potentially identify excessive traffic to a given location that could be indicative of data transfer out of your network to a group of systems based on the same second level domain.\nFor example, if one client is sending requests for test1.badguy.com and another client is sending requests for test2.badguy.com, you may not see a high enough count to be interesting.\nHowever, a combination of the requests to badguy.com could have a high enough count to be interesting.\nThis is only Name lookups, so it would be recommended to review the firewall and web proxy logs in relation to the client IP address making the interesting requests.\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 7d;\n//example of excluding Saturday and Sunday in Average as those are potentially low volume and decrease the average, feel free to change\nlet excludedDays = dynamic([\"Saturday\", \"Sunday\"]);\n// average is across 5 days as we are dropping weekends, change as needed\nlet numDays = 5;\n// limit to over 1000 lookups somewhat random but helps focus in on higher lookups, change as needed\nlet avglookupThreshold = 3;\nlet lookupThreshold = 1000;\nDnsEvents\n//Setting to startofday so we get 7 days prior to start\n| where TimeGenerated >= startofday(lookback) and TimeGenerated <= startofday(starttime)\n| where SubType =~ \"LookupQuery\"\n//getting the associated number of the day of the week so we can map to a given day for later parsing if needed\n| extend DayNumberofWeek = tostring(dayofweek(TimeGenerated))\n//Setting the Day of the week value so that certain days could be excluded if needed\n| extend DayofWeek = iff(DayNumberofWeek == \"00:00:00\", \"Sunday\",\n(iff(DayNumberofWeek == \"1.00:00:00\", \"Monday\",\n(iff(DayNumberofWeek == \"2.00:00:00\", \"Tuesday\",\n(iff(DayNumberofWeek == \"3.00:00:00\", \"Wednesday\",\n(iff(DayNumberofWeek == \"4.00:00:00\", \"Thursday\",\n(iff(DayNumberofWeek == \"5.00:00:00\", \"Friday\",\n(iff(DayNumberofWeek == \"6.00:00:00\", \"Saturday\", DayNumberofWeek)))))))))))))\n| where DayofWeek !in~ (excludedDays)\n| extend Domain = iff(countof(Name,'.') >= 2, strcat(split(Name,'.')[-2], '.',split(Name,'.')[-1]), Name)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by ClientIP, Domain, IPAddresses\n| project StartTime, EndTime, ClientIP, Domain, IPAddresses, DailyAvgLookupCountOverLastWeek = count_/numDays\n| join kind = inner ( DnsEvents\n| where TimeGenerated between(startofday(starttime)..endofday(endtime))\n| where SubType =~ \"LookupQuery\"\n| extend Domain = iff(countof(Name,'.') >= 2, strcat(split(Name,'.')[-2], '.',split(Name,'.')[-1]), Name)\n| summarize count() by ClientIP, Domain, IPAddresses\n| project ClientIP, LookupCountToday = count_, Domain, IPAddresses\n)\non ClientIP, Domain, IPAddresses\n| where LookupCountToday > ( DailyAvgLookupCountOverLastWeek * avglookupThreshold) and LookupCountToday > lookupThreshold\n| project StartTime, EndTime, ClientIP, SecondLevelDomain = Domain , LookupCountToday , DailyAvgLookupCountOverLastWeek, IPAddresses\n| order by LookupCountToday desc nulls last\n| extend DNS_0_DomainName = SecondLevelDomain\n| extend DNS_0_IpAddress = IPAddresses\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Often times after the initial compromise in a BEC attack the attackers create inbox rules to delete emails that contain certain keywords related to their BEC attack.\n This is done so as to limit ability to warn compromised users that theyve been compromised. \n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "let BEC_Keywords = dynamic([ 'invoice','payment','paycheck','transfer','bank statement','bank details','closing','funds','bank account','account details','remittance','purchase','deposit',\"PO#\",\"Zahlung\",\"Rechnung\",\"Paiement\", \"virement bancaire\",\"Bankuberweisung\",'hacked','phishing']);\nOfficeActivity\n| where Operation =~ \"New-InboxRule\"\n| where Parameters has \"Deleted Items\" or Parameters has \"Junk Email\"  or Parameters has \"DeleteMessage\"\n| extend Events=todynamic(Parameters)\n| parse Events  with * \"SubjectContainsWords\" SubjectContainsWords '}'*\n| parse Events  with * \"BodyContainsWords\" BodyContainsWords '}'*\n| parse Events  with * \"SubjectOrBodyContainsWords\" SubjectOrBodyContainsWords '}'*\n| where SubjectContainsWords has_any (BEC_Keywords)\n or BodyContainsWords has_any (BEC_Keywords)\n or SubjectOrBodyContainsWords has_any (BEC_Keywords)\n| extend ClientIPAddress = case( ClientIP has \".\", tostring(split(ClientIP,\":\")[0]), ClientIP has \"[\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))), ClientIP )\n| extend Keyword = iff(isnotempty(SubjectContainsWords), SubjectContainsWords, (iff(isnotempty(BodyContainsWords),BodyContainsWords,SubjectOrBodyContainsWords )))\n| extend RuleDetail = case(OfficeObjectId contains '/' , tostring(split(OfficeObjectId, '/')[-1]) , tostring(split(OfficeObjectId, '\\\\')[-1]))\n| summarize count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by  Operation, UserId, ClientIPAddress, ResultStatus, Keyword, OriginatingServer, OfficeObjectId, RuleDetail\n| extend UserName = split(UserId, '@')[0], DomainName = split(UserId, '@')[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows destination ports by IP address.\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "PaloAltoCDLEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(DstPortNumber)\n| summarize IP_Dst = make_set(tostring(DstNatIpAddr)) by DstPortNumber\n| extend IPCustomEntity = IP_Dst\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when the ISE administrator password has been reset.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "let lbtime = 5m;\nCiscoISEEvent\n| where TimeGenerated > ago(lbtime)\n| where EventId == '58019'\n| project TimeGenerated, SrcIpAddr, DstUserName\n| extend AccountCustomEntity = DstUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query detects anomalous attempts to perform bulk sharing of Power App to newly created guest users. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "////////////\n// Please replace the allowed_domains with a list of domains of your partners/sibling orgs\n// with whom you generally share power apps with. This will allow us to filter\n// legitimate bulk sharing attempts. Avoid using domains such as gmail, outlook, etc.\n///////////\nlet allowed_domains = pack_array(\"contoso.com\");\nlet start = ago(14d);\nlet end = now();\nlet interval = 1h;\nPowerPlatformAdminActivity\n| where EventOriginalType == \"PowerAppPermissionEdited\"\n| extend Properties = tostring(PropertyCollection)\n| extend AppId = extract(@'\"powerplatform.analytics.resource.power_app.id\",\"Value\":\"([^\"]+)\"', 1, Properties)\n| extend AppId = tolower(replace_string(AppId, '/providers/Microsoft.PowerApps/apps/', ''))\n| extend TargetPrincipalId = extract(@'\"targetuser.id\",\"Value\":\"([^\"]+)\"', 1, Properties)\n| extend\n    PowerAppsAppId = AppId\n| join kind=leftouter (AuditLogs\n    | where ActivityDateTime >= ago(14d)\n    | where SourceSystem =~ \"Azure AD\" and OperationName == \"Invite external user\"\n    | where Result =~ \"success\"\n    | extend InvitedOrgEmail = tostring(parse_json(AdditionalDetails[5])['value'])\n    | extend InvitedOrgDomain = tostring(split(InvitedOrgEmail, \"@\")[1])\n    | where not(InvitedOrgDomain has_any(allowed_domains))\n    | extend\n        InvitedById = tostring(parse_json(InitiatedBy)['user']['id']),\n        InvitedByUPN = tostring(parse_json(InitiatedBy)['user']['userPrincipalName']),\n        InvitedEmail = tostring(parse_json(TargetResources[0])['userPrincipalName']),\n        InvitedId = tostring(parse_json(TargetResources[0])['id'])\n    | summarize by InvitedById, InvitedByUPN, InvitedEmail, InvitedId, InvitedOrgDomain)\n    on $left.TargetPrincipalId == $right.InvitedId\n| where isnotempty(InvitedId)\n| make-series counter=dcount(TargetPrincipalId) default=0 on TimeGenerated in range(start, end, interval) by PowerAppsAppId, InvitedById, InvitedByUPN\n| extend(Anomalies, AnomalyScore, ExpectedUsage) = series_decompose_anomalies(counter)\n| mv-expand\n    counter to typeof(double),\n    TimeGenerated to typeof(datetime),\n    Anomalies to typeof(double),\n    AnomalyScore to typeof(double),\n    ExpectedUsage to typeof(long)\n| where Anomalies != 0\n| extend\n    PowerAppsEntityId = 27593,\n    AccountName = tostring(split(InvitedByUPN, '@')[0]),\n    UPNSuffix = tostring(split(InvitedByUPN, '@')[1])\n| project\n    TimeGenerated,\n    ActualUsage=counter,\n    ExpectedUsage,\n    AnomalyScore,\n    Anomalies,\n    PowerAppsAppId,\n    InvitedById,\n    InvitedByUPN,\n    PowerAppsEntityId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match for XSS attack in the Application gateway WAF logs. The Threshold value in the query can be changed as per your infrastructures requirement.\n References: https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\n Topic: Detections"}, {"role": "assistant", "content": "let Threshold = 1;  \n AzureDiagnostics\n | where Category == \"ApplicationGatewayFirewallLog\"\n | where action_s == \"Matched\"\n | project transactionId_g, hostname_s, requestUri_s, TimeGenerated, clientIp_s, Message, details_message_s, details_data_s\n | join kind = inner(\n AzureDiagnostics\n | where Category == \"ApplicationGatewayFirewallLog\"\n | where action_s == \"Blocked\"\n | parse Message with MessageText 'Total Inbound Score: ' TotalInboundScore ' - SQLI=' SQLI_Score ',XSS=' XSS_Score ',RFI=' RFI_Score ',LFI=' LFI_Score ',RCE=' RCE_Score ',PHPI=' PHPI_Score ',HTTP=' HTTP_Score ',SESS=' SESS_Score '): ' Blocked_Reason '; individual paranoia level scores:' Paranoia_Score\n | where Blocked_Reason contains \"XSS\" and toint(TotalInboundScore) >=15 and toint(XSS_Score) >= 10 and toint(SQLI_Score) <= 5) on transactionId_g\n | extend Uri = strcat(hostname_s,requestUri_s)\n | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), TransactionID = make_set(transactionId_g), Message = make_set(Message), Detail_Message = make_set(details_message_s), Detail_Data = make_set(details_data_s), Total_TransactionId = dcount(transactionId_g) by clientIp_s, Uri, action_s, SQLI_Score, XSS_Score, TotalInboundScore\n | where Total_TransactionId >= Threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query finds matches in Security Event data for known FileName Indicators of Compromise from Threat Intelligence sources. FileName matches may produce false positives, so use this for hunting rather than real-time detection.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true\n| where isnotempty(FileName)\n| extend _lowerFileName = tolower(FileName)\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n  SecurityEvent \n  | where TimeGenerated between(starttime..endtime)\n  | where EventID in (\"4688\",\"8002\",\"4648\",\"4673\")\n  | where isnotempty(Process)\n  | extend SecurityEvent_TimeGenerated = TimeGenerated, Event = EventID, _lowerProcess = tolower(Process)\n)\non $left._lowerFileName == $right._lowerProcess\n| where SecurityEvent_TimeGenerated < ExpirationDateTime\n| summarize SecurityEvent_TimeGenerated = arg_max(SecurityEvent_TimeGenerated, *) by IndicatorId, Process\n| project SecurityEvent_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nFileName, Computer, IpAddress, Account, Event, Activity\n| extend timestamp = SecurityEvent_TimeGenerated, NTDomain = split(Account, '\\\\', 0)[0], Name = split(Account, '\\\\', 1)[0], HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n| extend IP_0_Address = IpAddress\n| extend URL_0_Url = Url\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Utilizes a list of commonly abused LOLB an attacker or malware would execute in quick succession. The presence of multiple executions of the programs within the list can be indicative of an infection or malicious activity occurring on a victim host.\n Topic: Cyborg Security HUNTER"}, {"role": "assistant", "content": "SecurityEvent\n| where NewProcessName has_any (\n  \"arp.exe\",\n  \"at.exe\",\n  \"attrib.exe\",\n  \"cscript.exe\",\n  \"dsquery.exe\",\n  \"hostname.exe\",\n  \"ipconfig.exe\",\n  \"mimikatz.exe\",\n  \"nbtstat.exe\",\n  \"net.exe\",\n  \"netsh.exe\",\n  \"nslookup.exe\",\n  \"ping.exe\",\n  \"quser.exe\",\n  \"qwinsta.exe\",\n  \"reg.exe\",\n  \"runas.exe\",\n  \"sc.exe\",\n  \"schtasks.exe\",\n  \"ssh.exe\",\n  \"systeminfo.exe\",\n  \"taskkill.exe\",\n  \"telnet.exe\",\n  \"tracert.exe\",\n  \"wscript.exe\",\n  \"xcopy.exe\",\n  \"pscp.exe\",\n  \"copy.exe\",\n  \"robocopy.exe\",\n  \"certutil.exe\",\n  \"vssadmin.exe\",\n  \"powershell.exe\",\n  \"wevtutil.exe\",\n  \"psexec.exe\",\n  \"bcedit.exe\",\n  \"wbadmin.exe\",\n  \"icacls.exe\",\n  \"diskpart.exe\",\n  \"ver.exe\",\n  \"netstat.exe\",\n  \"tasklist.exe\",\n  \"route.exe\",\n  \"driverquery.exe\"\n)\n| summarize firstEvent=min(TimeGenerated), lastEvent=max(TimeGenerated), uniqueProcesses=dcount(NewProcessName), eventIds=make_set(tostring(EventID)), processPaths=make_set(NewProcessName), processCommandLines=make_set(CommandLine), parentProcessPaths=make_set(ParentProcessName), processIds=make_set(NewProcessId), parentprocessIds=make_set(ProcessId), eventData=make_set(EventData), count() by SourceComputerId, Computer| order by firstEvent\n| where uniqueProcesses > 4\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert joins SecurityAlerts from Microsoft Products with SecurityIncidents from Microsoft Sentinel and Microsoft Defender XDR. This join allows for identifying patterns in user principal names associated with respective security alerts. A machine learning function (Basket) is leveraged with a .001 threshold. Baset finds all frequent patterns of discrete attributes (dimensions) in the data. It returns the frequent patterns passed the frequency threshold. This query evaluates UserPrincipalName for patterns in SecurityAlerts and Reporting Security Tools. This query can be further tuned/configured for higher confidence percentages, security products, or alert severities pending the needs of the organization. There is an option for configuration of correlations against Microsoft Sentinel watchlists. For more information on the basket plugin, see [basket plugin](https://docs.microsoft.com/azure/data-explorer/kusto/query/basketplugin)\n Topic: MicrosoftPurviewInsiderRiskManagement"}, {"role": "assistant", "content": "let AlertLinks = SecurityAlert\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| summarize AlertLinks=make_set(AlertLink) by UPN;\nlet LastTimeObserved = SecurityIncident\n| summarize hint.strategy = shuffle arg_max(LastModifiedTime, *) by IncidentNumber\n| mv-expand AlertIds\n| extend AlertId = tostring(AlertIds)\n| join kind= innerunique ( \n          SecurityAlert \n          )\n          on $left.AlertId == $right.SystemAlertId\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| project UPN, AlertName, Severity, ProductName, TimeGenerated | summarize arg_max(AlertName, Severity, ProductName, TimeGenerated) by UPN;\nSecurityIncident\n| summarize hint.strategy = shuffle arg_max(LastModifiedTime, *) by IncidentNumber\n| mv-expand AlertIds\n| extend AlertId = tostring(AlertIds)\n| join kind= innerunique ( \n          SecurityAlert \n          )\n          on $left.AlertId == $right.SystemAlertId\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| project UPN, AlertName, Severity, ProductName\n| evaluate basket(0.001)\n| where UPN <> \"\"\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UPN == $right.SearchKey\n| project UPN, Percent, AlertName, Severity, ProductName\n| join (LastTimeObserved) on UPN\n| sort by Percent desc\n| extend LastObserved = TimeGenerated\n| join kind=inner (AlertLinks) on UPN\n| project UPN, AlertName, Severity, ProductName, Percent, LastObserved, AlertLinks\n| extend AccountName = tostring(split(UPN, \"@\")[0]), AccountUPNSuffix = tostring(split(UPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule helps to detect whenever there is a diligence risk category found in BitSight.\n Topic: BitSight"}, {"role": "assistant", "content": "let timeframe = 24h;\nBitSightFindingsData\n| where ingestion_time() > ago(timeframe)\n| where RiskCategory == \"Diligence\"\n| extend Severity = toreal(Severity)\n| extend Severity = case( Severity <= 6.9 and Severity >= 4.0, \"Low\",\n                          Severity <= 8.9 and Severity >= 7.0, \"Medium\",\n                          Severity <= 10.0 and Severity >= 9.0, \"High\",\n                          \"Informational\")\n| project FirstSeen, CompanyName, Severity, RiskCategory, TemporaryId, RiskVector\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Provides a summary of executable files with double file extensions in SharePoint \n and the users and IP addresses that have accessed them.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let known_ext = dynamic([\"lnk\", \"log\", \"option\", \"config\", \"manifest\", \"partial\"]);\nlet excluded_users = dynamic([\"app@sharepoint\"]);\nEnrichedMicrosoft365AuditLogs\n| where RecordType == \"SharePointFileOperation\" and isnotempty(ObjectId)\n| where ObjectId has \".exe.\" \n    and not(ObjectId endswith \".lnk\") \n    and not(ObjectId endswith \".log\") \n    and not(ObjectId endswith \".option\") \n    and not(ObjectId endswith \".config\") \n    and not(ObjectId endswith \".manifest\") \n    and not(ObjectId endswith \".partial\")\n| extend Extension = extract(\"[^.]*\\\\.[^.]*$\", 0, ObjectId)\n| extend SourceFileName = tostring(parse_json(tostring(AdditionalProperties)).SourceFileName)\n| join kind=leftouter (\n    EnrichedMicrosoft365AuditLogs\n    | where RecordType == \"SharePointFileOperation\" and (Operation == \"FileDownloaded\" or Operation == \"FileAccessed\")\n    | where not(ObjectId endswith \".lnk\") \n        and not(ObjectId endswith \".log\") \n        and not(ObjectId endswith \".option\") \n        and not(ObjectId endswith \".config\") \n        and not(ObjectId endswith \".manifest\") \n        and not(ObjectId endswith \".partial\")\n) on ObjectId\n| where UserId1 !in (excluded_users)\n| extend userBag = bag_pack(\"UserId\", UserId1, \"ClientIp\", ClientIp1)\n| summarize make_set(UserId1, 10000), userBag = make_bag(userBag), UploadTime = max(TimeGenerated) by UserId, ObjectId, SourceFileName, Extension\n| extend NumberOfUsers = array_length(bag_keys(userBag))\n| project UploadTime, Uploader = UserId, FileLocation = ObjectId, FileName = SourceFileName, AccessedBy = userBag, Extension, NumberOfUsers\n| extend UploaderName = tostring(split(Uploader, \"@\")[0]), UploaderUPNSuffix = tostring(split(Uploader, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies attempts to modify registry ACL to evade security solutions. In the Solorigate attack, the attackers were found modifying registry permissions so services.exe cannot access the relevant registry keys to start the service.\n The detection leverages Security Event as well as MDE data to identify when specific security services registry permissions are modified.\n Only some portions of this detection are related to Solorigate, it also includes coverage for some common tools that perform this activity.\n Reference on guidance for enabling registry auditing:\n - https://docs.microsoft.com/windows/security/threat-protection/auditing/advanced-security-auditing-faq\n - https://docs.microsoft.com/windows/security/threat-protection/auditing/appendix-a-security-monitoring-recommendations-for-many-audit-events\n - https://docs.microsoft.com/windows/security/threat-protection/auditing/audit-registry\n - https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4670\n   - For the event 4670 to be created the audit policy for the registry must have auditing enabled for Write DAC and/or Write Owner\n - https://github.com/OTRF/Set-AuditRule\n - https://docs.microsoft.com/dotnet/api/system.security.accesscontrol.registryrights?view=dotnet-plat-ext-5.0\n Topic: Detections"}, {"role": "assistant", "content": "let servicelist = dynamic(['Services\\\\HealthService', 'Services\\\\Sense', 'Services\\\\WinDefend', 'Services\\\\MsSecFlt', 'Services\\\\DiagTrack', 'Services\\\\SgrmBroker', 'Services\\\\SgrmAgent', 'Services\\\\AATPSensorUpdater' , 'Services\\\\AATPSensor', 'Services\\\\mpssvc']);\nlet filename = dynamic([\"subinacl.exe\",'SetACL.exe']);\nlet parameters = dynamic (['/deny=SYSTEM', '/deny=S-1-5-18', '/grant=SYSTEM=r', '/grant=S-1-5-18=r', 'n:SYSTEM;p:READ', 'n1:SYSTEM;ta:remtrst;w:dacl']);\nlet FullAccess = dynamic(['A;CI;KA;;;SY', 'A;ID;KA;;;SY', 'A;CIID;KA;;;SY']);\nlet ReadAccess = dynamic(['A;CI;KR;;;SY', 'A;ID;KR;;;SY', 'A;CIID;KR;;;SY']);\nlet DenyAccess = dynamic(['D;CI;KR;;;SY', 'D;ID;KR;;;SY', 'D;CIID;KR;;;SY']);\nlet timeframe = 1d;\n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4670\n| where ObjectType == 'Key'\n| where ObjectName has_any (servicelist)\n| parse EventData with * 'OldSd\">' OldSd \"<\" *\n| parse EventData with * 'NewSd\">' NewSd \"<\" *\n| extend Reason = case( (OldSd has ';;;SY' and NewSd !has ';;;SY'), 'System Account is removed', (OldSd has_any (FullAccess) and NewSd has_any (ReadAccess)) , 'System permission has been changed to read from full access', (OldSd has_any (FullAccess) and NewSd has_any (DenyAccess)), 'System account has been given denied permission', 'None')\n| project TimeGenerated, Computer, Account,  ProcessName, ProcessId, ObjectName, EventData, Activity, HandleId, SubjectLogonId, OldSd, NewSd , Reason\n),\n(\nSecurityEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4688\n| extend ProcessName = tostring(split(NewProcessName, '\\\\')[-1])\n| where ProcessName in~ (filename)\n| where CommandLine has_any (servicelist) and CommandLine has_any (parameters)\n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName, ProcessNameFullPath = NewProcessName, EventID, Activity, CommandLine, EventSourceName, Type\n),\n(\nWindowsEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4670 and EventData has_any (servicelist) and EventData has 'Key'\n| extend ObjectType = tostring(EventData.ObjectType)\n| where ObjectType == 'Key'\n| extend ObjectName = tostring(EventData.ObjectName)\n| where ObjectName has_any (servicelist)\n| extend OldSd = tostring(EventData.OldSd)\n| extend NewSd = tostring(EventData.NewSd)\n| extend Reason = case( (OldSd has ';;;SY' and NewSd !has ';;;SY'), 'System Account is removed', (OldSd has_any (FullAccess) and NewSd has_any (ReadAccess)) , 'System permission has been changed to read from full access', (OldSd has_any (FullAccess) and NewSd has_any (DenyAccess)), 'System account has been given denied permission', 'None')\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend ProcessName = tostring(EventData.ProcessName)\n| extend ProcessId = tostring(EventData.ProcessId)\n| extend Activity= \"4670 - Permissions on an object were changed.\"\n| extend HandleId = tostring(EventData.HandleId)\n| extend  SubjectLogonId = tostring(EventData.SubjectLogonId)\n| project TimeGenerated, Computer, Account,  ProcessName, ProcessId, ObjectName, EventData, Activity, HandleId, SubjectLogonId, OldSd, NewSd , Reason\n),\n(\nWindowsEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4688 and EventData has_any (filename) and EventData has_any (servicelist) and EventData has_any (parameters)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend ProcessName = tostring(split(NewProcessName, '\\\\')[-1])\n| where ProcessName in~ (filename)\n| extend CommandLine = tostring(EventData.CommandLine)\n| where CommandLine has_any (servicelist) and CommandLine has_any (parameters)\n| extend  Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend  AccountDomain = tostring(EventData.AccountDomain)\n| extend  Activity=\"4688 - A new process has been created.\"\n| extend  EventSourceName=Provider\n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName, ProcessNameFullPath = NewProcessName, EventID, Activity, CommandLine, EventSourceName, Type\n),\n(\nDeviceProcessEvents\n| where TimeGenerated >= ago(timeframe)\n| where InitiatingProcessFileName in~ (filename)\n| where InitiatingProcessCommandLine has_any(servicelist) and InitiatingProcessCommandLine has_any (parameters)\n| extend Account = iff(isnotempty(InitiatingProcessAccountUpn), InitiatingProcessAccountUpn, InitiatingProcessAccountName), Computer = DeviceName\n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName = InitiatingProcessFileName, ProcessNameFullPath = FolderPath, Activity = ActionType, CommandLine = InitiatingProcessCommandLine, Type, InitiatingProcessParentFileName\n)\n)\n| extend AccountName = tostring(split(Account, \"\\\\\")[0]), AccountNTDomain = tostring(split(Account, \"\\\\\")[1])\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects dropping or denying session with traffic.\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "let threshold = 100;\nPaloAltoCDLEvent\n| where EventResourceId =~ 'TRAFFIC'\n| where EventResult has_any (\"deny\", \"drop\", \"reject\") \n| where tolong(DstBytes) > 0\n| where tolong(NetworkPackets) > 0\n| summarize count() by SrcIpAddr, DstUsername, bin(TimeGenerated, 10m)\n| where count_ > threshold\n| extend AccountCustomEntity = DstUsername, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies Palo Alto Threat signatures from unusual IP addresses which are not historically seen. \nThis detection is also leveraged and required for MDE and PAN Fusion scenario\nhttps://docs.microsoft.com/Azure/sentinel/fusion-scenario-reference#network-request-to-tor-anonymization-service-followed-by-anomalous-traffic-flagged-by-palo-alto-networks-firewall\n Topic: PaloAlto-PAN-OS"}, {"role": "assistant", "content": "let starttime = 7d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet HistThreshold = 25; \nlet CurrThreshold = 10; \nlet HistoricalThreats = CommonSecurityLog\n| where isnotempty(SourceIP)\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where DeviceVendor =~ \"Palo Alto Networks\"\n| where Activity =~ \"THREAT\" and SimplifiedDeviceAction =~ \"alert\" \n| where DeviceEventClassID in ('spyware', 'scan', 'file', 'vulnerability', 'flood', 'packet', 'virus','wildfire', 'wildfire-virus')\n| summarize TotalEvents = count(), ThreatTypes = make_set(DeviceEventClassID), DestinationIpList = make_set(DestinationIP), FirstSeen = min(TimeGenerated) , LastSeen = max(TimeGenerated) by SourceIP, DeviceAction, DeviceVendor;\nlet CurrentHourThreats =  CommonSecurityLog\n| where isnotempty(SourceIP)\n| where TimeGenerated > ago(timeframe)\n| where DeviceVendor =~ \"Palo Alto Networks\"\n| where Activity =~ \"THREAT\" and SimplifiedDeviceAction =~ \"alert\" \n| where DeviceEventClassID in ('spyware', 'scan', 'file', 'vulnerability', 'flood', 'packet', 'virus','wildfire', 'wildfire-virus')\n| summarize TotalEvents = count(), ThreatTypes = make_set(DeviceEventClassID), DestinationIpList = make_set(DestinationIP), FirstSeen = min(TimeGenerated) , LastSeen = max(TimeGenerated) by SourceIP, DeviceAction, DeviceProduct, DeviceVendor;\nCurrentHourThreats \n| where TotalEvents < CurrThreshold\n| join kind = leftanti (HistoricalThreats \n| where TotalEvents > HistThreshold) on SourceIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The rule detects IaaS policies attached to a role that has not used them during the past X days. It is recommended to remove unused policies from identities to reduce risk. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"Stale IAAS policy attachment to role\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple connection errors to URL.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "let threshold = 5;\nCiscoWSAEvent\n| where DvcAction =~ 'NONE'\n| summarize count() by SrcUserName, UrlOriginal, bin(TimeGenerated, 5m)\n| where count_ >= threshold\n| extend URLCustomEntity = UrlOriginal, AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows all users tagged as VIP in the VIP users watchlist that had anomalies with a score greater than 0.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "BehaviorAnalytics\n| where UsersInsights.IsVIPUser == True\n| where InvestigationPriority > 0\n| extend AadUserId = UsersInsights.AccountObjectID\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query identifies any efforts by an attacker to delete backup containers, while also searching for any security alerts that may be linked to the same activity, in order to uncover additional information about the attackers actions. \nThough such an activity could be legitimate as part of business operation, some ransomware actors may perform such operation to cause interruption to regular business services.\n Topic: Microsoft Defender for Cloud"}, {"role": "assistant", "content": "SecurityAlert\n| extend Extprop = parse_json(ExtendedProperties)\n| mv-expand todynamic(Entities)\n| extend HostName = iff(isnotempty(tostring(Extprop[\"Compromised Host\"])), tolower(tostring(Extprop[\"Compromised Host\"])), tolower(tostring(parse_json(Entities).HostName)))\n| where isnotempty(HostName)\n| mv-expand todynamic(split(HostName, ','))\n| extend DnsDomain = iff(isnotempty(tostring(Extprop[\"Machine Domain\"])), tostring(Extprop[\"Machine Domain\"]), tostring(parse_json(Entities).DnsDomain))\n| extend UserName = iff(isnotempty(tostring(Extprop[\"User Name\"])), tostring(Extprop[\"User Name\"]), iff(tostring(parse_json(Entities).Type) == 'account', tostring(parse_json(Entities).Name), ''))\n| extend NTDomain = iff(isnotempty(tostring(Extprop[\"User Domain\"])), tostring(Extprop[\"User Domain\"]), tostring(parse_json(Entities).NTDomain))\n| extend IpAddress = iff(tostring(parse_json(Entities).Type) == 'ip', tostring(parse_json(Entities).Address), tostring(parse_json(Extprop).[\"IpAddress\"]))\n| summarize timestamp = arg_max(TimeGenerated, *) by AlertName, tostring(HostName)\n| project timestamp, AlertName, UserName, NTDomain, tostring(HostName), DnsDomain, IpAddress\n| join kind=inner\n(\nCoreAzureBackup\n| where State =~ \"Deleted\"\n| where OperationName =~ \"BackupItem\"\n| extend data = split(BackupItemUniqueId, \";\")\n| extend AzureLocation = data[0], VaultId=data[1], HostName=tolower(tostring(data[2])), DrivesBackedUp=data[3]\n| project timestamp = TimeGenerated, AzureLocation, VaultId, HostName, DrivesBackedUp, State, BackupItemUniqueId, _ResourceId, OperationName, BackupItemFriendlyName\n)\non HostName\n| project timestamp, AlertName, HostName, DnsDomain, UserName, NTDomain, _ResourceId, IpAddress, VaultId, AzureLocation, DrivesBackedUp, State, BackupItemUniqueId, OperationName, BackupItemFriendlyName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects Unexpected ZPA session duration.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "let dt_lookBack = 24h;\nlet time_treshhold = timespan(08:00:00);\nlet open_sessions =\nZPAEvent\n| where TimeGenerated > ago(dt_lookBack)\n| where DvcAction == 'open'\n| summarize timestampstart = min(TimeGenerated) by DstUserName, SrcIpAddr, NetworkSessionId\n| sort by timestampstart asc;\nlet closed_sessions =\nZPAEvent\n| where TimeGenerated > ago(dt_lookBack)\n| where DvcAction == 'close'\n| summarize timestampend = max(TimeGenerated) by DstUserName, SrcIpAddr, NetworkSessionId\n| sort by timestampend asc;\nopen_sessions\n| join (closed_sessions) on DstUserName, SrcIpAddr, NetworkSessionId\n| extend duration = timestampend - timestampstart\n| where duration > time_treshhold\n| where DstUserName !has \"ZPA LSS\"\n| sort by timestampstart asc\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for dropped mails.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where TimeGenerated > ago(24h)\n| where NetworkDirection =~ 'Incoming'\n| where SimplifiedDeviceAction =~ 'DROPPED'\n| summarize count() by DstUserName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects threat for data leak when action is hold Topic: MimecastSEG"}, {"role": "assistant", "content": "MimecastDLP_CL| where action_s == \"hold\";"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects policy updates failures.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where EventMessage =~ 'Policy Update Failure'\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for applications used.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where TimeGenerated > ago(24h)\n| where isnotempty(Application)\n| summarize count() by Application\n| extend AppCustomEntity = Application\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when DLP policy violation occurs.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where isnotempty(TriggeredDlpTemplate)\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for data export activity across a predetermined number of Dataverse instances. Data export activity across multiple environments could indicate suspicious activity as users typically work on a small number of environments. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "//Modify environment_count_threshold to scale number of Dataverse instances to omit before including in results\nlet environment_count_threshold = 2;\nlet export_events = dynamic(['ExportToExcel', 'ExportPdfDocument', 'ExportWordDocument', 'ExecutePowerBISql']);\nDataverseActivity\n| where Message in (export_events)\n| summarize InstanceCount = dcount(InstanceUrl) by UserId\n| where InstanceCount > environment_count_threshold\n| join kind=inner (DataverseActivity\n    | where Message in (export_events))\n    on UserId\n| summarize FirstEvent = min(TimeGenerated), LastEvent = max(TimeGenerated) by UserId, InstanceCount, InstanceUrl, Message, ClientIp\n| extend CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    FirstEvent,\n    LastEvent,\n    UserId,\n    Message,\n    ClientIp,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection identifies when an external user is added to a Team or Teams chat and shares a file which is accessed by many users (>10) and the users is removed within short period of time. This might be an indicator of suspicious activity.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let fileAccessThrehold = 10;\nOfficeActivity\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where Operation =~ \"MemberAdded\"\n| extend MemberAdded = tostring(parse_json(Members)[0].UPN)\n| where MemberAdded contains (\"#EXT#\")\n| project TimeAdded=TimeGenerated, Operation, MemberAdded, UserWhoAdded = UserId, TeamName\n| join kind = inner (\n  OfficeActivity\n  | where OfficeWorkload =~ \"MicrosoftTeams\"\n  | where Operation =~ \"MemberRemoved\"\n  | extend MemberAdded = tostring(parse_json(Members)[0].UPN)\n  | where MemberAdded contains (\"#EXT#\")\n  | project TimeDeleted=TimeGenerated, Operation, MemberAdded, UserWhoDeleted = UserId, TeamName\n  ) on MemberAdded\n| where TimeDeleted > TimeAdded\n| join kind=inner (\n  OfficeActivity\n  | where RecordType == \"SharePointFileOperation\"\n  | where SourceRelativeUrl has \"Microsoft Teams Chat Files\"\n  | where Operation == \"FileUploaded\"\n  | extend MemberAdded = UserId\n  | join kind = inner (\n      OfficeActivity\n      | where RecordType == \"SharePointFileOperation\"\n      | where Operation  == \"FileAccessed\"\n      | where SourceRelativeUrl has \"Microsoft Teams Chat Files\"\n      | summarize FileAccessCount = count() by OfficeObjectId\n      | where FileAccessCount > fileAccessThrehold\n      ) on $left.OfficeObjectId == $right.OfficeObjectId\n  )on MemberAdded\n| project-away MemberAdded1, MemberAdded2, OfficeObjectId1, Operation1, Operation2, TeamName1, TeamName2\n| extend MemberAddedAccountName = tostring(split(MemberAdded, \"@\")[0]), MemberAddedAccountUPNSuffix = tostring(split(MemberAdded, \"@\")[1])\n| extend UserWhoAddedAccountName = tostring(split(UserWhoAdded, \"@\")[0]), UserWhoAddedAccountUPNSuffix = tostring(split(UserWhoAdded, \"@\")[1])\n| extend UserWhoDeletedAccountName = tostring(split(UserWhoDeleted, \"@\")[0]), UserWhoDeletedAccountUPNSuffix = tostring(split(UserWhoDeleted, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a privileged user account successfully authenticates from a location, device or ASN that another admin has not logged in from in the last 7 days.\n  Privileged accounts are a key target for threat actors, monitoring for logins from these accounts that deviate from normal activity can help identify compromised accounts.\n  Authentication attempts should be investigated to ensure the activity was legitimate and if there is other similar activity.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-successful-unusual-sign-ins\n Topic: Detections"}, {"role": "assistant", "content": "let admin_users = (IdentityInfo\n  | summarize arg_max(TimeGenerated, *) by AccountUPN\n  | where AssignedRoles contains \"admin\"\n  | summarize by tolower(AccountUPN));\n  let admin_asn = (SigninLogs\n  | where TimeGenerated between (ago(7d)..ago(1d))\n  | where tolower(UserPrincipalName) in (admin_users)\n  | summarize by AutonomousSystemNumber);\n  let admin_locations = (SigninLogs\n  | where TimeGenerated between (ago(7d)..ago(1d))\n  | where tolower(UserPrincipalName) in (admin_users)\n  | summarize by Location);\n  let admin_devices = (SigninLogs\n  | where TimeGenerated between (ago(7d)..ago(1d))\n  | where tolower(UserPrincipalName) in (admin_users)\n  | extend deviceId = tostring(DeviceDetail.deviceId)\n  | where isnotempty(deviceId)\n  | summarize by deviceId);\n  SigninLogs\n  | where TimeGenerated > ago(1d)\n  | where ResultType == 0\n  | where tolower(UserPrincipalName) in (admin_users)\n  | extend deviceId = tostring(DeviceDetail.deviceId)\n  | where AutonomousSystemNumber !in (admin_asn) and deviceId !in (admin_devices) and Location !in (admin_locations)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create an incident when an identity is suspected to be compromised. Vectra is using AI to prioritize an entity based on multiple factors (attack rating, velocity, breadth, importance.etc.). This layer of aggregation at the entity level provides a greater signal-to-noise ratio and help analyst focus on what matters. Topic: Vectra XDR"}, {"role": "assistant", "content": "Entities_Data_CL\n| where type_s == \"host\" and is_prioritized_b == true\n| summarize arg_max(['last_modified_timestamp_t'], *) by ['name_s']\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses Sysmon events (NetworkConnect events) to detect incoming network traffic on port 80 on AD FS servers. This could be a sign of a threat actor trying to use replication services on the AD FS server to get its configuration settings and extract sensitive information such as AD FS certificates.\nIn order to use this query you need to enable Sysmon telemetry on the AD FS Server.\nReference: https://twitter.com/OTR_Community/status/1387038995016732672\n\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// Adjust this to use a longer timeframe to identify ADFS servers\n//let lookback = 0d;\n// Adjust this to adjust detection timeframe\n//let timeframe = 1d;\n// Filter out other servers in the AD FS farm\nlet ADFSServersList = dynamic([\"ADFS02.domain.com\",\"ADFS03.domain.com\"]);\n// Start by identifying ADFS servers to reduce FP chance\nlet ADFS_Servers = (\nEvent\n//| where TimeGenerated > ago(timeframe+lookback)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 18\n| where Computer !in (ADFSServersList)\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, MG, ManagementGroupName, _ResourceId)\n| extend Image = column_ifexists(\"Image\", \"\")\n| extend process = split(Image, '\\\\', -1)[-1]\n| where process =~ \"Microsoft.IdentityServer.ServiceHost.exe\"\n| summarize by Computer\n);\n// Look for ADFS servers receiving connections over port 80\nEvent\n//| where TimeGenerated > ago(timeframe)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where Computer in~ (ADFS_Servers)\n| extend RenderedDescription = tostring(split(RenderedDescription, \":\")[0])\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, _ResourceId)\n| extend RuleName = column_ifexists(\"RuleName\", \"\"), TechniqueId = column_ifexists(\"TechniqueId\", \"\"),  TechniqueName = column_ifexists(\"TechniqueName\", \"\")\n| parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName\n| where EventID == 3\n// Look for endpoints connecting to the AD FS server over port 80\n| extend DestinationPort = column_ifexists(\"DestinationPort\", \"\"), Image = column_ifexists(\"Image\", \"\"), Initiated = column_ifexists(\"Initiated\", \"\"), SourceIp = column_ifexists(\"DestinationIp\", \"\"), DestinationIp = column_ifexists(\"DestinationIp\", \"\")\n| where DestinationPort == 80\n| extend process = split(Image, '\\\\', -1)[-1]\n// Look for the System process receiving connections\n| where process == 'System' and Initiated == 'false'\n| where DestinationIp !in ('::1','0:0:0:0:0:0:0:1')\n| extend Operation = RenderedDescription\n| project-reorder TimeGenerated, Operation, Image, Computer, UserName\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(UserName, @'\\')[1]), AccountNTDomain = tostring(split(UserName, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Azures storage key listing can expose secrets, PII, and grant VM access. Monitoring for anomalous accounts or IPs is crucial. The query generates IP clusters, correlates activities, and flags unexpected ones. Single-operation users are excluded.\n Topic: Azure Activity"}, {"role": "assistant", "content": "AzureActivity\n| where OperationNameValue =~ \"microsoft.storage/storageaccounts/listkeys/action\"\n| where ActivityStatusValue =~ \"Succeeded\" \n| join kind= inner (\n    AzureActivity\n    | where OperationNameValue =~ \"microsoft.storage/storageaccounts/listkeys/action\"\n    | where ActivityStatusValue =~ \"Succeeded\" \n    | project ExpectedIpAddress=CallerIpAddress, Caller \n    | evaluate autocluster()\n) on Caller\n| where CallerIpAddress != ExpectedIpAddress\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ResourceIds = make_set(ResourceId,100), ResourceIdCount = dcount(ResourceId) by OperationNameValue, Caller, CallerIpAddress\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = CallerIpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unusual traffic masking as HTTP(S).\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "UbiquitiAuditEvent\n| where EventCategory =~ 'firewall'\n| where DstPortNumber in ('80', '443')\n| where NetworkProtocol !~ 'TCP'\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "When Knox device boot binary is at risk of compromise.\n Topic: Samsung Knox Asset Intelligence"}, {"role": "assistant", "content": "Samsung_Knox_System_CL \n| where Name == \"BOOT_COMPROMISED_SOFTWARE_BINARY\"\nand MitreTtp has \"T1645\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when an admin or app owner account adds a new credential to an Application or Service Principal where there was no previous verify KeyCredential associated.\nIf a threat actor obtains access to an account with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.\nAdditional information on OAuth Credential Grants can be found in RFC 6749 Section 4.4 or https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where OperationName has (\"Certificates and secrets management\")\n| where Result =~ \"success\"\n| where tostring(InitiatedBy.user.userPrincipalName) has \"@\" or tostring(InitiatedBy.app.displayName) has \"@\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"Application\"\n      | extend targetDisplayName = tostring(TargetResource.displayName),\n               targetId = tostring(TargetResource.id),\n               targetType = tostring(TargetResource.type),\n               keyEvents = TargetResource.modifiedProperties\n  )\n| mv-apply Property = keyEvents on \n  (\n      where Property.displayName =~ \"KeyDescription\"\n      | extend new_value_set = parse_json(tostring(Property.newValue)),\n               old_value_set = parse_json(tostring(Property.oldValue))\n  )\n| where old_value_set == \"[]\"\n| mv-expand new_value_set\n| parse new_value_set with * \"KeyIdentifier=\" keyIdentifier:string \",KeyType=\" keyType:string \",KeyUsage=\" keyUsage:string \",DisplayName=\" keyDisplayName:string \"]\" *\n| where keyUsage =~ \"Verify\"\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend InitiatingUserAgent = tostring(AdditionalDetail.value)\n  )\n| project-away new_value_set, old_value_set, TargetResource, Property, AdditionalDetail\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| project-reorder TimeGenerated, OperationName, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, InitiatingUserAgent, \ntargetDisplayName, targetId, targetType, keyDisplayName, keyType, keyUsage, keyIdentifier, CorrelationId, TenantId\n| extend Name = split(InitiatingUserPrincipalName, \"@\")[0], UPNSuffix = split(InitiatingUserPrincipalName, \"@\")[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a user is added to a privileged group which has been implemented by an actor that was not the target user account. Once the analytics rule is triggered it will group all related future alerts for upto 30 minutes when all related entities are the same.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "let watchlist =\n    _GetWatchlist(\"PG1PW\")\n    | project SearchKey\n;\nlet groups = dynamic([\"\"]);\nOnePasswordEventLogs_CL\n| where log_source == \"auditevents\"\n| where action == \"join\"\n| where object_type == \"gm\"\n| where tostring(actor_details.email) != tostring(aux_details.email)\n// Enable the line below when using the \"Privileged Groups - 1PW\" watchlist\n| where object_uuid in (watchlist)\n// Enable the line below when using the dynamic groups list within the analytics rule itself\n// | where object_uuid in (groups)\n| extend\n    TargetUsername = aux_details.email\n    , ActorUsername = actor_details.email\n    , SrcIpAddr = session.ip\n    , GroupRole = case(\n        aux_info == \"R\", \"Group member\"\n        , aux_info == \"A\", \"Group manager\"\n        , aux_info\n    )"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for authentication URLs used.\n Topic: PingFederate"}, {"role": "assistant", "content": "PingFederateEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(DeviceCustomString1)\n| summarize count() by DeviceCustomString1\n| project URL = DeviceCustomString1, Total = count_\n| extend UrlCustomEntity = URL\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for OS Credentials dumping attacks.\n Topic: Tenable App"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.yaml parser into the workspace\n// Retrieve the parser here: https://aka.ms/sentinel-TenableApp-afad-parser\n// Then, create the Kusto Function with alias afad_parser\nafad_parser\n  | where MessageType == 2 and Codename == \"OS Credential Dumping: LSASS Memory\"\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects new location of authentication device.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where EventType =~ 'authentication'\n| where EventResult =~ 'success'\n| where isnotempty(AuthDeviceCountry)\n| summarize src_c = makeset(AuthDeviceCountry) by SrcIpAddr\n| join (CiscoDuo\n        | where EventType =~ 'authentication'\n        | where EventResult =~ 'success') on SrcIpAddr\n| where src_c !has AuthDeviceCountry\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for files sent by users.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(inspected_document)\n| summarize Files = makeset(inspected_document) by SrcUserName\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query finds matches in VMConnection Event data for known FileName Indicators of Compromise from Threat Intelligence sources. FileName matches may produce false positives, so use this for hunting rather than real-time detection.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true\n| where isnotempty(FileName)\n| extend TI_ProcessEntity = tostring(split(FileName, \".\")[-2])\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n  VMConnection \n  | where TimeGenerated between(starttime..endtime)\n  | where isnotempty(ProcessName)\n  | extend VMConnection_TimeGenerated = TimeGenerated\n)\non $left.TI_ProcessEntity == $right.ProcessName\n| where VMConnection_TimeGenerated < ExpirationDateTime\n| summarize VMConnection_TimeGenerated = arg_max(VMConnection_TimeGenerated, *) by IndicatorId, ProcessName\n| project VMConnection_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nFileName, Computer, Direction, SourceIp, DestinationIp, RemoteIp, DestinationPort, Protocol\n| extend timestamp = VMConnection_TimeGenerated, HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n| extend IP_0_Address = RemoteIp\n| extend IP_1_Address = SourceIp\n| extend URL_0_Url = Url\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for download activities.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "VMwareESXi\n| where TimeGenerated > ago(24h)\n| where SyslogMessage has_all ('NFC', 'operation', 'Download')\n| extend SrcUsername = extract(@'\\[info\\]\\s+\\[(.*?)\\]', 1, SyslogMessage)\n| extend path = extract(@\"for path '(.*?)'\\swas\", 1, SyslogMessage)\n| extend SrcIpAddr = extract(@\"initiated from '(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\", 1, SyslogMessage)\n| extend Result = extract(@\"status\\s'(\\w+)'\", 1, SyslogMessage)\n| extend HostCustomEntity = Computer\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for infected users.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where TimeGenerated > ago(24h)\n| where isnotempty(ThreatName)\n| order by TimeGenerated desc\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches connections to Url shorteners resources.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "CiscoWSAEvent\n| where TimeGenerated > ago(24h)\n| where UrlCategory =~ 'IW_shrt'\n| project UrlOriginal, SrcUserName, SrcIpAddr\n| extend URLCustomEntity = UrlOriginal, AccountCustomEntity = SrcUserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for uncategorized URLs.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "CiscoWSAEvent\n| where TimeGenerated > ago(24h)\n| where UrlCategory in~ ('IW_nc', 'IW_nact')\n| project UrlOriginal, SrcUserName, SrcIpAddr\n| extend URLCustomEntity = UrlOriginal, AccountCustomEntity = SrcUserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule generates an incident when an alarming number of anomalies are generated in the last 15 minutes. Topic: Veritas NetBackup"}, {"role": "assistant", "content": "NetBackupAlerts_CL\r\n| where Category contains \"ANOMALY_NEW\"\r\n| extend client =  split(Message, \"client '\")[1]\r\n| extend clientName = split(client, \"'\")[0]\r\n| summarize Total=count() by tostring(clientName)\r\n| where Total >= 10"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects successful sign ins from devices marked non-compliant.\nBest practice is to block sign ins from non-complaint devices, however if allowed monitor these events to ensure they do not lead to other risky activity.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "SigninLogs\n  | where ResultType == 0\n  | where tostring(DeviceDetail.isCompliant) == \"false\"\n  | extend Account_0_Name = tolower(UserPrincipalName)\n  | extend IP_0_Address = IPAddress\n  | join kind=leftouter (\n      IdentityInfo\n      | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n      | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n      | summarize\n          Tags = make_set(Tags, 1000),\n          GroupMembership = make_set(GroupMembership, 1000),\n          AssignedRoles = make_set(AssignedRoles, 1000),\n          UserType = make_set(UserType, 1000),\n          UserAccountControl = make_set(UserType, 1000)\n      by AccountUPN\n      | extend Account_0_Name =tolower(AccountUPN)\n  ) on Account_0_Name\n  | join kind=leftouter (\n      BehaviorAnalytics\n      | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n      | where isnotempty(SourceIPAddress)\n      | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress\n      | project-rename IP_0_Address = SourceIPAddress\n      | summarize\n        UsersInsights = make_set(UsersInsights, 1000),\n        DevicesInsights = make_set(DevicesInsights, 1000),\n        IPInvestigationPriority = sum(InvestigationPriority)\n      by IP_0_Address\n  ) on IP_0_Address\n  | extend UEBARiskScore = IPInvestigationPriority\n  | sort by UEBARiskScore desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for requires you to setup Microsoft Entra ID Connect. \n Microsoft Entra ID Connect is free with all Azure Subscriptions\n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'AzureSecureScoreSelfServicePasswordReset'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Infoblox SOC Insight detected in logs sourced via REST API. Customize scheduling, responses and more. This rule depends on a parser based on a Kusto Function to work as expected called [**InfobloxInsight**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxInsight.yaml).\n Topic: Infoblox SOC Insights"}, {"role": "assistant", "content": "InfobloxInsight\n| summarize arg_max(TimeGenerated, *) by InfobloxInsightID\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query helps to detect when a user uploads multiple archived files in short period of time.\n Topic: SlackAudit"}, {"role": "assistant", "content": "let threshold = 10;\nSlackAudit\n| where DvcAction =~ 'file_uploaded'\n| extend FE = extract(@'.*\\.(.*)$', 1, EntityFileName)\n| where FE in~ ('tar', 'bz2', 'gz', 'tgz', 'Z', 'tbz2', 'zst', 'zip', 'zipx', '7z', 'rar', 'sfx')\n| summarize count() by SrcUserName, bucket = bin(TimeGenerated, 15m)\n| where count_ > threshold\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when log collector was suspended.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "let lbtime = 10m;\nCiscoISEEvent\n| where TimeGenerated > ago(lbtime)\n| where EventId == '59207'\n| project TimeGenerated, SrcIpAddr, DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches failed TLS incoming connections.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where TimeGenerated > ago(24h)\n| where tostring(AdditionalFields) has 'ESATLSInConnStatus'\n| extend tls_status = extract(@'ESATLSInConnStatus\":\"(Success|Failure)\"', 1, tostring(AdditionalFields))\n| where tls_status =~ 'Failure'\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies suspicious child processes of SolarWinds.Orion.Core.BusinessLayer.dll that may be evidence of the SUNBURST backdoor\nReferences:\n- https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html\n- https://gist.github.com/olafhartong/71ffdd4cab4b6acd5cbcd1a0691ff82f\nTo use this analytics rule, make sure you have deployed the [ASIM normalization parsers](https://aka.ms/ASimProcessEvent)\n Topic: Detections"}, {"role": "assistant", "content": "let excludeProcs = dynamic([@\"\\SolarWinds\\Orion\\APM\\APMServiceControl.exe\", @\"\\SolarWinds\\Orion\\ExportToPDFCmd.Exe\", @\"\\SolarWinds.Credentials\\SolarWinds.Credentials.Orion.WebApi.exe\", @\"\\SolarWinds\\Orion\\Topology\\SolarWinds.Orion.Topology.Calculator.exe\", @\"\\SolarWinds\\Orion\\Database-Maint.exe\", @\"\\SolarWinds.Orion.ApiPoller.Service\\SolarWinds.Orion.ApiPoller.Service.exe\", @\"\\Windows\\SysWOW64\\WerFault.exe\"]);\nimProcessCreate\n| where Process hassuffix 'solarwinds.businesslayerhost.exe'\n| where not(Process has_any (excludeProcs))\n| extend AccountName = tostring(split(ActorUsername, @'\\')[1]), AccountNTDomain = tostring(split(ActorUsername, @'\\')[0])\n| extend HostName = tostring(split(Dvc, \".\")[0]), DomainIndex = toint(indexof(Dvc, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Dvc, DomainIndex + 1), Dvc)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects command execution with PrivilegeLevel - 15 from new source.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "let lbperiod = 14d;\nlet lbtime = 15m;\nlet knownAdminIpList =\nCiscoISEEvent\n| where TimeGenerated between (ago(lbperiod) .. ago(lbtime))\n| where PrivilegeLevel == '15'\n| summarize makelist(SrcIpAddr)\n;\nCiscoISEEvent\n| where TimeGenerated > ago(lbtime)\n| where PrivilegeLevel == '15'\n| where SrcIpAddr !in (knownAdminIpList)\n| project TimeGenerated, SrcIpAddr, DstIpAddr, DstUserName, CmdSet\n| extend AccountCustomEntity = DstUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a recently created Group was added to a privileged built in domain local group or global group such as the Enterprise Admins, Cert Publishers or DnsAdmins.  Be sure to verify this is an expected addition.\nReferences: For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups.\n Topic: Detections"}, {"role": "assistant", "content": "let WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$\";\nlet GroupAddition = (union isfuzzy=true   \n(SecurityEvent \n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group  \n| where EventID in (\"4728\", \"4732\", \"4756\")\n| where AccountType =~ \"User\"\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, GroupAddComputer = Computer, \nGroupAddTargetAccount = TargetAccount, GroupAddTargetUserName = TargetUserName, GroupAddTargetDomainName = TargetDomainName, GroupAddTargetSid = TargetSid, \nGroupAddSubjectAccount = SubjectAccount, GroupAddSubjectUserName = SubjectUserName, GroupAddSubjectDomainName = SubjectDomainName, GroupAddSubjectUserSid = SubjectUserSid, \nGroupSid = MemberSid\n),\n(\nWindowsEvent \n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group  \n| where EventID in (\"4728\", \"4732\", \"4756\")  and not(EventData has \"S-1-5-32-555\")\n| extend SubjectUserSid = tostring(EventData.SubjectUserSid)\n| extend Account = strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend AccountType=case(Account endswith \"$\" or SubjectUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(SubjectUserSid), \"\", \"User\")\n| extend MemberName = tostring(EventData.MemberName)\n| where AccountType =~ \"User\"\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| extend TargetSid = tostring(EventData.TargetSid)\n| where TargetSid !in (\"S-1-5-32-555\")\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n| extend TargetAccount = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n| extend MemberSid = tostring(EventData.MemberSid)\n| extend Activity= \"GroupAddActivity\"\n| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, GroupAddComputer = Computer, \nGroupAddTargetAccount = TargetAccount, GroupAddTargetUserName = tostring(EventData.TargetUserName), GroupAddTargetDomainName = tostring(EventData.TargetDomainName), GroupAddTargetSid = TargetSid, \nGroupAddSubjectAccount = Account, GroupAddSubjectUserName = tostring(EventData.SubjectUserName), GroupAddSubjectDomainName = tostring(EventData.SubjectDomainName), GroupAddSubjectUserSid = SubjectUserSid, \nGroupSid = MemberSid\n));\nlet GroupCreated = (union isfuzzy=true  \n(SecurityEvent\n// 4727 - A security-enabled global group was created\n// 4731 - A security-enabled local group was created\n// 4754 - A security-enabled universal group was created\n| where EventID in (\"4727\", \"4731\", \"4754\")\n| where AccountType =~ \"User\"\n| project GroupCreateTime = TimeGenerated, GroupCreateEventID = EventID, GroupCreateActivity = Activity, GroupCreateComputer = Computer, \nGroupCreateTargetAccount = TargetAccount, GroupCreateTargetUserName = TargetUserName, GroupCreateTargetDomainName = TargetDomainName,\nGroupCreateSubjectAccount = SubjectAccount, GroupCreateSubjectUserName = SubjectUserName, GroupCreateSubjectDomainName = SubjectDomainName, GroupCreateSubjectUserSid = SubjectUserSid, \nGroupSid = TargetSid\n),\n(WindowsEvent\n// 4727 - A security-enabled global group was created\n// 4731 - A security-enabled local group was created\n// 4754 - A security-enabled universal group was created\n| where EventID in (\"4727\", \"4731\", \"4754\")\n| extend SubjectUserSid = tostring(EventData.SubjectUserSid)\n| extend Account = strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend AccountType=case(Account endswith \"$\", \"Machine\", iff(SubjectUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", iff(isempty(SubjectUserSid), \"\", \"User\")))\n| where AccountType =~ \"User\"\n| extend TargetAccount = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n| extend SubjectAccount = strcat(EventData.SubjectDomainName,\"\\\\\", EventData.SubjectUserName)  \n| extend TargetSid = tostring(EventData.TargetSid) \n| extend Activity= \"GroupAddActivity\"\n| project GroupCreateTime = TimeGenerated, GroupCreateEventID = EventID, GroupCreateActivity = Activity, GroupCreateComputer = Computer, \nGroupCreateTargetAccount = TargetAccount, GroupCreateTargetUserName = tostring(EventData.TargetUserName), GroupCreateTargetDomainName = tostring(EventData.TargetDomainName), \nGroupCreateSubjectAccount = SubjectAccount, GroupCreateSubjectUserName = tostring(EventData.SubjectUserName), GroupCreateSubjectDomainName = tostring(EventData.SubjectDomainName),GroupCreateSubjectUserSid = SubjectUserSid, \nGroupSid = TargetSid\n));\nGroupCreated\n| join (\nGroupAddition\n) on GroupSid\n| extend GroupCreateHostName = tostring(split(GroupCreateComputer , \".\")[0]), DomainIndex = toint(indexof(GroupCreateComputer , '.'))\n| extend GroupCreateHostNameDomain = iff(DomainIndex != -1, substring(GroupCreateComputer , DomainIndex + 1), GroupCreateComputer)\n| extend GroupAddHostName = tostring(split(GroupAddComputer , \".\")[0]), DomainIndex = toint(indexof(GroupAddComputer , '.'))\n| extend GroupAddHostNameDomain = iff(DomainIndex != -1, substring(GroupAddComputer , DomainIndex + 1), GroupAddComputer)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule helps to detect a rare user-agents indicating web browsing activity by an unusual process other than a web browser.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "let user_agents_list = Cisco_Umbrella\n| where EventType == \"proxylogs\"\n| summarize count() by HttpUserAgentOriginal\n| summarize make_list(HttpUserAgentOriginal);\nCisco_Umbrella\n| where EventType == \"proxylogs\"\n| where HttpUserAgentOriginal !in (user_agents_list)\n| extend Message = \"Rare User Agent\"\n| project TimeGenerated, Message, SrcIpAddr, DstIpAddr, UrlOriginal, HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when an HTTP request was made to a domain that was using unicode/punycode.\n Topic: Corelight"}, {"role": "assistant", "content": "corelight_http\n| where method =~ 'GET'\n| where isempty(referrer)\n| where host has 'xn--'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches uncommon user agent strings.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "let length = 10;\nGWorkspaceActivityReports\n| where TimeGenerated > ago(24h)\n| where isnotempty(UserAgentOriginal)\n| where strlen(UserAgentOriginal) < length\n| extend UrlCustomEntity = UserAgentOriginal, AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a Guest User is added by a user account that has not been seen adding a guest in the previous 14 days.\n  Monitoring guest accounts and the access they are provided is important to detect potential account abuse.\n  Accounts added should be investigated to ensure the activity was legitimate.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-failed-unusual-sign-ins\n Topic: Detections"}, {"role": "assistant", "content": "let inviting_users = (AuditLogs\n  | where TimeGenerated between(ago(14d)..ago(1d))\n  | where OperationName =~ \"Invite external user\"\n  | where Result =~ \"success\"\n  | extend InitiatingUserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | where isnotempty(InitiatingUserPrincipalName)\n  | summarize by InitiatingUserPrincipalName);\n  AuditLogs\n  | where TimeGenerated > ago(1d)\n  | where OperationName =~ \"Invite external user\"\n  | where Result =~ \"success\"\n  | extend InitiatingUserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n  | where isnotempty(InitiatingUserPrincipalName) and InitiatingUserPrincipalName !in (inviting_users)\n  | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n  | extend TargetAadUserId = tostring(TargetResources[0].id)\n  | extend invitingUser = InitiatingUserPrincipalName, invitedUserPrincipalName = TargetUserPrincipalName\n  | extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n  | extend TargetAccountName = tostring(split(TargetUserPrincipalName, \"@\")[0]), TargetAccountUPNSuffix = tostring(split(TargetUserPrincipalName, \"@\")[1])\n  | project-reorder TimeGenerated, OperationName, Result, TargetUserPrincipalName, TargetAadUserId, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies users whose single Factor Auth Events in scenarios where it has not been seen before, or where only multi factor auth has been observed.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "let starttime = totimespan('{{StartTimeISO}}');\nlet endtime = totimespan('{{EndTimeISO}}');\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet userthreshold = 25;\nlet HistLogons = SigninLogs\n| where IsInteractive == true\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| extend HourOfLogin = hourofday(TimeGenerated), DayNumberofWeek = dayofweek(TimeGenerated)\n| extend DayofWeek = case(\n  DayNumberofWeek == \"00:00:00\", \"Sunday\", \n  DayNumberofWeek == \"1.00:00:00\", \"Monday\", \n  DayNumberofWeek == \"2.00:00:00\", \"Tuesday\", \n  DayNumberofWeek == \"3.00:00:00\", \"Wednesday\", \n  DayNumberofWeek == \"4.00:00:00\", \"Thursday\", \n  DayNumberofWeek == \"5.00:00:00\", \"Friday\", \n  DayNumberofWeek == \"6.00:00:00\", \"Saturday\",\"InvalidTimeStamp\")\n| summarize UserCount = dcount(UserPrincipalName) by HourOfLogin, Location, DayofWeek\n| where UserCount > userthreshold;\nHistLogons\n| join kind = rightanti (\nSigninLogs\n| where IsInteractive == true\n| where TimeGenerated > ago(1d)\n| extend HourOfLogin = hourofday(TimeGenerated), DayNumberofWeek = dayofweek(TimeGenerated)\n| extend DayofWeek = case(\n  DayNumberofWeek == \"00:00:00\", \"Sunday\", \n  DayNumberofWeek == \"1.00:00:00\", \"Monday\", \n  DayNumberofWeek == \"2.00:00:00\", \"Tuesday\", \n  DayNumberofWeek == \"3.00:00:00\", \"Wednesday\", \n  DayNumberofWeek == \"4.00:00:00\", \"Thursday\", \n  DayNumberofWeek == \"5.00:00:00\", \"Friday\", \n  DayNumberofWeek == \"6.00:00:00\", \"Saturday\",\"InvalidTimeStamp\")\n  | summarize count(), FirstSuccessfulSignin = min(TimeGenerated), LastSuccessfulSignin = max(TimeGenerated), make_set(IPAddress), make_set(ClientAppUsed), make_set(UserAgent), make_set(AppDisplayName) by HourOfLogin, Location, DayofWeek, UserPrincipalName\n  ) on Location, DayofWeek , HourOfLogin\n  | extend timestamp = LastSuccessfulSignin, Account_0_Name = UserPrincipalName\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n) on UserPrincipalName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses AzureActivity logs (Administrative category) to identify the creation or update of a server instance in an Microsoft Entra ID Hybrid Health AD FS service.\nA threat actor can create a new AD Health ADFS service and create a fake server instance to spoof AD FS signing logs. There is no need to compromise an on-premises AD FS server.\nThis can be done programmatically via HTTP requests to Azure. More information in this blog: https://o365blog.com/post/hybridhealthagent/\n Topic: Azure Activity"}, {"role": "assistant", "content": "AzureActivity\n| where CategoryValue =~ 'Administrative'\n| where ResourceProviderValue =~ 'Microsoft.ADHybridHealthService'\n| where _ResourceId has 'AdFederationService'\n| where OperationNameValue =~ 'Microsoft.ADHybridHealthService/services/servicemembers/action'\n| extend claimsJson = parse_json(Claims)\n| extend AppId = tostring(claimsJson.appid), AccountName = tostring(claimsJson.name), Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| project-away claimsJson\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible dropper activity on host.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where EventMessage has 'Potential Dropper Infection'\n| extend HostCustomEntity = DstHostname, MalwareCustomEntity = ThreatName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is designed to monitor log retention within the Maturity Model for Event Log Management (M-21-31) standard. The alert triggers when a log analytics workspace in active storage is configured for less than 1 year.\n Topic: MaturityModelForEventLogManagementM2131"}, {"role": "assistant", "content": "SecurityRecommendation\n| summarize arg_max(TimeGenerated, *) by RecommendationDisplayName, AssessedResourceId\n| where RecommendationDisplayName == \"Activity log should be retained for at least one year\"\n| summarize Failed = countif(RecommendationState == \"Unhealthy\"), Passed = countif(RecommendationState == \"Healthy\"), Total = countif(RecommendationState == \"Healthy\" or RecommendationState == \"Unhealthy\") by RecommendationDisplayName, AssessedResourceId\n| extend PassedControls = (Passed/todouble(Total))*100\n| extend RemediationLink = strcat('https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/22')\n| project RecommendationDisplayName, AssessedResourceId, Total, PassedControls, Passed, Failed, RemediationLink, LastObserved=now()\n| where Failed > 0\n| sort by Failed desc\n| extend URLCustomEntity = RemediationLink, ResourceId = AssessedResourceId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses Security events from the \"AD FS Auditing\" provider to detect suspicious authentication events on an AD FS server. The results then get correlated with events from the Windows Filtering Platform (WFP) to detect suspicious incoming network traffic on port 80 on the AD FS server.\nThis could be a sign of a threat actor trying to use replication services on the AD FS server to get its configuration settings and extract sensitive information such as AD FS certificates. In order to use this query you need to enable AD FS auditing on the AD FS Server.\nReferences:\nhttps://docs.microsoft.com/windows-server/identity/ad-fs/troubleshooting/ad-fs-tshoot-logging\nhttps://twitter.com/OTR_Community/status/1387038995016732672\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// Adjust this to use a longer timeframe to identify ADFS servers\n//let lookback = 0d;\n// Adjust this to adjust detection timeframe\n//let timeframe = 1d;\n// SamAccountName of AD FS Service Account. Filter on the use of a specific AD FS user account\n//let adfsuser = 'adfsadmin';\n// Identify ADFS Servers\nlet ADFS_Servers = (\n    SecurityEvent\n    //| where TimeGenerated > ago(timeframe+lookback)\n    | where EventSourceName == 'AD FS Auditing'\n    | distinct Computer\n);\nSecurityEvent\n    //| where TimeGenerated > ago(timeframe)\n    | where Computer in~ (ADFS_Servers)\n    // A token of type 'http://schemas.microsoft.com/ws/2006/05/servicemodel/tokens/SecureConversation'\n    // for relying party '-' was successfully authenticated.\n    | where EventID == 412\n    | extend EventData = parse_xml(EventData).EventData.Data\n    | extend InstanceId = tostring(EventData[0])\n| join kind=inner\n(\n    SecurityEvent\n    //| where TimeGenerated > ago(timeframe)\n    | where Computer in~ (ADFS_Servers)\n    // Events to identify caller identity from event 412\n    | where EventID == 501\n    | extend EventData = parse_xml(EventData).EventData.Data\n    | where tostring(EventData[1]) contains 'identity/claims/name'\n    | extend InstanceId = tostring(EventData[0])\n    | extend ClaimsName = tostring(EventData[2])\n    // Filter on the use of a specific AD FS user account\n    //| where ClaimsName contains adfsuser\n)\non $left.InstanceId == $right.InstanceId\n| join kind=inner\n(\n    SecurityEvent\n    | where EventID == 5156\n    | where Computer in~ (ADFS_Servers)\n    | extend EventData = parse_xml(EventData).EventData.Data\n    | mv-expand bagexpansion=array EventData\n    | evaluate bag_unpack(EventData)\n    | extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n    | evaluate pivot(Key, any(Value), TimeGenerated, Computer, EventID)\n    | extend DestPort = column_ifexists(\"DestPort\", \"\"),\n          Direction = column_ifexists(\"Direction\", \"\"),\n          Application = column_ifexists(\"Application\", \"\"),\n          DestAddress = column_ifexists(\"DestAddress\", \"\"),\n          SourceAddress = column_ifexists(\"SourceAddress\", \"\"),\n          SourcePort = column_ifexists(\"SourcePort\", \"\")\n    // Look for inbound connections from endpoints on port 80\n    | where DestPort == 80 and Direction == '%%14592' and Application == 'System'\n    | where DestAddress !in ('::1','0:0:0:0:0:0:0:1')\n)\non $left.Computer == $right.Computer\n| project TimeGenerated, Computer, ClaimsName, SourceAddress, SourcePort\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(ClaimsName, @'\\')[1]), AccountNTDomain = tostring(split(ClaimsName, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query tracks rare processes on hosts, using entropy to highlight unusual activity. Lower Weight/ProcessEntropy scores suggest higher interest.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// exclude when over # of machines have the process\nlet excludeThreshold = 10;\n// exclude when more than percent (default 10%)\nlet ratioHighCount = 0.1;\n// exclude when less than percent (default 3%)\nlet ratioMidCount = 0.03;\n// Process count limit in one day per machine, perf improvement (default every 20 minutes for 24 hours - 3*24 = 72)\nlet procLimit = 3*24;\n// Decrease possibility of hitting memory limit by removing high process count items across all machines (default every 10 minutes for 24 hours - 6*24 = 144)\nlet maxLimit = 6*24;\nlet removeHigh = SecurityEvent \n| where TimeGenerated >= ago(1d)\n| where EventID == 4688 | summarize count() by NewProcessName = tolower(NewProcessName) | where count_ > maxLimit\n| summarize make_set(NewProcessName, 1000);\nlet SecEvents = SecurityEvent\n| where TimeGenerated >= ago(1d)\n| where EventID == 4688 | where tolower(NewProcessName) !in~ (removeHigh)\n// removing common items that may still show up in small environments, add here if you have additional exclusions \n| where NewProcessName !has ':\\\\Windows\\\\System32\\\\conhost.exe' and ParentProcessName !has ':\\\\Windows\\\\System32\\\\conhost.exe' \n| where ParentProcessName !has ':\\\\Windows\\\\System32\\\\wuauclt.exe' and NewProcessName !has':\\\\Windows\\\\System32\\\\wuauclt.exe' and NewProcessName !startswith 'C:\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\Install\\\\AM_Delta_Patch_' \n| where ParentProcessName !has ':\\\\WindowsAzure\\\\GuestAgent_' and NewProcessName !has ':\\\\WindowsAzure\\\\GuestAgent_' \n| where ParentProcessName !has ':\\\\WindowsAzure\\\\WindowsAzureNetAgent_' and NewProcessName !has ':\\\\WindowsAzure\\\\WindowsAzureNetAgent_' \n| where ParentProcessName !has ':\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\platform\\\\' and NewProcessName !has \"\\\\Windows Defender Advanced Threat Protection\\\\SenseCncProxy.exe\" and NewProcessName !has \"\\\\Windows Defender Advanced Threat Protection\\\\SenseIR.exe.exe\" \n| where NewProcessName !has ':\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\platform\\\\' \n| where NewProcessName !has ':\\\\Windows\\\\Microsoft.NET\\\\Framework' and not(NewProcessName endswith '\\\\ngentask.exe' or NewProcessName endswith '\\\\ngen.exe') \n| where ParentProcessName !has ':\\\\Windows\\\\Microsoft.NET\\\\Framework' and not(ParentProcessName endswith '\\\\ngentask.exe' or ParentProcessName endswith '\\\\ngen.exe') \n| where NewProcessName !has ':\\\\Windows\\\\System32\\\\taskhostw.exe' and ParentProcessName !has ':\\\\Windows\\\\System32\\\\taskhostw.exe' \n| where ParentProcessName !has ':\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\Install\\\\' and not(NewProcessName endswith '\\\\MpSigStub.exe') \n| where NewProcessName !has ':\\\\Program Files\\\\Microsoft Monitoring Agent\\\\Agent\\\\Health Service State\\\\' and ParentProcessName !has ':\\\\Program Files\\\\Microsoft Monitoring Agent\\\\Agent\\\\MonitoringHost.exe' \n| where NewProcessName !has ':\\\\Windows\\\\servicing\\\\trustedinstaller.exe' \n| where ParentProcessName !has ':\\\\Program Files\\\\Microsoft Dependency Agent\\\\bin\\\\MicrosoftDependencyAgent.exe' \n| where ParentProcessName !has ':\\\\Program Files (x86)\\\\Microsoft\\\\EdgeUpdate\\\\MicrosoftEdgeUpdate.exe'\n| project TimeGenerated, EventID, Computer, SubjectUserSid, Account, AccountType, Process, NewProcessName, CommandLine, ParentProcessName, _ResourceId, SourceComputerId;\nlet Exclude = SecEvents \n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ExcludeCompCount = dcount(Computer), ExcludeProcCount = count() by Process \n// Removing general limit for noise in one day \n| extend timediff = iff(datetime_diff('day', EndTime, StartTime) > 0, datetime_diff('day', EndTime, StartTime), 1) \n// Default exclude of 48 (2 per hour) or more executions in 24 hours on a given machine \n| where ExcludeProcCount > procLimit*timediff \n// Removing noisy processes for an environment, adjust as needed \n| extend compRatio = ExcludeCompCount/toreal(ExcludeProcCount) \n| where compRatio == 0 or (ExcludeCompCount > excludeThreshold and compRatio < ratioHighCount) or (ExcludeCompCount between (2 .. excludeThreshold) and compRatio < ratioMidCount);\nlet AllSecEvents =  \nSecEvents | project Computer, Process \n| join kind= leftanti (  \nSecEvents \n// Removing general limit for noise in one day \n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), procCount = count() by Computer, Process \n| extend timediff = iff(datetime_diff('day', EndTime, StartTime) > 0, datetime_diff('day', EndTime, StartTime), 1) \n// Default exclude 48 (2 per hour) or more executions in 24 hours on a given machine to remove them from overall comparison list \n| where procCount > procLimit*timediff \n) on Computer, Process \n| project Computer, Process;\n// Removing noisy process from full list \nlet Include = materialize(AllSecEvents \n| join kind= leftanti ( \nExclude \n) on Process);\n// Identifying prevalence for a given process in the environment \nlet DCwPC = materialize(Include \n| summarize DistinctHostsProcessCount = dcount(Computer) by Process \n| join kind=inner ( \nInclude \n) on Process \n| distinct Computer, Process, DistinctHostsProcessCount);\n// Getting the Total process count on each host to use as the denominator in the entropy calc \nlet AHPC = materialize(Include \n| summarize AllHostsProcessCount = count() by Computer \n| join kind=inner ( \nInclude \n) on Computer \n| distinct Computer, Process, AllHostsProcessCount \n//Getting a decimal value for later computation \n| extend AHPCValue = todecimal(AllHostsProcessCount));\n// Need the count of each class in my bucket or also said as count of ProcName(Class) per Host(Bucket) for use in the entropy calc \nlet PCoH = Include \n| summarize ProcessCountOnHost = count() by Computer, Process \n| join kind=inner ( \nInclude \n) on Computer,Process \n| distinct Computer, Process, ProcessCountOnHost \n//Getting a decimal value for later computation \n| extend PCoHValue = todecimal(ProcessCountOnHost); \nlet Combined = DCwPC \n| join ( \nAHPC \n) on Computer, Process \n| join ( \nPCoH \n) on Computer, Process;\nlet Results = Combined \n// Entropy calculation \n| extend ProcessEntropy = -log2(PCoHValue/AHPCValue)*(PCoHValue/AHPCValue) \n// Calculating Weight, see details in description \n| extend Weight = toreal(ProcessEntropy*ProcessCountOnHost*DistinctHostsProcessCount) \n// Remove or increase value to see processes with low entropy, meaning more common. \n| where Weight <= 100\n| project Computer, Process, Weight , ProcessEntropy, AllHostsProcessCount, ProcessCountOnHost, DistinctHostsProcessCount; \n// Join back full entry \nResults \n| join kind= inner ( \nSecEvents\n| project TimeGenerated, EventID, Computer, SubjectUserSid, Account, AccountType, Process, NewProcessName, CommandLine, ParentProcessName, _ResourceId, SourceComputerId \n) on Computer, Process \n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ResultCount = count() by EventID, Computer, SubjectUserSid, Account, AccountType, Weight, ProcessEntropy,  \nProcess, NewProcessName, CommandLine, ParentProcessName, AllHostsProcessCount, ProcessCountOnHost, DistinctHostsProcessCount, _ResourceId, SourceComputerId\n| project-reorder StartTime, EndTime, ResultCount, EventID, Computer, SubjectUserSid, Account, AccountType, Weight, ProcessEntropy,  \nProcess, NewProcessName, CommandLine, ParentProcessName, AllHostsProcessCount, ProcessCountOnHost, DistinctHostsProcessCount, _ResourceId, SourceComputerId\n| sort by Weight asc, ProcessEntropy asc, NewProcessName asc \n| extend timestamp = StartTime, NTDomain = split(Account, '\\\\', 0)[0], Name = split(Account, '\\\\', 1)[0], HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checks for Squid proxy events in Syslog associated with common mining pools. This query presumes the default Squid log format is being used.\n http://www.squid-cache.org/Doc/config/access_log/\n Topic: Syslog"}, {"role": "assistant", "content": "let DomainList = dynamic([\"monerohash.com\", \"do-dear.com\", \"xmrminerpro.com\", \"secumine.net\", \"xmrpool.com\", \"minexmr.org\", \"hashanywhere.com\", \"xmrget.com\",\n\"mininglottery.eu\", \"minergate.com\", \"moriaxmr.com\", \"multipooler.com\", \"moneropools.com\", \"xmrpool.eu\", \"coolmining.club\", \"supportxmr.com\",\n\"minexmr.com\", \"hashvault.pro\", \"xmrpool.net\", \"crypto-pool.fr\", \"xmr.pt\", \"miner.rocks\", \"walpool.com\", \"herominers.com\", \"gntl.co.uk\", \"semipool.com\",\n\"coinfoundry.org\", \"cryptoknight.cc\", \"fairhash.org\", \"baikalmine.com\", \"tubepool.xyz\", \"fairpool.xyz\", \"asiapool.io\", \"coinpoolit.webhop.me\", \"nanopool.org\",\n\"moneropool.com\", \"miner.center\", \"prohash.net\", \"poolto.be\", \"cryptoescrow.eu\", \"monerominers.net\", \"cryptonotepool.org\", \"extrmepool.org\", \"webcoin.me\",\n\"kippo.eu\", \"hashinvest.ws\", \"monero.farm\", \"supportxmr.com\", \"xmrpool.eu\", \"linux-repository-updates.com\", \"1gh.com\", \"dwarfpool.com\", \"hash-to-coins.com\",\n\"hashvault.pro\", \"pool-proxy.com\", \"hashfor.cash\", \"fairpool.cloud\", \"litecoinpool.org\", \"mineshaft.ml\", \"abcxyz.stream\", \"moneropool.ru\", \"cryptonotepool.org.uk\",\n\"extremepool.org\", \"extremehash.com\", \"hashinvest.net\", \"unipool.pro\", \"crypto-pools.org\", \"monero.net\", \"backup-pool.com\", \"mooo.com\", \"freeyy.me\", \"cryptonight.net\",\n\"shscrypto.net\"]);\nSyslog\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage),\n        SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage),\n        Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage),\n        HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n        User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n        RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n        Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n        Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n        contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where HTTP_Status_Code == '200'\n| where Domain contains \".\"\n| where Domain has_any (DomainList)\n| extend AccountName = tostring(split(User, \"@\")[0]), AccountUPNSuffix = tostring(split(User, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match for a SQL Injection attack in the Front Door Premium WAF logs. The threshold value in the query can be changed as per your infrastructures requirements.\nReferences: https://owasp.org/Top10/A03_2021-Injection/\n Topic: Azure Web Application Firewall (WAF)"}, {"role": "assistant", "content": "let Threshold = 1;\nAzureDiagnostics\n| where Category =~ \"FrontDoorWebApplicationFirewallLog\"\n| where action_s =~ \"AnomalyScoring\"\n| where details_msg_s has \"SQL Injection\"\n| parse details_data_s with MessageText \"Matched Data:\" MatchedData \"AND \" * \"table_name FROM \" TableName \" \" *\n| project trackingReference_s, host_s, requestUri_s, TimeGenerated, clientIP_s, details_matches_s, details_msg_s, details_data_s, TableName, MatchedData\n| join kind = inner(\nAzureDiagnostics\n| where Category =~ \"FrontDoorWebApplicationFirewallLog\"\n| where action_s =~ \"Block\") on trackingReference_s\n| summarize URI_s = make_set(requestUri_s,100), Table = make_set(TableName,100), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), TrackingReference = make_set(trackingReference_s,100), Matched_Data = make_set(MatchedData,100), Detail_Data = make_set(details_data_s,100), Detail_Message = make_set(details_msg_s,100), Total_TrackingReference = dcount(trackingReference_s) by clientIP_s, host_s, action_s\n| where Total_TrackingReference >= Threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when root user login from uncommon IP address.\n Topic: VMware vCenter"}, {"role": "assistant", "content": "let p_lookback = 14d;\nlet t_lookback = 1h;\nlet root_ips = vCenter\n| where TimeGenerated between (ago(p_lookback) .. ago(t_lookback))\n| where EventType has_all ('UserLoginSessionEvent', 'root', 'logged in')\n| summarize make_set(SourceIP,128);\nvCenter\n| where TimeGenerated > ago(t_lookback)\n| where EventType   has_all ('UserLoginSessionEvent', 'root', 'logged in')\n| where SourceIP   !in (root_ips)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of top sources with alerts.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(SrcIpAddr)\n| summarize IpCount = count() by SrcIpAddr\n| top 20 by IpCount desc \n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query helps to detect a change in the users role to admin or owner.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where DvcAction in~ ('role_change_to_admin', 'role_change_to_owner')\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects suspicious connections from forbidden countries.\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "let bl_countries = dynamic(['CH', 'RU']);\nPaloAltoCDLEvent \n| where EventResourceId =~ 'TRAFFIC'\n| where MaliciousIPCountry  in (bl_countries)\n| summarize count() by DstUsername, SrcIpAddr \n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies the host and account that executed AdFind, by hash and filename, in addition to the flags commonly utilized by various threat actors during the reconnaissance phase.\n Topic: Attacker Tools Threat Protection Essentials"}, {"role": "assistant", "content": "let args = dynamic([\"objectcategory\",\"domainlist\",\"dcmodes\",\"adinfo\",\"trustdmp\",\"computers_pwdnotreqd\",\"Domain Admins\", \"objectcategory=person\", \"objectcategory=computer\", \"objectcategory=*\",\"dclist\"]);\nlet parentProcesses = dynamic([\"pwsh.exe\",\"powershell.exe\",\"cmd.exe\"]);\nDeviceProcessEvents\n//looks for execution from a shell\n| where InitiatingProcessFileName in~ (parentProcesses)\n// main filter\n| where FileName =~ \"AdFind.exe\" or SHA256 == \"c92c158d7c37fea795114fa6491fe5f145ad2f8c08776b18ae79db811e8e36a3\"\n   // AdFind common Flags to check for from various threat actor TTPs\n    or ProcessCommandLine has_any (args)\n| extend HostName = split(DeviceName, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(DeviceName, '.'), 1, -1), '.'), FileHashAlgorithm = \"SHA256\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query counts the number of unique subdomains for each TLD.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "let threshold = 100;\nUbiquitiAuditEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(DnsQuery)\n| extend replaced = replace(@'\\.$', @'', DnsQuery)\n| extend Domain = extract(@'.*\\.(.*\\.[a-z]+)', 1, replaced)\n| extend fqdn = extract(@'(.*)\\..*\\.[a-z]+', 1, replaced)\n| summarize FQDNs = dcount(fqdn) by Domain\n| where FQDNs > threshold\n| extend HostCustomEntity = Domain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which low sensitivity financial information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let lowRisk = 1;\nlet financial = 'Financial Information';\nCognniIncidents_CL \n| where Severity == lowRisk\n| where informationType_s == financial\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in EmailEvents table from any Email IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet EmailEvents_ = materialize(EmailEvents | where isnotempty(RecipientEmailAddress) and isnotempty(SenderFromAddress) and TimeGenerated >= ago(dt_lookBack) and DeliveryAction !has \"Blocked\" | project-rename  EmailEvents_TimeGenerated = TimeGenerated | extend SenderFromAddress = tolower(SenderFromAddress) | extend RecipientEmailAddress = tolower(RecipientEmailAddress));\nlet SenderAddresses = EmailEvents_ | distinct  SenderFromAddress | summarize make_list(SenderFromAddress);\nlet RecipientAddresses = EmailEvents_ | distinct  RecipientEmailAddress | summarize make_list(RecipientEmailAddress);\nlet TI = materialize(ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack)\n| where isnotempty(EmailSenderAddress)\n| extend TI_EmailAddress = tolower(EmailSenderAddress)\n| where TI_EmailAddress in (SenderAddresses) or TI_EmailAddress in (RecipientAddresses)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now());\n(union\n  (TI | join kind=innerunique (EmailEvents_) on $left.TI_EmailAddress == $right.SenderFromAddress),\n  (TI | join kind=innerunique (EmailEvents_) on $left.TI_EmailAddress == $right.RecipientEmailAddress))\n| where EmailEvents_TimeGenerated < ExpirationDateTime\n| summarize EmailEvents_TimeGenerated = arg_max(EmailEvents_TimeGenerated, *) by IndicatorId, TI_EmailAddress\n| project EmailEvents_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DomainName, RecipientEmailAddress, SenderFromAddress, Subject, ConfidenceLevel, Url, Type, TI_EmailAddress, TrafficLightProtocolLevel, DeliveryAction, DeliveryLocation, EmailDirection\n| extend Name = tostring(split(RecipientEmailAddress, '@', 0)[0]), UPNSuffix = tostring(split(RecipientEmailAddress, '@', 1)[0])\n| extend timestamp = EmailEvents_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects spikes (deviations from avarage) in user activity.\n Topic: Box"}, {"role": "assistant", "content": "let lbperiod_start = 14d;\nlet lbperiod_end = 24h;\nlet user_actions_1 = BoxEvents\n| where TimeGenerated between (ago(lbperiod_start) .. ago(lbperiod_end))\n| summarize TotalEvents = count() by SourceName\n| project TotalEvents, User = SourceName;\nlet user_actions_2 = BoxEvents\n| where TimeGenerated between (ago(lbperiod_start) .. ago(lbperiod_end))\n| summarize TotalEvents = count() by SrcUserName\n| project TotalEvents, User = SrcUserName;\nlet TotalActions = (union user_actions_1, user_actions_2)\n| summarize TotalEvents = count() by User\n| extend EventsPerDay = TotalEvents / 29\n| extend k = 1;\nlet actions1_last_h = BoxEvents\n| summarize TotalEventsH = count() by SourceName\n| project TotalEventsH, User = SourceName;\nlet actions2_last_h = BoxEvents\n| summarize TotalEventsH = count() by SourceName\n| project TotalEventsH, User = SourceName;\nlet TotalActionsLastHour = (union actions1_last_h, actions2_last_h)\n| summarize TotalEventsH = sum(TotalEventsH) by User\n| extend k = 1;\nTotalActions\n| join (TotalActionsLastHour) on k\n| where EventsPerDay > TotalEventsH\n| project User\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies anomalies if the number of documents uploaded or downloaded from device(s) associated with a previously unseen user agent exceeds a threshold (default is 5) and deviation (default is 25%).\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let threshold = 5;\nlet szSharePointFileOperation = \"SharePointFileOperation\";\nlet szOperations = dynamic([\"FileDownloaded\", \"FileUploaded\"]);\nlet starttime = 14d;\nlet endtime = 1d;\n\n// OfficeActivity - Base Events\nlet BaseeventsOffice = OfficeActivity\n    | where TimeGenerated between (ago(starttime)..ago(endtime))\n    | where RecordType =~ szSharePointFileOperation\n    | where Operation in~ (szOperations)\n    | where isnotempty(UserAgent);\n\n// OfficeActivity - Frequent User Agents\nlet FrequentUAOffice = BaseeventsOffice\n    | summarize FUACount = count() by UserAgent, RecordType, Operation\n    | where FUACount >= threshold\n    | distinct UserAgent;\n\n// OfficeActivity - User Baseline\nlet UserBaseLineOffice = BaseeventsOffice\n    | summarize Count = count() by UserId, Operation, Site_Url\n    | summarize AvgCount = avg(Count) by UserId, Operation, Site_Url;\n\n// OfficeActivity - Recent User Activity\nlet RecentActivityOffice = OfficeActivity\n    | where TimeGenerated > ago(endtime)\n    | where RecordType =~ szSharePointFileOperation\n    | where Operation in~ (szOperations)\n    | where isnotempty(UserAgent)\n    | where UserAgent in~ (FrequentUAOffice)\n    | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OfficeObjectIdCount = dcount(OfficeObjectId), OfficeObjectIdList = make_set(OfficeObjectId), UserAgentSeenCount = count()\n        by RecordType, Operation, UserAgent, UserType, UserId, ClientIP , OfficeWorkload, Site_Url;\n\n// EnrichedMicrosoft365AuditLogs - Base Events\nlet BaseeventsEnriched = EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated between (ago(starttime)..ago(endtime))\n    | where RecordType == szSharePointFileOperation\n    | where Operation in (szOperations)\n    | extend UserAgent = tostring(parse_json(tostring(AdditionalProperties)).UserAgent)\n    | extend Site_Url = tostring(parse_json(tostring(AdditionalProperties)).SiteUrl)\n    | where isnotempty(UserAgent);\n\n// EnrichedMicrosoft365AuditLogs - Frequent User Agents\nlet FrequentUAEnriched = BaseeventsEnriched\n    | summarize FUACount = count() by UserAgent, RecordType, Operation\n    | where FUACount >= threshold\n    | distinct UserAgent;\n\n// EnrichedMicrosoft365AuditLogs - User Baseline\nlet UserBaseLineEnriched = BaseeventsEnriched\n    | summarize Count = count() by UserId, Operation, Site_Url\n    | summarize AvgCount = avg(Count) by UserId, Operation, Site_Url;\n\n// EnrichedMicrosoft365AuditLogs - Recent User Activity\nlet RecentActivityEnriched = EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated > ago(endtime)\n    | where RecordType == szSharePointFileOperation\n    | where Operation in (szOperations)\n    | extend UserAgent = tostring(parse_json(tostring(AdditionalProperties)).UserAgent)\n    | extend Site_Url = tostring(parse_json(tostring(AdditionalProperties)).SiteUrl)\n    | extend  ClientIP = ClientIp\n    | where isnotempty(UserAgent)\n    | where UserAgent in (FrequentUAEnriched)\n    | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ObjectIdCount = dcount(ObjectId), ObjectIdList = make_set(ObjectId), UserAgentSeenCount = count()\n        by RecordType, Operation, UserAgent, UserId,ClientIP, Site_Url;\n\n// Combine Baseline and Recent Activity, Calculate Deviation, and Deduplicate\nlet UserBehaviorAnalysisOffice = UserBaseLineOffice\n    | join kind=inner (RecentActivityOffice) on UserId, Operation, Site_Url\n    | extend Deviation = abs(UserAgentSeenCount - AvgCount) / AvgCount;\n\nlet UserBehaviorAnalysisEnriched = UserBaseLineEnriched\n    | join kind=inner (RecentActivityEnriched) on UserId, Operation, Site_Url\n    | extend Deviation = abs(UserAgentSeenCount - AvgCount) / AvgCount;\n\n// Combine Office and Enriched Logs\nlet CombinedUserBehaviorAnalysis = UserBehaviorAnalysisOffice\n    | union UserBehaviorAnalysisEnriched;\n\n// Filter and Format Final Results\nCombinedUserBehaviorAnalysis\n    | where Deviation > 0.25\n    | extend UserIdName = tostring(split(UserId, '@')[0]), \n             UserIdUPNSuffix = tostring(split(UserId, '@')[1])\n    | project-reorder StartTimeUtc, EndTimeUtc, UserAgent, UserAgentSeenCount, UserId, ClientIP, Site_Url\n    | order by UserAgentSeenCount desc, UserAgent asc, UserId asc, Site_Url asc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies someone using machine certificates to request Kerberos Ticket Granting Tickets (TGTs).\n Topic: FalconFriday"}, {"role": "assistant", "content": "let timeframe=1h;\nSecurityEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4768\n| project TimeGenerated, Computer, TargetAccount, EventData=parse_xml(EventData)\n| mv-apply d=EventData.EventData.Data on\n(\n  where d[\"@Name\"]==\"CertIssuerName\"\n  | project CIN=tostring(d[\"#text\"])\n)\n| where not(isempty(CIN))\n// <DECISION - 1>\n// In some environments, we see a lot of certs starting with a sid and containing live.com. Comment out the next line if you have that as well.\n//| where not(CIN startswith \"S-1-\")\n// <DECISION - 2>\n// If you're seeing a significant number of machine accounts, it might be due to 802.1X or SCCM. https://twitter.com/MagnusMOD/status/1407800853088591872?s=20.\n// The following line allows you to filter out all endpoints. This does introduce a blindspot, and you need a custom function which provides data about (on-prem) AD machines.\n// Alternatively, you can use DeviceInfo, if you're ingesting that data from MDE.\n| parse CIN with \"CN=\" MachineName\n//| join kind=leftouter  MyCustomLookupFunction on $left.MachineName == $right.CN\n//| where not(OperatingSystem startswith \"Windows 10\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses Normalized Process Events to hunt Certutil activities.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "_ASim_ProcessEvent_Create\n| where Process has \"certutil.exe\"\n// Uncomment the next line and add your commandLine Whitelisted/ignore terms. For example \"urlcache\"\n// | where CommandLine !contains (\"urlcache\") \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Matches domain name IOCs related to Forest Blizzard group activity with CommonSecurityLog and SecurityAlert dataTypes.\nThe query is scoped in the time window that these IOCs were active.\n Topic: Legacy IOC based Threat Protection"}, {"role": "assistant", "content": "\nlet STRONTIUM_IPS = dynamic([\"82.118.242.171\" , \"167.114.153.55\" , \"94.237.37.28\", \"31.220.61.251\" , \"128.199.199.187\" ]);\n(union isfuzzy=true\n(CommonSecurityLog\n| where TimeGenerated between (startofday(datetime(2019-02-01)) .. endofday(datetime(2019-08-05)))\n| where SourceIP in (STRONTIUM_IPS) or DestinationIP in (STRONTIUM_IPS)\n| extend IPCustomEntity = SourceIP\n),\n(SecurityAlert\n| where TimeGenerated between (startofday(datetime(2019-02-01)) .. endofday(datetime(2019-08-05)))\n| extend RemoteAddress = iff(ExtendedProperties has \"RemoteAddress\", tostring(parse_json(ExtendedProperties)[\"RemoteAddress\"]), \"None\")\n| where RemoteAddress != \"None\"\n| where RemoteAddress in (STRONTIUM_IPS)\n| extend IPCustomEntity = RemoteAddress\n) \n)\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows failed DNS requests due to timeout.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "UbiquitiAuditEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(DnsQuery)\n| where EventMessage =~ 'DNS request timed out'\n| extend Name = DnsQuery\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible exploit or execute operation.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where EventMessage has \"Behavior Monitoring\"\n| extend DeviceCustomNumber3 = coalesce(column_ifexists(\"FieldDeviceCustomNumber3\", long(null)),DeviceCustomNumber3)\n| where Event_Type == 2048 or DeviceCustomNumber3 == 403 or DeviceCustomNumber3 == 601\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query helps to detect attempts to create installation media from domain controllers, either remotely or locally using a commandline tool called ntdsutil. These media are intended to be used in the installation of new domain controllers.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "(union isfuzzy=true \n(SecurityEvent\n| where EventID == 4688\n| where CommandLine has_all (\"ntdsutil\", \"ac i ntds\", \"create full\")\n| project TimeGenerated, Computer, Account, Process, ProcessId, NewProcessName, NewProcessId, CommandLine, ParentProcessName, _ResourceId, SourceComputerId, SubjectLogonId, SubjectUserSid\n),\n(WindowsEvent\n| where EventID == 4688 \n| extend CommandLine = tostring(EventData.CommandLine)\n| where CommandLine has_all (\"ntdsutil\", \"ac i ntds\", \"create full\")\n| extend NewProcessName = tostring(EventData.NewProcessName), NewProcessId = tostring(EventData.NewProcessId)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1]),  ProcessId = tostring(EventData.ProcessId)\n| extend Account =  strcat(EventData.SubjectDomainName,\"\\\\\", EventData.SubjectUserName)\n| extend ParentProcessName = tostring(EventData.ParentProcessName) \n| extend SubjectUserName = tostring(EventData.SubjectUserName), SubjectDomainName = tostring(EventData.SubjectDomainName), SubjectLogonId = tostring(EventData.SubjectLogonId)\n| project TimeGenerated, Computer, Account, Process, ProcessId, NewProcessName, NewProcessId, CommandLine, ParentProcessName, _ResourceId, SubjectUserName, SubjectDomainName, SubjectLogonId\n) \n)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule helps to detect Powershell user-agent activity by an unusual process other than a web browser.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "Cisco_Umbrella\n| where EventType == \"proxylogs\"\n| where HttpUserAgentOriginal contains \"WindowsPowerShell\"\n| extend Message = \"Windows PowerShell User Agent\"\n| project TimeGenerated, Message, SrcIpAddr, DstIpAddr, UrlOriginal, HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects mails with suspicious links.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "let dl_cat = dynamic(['Illegal Downloads']);\nCiscoSEGEvent\n| where NetworkDirection =~ 'Incoming'\n| where tostring(AdditionalFields) has 'ESAURLDetails'\n| extend link_cat = extract(@\"'Category': '(.*?)'\", 1, tostring(AdditionalFields))\n| where link_cat in~ (dl_cat)\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Multi-Factor Authentication (MFA) helps you to prevent credential compromise. This alert identifies logins to the AWS Management Console without MFA.\nYou can limit this detection to trigger for adminsitrative accounts if you do not have MFA enabled on all accounts.\nThis is done by looking at the eventName ConsoleLogin and if the AdditionalEventData field indicates MFA was NOT used and the ResponseElements field indicates NOT a Failure. Thereby indicating that a non-MFA login was successful.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName =~ \"ConsoleLogin\"\n| extend MFAUsed = tostring(parse_json(AdditionalEventData).MFAUsed), LoginResult = tostring(parse_json(ResponseElements).ConsoleLogin), indexId = indexof(tostring(UserIdentityPrincipalid),\":\")\n| where MFAUsed !~ \"Yes\" and LoginResult !~ \"Failure\"\n| where SessionIssuerUserName !contains \"AWSReservedSSO\"\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, LoginResult, MFAUsed, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityAccountId,  UserIdentityPrincipalid, UserAgent,\nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, indexId\n| extend timestamp = StartTimeUtc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule creates an incident when more than certain number of Dnsniff events are generated from a host Topic: ForescoutHostPropertyMonitor"}, {"role": "assistant", "content": "ForescoutHostProperties_CL | where HostProperties_DnsniffEvent_s matches regex \"DNS Query Type:.A;DNS Query/Response:.Query\" | extend ipaddress = iif(isnotempty(HostProperties_Ipv4Addr_s), HostProperties_Ipv4Addr_s, (iif(isnotempty(HostProperties_Ipv6Addr_s), HostProperties_Ipv6Addr_s, HostProperties_IpAddr_s))) | summarize NumEvents_d =count() by ipaddress, HostProperties_DnsniffEvent_s, HostProperties_EmIpAddr_s | where NumEvents_d > 2 | where isnotempty(ipaddress) and isnotempty(HostProperties_EmIpAddr_s) | sort by NumEvents_d asc | project NumEvents_d, ipaddress, HostProperties_EmIpAddr_s"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects first connection to an unpopular website (possible malicious payload delivery).\n Topic: Detections"}, {"role": "assistant", "content": "let domain_lookBack= 14d;\nlet timeframe = 1d;\nlet top_million_list = Cisco_Umbrella\n| where EventType == \"proxylogs\"\n| where TimeGenerated > ago(domain_lookBack) and TimeGenerated < ago(timeframe)\n| extend Hostname = parse_url(UrlOriginal)[\"Host\"]\n| summarize count() by tostring(Hostname)\n| top 1000000 by count_\n| summarize make_list(Hostname);\nCisco_Umbrella\n| where EventType == \"proxylogs\"\n| where TimeGenerated > ago(timeframe)\n| extend Hostname = parse_url(UrlOriginal)[\"Host\"]\n| where Hostname !in (top_million_list)\n| extend Message = \"Connect to unpopular website (possible malicious payload delivery)\"\n| project Message, SrcIpAddr, DstIpAddr,UrlOriginal, TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection mechanism identifies situations where multiple client errors originate from a single source within a limited time frame.\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "// HTTP response status codes indicate whether a specific HTTP request has been successfully completed.\n// Please refer this for more details: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\nlet threshold = 100; // You can set threshold value that suits your environment\n_Im_WebSession(starttime=ago(1h))\n| where toint(EventResultDetails) between (400 .. 499)\n| summarize\n    TotalErrorCount = count(),\n    EventStartTime = min(TimeGenerated),\n    EventEndTime = max(TimeGenerated),\n    URLs=make_set(Url, 100),\n    EventResultDetailsSet=make_set(EventResultDetails,10)\n    by SrcIpAddr, bin(TimeGenerated, 5m), SrcUsername, SrcHostname\n| where TotalErrorCount > threshold\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\"), Threshold=threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects batches of distinct SQL queries that execute (or attempt to) commands that could indicate potential security issues - such as attempts to execute shell commands (e.g. for running illegitimate code).\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet hotwords = pack_array('xp_cmdshell', 'ps.exe', 'powershell', 'cmd.exe', 'msiexec', '<script>'); // List of monitored hot words.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | extend hasHotword = iff(Statement has_any (hotwords), 1, 0)\n    | summarize countEvents = count(), countStatements = dcount(Statement)\n        , countStatementsWithHotwords = dcountif(Statement, hasHotword == 1)\n        , countFailedStatementsWithHotwords = dcountif(Statement, (hasHotword == 1) and (Error > 0))\n        , countSuccessfulStatementsWithHotwords = dcountif(Statement, ((hasHotword == 1)) and (Error == 0))\n        , anyMonitoredStatement = anyif(Statement, (hasHotword == 1))\n        , anySuccessfulMonitoredStatement = anyif(Statement, (hasHotword == 1) and (Error == 0))\n        , anyInfo = anyif(AdditionalInfo, hasHotword == 1)\n        , hotWord = anyif(extract(strcat_array(hotwords, '|'), 0, tolower(Statement)), hasHotword == 1)\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId    \n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithHotwords = dcountif(timeSlice, countStatementsWithHotwords >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsHotwordAnomalyOnStatement = iff(((countStatementsWithHotwords >= monitoredStatementsThreshold) and (countSlicesWithHotwords <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithHotwords/monitoredStatementsThreshold, 0)\n| where IsHotwordAnomalyOnStatement == 'true'\n| sort by countSuccessfulStatementsWithHotwords desc,  anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match for SQL Injection attack in the Application gateway WAF logs. The Threshold value in the query can be changed as per your infrastructures requirement.\n References: https://owasp.org/Top10/A03_2021-Injection/\n Topic: Detections"}, {"role": "assistant", "content": "let Threshold = 3;\nAzureDiagnostics\n| where Category == \"ApplicationGatewayFirewallLog\"\n| where action_s == \"Matched\"\n| project transactionId_g, hostname_s, requestUri_s, TimeGenerated, clientIp_s, Message, details_message_s, details_data_s\n| join kind = inner(\nAzureDiagnostics\n| where Category == \"ApplicationGatewayFirewallLog\"\n| where action_s == \"Blocked\"\n| parse Message with MessageText 'Total Inbound Score: ' TotalInboundScore ' - SQLI=' SQLI_Score ',XSS=' XSS_Score ',RFI=' RFI_Score ',LFI=' LFI_Score ',RCE=' RCE_Score ',PHPI=' PHPI_Score ',HTTP=' HTTP_Score ',SESS=' SESS_Score '): ' Blocked_Reason '; individual paranoia level scores:' Paranoia_Score\n| where Blocked_Reason contains \"SQL Injection Attack\" and toint(SQLI_Score) >=10 and toint(TotalInboundScore) >= 15) on transactionId_g\n| extend Uri = strcat(hostname_s,requestUri_s)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), TransactionID = make_set(transactionId_g), Message = make_set(Message), Detail_Message = make_set(details_message_s), Detail_Data = make_set(details_data_s), Total_TransactionId = dcount(transactionId_g) by clientIp_s, Uri, action_s, SQLI_Score, TotalInboundScore\n| where Total_TransactionId >= Threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for requests from known bots.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "ImpervaWAFCloud\n| where TimeGenerated > ago(24h)\n| where ClientApp =~ 'Bot'\n| summarize count() by SrcIpAddr, NetworkApplicationProtocol\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for suspicious PowerShell commandlet executions, often used by Threat Actors to move laterally, escalate privileges, or exfiltrate data.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "// Adjust the list of suspicious commandlets as needed\nlet SuspiciousPowerShellCommandList = dynamic([\"Get-ADDefaultDomainPasswordPolicy\",\n  \"Get-ADUser\",\n  \"Get-ADComputer\",\n  \"System.Security.Principal.WindowsIdentity]::GetCurrent()\",\n  \"Get-LocalUser\",\n  \"Get-NetTcpConnection\",\n  \"Get-WmiObject\"\n  ]);\nDeviceEvents\n| where ActionType == \"PowerShellCommand\"\n| extend Commandlet = tostring(parse_json(AdditionalFields).Command)\n| where Commandlet has_any (SuspiciousPowerShellCommandList)\n| project TimeGenerated, DeviceName, LocalIP, InitiatingProcessAccountUpn, InitiatingProcessId, InitiatingProcessFileName, InitiatingProcessFolderPath, InitiatingProcessCommandLine\n| extend Username = tostring(split(InitiatingProcessAccountUpn, '@')[0]), UPNSuffix = tostring(split(InitiatingProcessAccountUpn, '@')[1])\n| extend DvcHostname = tostring(split(DeviceName, '.')[0]), DvcDomain = tostring(strcat_array(array_slice(split(DeviceName, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects binary files in uncommon locations.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where isnotempty(SrcFileName)\n| where SrcFilePath contains @'AppData\\Local\\Temp' or SrcFilePath contains @'OUTLOOK_TEMP'\n| extend ext = extract(@\"(.*\\/)?(.*)\", 2, tostring(SrcFilePath))\n| where ext contains 'dll' or ext contains @'ps1' or ext contains @'exe'\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies anomalies using user behavior by setting a threshold for significant changes in file upload/download activities from new IP addresses. It establishes a baseline of typical behavior, compares it to recent activity, and flags deviations exceeding a default threshold of 25.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "// Define a threshold for significant deviations\nlet threshold = 25;\n// Define the name for the SharePoint File Operation record type\nlet szSharePointFileOperation = \"SharePointFileOperation\";\n// Define an array of SharePoint operations of interest\nlet szOperations = dynamic([\"FileDownloaded\", \"FileUploaded\"]);\n// Define the start and end time for the analysis period\nlet starttime = 14d;\nlet endtime = 1d;\n// Define a baseline of normal user behavior\nlet userBaseline = OfficeActivity\n| where TimeGenerated between(ago(starttime)..ago(endtime))\n| where RecordType =~ szSharePointFileOperation\n| where Operation in~ (szOperations)\n| where isnotempty(UserAgent)\n| summarize Count = count() by UserId, Operation, Site_Url, ClientIP\n| summarize AvgCount = avg(Count) by UserId, Operation, Site_Url, ClientIP;\n// Get recent user activity\nlet recentUserActivity = OfficeActivity\n| where TimeGenerated > ago(endtime)\n| where RecordType =~ szSharePointFileOperation\n| where Operation in~ (szOperations)\n| where isnotempty(UserAgent)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), RecentCount = count() by UserId, UserType, Operation, Site_Url, ClientIP, OfficeObjectId, OfficeWorkload, UserAgent;\n// Join the baseline and recent activity, and calculate the deviation\nlet UserBehaviorAnalysis = userBaseline | join kind=inner (recentUserActivity) on UserId, Operation, Site_Url, ClientIP\n| extend Deviation = abs(RecentCount - AvgCount) / AvgCount;\n// Filter for significant deviations\nUserBehaviorAnalysis\n| where Deviation > threshold\n| project StartTimeUtc, EndTimeUtc, UserId, UserType, Operation, ClientIP, Site_Url, OfficeObjectId, OfficeWorkload, UserAgent, Deviation, Count=RecentCount\n| order by Count desc, ClientIP asc, Operation asc, UserId asc\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects user access change.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where EventMessage has \"change_user_access\"\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a user or application modifies the federation settings on the domain or Update domain authentication from Managed to Federated.\nFor example, this alert will trigger when a new Active Directory Federated Service (ADFS) TrustedRealm object, such as a signing certificate, is added to the domain.\nModification to domain federation settings should be rare. Confirm the added or modified target domain/URL is legitimate administrator behavior.\nTo understand why an authorized user may update settings for a federated domain in Office 365, Azure, or Intune, see: https://docs.microsoft.com/office365/troubleshoot/active-directory/update-federated-domain-office-365.\nFor details on security realms that accept security tokens, see the ADFS Proxy Protocol (MS-ADFSPP) specification: https://docs.microsoft.com/openspecs/windows_protocols/ms-adfspp/e7b9ea73-1980-4318-96a6-da559486664b.\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "(union isfuzzy=true\n(\nAuditLogs\n| where OperationName =~ \"Set federation settings on domain\"\n//| where Result =~ \"success\"   // commenting out, as it may be interesting to capture failed attempts\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-expand modifiedProperties\n| extend targetDisplayName = tostring(parse_json(modifiedProperties).displayName)\n),\n(\nAuditLogs\n| where OperationName =~ \"Set domain authentication\"\n//| where Result =~ \"success\"   // commenting out, as it may be interesting to capture failed attempts\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-expand modifiedProperties\n| mv-apply Property = modifiedProperties on\n  (\n      where Property.displayName =~ \"LiveType\"\n      | extend targetDisplayName = tostring(Property.displayName),\n               NewDomainValue = tostring(Property.newValue)\n  )\n| where NewDomainValue has \"Federated\"\n)\n)\n| mv-apply AdditionalDetail = AdditionalDetails on\n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend UserAgent = tostring(AdditionalDetail.value)\n  )\n| extend InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n| project-reorder TimeGenerated, OperationName, InitiatingUserOrApp, AADOperationType, targetDisplayName, Result, InitiatingIpAddress, UserAgent, CorrelationId, TenantId, AADTenantId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection looks for the full_access_as_app permission being granted to an OAuth application with Admin Consent.\nThis permission provide access to all Exchange mailboxes via the EWS API can could be exploited to access sensitive data by being added to a compromised application. The application granted this permission should be reviewed to ensure that it is absolutely necessary for the applications function.\nRef: https://learn.microsoft.com/graph/auth-limit-mailbox-access\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Consent to application\"\n| where TargetResources has \"full_access_as_app\"\n| mv-expand TargetResources\n| extend OAuthAppName = TargetResources.displayName\n| extend ModifiedProperties = TargetResources.modifiedProperties \n| mv-apply Property = ModifiedProperties on \n  (\n      where Property.displayName =~ \"ConsentContext.isAdminConsent\"\n      | extend AdminConsent = tostring(Property.newValue)\n  )\n| mv-apply Property = ModifiedProperties on \n  (\n      where Property.displayName =~ \"ConsentAction.Permissions\"\n      | extend Permissions = tostring(Property.newValue)\n  )\n| mv-apply Property = ModifiedProperties on \n  (\n      where Property.displayName =~ \"TargetId.ServicePrincipalNames\"\n      | extend AppId = tostring(Property.newValue)\n  )\n| mv-apply Property = AdditionalDetails on \n  (\n      where Property.key =~ \"User-Agent\"\n      | extend InitiatingUserAgent = replace('\"', '', tostring(Property.value))\n  )\n| project-away Property\n| parse Permissions with * \"ConsentType: \" GrantConsentType \", Scope: \" GrantScope1 \",\" *\n| where GrantScope1 =~ \"full_access_as_app\"\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| project-reorder TimeGenerated, OAuthAppName, AppId, AdminConsent, Permissions, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, InitiatingUserAgent, GrantScope1, GrantConsentType\n| extend GrantInitiatedBy = tostring(iff(isnotempty(InitiatingUserPrincipalName), InitiatingUserPrincipalName, InitiatingAppName))\n| extend Name = split(InitiatingUserPrincipalName, \"@\")[0], UPNSuffix = split(InitiatingUserPrincipalName, \"@\")[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Malformed web requests are sometimes used for reconnaissance to detect the presence of network security devices. A large number of requests from a single source may indicate compromised hosts. Assumes default squid log format.\n Topic: Syslog"}, {"role": "assistant", "content": "\nSyslog\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n         SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n         Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n         HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n         User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n         RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n         Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n         Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n         contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where Domain !contains '.' and isnotempty(Domain)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), badRequestCount = count() by Domain, SourceIP, User, URL\n| order by badRequestCount desc\n| extend timestamp = StartTime, AccountCustomEntity = User, IPCustomEntity = SourceIP, URLCustomEntity = URL\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies Azure DevOps activities where a public project is created\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where Data.ProjectVisibility == \"Public\"\n| where OperationName == \"Project.CreateCompleted\"\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Malware can use IP address to communicate with C2.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "Cisco_Umbrella\n| where EventType == 'proxylogs'\n| where DvcAction =~ 'Allowed'\n| where UrlOriginal matches regex @'\\Ahttp:\\/\\/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}.*'\n| project TimeGenerated, SrcIpAddr, DstIpAddr, UrlOriginal, Identities\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This identifies Windows Reserved Filenames on Office services like SharePoint and OneDrive. It also detects when a user uploads these files to another users workspace, which may indicate malicious activity.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "// Reserved FileNames/Extension for Windows\nlet Reserved = dynamic(['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9']);\nOfficeActivity\n| where isnotempty(SourceFileExtension)\n| where SourceFileExtension in~ (Reserved) or SourceFileName in~ (Reserved)\n| where UserAgent !has \"Mac OS\" \n| extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])\n| extend UserIdUserFolderFormat = tolower(replace_regex(UserId, '@|\\\\.', '_'))\n// identify when UserId is not a match to the specific site url personal folder reference\n| extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true , false ) \n| summarize TimeGenerated = make_list(TimeGenerated, 100000), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Operations = make_list(Operation, 100000), UserAgents = make_list(UserAgent, 100000), OfficeIds = make_list(OfficeId, 100000), SourceRelativeUrls = make_list(SourceRelativeUrl, 100000), FileNames = make_list(SourceFileName, 100000)\nby OfficeWorkload, RecordType, UserType, UserKey, UserId, ClientIP, Site_Url, SourceFileExtension,SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder\n// Use mvexpand on any list items and you can expand out the exact time and other metadata about the hit\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n| extend IP_0_Address = ClientIP\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix\n| extend URL_0_Url = Site_Url\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A large number of subdomains for a domain may be an indicator of a suspicious domain. This query returns the top 25 domains by number of subdomains.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let lookback=1d;\n_Im_Dns(starttime=ago(lookback),endtime=now())\n| distinct DnsQuery\n| extend DomainParts = split(DnsQuery,'.')\n| extend DomainName = strcat(DomainParts[toint(array_length(DomainParts)-2)],'.',DomainParts[toint(array_length(DomainParts)-1)])\n| summarize SubDomainCount=dcount(DnsQuery),make_list(DnsQuery) by DomainName\n| order by SubDomainCount\n| take 25\n| extend DNS_0_DomainName = DomainName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies changes to bank account numbers in Finance & Operations, whereby a bank account number is modified but then subsequently reverted a short time later. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let detection_window = 24h;\nlet query_frequency = 15m;\nlet bank_changes = FinanceOperationsActivity_CL\n    | where LogType == \"Update\" and TableName == \"BankAccountTable\"\n    | extend AccountId = tostring(parse_json(tostring(FormattedData.AccountID)).NewData)\n    | extend AccountNum = parse_json(tostring(FormattedData.AccountNum))\n    | extend\n        CurrentAccountNum = tostring(AccountNum.NewData),\n        OldAccountNum = tostring(AccountNum.OldData)\n    | where CurrentAccountNum != OldAccountNum;\nbank_changes\n| join kind=inner (bank_changes\n    | where TimeGenerated >= ago(query_frequency)\n    | project-rename UpdatedTime = LogCreatedDateTime, UpdatedAccount = CurrentAccountNum)\n    on $left.OldAccountNum == $right.UpdatedAccount\n| where UpdatedTime between (LogCreatedDateTime .. (LogCreatedDateTime + detection_window))\n| extend FinOpsAppId = 32780\n| project\n    TimeGenerated,\n    LogCreatedDateTime,\n    LogType,\n    TableName,\n    Username,\n    AccountId,\n    CurrentAccountNum,\n    OldAccountNum,\n    FinOpsAppId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when unexpected authentication factor used.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "let allowed_auth_f = dynamic(['duo_push', 'duo_mobile_passcode']);\nCiscoDuo\n| where EventType =~ 'authentication'\n| where EventResult =~ 'success'\n| where AuthFactor !in~ (allowed_auth_f)\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for top sources which transferred compressed archives over HTTP.\n Topic: Corelight"}, {"role": "assistant", "content": "corelight_http\n| where TimeGenerated > ago(24h)\n| where method in~ ('POST', 'PUT')\n| where orig_mime_types has_any ('application/vnd.ms-cab-compressed', 'application/warc', 'application/x-7z-compressed', 'application/x-ace', 'application/x-arc', 'application/x-archive', 'application/x-arj', 'application/x-compress', 'application/x-cpio', 'application/x-dmg', 'application/x-eet', 'application/x-gzip', 'application/x-lha', 'application/x-lrzip', 'application/x-lz4', 'application/x-lzma', 'application/x-lzh', 'application/x-lzip', 'application/x-rar', 'application/x-rpm', 'application/x-stuffit', 'application/x-tar', 'application/x-xz', 'application/x-zoo', 'application/zip')\n| summarize count() by id_orig_h\n| top 10 by count_\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in EmailEvents table from any Domain IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet EmailEvents_ = materialize(EmailEvents | where isnotempty(RecipientEmailAddress) and isnotempty(SenderFromAddress) and TimeGenerated >= ago(dt_lookBack) and DeliveryAction !has \"Blocked\" | project-rename  EmailEvents_TimeGenerated = TimeGenerated | extend SenderFromDomain = tolower(SenderFromDomain) | extend RecipientEmailDomain = tolower(tostring(split(RecipientEmailAddress, '@', 1))));\nlet SenderDomains = EmailEvents_ | distinct  SenderFromDomain | summarize make_list(SenderFromDomain);\nlet RecipientDomains = EmailEvents_ | distinct  RecipientEmailDomain | summarize make_list(RecipientEmailDomain);\nlet TI = materialize(ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack)\n| where isnotempty(DomainName)\n| extend TI_Domain = tolower(DomainName)\n| where TI_Domain in (SenderDomains) or TI_Domain in (RecipientDomains)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\");\n(union\n  (TI | join kind=innerunique (EmailEvents_) on $left.TI_Domain == $right.SenderFromDomain),\n  (TI | join kind=innerunique (EmailEvents_) on $left.TI_Domain == $right.RecipientEmailDomain))\n| where EmailEvents_TimeGenerated < ExpirationDateTime\n| summarize EmailEvents_TimeGenerated = arg_max(EmailEvents_TimeGenerated, *) by IndicatorId, RecipientEmailAddress\n| project EmailEvents_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DomainName, RecipientEmailAddress, SenderFromAddress, Subject, ConfidenceLevel, Url, Type, TI_Domain, TrafficLightProtocolLevel, DeliveryAction, DeliveryLocation, EmailDirection\n| extend Name = tostring(split(RecipientEmailAddress, '@', 0)[0]), UPNSuffix = tostring(split(RecipientEmailAddress, '@', 1)[0])\n| extend timestamp = EmailEvents_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detects users with access to AWS (IAM or Federated via Okta) without enabled MFA. This is a default definition by Authomize and can be updated using the edit modal. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"Access to AWS without MFA\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses Windows security events to detect suspicious access attempts by the same process to registry keys that provide information about an Microsoft Entra ID joined or registered devices and Transport keys (tkpub / tkpriv).\n This information can be used to export the Device Certificate (dkpub / dkpriv) and Transport key (tkpub/tkpriv).\n These set of keys can be used to impersonate existing Microsoft Entra ID joined devices.\n This detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable objects:\n HKLM:\\SYSTEM\\CurrentControlSet\\Control\\CloudDomainJoin (Microsoft Entra ID joined devices)\n HKCU:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\WorkplaceJoin (Microsoft Entra ID registered devices)\n HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Cryptography\\Ngc\\KeyTransportKey (Transport Key)\n Make sure you set the SACL to propagate to its sub-keys. You can find more information in here https://github.com/OTRF/Set-AuditRule/blob/master/rules/registry/aad_connect_health_service_agent.yml\n Reference: https://o365blog.com/post/deviceidentity/\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// AADJoined or Register Device Registry Keys\nlet aadJoinRoot = \"\\\\REGISTRY\\\\MACHINE\\\\SYSTEM\\\\ControlSet001\\\\Control\\\\CloudDomainJoin\\\\JoinInfo\\\\\";\nlet aadRegisteredRoot = \"\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\WorkplaceJoin\";\n// Transport Key Registry Key\nlet keyTransportKey = \"\\\\REGISTRY\\\\MACHINE\\\\SYSTEM\\\\ControlSet001\\\\Control\\\\Cryptography\\\\Ngc\\\\KeyTransportKey\\\\\";\n(union isfuzzy=true\n(\n// Access to Object Requested\nSecurityEvent\n| where EventID == '4656'\n| where EventData has aadJoinRoot or EventData has aadRegisteredRoot\n| extend EventData = parse_xml(EventData).EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Computer, EventID)\n| where ObjectType == 'Key'\n| where ObjectName startswith aadJoinRoot and SubjectLogonId != '0x3e7' //Local System\n| extend ProcessId = column_ifexists(\"ProcessId\", \"\"), Process = split(ProcessName, '\\\\', -1)[-1],Account = strcat(SubjectDomainName, \"\\\\\", SubjectUserName)\n| join kind=innerunique (\n    SecurityEvent\n    | where EventID == '4656'\n    | where EventData has keyTransportKey\n    | extend EventData = parse_xml(EventData).EventData.Data\n    | mv-expand bagexpansion=array EventData\n    | evaluate bag_unpack(EventData)\n    | extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n    | evaluate pivot(Key, any(Value), TimeGenerated, Computer, EventID)\n    | extend ObjectName = column_ifexists(\"ObjectName\", \"\"),ObjectType = column_ifexists(\"ObjectType\", \"\")\n    | where ObjectType == 'Key'\n    | where ObjectName startswith keyTransportKey and SubjectLogonId != '0x3e7' //Local System\n    | extend ProcessId = column_ifexists(\"ProcessId\", \"\"), Process = split(ProcessName, '\\\\', -1)[-1],Account = strcat(SubjectDomainName, \"\\\\\", SubjectUserName)\n) on $left.Computer == $right.Computer and $left.SubjectLogonId == $right.SubjectLogonId and $left.ProcessId == $right.ProcessId\n| project TimeGenerated, Computer, Account, SubjectDomainName, SubjectUserName, SubjectLogonId, ObjectName, tostring(Process), ProcessName, ProcessId, EventID\n),\n// Accessing Object\n(\nSecurityEvent\n| where EventID == '4663'\n| where ObjectType == 'Key'\n| where (ObjectName startswith aadJoinRoot or ObjectName contains aadRegisteredRoot) and SubjectLogonId != '0x3e7' //Local System\n| extend Account = SubjectAccount\n| join kind=innerunique (\n    SecurityEvent\n    | where EventID == '4663'\n    | where ObjectType == 'Key'\n    | where ObjectName has keyTransportKey and SubjectLogonId != '0x3e7' //Local System\n    | extend Account = SubjectAccount\n) on $left.Computer == $right.Computer and $left.SubjectLogonId == $right.SubjectLogonId and $left.ProcessId == $right.ProcessId\n| project TimeGenerated, Computer, Account, SubjectDomainName, SubjectUserName, SubjectLogonId, ObjectName, Process, ProcessName, ProcessId, EventID\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n)\n)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies sign-in across multiple Dataverse environments, breaching a predefined threshold, originating from a user with IP address that was used to sign-into the well known Microsoft Entra app registration. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_frequency = 1h;\nlet query_lookback = 24h;\n// AppID of the multi-tenant Dynamics 365 Example Client Application\nlet well_known_app_id = \"51f81489-12ee-4a9e-aaae-a2591f45987d\";\nlet environment_count_threshold = 10;\nSigninLogs\n| where TimeGenerated >= ago(query_lookback)\n// Comment out the line below to monitor activity from all Azure AD apps\n| where AppId == well_known_app_id\n| where ResourceIdentity == '00000007-0000-0000-c000-000000000000'\n| summarize FirstSeen = min(TimeGenerated) by AppId, UserPrincipalName, IPAddress, AppDisplayName\n| join kind=inner (\n    DataverseActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where Message == \"UserSignIn\")\n    on $left.UserPrincipalName == $right.UserId, $left.IPAddress == $right.ClientIp\n| where TimeGenerated between (FirstSeen .. (FirstSeen + 2h))\n| summarize InstanceCount = dcount(InstanceUrl, 4), FirstSeen = min(FirstSeen) by UserId, ClientIp, InstanceUrl, AppDisplayName, AppId\n| where InstanceCount > environment_count_threshold\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    FirstSeen,\n    UserId,\n    ClientIp,\n    AppDisplayName,\n    AppId,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Attackers often match or approximate the name or location of legitimate files to avoid detection rules that are based trust of on certain operating system processes.\nThis query detects mismatches in the parent-child relationship of core operating system processes to uncover different masquerading attempts.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let ProcessRelations=datatable(ImageFile:string,ExpectedParent:dynamic) [\n  \"smss.exe\", dynamic([\"smss.exe\", \"ntoskrnl.exe\", \"\"]),\n  \"crmss.exe\", dynamic([\"smss.exe\"]),\n  \"wininit.exe\", dynamic([\"smss.exe\"]),\n  \"winlogon.exe\", dynamic([\"smss.exe\"]),\n  \"services.exe\", dynamic([\"wininit.exe\"]),\n  \"lsaiso.exe\", dynamic([\"wininit.exe\"]),\n  \"lsass.exe\", dynamic([\"wininit.exe\"]),\n  \"spoolsv.exe\", dynamic([\"services.exe\"]),\n  \"dllhost.exe\", dynamic([\"svchost.exe\", \"services.exe\"]),\n  \"lsm.exe\", dynamic([\"wininit.exe\"]),\n  \"svchost.exe\", dynamic([\"services.exe\", \"msmpeng.exe\"]),\n  \"runtimebroker.exe\", dynamic([\"svchost.exe\"]),\n  \"taskhostw.exe\", dynamic([\"svchost.exe\"]),\n  \"userinit.exe\", dynamic([\"winlogon.exe\"])\n  // Explorer can have a lot of parents in some environments\n  //,\"explorer.exe\", dynamic([\"userinit.exe\"])\n];\nDeviceProcessEvents\n| extend ImageFile = tostring(tolower(parse_path(tostring(FolderPath)).Filename))\n| extend ParentFile = tostring(tolower(parse_path(tostring(InitiatingProcessFolderPath)).Filename))\n| lookup kind=inner ProcessRelations on ImageFile\n| where not(set_has_element(ExpectedParent,ParentFile))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies any Azure VM Run Command operation executed from an Azure IP address.\nRun Command allows an attacker or legitimate user to execute arbitrary PowerShell\non a target VM. This technique has been seen in use by NOBELIUM.\n Topic: Azure Activity"}, {"role": "assistant", "content": "let azure_ranges = externaldata(changeNumber: string, cloud: string, values: dynamic)\n[\"https://raw.githubusercontent.com/microsoft/mstic/master/PublicFeeds/MSFTIPRanges/ServiceTags_Public.json\"] with(format='multijson')\n| mv-expand values\n| extend Name = values.name, AddressPrefixes = values.properties.addressPrefixes\n| where Name startswith \"WindowsVirtualDesktop\"\n| mv-expand AddressPrefixes\n| summarize by tostring(AddressPrefixes);\nAzureActivity\n| where TimeGenerated > ago(30d)\n// Isolate run command actions\n| where OperationNameValue == \"Microsoft.Compute/virtualMachines/runCommand/action\"\n// Confirm that the operation impacted a virtual machine\n| where Authorization has \"virtualMachines\"\n// Each runcommand operation consists of three events when successful, Started, Accepted (or Rejected), Successful (or Failed).\n| summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), max(CallerIpAddress), make_list(ActivityStatusValue) by CorrelationId, Authorization, Caller\n// Limit to Run Command executions that Succeeded\n| where list_ActivityStatusValue has \"Succeeded\"\n// Extract data from the Authorization field, allowing us to later extract the Caller (UPN) and CallerIpAddress\n| extend Authorization_d = parse_json(Authorization)\n| extend Scope = Authorization_d.scope\n| extend Scope_s = split(Scope, \"/\")\n| extend Subscription = tostring(Scope_s[2])\n| extend VirtualMachineName = tostring(Scope_s[-1])\n| project StartTime, EndTime, Subscription, VirtualMachineName, CorrelationId, Caller, CallerIpAddress=max_CallerIpAddress\n| evaluate ipv4_lookup(azure_ranges, CallerIpAddress, AddressPrefixes)\n| extend IP_0_Address = CallerIpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected creation of new EC2 policy and afterwards used one of the attach policy operations (AttachUserPolicy/AttachRolePolicy/AttachGroupPolicy). This might indicate a privilege escalation technique that attackers could use.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\nlet createPolicy =  dynamic([\"CreatePolicy\", \"CreatePolicyVersion\"]);\nlet timeframe = 1d;\nlet lookback = 14d;\n// Creating Master table with all the events to use with materialize for better performance\nlet EventInfo = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName in (EventNameList) or EventName in (createPolicy)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\");\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\nlet FullAdminPolicyEvents =  materialize(  EventInfo\n| where TimeGenerated >= ago(lookback)\n| where EventName in (createPolicy)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and ((((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"ec2:*\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"ec2:RunInstances\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"ec2:Run*\")) or (Action contains \"ec2:*\") or (Action contains \"ec2:ListInstances\" and Action contains \"ec2:StartInstance\" and Action contains \"ec2:ModifyInstanceAttribute\") or (Action contains \"ec2:List*\" and Action contains \"ec2:Start*\" and Action contains \"ec2:Modify*\")) and Resource == \"*\" and Condition == \"\"\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn, RecipientAccountId, AccountName, AccountUPNSuffix\n| project-rename StartTime = TimeGenerated  );\nlet PolicyAttach = materialize(  EventInfo\n| where TimeGenerated >= ago(timeframe)\n| where EventName in (EventNameList) and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\"/\")[1])\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName,   UserIdentityType , UserIdentityArn, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, PolicyName\n| extend AttachEvent = pack(\"StartTime\", StartTime, \"EndTime\", EndTime, \"EventName\", EventName, \"UserIdentityType\",   UserIdentityType,  \"AccountName\", AccountName, \"AccountUPNSuffix\", AccountUPNSuffix, \"RecipientAccountId\", RecipientAccountId, \"UserIdentityArn\", UserIdentityArn, \"SourceIpAddress\", SourceIpAddress)\n| project EventSource, PolicyName, AttachEvent, RecipientAccountId, AccountName, AccountUPNSuffix, AttachEventCount\n);\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\nFullAdminPolicyEvents\n| join kind=leftouter\n(\n    PolicyAttach\n)\non PolicyName\n| project-away PolicyName1\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in AzureActivity.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour for AzureActivity logs\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  // Filter out indicators without relevant IP address fields\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  // Select the IP entity based on availability of different IP fields\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  // Exclude local addresses using the ipv4_is_private operator and filtering out specific address prefixes\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and AzureActivity logs to identify potential malicious activity\nIP_Indicators\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n    AzureActivity | where TimeGenerated >= ago(dt_lookBack)\n    // renaming time column so it is clear the log this came from\n    | extend AzureActivity_TimeGenerated = TimeGenerated\n)\non $left.TI_ipEntity == $right.CallerIpAddress\n| where AzureActivity_TimeGenerated < ExpirationDateTime\n| summarize AzureActivity_TimeGenerated = arg_max(AzureActivity_TimeGenerated, *) by IndicatorId, CallerIpAddress\n| project AzureActivity_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, TI_ipEntity, CallerIpAddress, \nCaller, OperationNameValue, ActivityStatusValue, CategoryValue, ResourceId, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n| extend timestamp = AzureActivity_TimeGenerated\n| extend Name = iif(Caller has '@', tostring(split(Caller,'@',0)[0]), \"\")\n| extend UPNSuffix = iif(Caller has '@', tostring(split(Caller,'@',1)[0]), \"\")\n| extend AadUserId = iif(Caller !has '@', tostring(Caller), \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows iplist for admin users. You can check for suspicious IPs or new IPs.\n Topic: Box"}, {"role": "assistant", "content": "BoxEvents\n| where TimeGenerated > ago(30d)\n| where EventType =~ 'ADMIN_LOGIN'\n| summarize makeset(SrcIpAddr) by SourceLogin\n| extend AccountCustomEntity = SourceLogin\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checking for a threefold increase or more in Full Name lookups per Client IP for the current day as compared to the daily average for the previous week.\nThis can potentially identify excessive traffic to a given location that could be indicative of data transfer out of your network.\nThis is only for Name lookups, so it would be recommended to review the firewall and web proxy logs in relation to the ClientIP making the interesting requests.\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 7d;\n//example of excluding Saturday and Sunday in Average as those are potentially low volume and decrease the average, feel free to change\nlet excludedDays = dynamic([\"Saturday\", \"Sunday\"]);\n// average is across 5 days as we are dropping weekends, change as needed\nlet numDays = 5;\n// limit to over 1000 lookups somewhat random but helps focus in on higher lookups, change as needed\nlet avglookupThreshold = 3;\nlet lookupThreshold = 1000;\nDnsEvents\n//Setting to startofday so we get 7 days prior to today\n| where TimeGenerated >= startofday(lookback) and TimeGenerated <= startofday(starttime)\n| where SubType =~ \"LookupQuery\"\n//getting the associated number of the day of the week so we can map to a given day for later parsing if needed\n| extend DayNumberofWeek = tostring(dayofweek(TimeGenerated))\n//Setting the Day of the week value so that certain days could be excluded if needed\n| extend DayofWeek = iff(DayNumberofWeek == \"00:00:00\", \"Sunday\",\n(iff(DayNumberofWeek == \"1.00:00:00\", \"Monday\",\n(iff(DayNumberofWeek == \"2.00:00:00\", \"Tuesday\",\n(iff(DayNumberofWeek == \"3.00:00:00\", \"Wednesday\",\n(iff(DayNumberofWeek == \"4.00:00:00\", \"Thursday\",\n(iff(DayNumberofWeek == \"5.00:00:00\", \"Friday\",\n(iff(DayNumberofWeek == \"6.00:00:00\", \"Saturday\", DayNumberofWeek)))))))))))))\n| where DayofWeek !in~ (excludedDays)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by ClientIP, Name, IPAddresses\n| project StartTime, EndTime, ClientIP, FullNameLookup = Name, IPAddresses, DailyAvgLookupCountOverLastWeek = count_/numDays\n| join kind = inner ( DnsEvents\n| where TimeGenerated between(startofday(starttime)..endofday(endtime))\n| where SubType =~ \"LookupQuery\"\n| summarize count() by ClientIP, FullNameLookup = Name, IPAddresses\n| project ClientIP, LookupCountToday = count_, FullNameLookup, IPAddresses\n)\non ClientIP, FullNameLookup, IPAddresses\n| where LookupCountToday > (DailyAvgLookupCountOverLastWeek * avglookupThreshold) and LookupCountToday >= lookupThreshold\n| project StartTime, EndTime, ClientIP, LookupCountToday, DailyAvgLookupCountOverLastWeek, FullNameLookup, IPAddresses\n| order by LookupCountToday desc nulls last\n| extend DNS_0_DomainName = FullNameLookup\n| extend DNS_0_IpAddress = IPAddresses\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for expired certificates in the client certificates chain.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "CiscoISEEvent\n| where TimeGenerated > ago(24h)\n| where EventId == '12516'\n| extend IPCustomEntity = SrcIpAddr"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for inspected files.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(inspected_document)\n| project SrcUserName, DstUserName, File=inspected_document, MatchedPolicies\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Generates an incident when an unauthorized command is detected in the network by Radiflows iSID.\n Topic: Radiflow"}, {"role": "assistant", "content": "RadiflowEvent\n| where DeviceProduct =~ 'iSID'\n| where \n    (\n        EventClassID in (114, 115, 116, 117, 118, 119, 162)\n        or EventMessage has 'Unauthorized'\n    )\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies WerFault.exe creating a memory dump of lsass.exe (Local Security Authority Subsystem Service, a process responsible for the enforcement of security policies on Windows systems, which generates and stores credentials in its process memory).\n Topic: Cyborg Security HUNTER"}, {"role": "assistant", "content": "SecurityEvent\n| where NewProcessName endswith \"werfault.exe\"\n| where ObjectName endswith \"lsass.exe\"\n| project NewProcessName, ObjectName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects insecure metadata endpoint.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where data_request_headers_oci_original_url_s contains '/opc/v1' or data_request_headers_oci_original_url_s contains '/openstack'\n| where HttpStatusCode == 200\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects changing of user privileges.\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "let q_period = 14d;\nlet dt_lookBack = 24h;\nlet p = PaloAltoCDLEvent\n| where TimeGenerated between (ago(q_period)..ago(dt_lookBack))\n| summarize OldPrivileges = make_set(DestinationUserPrivileges) by DstUsername;\nPaloAltoCDLEvent\n| where TimeGenerated > ago(dt_lookBack)\n| summarize NewPrivileges = make_set(DestinationUserPrivileges) by DstUsername\n| join kind=innerunique (p) on DstUsername\n| where tostring(OldPrivileges) != tostring(NewPrivileges)\n| extend AccountCustomEntity = DstUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects a macro invoking ShellBrowserWindow COM Objects evade naive parent/child Office detection rules.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "Event\n | where EventLog =~ \"Microsoft-Windows-Sysmon/Operational\" and EventID==1\n | parse EventData with * 'Image\">' Image \"<\" * 'CommandLine\">' CommandLine \"<\" * 'ParentImage\">' ParentImage \"<\" *\n | where ParentImage has \"svchost.exe\" and Image has \"rundll32.exe\" and CommandLine has \"{c08afd90-f2a1-11d1-8455-00a0c91f3880}\"\n | parse EventData with * 'ProcessGuid\">' ProcessGuid \"<\" * 'Description\">' Description \"<\" * 'CurrentDirectory\">' CurrentDirectory \"<\" * 'User\">' User \"<\" * 'LogonGuid\">' LogonGuid \"<\" * 'ParentProcessGuid\">' ParentProcessGuid \"<\" * 'ParentImage\">' ParentImage \"<\" * 'ParentCommandLine\">' ParentCommandLine \"<\" * 'ParentUser\">' ParentUser \"<\" *\n | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, User, ParentImage, ParentProcessGuid, ParentCommandLine, ParentUser, Image, ProcessGuid, CommandLine, Description\n | extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for destination ports of outbound traffic.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where TimeGenerated > ago(24h)\n| where EventType contains 'vcn.flowlogs'\n| where data_action_s =~ 'ACCEPT'\n| where ipv4_is_private(SrcIpAddr)\n| where ipv4_is_private(DstIpAddr) == False\n| summarize count() by SrcIpAddr, DstIpAddr, DstPortNumber\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects informational severity alerts from ZeroFox\n Topic: ZeroFox"}, {"role": "assistant", "content": "ZeroFoxAlertPoller_CL\n| where Severity in (1,2)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a api token has been created.\n Topic: ZeroNetworks"}, {"role": "assistant", "content": "ZNSegmentAudit\n| where AuditTypeId == 25\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": " The query below identifies creation of unusual identity by the Europium actor to mimic Microsoft Exchange Health Manager Service account using Exchange PowerShell commands\n  Reference: https://www.microsoft.com/security/blog/2022/09/08/microsoft-investigates-iranian-attacks-against-the-albanian-government/\n Topic: Detections"}, {"role": "assistant", "content": "(union isfuzzy=true\n(SecurityEvent\n| where EventID==4688\n| where CommandLine has_any (\"New-Mailbox\",\"Update-RoleGroupMember\") and CommandLine has \"HealthMailbox55x2yq\"\n| project TimeGenerated, DeviceName = Computer, AccountName = SubjectUserName, AccountDomain = SubjectDomainName, ProcessName, ProcessNameFullPath = NewProcessName, EventID, Activity, CommandLine, EventSourceName, Type\n| extend InitiatingProcessAccount = strcat(AccountDomain, \"\\\\\", AccountName)\n),\n(DeviceProcessEvents\n| where ProcessCommandLine has_any (\"New-Mailbox\",\"Update-RoleGroupMember\") and ProcessCommandLine has \"HealthMailbox55x2yq\"\n| extend timestamp = TimeGenerated, AccountDomain = InitiatingProcessAccountDomain, AccountName = InitiatingProcessAccountName\n| extend InitiatingProcessAccount = strcat(AccountDomain, \"\\\\\", AccountName)\n)\n)\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in CommonSecurityLog Event data from any FileHash IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet fileHashIndicators = ThreatIntelligenceIndicator\n| where isnotempty(FileHashValue)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now();\n// Handle matches against both lower case and uppercase versions of the hash:\n(fileHashIndicators | extend  FileHashValue = tolower(FileHashValue)\n| union (fileHashIndicators | extend FileHashValue = toupper(FileHashValue)))\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n|  join kind=innerunique (\n  CommonSecurityLog | where TimeGenerated >= ago(dt_lookBack)\n  | where isnotempty(FileHash)\n  | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n  )\non $left.FileHashValue == $right.FileHash\n| where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, FileHashValue\n| project CommonSecurityLog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nSourceIP, SourcePort, DestinationIP, DestinationPort, SourceUserID, SourceUserName, DeviceName, DeviceAction,\nRequestURL, DestinationUserName, DestinationUserID, ApplicationProtocol, Activity, FileHashValue, FileHashType\n| extend HostName = tostring(split(DeviceName, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(DeviceName, '.'), 1, -1), '.'))\n| extend Name = tostring(split(SourceUserName, '@', 0)[0]), UPNSuffix = tostring(split(SourceUserName, '@', 1)[0])\n| extend timestamp = CommonSecurityLog_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection looks for the steps required to conduct a UAC bypass using Fodhelper.exe. By default this detection looks for the setting of the required registry keys and the invoking of the process within 1 hour - this can be tweaked as required.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n  | where EventID == 4657\n  | parse ObjectName with \"\\\\REGISTRY\\\\\" KeyPrefix \"\\\\\" RegistryKey\n  | project-reorder RegistryKey\n  | where RegistryKey has \"Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command\"\n  | extend TimeKey = bin(TimeGenerated, 1h)\n  | join (\n  SecurityEvent\n  | where EventID == 4688\n  | where Process =~ \"fodhelper.exe\"\n  | where ParentProcessName endswith \"cmd.exe\" or ParentProcessName endswith \"powershell.exe\" or ParentProcessName endswith \"powershell_ise.exe\"\n  | extend TimeKey = bin(TimeGenerated, 1h)) on TimeKey, Computer\n  | extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n  | extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n  | extend AccountName = tostring(split(TargetAccount, @'\\')[1]), AccountNTDomain = tostring(split(TargetAccount, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may steal the credentials of a specific user or service account using credential access techniques or capture credentials earlier in their reconnaissance process through social engineering as a means of gaining initial access. APT33, for example, has used valid accounts for initial access and privilege escalation. The query below generates an output of all administrator users performing an interactive logon (4624:2) where one or more features of the activity deviate from the user, his peers, or the tenant profile.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "BehaviorAnalytics\n| where UsersInsights.IsDormantAccount == true\n| where DevicesInsights.IsLocalAdmin == true\n| where ActivityType =~ \"LogOn\"\n| where ActionType =~ \"InteractiveLogon\"\n| where ActivityInsights has \"True\"\n| project TimeGenerated, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights\n| extend Name=split(UserPrincipalName, \"@\")[0], UPNSuffix=split(UserPrincipalName, \"@\")[1]\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SourceIPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies anamalous spikes in network traffic logs as compared to baseline or normal historical patterns.\nThe query leverages a KQL built-in anomaly detection algorithm to find large deviations from baseline patterns.\nSudden increases in network traffic volume may be an indication of data exfiltration attempts and should be investigated.\nThe higher the score, the further it is from the baseline value.\nThe output is aggregated to provide summary view of unique source IP to destination IP address and port traffic observed in the flagged anomaly hour.\nThe source IP addresses which were sending less than percentotalthreshold of the total traffic have been exluded whose value can be adjusted as needed .\nYou may have to run queries for individual source IP addresses from SourceIPlist to determine if anything looks suspicious\n Topic: Detections"}, {"role": "assistant", "content": "let starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet scorethreshold = 5;\nlet percentotalthreshold = 50;\nlet TimeSeriesData = CommonSecurityLog\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| project TimeGenerated,SourceIP, DestinationIP, DeviceVendor\n| make-series Total=count() on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor;\n// Filtering specific records associated with spikes as outliers\nlet TimeSeriesAlerts=materialize(TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, scorethreshold, -1, 'linefit')\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)\n| where anomalies > 0 | extend score = round(score,2), AnomalyHour = TimeGenerated\n| project DeviceVendor,AnomalyHour, TimeGenerated, Total, baseline, anomalies, score);\nlet AnomalyHours = materialize(TimeSeriesAlerts  | where TimeGenerated > ago(2d) | project TimeGenerated);\n// Join anomalies with Base Data to popalate associated records for investigation - Results sorted by score in descending order\nTimeSeriesAlerts\n| where TimeGenerated > ago(2d)\n| join (\n    CommonSecurityLog\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\n| where TimeGenerated > ago(2d)\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\n| summarize HourlyCount = count(), TimeGeneratedMax = arg_max(TimeGenerated, *), DestinationIPlist = make_set(DestinationIP, 100), DestinationPortlist = make_set(DestinationPort, 100) by DeviceVendor, SourceIP, TimeGeneratedHour= bin(TimeGenerated, 1h)\n| extend AnomalyHour = TimeGeneratedHour\n) on AnomalyHour, DeviceVendor\n| extend PercentTotal = round((HourlyCount / Total) * 100, 3)\n| where PercentTotal > percentotalthreshold\n| project DeviceVendor , AnomalyHour, TimeGeneratedMax, SourceIP, DestinationIPlist, DestinationPortlist, HourlyCount, PercentTotal, Total, baseline, score, anomalies\n| summarize HourlyCount=sum(HourlyCount), StartTimeUtc=min(TimeGeneratedMax), EndTimeUtc=max(TimeGeneratedMax), SourceIPlist = make_set(SourceIP, 100), SourceIPMax= arg_max(SourceIP, *), DestinationIPlist = make_set(DestinationIPlist, 100), DestinationPortlist = make_set(DestinationPortlist, 100) by DeviceVendor , AnomalyHour, Total, baseline, score, anomalies\n| project DeviceVendor , AnomalyHour, EndTimeUtc, SourceIPMax ,SourceIPlist, DestinationIPlist, DestinationPortlist, HourlyCount, Total, baseline, score, anomalies\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Clients with a high reverse DNS count could be carrying out reconnaissance or discovery activity.\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "let threshold = 10;\nDnsEvents\n| where Name has \"in-addr.arpa\" \n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), NameCount = dcount(Name), Names = make_set(Name,100), EventCount = count() by ClientIP\n| where NameCount > threshold\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Provides a summary of executable files with double file extensions in SharePoint \n and the users and IP addresses that have accessed them.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let known_ext = dynamic([\"lnk\",\"log\",\"option\",\"config\", \"manifest\", \"partial\"]);\nlet excluded_users = dynamic([\"app@sharepoint\"]);\nOfficeActivity\n| where RecordType =~ \"SharePointFileOperation\" and isnotempty(SourceFileName)\n| where OfficeObjectId has \".exe.\" and SourceFileExtension !in~ (known_ext)\n| extend Extension = extract(\"[^.]*.[^.]*$\",0, OfficeObjectId)\n| join kind= leftouter ( \n  OfficeActivity\n    | where RecordType =~ \"SharePointFileOperation\" and (Operation =~ \"FileDownloaded\" or Operation =~ \"FileAccessed\") \n    | where SourceFileExtension !in~ (known_ext)\n) on OfficeObjectId \n| where UserId1 !in~ (excluded_users)\n| extend userBag = bag_pack(UserId1, ClientIP1) \n| summarize make_set(UserId1, 10000), make_bag(userBag), Start=max(TimeGenerated), End=min(TimeGenerated) by UserId, OfficeObjectId, SourceFileName, Extension \n| extend NumberOfUsers = array_length(bag_keys(bag_userBag))\n| project UploadTime=Start, Uploader=UserId, FileLocation=OfficeObjectId, FileName=SourceFileName, AccessedBy=bag_userBag, Extension, NumberOfUsers\n| extend UploaderName = tostring(split(Uploader, \"@\")[0]), UploaderUPNSuffix = tostring(split(Uploader, \"@\")[1])\n| extend Account_0_Name = UploaderName\n| extend Account_0_UPNSuffix = UploaderUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for SAML subjects used in requests\n Topic: PingFederate"}, {"role": "assistant", "content": "PingFederateEvent\n| where TimeGenerated > ago(24h)\n| extend SamlSubject = extract(@'SAML_SUBJECT==(\\w+),.*', 1, AdditionalExtensions)\n| where isnotempty(SamlSubject)\n| summarize count() by SamlSubject, SrcIpAddr\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a list of IP addresses with a minimum number (default of 5) of failed logon attempts to AWS Console.\nUses that list to identify any successful Microsoft Entra ID logons from these IPs within the same timeframe.\n Topic: Detections"}, {"role": "assistant", "content": "//Adjust this threshold to fit environment\nlet  signin_threshold = 5;\n//Make a list of IPs with failed AWS console logins\nlet aws_fails = AWSCloudTrail\n| where EventName == \"ConsoleLogin\"\n| extend LoginResult = tostring(parse_json(ResponseElements).ConsoleLogin)\n| where LoginResult != \"Success\"\n| where SourceIpAddress != \"127.0.0.1\"\n| summarize count() by SourceIpAddress\n| where count_ >  signin_threshold\n| summarize make_set(SourceIpAddress);\n//See if any of those IPs have sucessfully logged into Azure AD.\nSigninLogs\n| where ResultType in (\"0\", \"50125\", \"50140\")\n| where IPAddress in (aws_fails)\n| extend Reason = \"Multiple failed AWS Console logins from IP address\"\n| extend timestamp = TimeGenerated, AccountName = tostring(split(UserPrincipalName, \"@\")[0]), AccountUPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects high severity alerts from ZeroFox\n Topic: ZeroFox"}, {"role": "assistant", "content": "ZeroFoxAlertPoller_CL\n| where Severity in (5)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when 100 or more failed attempts by a given user in 10 minutes occur on the IIS Server.\nThis could be indicative of attempted brute force based on known account information.\nThis could also simply indicate a misconfigured service or device.\nReferences:\nIIS status code mapping - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\nWin32 Status code mapping - https://msdn.microsoft.com/library/cc231199.aspx\n Topic: Detections"}, {"role": "assistant", "content": "let timeBin = 10m;\nlet failedThreshold = 100;\nW3CIISLog\n| where scStatus in (\"401\",\"403\")\n| where csUserName != \"-\"\n// Handling Exchange specific items in IIS logs to remove the unique log identifier in the URI\n| extend csUriQuery = iff(csUriQuery startswith \"MailboxId=\", tostring(split(csUriQuery, \"&\")[0]) , csUriQuery )\n| extend csUriQuery = iff(csUriQuery startswith \"X-ARR-CACHE-HIT=\", strcat(tostring(split(csUriQuery, \"&\")[0]),tostring(split(csUriQuery, \"&\")[1])) , csUriQuery )\n| extend scStatusFull = strcat(scStatus, \".\",scSubStatus)\n// Map common IIS codes\n| extend scStatusFull_Friendly = case(\nscStatusFull == \"401.0\", \"Access denied.\",\nscStatusFull == \"401.1\", \"Logon failed.\",\nscStatusFull == \"401.2\", \"Logon failed due to server configuration.\",\nscStatusFull == \"401.3\", \"Unauthorized due to ACL on resource.\",\nscStatusFull == \"401.4\", \"Authorization failed by filter.\",\nscStatusFull == \"401.5\", \"Authorization failed by ISAPI/CGI application.\",\nscStatusFull == \"403.0\", \"Forbidden.\",\nscStatusFull == \"403.4\", \"SSL required.\",\n\"See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\")\n// Mapping to Hex so can be mapped using website in comments above\n| extend scWin32Status_Hex = tohex(tolong(scWin32Status))\n// Map common win32 codes\n| extend scWin32Status_Friendly = case(\nscWin32Status_Hex =~ \"775\", \"The referenced account is currently locked out and cannot be logged on to.\",\nscWin32Status_Hex =~ \"52e\", \"Logon failure: Unknown user name or bad password.\",\nscWin32Status_Hex =~ \"532\", \"Logon failure: The specified account password has expired.\",\nscWin32Status_Hex =~ \"533\", \"Logon failure: Account currently disabled.\",\nscWin32Status_Hex =~ \"2ee2\", \"The request has timed out.\",\nscWin32Status_Hex =~ \"0\", \"The operation completed successfully.\",\nscWin32Status_Hex =~ \"1\", \"Incorrect function.\",\nscWin32Status_Hex =~ \"2\", \"The system cannot find the file specified.\",\nscWin32Status_Hex =~ \"3\", \"The system cannot find the path specified.\",\nscWin32Status_Hex =~ \"4\", \"The system cannot open the file.\",\nscWin32Status_Hex =~ \"5\", \"Access is denied.\",\nscWin32Status_Hex =~ \"8009030e\", \"SEC_E_NO_CREDENTIALS\",\nscWin32Status_Hex =~ \"8009030C\", \"SEC_E_LOGON_DENIED\",\n\"See - https://msdn.microsoft.com/library/cc231199.aspx\")\n// decode URI when available\n| extend decodedUriQuery = url_decode(csUriQuery)\n// Count of failed logons by a user\n| summarize makeset(decodedUriQuery), makeset(cIP), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), FailedConnectionsCount = count() by bin(TimeGenerated, timeBin), csUserName, Computer, sIP\n| where FailedConnectionsCount >= failedThreshold\n| project TimeGenerated, csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_cIP, set_sPort, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, FailedConnectionsCount\n| order by FailedConnectionsCount\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(csUserName, \"@\")[0]), AccountUPNSuffix = tostring(split(csUserName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies Web Sessions for which the target URL hostname is a known IoC. This rule uses the [Advanced Security Information Model (ASIM)](https:/aka.ms/AboutASIM) and supports any web session source that complies with ASIM.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let HAS_ANY_MAX = 10000;\nlet dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\n//Create a list of TLDs in our threat feed for later validation\nlet DOMAIN_TI=ThreatIntelligenceIndicator\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(DomainName)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now();\nlet DOMAIN_TI_list= todynamic(toscalar(DOMAIN_TI | summarize NIoCs = dcount(DomainName), Domains = make_set(DomainName) \n  | project Domains=iff(NIoCs > HAS_ANY_MAX, dynamic([]), Domains) ));\nDOMAIN_TI\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n    _Im_WebSession(starttime=ago(dt_lookBack), url_has_any= DOMAIN_TI_list )\n    //Extract domain patterns from syslog message\n    | extend domain = tostring(parse_url(Url)[\"Host\"])\n    | where isnotempty(domain)\n    | extend tld = tostring(split(domain, '.')[-1])\n    | extend Event_TimeGenerated = TimeGenerated\n) on $left.DomainName==$right.domain\n| where Event_TimeGenerated < ExpirationDateTime\n| summarize Event_TimeGenerated  = arg_max(Event_TimeGenerated , *) by IndicatorId, domain\n| project Event_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, domain, SrcIpAddr, Url   \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Suspicious Connection to External Address Topic: Cynerio"}, {"role": "assistant", "content": "CynerioEvent_CL\n| where TimeGenerated > ago(24h)\n| where module_s == 'IDS'\n| where title_s == 'Suspicious Connection'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when multiple new VMs were started.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "let threshold = 5;\nlet a_vm = \nVMwareESXi\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| summarize vm_l = make_set(DstHostname,200)\n| extend k=1;\nVMwareESXi\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| extend SrcUsername = extract(@'\\[info\\]\\s+\\[(.*?)\\]', 1, SyslogMessage)\n| extend k = 1\n| join (a_vm) on k\n| where vm_l !has DstHostname\n| summarize n_vm = make_set(DstHostname,200) by SrcUsername, bin(TimeGenerated, 10m)\n| where array_length(n_vm) >= threshold\n| extend hostname = iff(array_length(n_vm) > 0, n_vm[0], \"\")\n| extend NTDomain = tostring(split(hostname, '\\\\', 1)[0]), HostName = tostring(split(hostname, '.', 0)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when backup activity failed.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "let lbtime = 6h;\nCiscoISEEvent\n| where TimeGenerated > ago(lbtime)\n| where EventId in ('60095', '60098')\n| project TimeGenerated, DvcHostname, DvcIpAddr\n| extend HostCustomEntity = DvcHostname\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies Microsoft-signed Binaries and Scripts that are not system initiated. This technique is commonly used in phishing attacks.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let Bin = externaldata(Binary: string) [@\"https://raw.githubusercontent.com/sonnyakhere/LOLBAS_to_CSV/main/lolbas.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet ioc = dynamic([\"http\", \"ftp\"]);\nSecurityEvent\n| where EventID == 4688\n| where TimeGenerated between ( ago(1d) .. now() )\n// Looking to exclude system initiated activity\n| where SubjectUserName !endswith \"$\"\n| where SubjectUserName != \"SYSTEM\"\n| where ParentProcessName has_any (Bin)\n// Looking to only include details of those that have command line activities matching 1 or more of the defined IOCs\n| where CommandLine has_any (ioc)\n| project TimeGenerated, SubjectMachineName, SubjectUserName, ParentProcessName, Process, CommandLine\n| sort by TimeGenerated asc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects the creation of credential dumping tools files. Several credential dumping tools export files with hardcoded file names.\nRef: https://jpcertcc.github.io/ToolAnalysisResultSheet/\n Topic: Attacker Tools Threat Protection Essentials"}, {"role": "assistant", "content": "// Enter a reference list of malicious file artifacts\nlet MaliciousFileArtifacts = dynamic ([\"lsass.dmp\",\"test.pwd\",\"lsremora.dll\",\"lsremora64.dll\",\"fgexec.exe\",\"pwdump\",\"kirbi\",\"wce_ccache\",\"wce_krbtkts\",\"wceaux.dll\",\"PwHashes\",\"SAM.out\",\"SECURITY.out\",\"SYSTEM.out\",\"NTDS.out\" \"DumpExt.dll\",\"DumpSvc.exe\",\"cachedump64.exe\",\"cachedump.exe\",\"pstgdump.exe\",\"servpw64.exe\",\"servpw.exe\",\"pwdump.exe\",\"fgdump-log\"]);\nEvent\n| where EventLog == \"Microsoft-Windows-Sysmon/Operational\" and EventID==11\n| parse EventData with * 'TargetFilename\">' TargetFilename \"<\" *\n| where TargetFilename has_any (MaliciousFileArtifacts)\n| parse EventData with * 'ProcessGuid\">' ProcessGuid \"<\" * 'Image\">' Image \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, Image, ProcessGuid, TargetFilename\n| extend HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Compromised agent pools in pipelines can allow build process breaches. While creating agent pools isnt inherently malicious, their infrequent creation makes them notable for Azure DevOps monitoring.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where OperationName =~ \"Library.AgentPoolCreated\"\n| extend AgentPoolName = tostring(Data.AgentPoolName)\n| extend AgentPoolId = tostring(Data.AgentPoolId)\n| extend IsHosted = tostring(Data.IsHosted)\n| extend IsLegacy = tostring(Data.IsLegacy)\n| project-reorder TimeGenerated, ActorUPN, UserAgent, IpAddress, AuthenticationMechanism, OperationName, AgentPoolName, IsHosted, IsLegacy, Data\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "MFA fatigue attack is a cybersecurity threat where attackers exploit user exhaustion from multi-factor authentication prompts to trick them into providing their MFA details thus compromising their own security. The query identifies MFA fatigue attempts in the Okta data. \n Ref: https://sec.okta.com/everythingisyes.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let PushThreshold = 10;\nOktaSSO\n| where ((eventType_s ==\"user.authentication.auth_via_mfa\" and column_ifexists('debugContext_debugData_factor_s', '') == \"OKTA_VERIFY_PUSH\") or eventType_s == \"system.push.send_factor_verify_push\" or eventType_s == \"user.mfa.okta_verify.deny_push\") \n| summarize IPAddress = make_set(client_ipAddress_s,100), City = make_set(client_geographicalContext_city_s,100),\n          successes = countif(eventType_s == \"user.authentication.auth_via_mfa\"),\n          denies = countif(eventType_s == \"user.mfa.okta_verify.deny_push\"),\n          pushes = countif(eventType_s == \"system.push.send_factor_verify_push\") by TimeGenerated, authenticationContext_externalSessionId_s, actor_alternateId_s,actor_displayName_s, outcome_result_s \n| summarize lasttime = max(TimeGenerated), firsttime = min(TimeGenerated),\n          successes = sum(successes), failures = sum(denies), pushes = sum(pushes) by  authenticationContext_externalSessionId_s, actor_alternateId_s,actor_displayName_s, outcome_result_s \n| extend seconds = lasttime - firsttime\n| where pushes >  (PushThreshold)\n| extend totalattempts = successes + failures\n| extend finding = case(\n            failures == pushes and pushes > 1, \"Authentication attempts not successful because multiple pushes denied\",\n            totalattempts == 0, \"Multiple pushes sent and ignored\",\n            successes > 0 and pushes > 3, \"Multiple pushes sent, eventual successful authentication!\",\n            \"Normal authentication pattern\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in SigninLogs table from any Email IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$';\nlet Signins = materialize(union isfuzzy=true\n( SigninLogs | where TimeGenerated >= ago(dt_lookBack)),\n( AADNonInteractiveUserSignInLogs | where TimeGenerated >= ago(dt_lookBack)\n    | extend Status = todynamic(Status), LocationDetails = todynamic(LocationDetails))\n| where isnotempty(UserPrincipalName) and UserPrincipalName matches regex emailregex\n| extend UserPrincipalName = tolower(UserPrincipalName)\n| extend Status = todynamic(Status), LocationDetails = todynamic(LocationDetails)\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city), Region = tostring(LocationDetails.countryOrRegion)\n| extend SigninLogs_TimeGenerated = TimeGenerated);\nlet SigninUPNs = Signins | distinct UserPrincipalName | summarize make_list(UserPrincipalName);\nThreatIntelligenceIndicator\n//Filtering the table for Email related IOCs\n| where isnotempty(EmailSenderAddress)\n| where TimeGenerated >= ago(ioc_lookBack)\n| where EmailSenderAddress in (SigninUPNs)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\"\n| join kind=innerunique (Signins) on $left.EmailSenderAddress == $right.UserPrincipalName\n| where SigninLogs_TimeGenerated < ExpirationDateTime\n| summarize SigninLogs_TimeGenerated = arg_max(SigninLogs_TimeGenerated, *) by IndicatorId, UserPrincipalName\n| project SigninLogs_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, EmailSenderName, EmailRecipient, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, IPAddress, UserPrincipalName, AppDisplayName, StatusCode, StatusDetails, NetworkIP, NetworkDestinationIP, NetworkSourceIP, Type\n| extend Name = tostring(split(UserPrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(UserPrincipalName, '@', 1)[0])\n| extend timestamp = SigninLogs_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule creates Microsoft Sentinel Alerts based on Darktrace Model Breaches, fetched every 5 minutes.\n Topic: Darktrace"}, {"role": "assistant", "content": "darktrace_model_alerts_CL \n| where dtProduct_s ==\"Policy Breach\"\n| project-rename EventSeverity=score_d, EventStartTime=breachTime_s, NetworkRuleName=modelName_s, NetworkRuleNumber=pid_d, ThreatId=threatID_d, ThreatCategory=dtProduct_s, SrcIpAddr=SourceIP, SrcHostname=hostname_s, SrcMacAddr=sourceMac_s, SrcPortNumber=sourcePort_s, DstIpAddr=destIP_s, DstPortNumber=destPort_s, DstHostname=destHost_s, DstMacAddr=destMac_s, DtCompliance=compliance_b, DtClientSensor=cSensor_b, DtDescription=description_s, DtAntigena=antigena_b, DtDeviceID=deviceId_d, DtSubnetID=sid_d, DtTags=tags_s, DtMitreTechniques=mitreTechniques_s, DtMessage=Message, DtUUID=uuid_g, DtBreachURL=breachUrl_s, DtSrcTypeLabel=typeLabel_s, DtTriggeredComponents=triggeredComponents_s, DtDetails=details_s, DtLongitude=longitude_d, DtLatitude=latitude_d, DtCategory=Category\n| extend EventCount=1, EventType=\"NetworkSession\", EventSchema=\"NetworkSession\", EventSchemaVersion=\"0.2.2\", EventResult=\"Success\", DvcAction = \"Allow\", EventVendor = \"Darktrace\", EventProduct = \"Darktrace DETECT\", EventEndTime=EventStartTime, ThreatName=NetworkRuleName, ThreatRiskLevel=EventSeverity\n| extend DtSentinelCategory = case(DtCategory == \"Suspicious\", \"Medium\", \n                                  DtCategory == \"Critical\", \"High\",\n                                  \"Informational\") \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create alert on websites blocked by ESET.\n Topic: ESETPROTECT"}, {"role": "assistant", "content": "ESETPROTECT\n| where EventType == 'FilteredWebsites_Event'\n| extend SrcUserName, FilePath, DvcHostname, DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a user consents to provide a previously-unknown Azure application with the same OAuth permissions used by the MDSec O365 Attack Toolkit (https://github.com/mdsecactivebreach/o365-attack-toolkit).\nThe default permissions/scope for the MDSec O365 Attack toolkit change sometimes but often include contacts.read, user.read, mail.read, notes.read.all, mailboxsettings.readwrite, files.readwrite.all, mail.send, files.read, and files.read.all.\nConsent to applications with these permissions should be rare, especially as the knownApplications list is expanded, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let detectionTime = 1d;\nlet joinLookback = 14d;\nlet threshold = 5;\nlet o365_attack_regex = \"contacts.read|user.read|mail.read|notes.read.all|mailboxsettings.readwrite|Files.ReadWrite.All|mail.send|files.read|files.read.all\";\nlet o365_attack = dynamic([\"contacts.read\", \"user.read\", \"mail.read\", \"notes.read.all\", \"mailboxsettings.readwrite\", \"Files.ReadWrite.All\", \"mail.send\", \"files.read\", \"files.read.all\"]);\nAuditLogs\n| where TimeGenerated > ago(detectionTime)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Consent to application\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\"\n      | extend AppDisplayName = tostring(TargetResource.displayName),\n               AppClientId = tostring(TargetResource.id),\n               props = TargetResource.modifiedProperties\n  )\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv\"] with (format=\"csv\"))) // NOTE: a MATCH from this list will cause the alert to NOT fire - please modify for your environment!\n| mv-apply ConsentFull = props on \n  (\n      where ConsentFull.displayName =~ \"ConsentAction.Permissions\"\n  )\n| parse ConsentFull with * \"ConsentType: \" GrantConsentType \", Scope: \" GrantScope1 \", CreatedDateTime\" * \"]\" *\n| where GrantConsentType != \"AllPrincipals\" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\n| where ConsentFull has_any (o365_attack)  \n| extend GrantScopeCount = countof(tolower(GrantScope1), o365_attack_regex, 'regex')\n| where GrantScopeCount > threshold\n| extend GrantInitiatedByAppName = tostring(InitiatedBy.app.displayName)\n| extend GrantInitiatedByAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend GrantInitiatedByUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend GrantInitiatedByAadUserId = tostring(InitiatedBy.user.id)\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\n| extend GrantInitiatedBy = iff(isnotempty(GrantInitiatedByUserPrincipalName), GrantInitiatedByUserPrincipalName, GrantInitiatedByAppName)\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend GrantUserAgent = AdditionalDetail.value\n  )\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantInitiatedByUserPrincipalName, GrantInitiatedByAadUserId, GrantInitiatedByAppName, GrantInitiatedByAppServicePrincipalId, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\n| join kind = leftouter (AuditLogs\n  | where TimeGenerated > ago(joinLookback)\n  | where LoggedByService =~ \"Core Directory\"\n  | where Category =~ \"ApplicationManagement\"\n  | where OperationName =~ \"Add service principal\"\n  | mv-apply TargetResource = TargetResources on \n      (\n          where TargetResource.type =~ \"ServicePrincipal\"\n          | extend props = TargetResource.modifiedProperties,\n                  AppClientId = tostring(TargetResource.id)\n      )\n  | mv-apply Property = props on \n      (\n          where Property.displayName =~ \"AppAddress\" and Property.newValue has \"AddressType\"\n          | extend AppReplyURLs = trim('\"',tostring(Property.newValue))\n      )\n  | distinct AppClientId, tostring(AppReplyURLs)\n) on AppClientId\n| join kind = innerunique (AuditLogs\n      | where TimeGenerated > ago(joinLookback)\n      | where LoggedByService =~ \"Core Directory\"\n      | where Category =~ \"ApplicationManagement\"\n      | where OperationName =~ \"Add OAuth2PermissionGrant\" or OperationName =~ \"Add delegated permission grant\"\n          | mv-apply TargetResource = TargetResources on \n          (\n              where TargetResource.type =~ \"ServicePrincipal\" and array_length(TargetResource.modifiedProperties) > 0 and isnotnull(TargetResource.displayName)\n              | extend GrantAuthentication = tostring(TargetResource.displayName)\n          )\n      | extend GrantOperation = OperationName\n      | project GrantAuthentication, GrantOperation, CorrelationId\n  ) on CorrelationId\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantInitiatedByUserPrincipalName, GrantInitiatedByAadUserId, GrantInitiatedByAppName, GrantInitiatedByAppServicePrincipalId, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\n| extend Name = tostring(split(GrantInitiatedByUserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(GrantInitiatedByUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses Windows security events to detect suspicious access attempts to the registry key values and sub-keys of Microsoft Entra ID Health service agents (e.g AD FS).\nInformation from AD Health service agents can be used to potentially abuse some of the features provided by those services in the cloud (e.g. Federation).\nThis detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable object: HKLM:\\SOFTWARE\\Microsoft\\ADHealthAgent.\nMake sure you set the SACL to propagate to its sub-keys. You can find more information in here https://github.com/OTRF/Set-AuditRule/blob/master/rules/registry/aad_connect_health_service_agent.yml\n\n Topic: Detections"}, {"role": "assistant", "content": "// ADHealth Monitoring Agent Registry Key\nlet aadHealthMonAgentRegKey = \"\\\\REGISTRY\\\\MACHINE\\\\SOFTWARE\\\\Microsoft\\\\MicrosoftOnline\\\\Reporting\\\\MonitoringAgent\";\n// Filter out known processes\nlet aadConnectHealthProcs = dynamic ([\n    'Microsoft.Identity.Health.Adfs.DiagnosticsAgent.exe',\n    'Microsoft.Identity.Health.Adfs.InsightsService.exe',\n    'Microsoft.Identity.Health.Adfs.MonitoringAgent.Startup.exe',\n    'Microsoft.Identity.Health.Adfs.PshSurrogate.exe',\n    'Microsoft.Identity.Health.Common.Clients.ResourceMonitor.exe',\n    'Microsoft.Identity.Health.AadSync.MonitoringAgent.Startup.exe',\n    'Microsoft.Identity.AadConnect.Health.AadSync.Host.exe',\n    'Microsoft.Azure.ActiveDirectory.Synchronization.Upgrader.exe',\n    'miiserver.exe'\n]);\n(union isfuzzy=true\n(\nSecurityEvent\n| where EventID == '4656'\n| where EventData has aadHealthMonAgentRegKey\n| extend EventData = parse_xml(EventData).EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Computer, EventID)\n| extend ObjectName = column_ifexists(\"ObjectName\", \"\"),\n    ObjectType = column_ifexists(\"ObjectType\", \"\")\n| where ObjectType == 'Key'\n| where ObjectName == aadHealthMonAgentRegKey\n| extend SubjectUserName = column_ifexists(\"SubjectUserName\", \"\"),\n    SubjectDomainName = column_ifexists(\"SubjectDomainName\", \"\"),\n    ProcessName = column_ifexists(\"ProcessName\", \"\")\n| extend Process = split(ProcessName, '\\\\', -1)[-1],\n    Account = strcat(SubjectDomainName, \"\\\\\", SubjectUserName)\n| where Process !in (aadConnectHealthProcs)\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), count() by EventID, Account, Computer, Process, SubjectUserName, SubjectDomainName, ObjectName, ObjectType, ProcessName\n),\n  ( WindowsEvent\n| where EventID == '4656' and EventData has aadHealthMonAgentRegKey\n| extend ObjectType = tostring(EventData.ObjectType)\n| where ObjectType == 'Key'\n| extend ObjectName = tostring(EventData.ObjectName)\n| where ObjectName == aadHealthMonAgentRegKey\n| extend ProcessName = tostring(EventData.ProcessName)\n| extend Process = tostring(split(ProcessName, '\\\\')[-1])\n| where Process !in (aadConnectHealthProcs)\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend SubjectUserName = tostring(EventData.SubjectUserName)\n| extend SubjectDomainName = tostring(EventData.SubjectDomainName)\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), count() by EventID, Account, Computer, Process, SubjectUserName, SubjectDomainName, ObjectName, ObjectType, ProcessName\n),\n(\nSecurityEvent\n| where EventID == '4663'\n| where ObjectType == 'Key'\n| where ObjectName == aadHealthMonAgentRegKey\n| extend Process = tostring(split(ProcessName, '\\\\', -1)[-1])\n| where Process !in (aadConnectHealthProcs)\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), count() by EventID, Account, Computer, Process, SubjectUserName, SubjectDomainName, ObjectName, ObjectType, ProcessName\n),\n( WindowsEvent\n| where EventID == '4663' and EventData has aadHealthMonAgentRegKey\n| extend ObjectType = tostring(EventData.ObjectType)\n| where ObjectType == 'Key'\n| extend ObjectName = tostring(EventData.ObjectName)\n| where ObjectName == aadHealthMonAgentRegKey\n| extend ProcessName = tostring(EventData.ProcessName)\n| extend Process = tostring(split(ProcessName, '\\\\')[-1])\n| where Process !in (aadConnectHealthProcs)\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend SubjectUserName = tostring(EventData.SubjectUserName)\n| extend SubjectDomainName = tostring(EventData.SubjectDomainName)\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), count() by EventID, Account, Computer, Process, SubjectUserName, SubjectDomainName, ObjectName, ObjectType, ProcessName\n)\n)\n// You can filter out potential machine accounts\n//| where AccountType != 'Machine'\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend Name = tostring(split(Account, \"\\\\\")[1]), NTDomain = tostring(split(Account, \"\\\\\")[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies users retrieving significantly more records from Dataverse than they have previously in the past 2 weeks. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let baseline_time = 14d;\nlet detection_time = 1d;\nDataverseActivity\n| where TimeGenerated between(ago(baseline_time) .. ago(detection_time - 1d))\n| where Message == \"RetrieveMultiple\"\n| extend numQueryCount = todouble(QueryResults)\n| extend QueryCount = iif(QueryResults contains \",\", todouble(countof(tostring(QueryResults), ',') + 1), numQueryCount)\n| extend QueryCount = iif(isnotempty(QueryCount), QueryCount, double(1))\n| summarize sum(QueryCount) by UserId\n| extend HistoricalBaseline = sum_QueryCount\n| join kind=inner (\n    DataverseActivity\n    | where TimeGenerated > ago(detection_time)\n    | where Message == \"RetrieveMultiple\"\n    | extend numQueryCount = todouble(QueryResults)\n    | extend QueryCount = iif(QueryResults contains \",\", todouble(countof(tostring(QueryResults), ',') + 1), numQueryCount)\n    | extend QueryCount = iif(isnotempty(QueryCount), QueryCount, double(1))\n    | summarize sum(QueryCount) by UserId\n    | extend CurrentExportRate = sum_QueryCount)\n    on UserId\n| where CurrentExportRate > HistoricalBaseline\n| project UserId, HistoricalBaseline, CurrentExportRate\n| join kind=inner(\n    DataverseActivity\n    | where TimeGenerated > ago(detection_time)\n    | where Message == \"RetrieveMultiple\"\n    | extend numQueryCount = todouble(QueryResults)\n    | extend QueryCount = iif(QueryResults contains \",\", todouble(countof(tostring(QueryResults), ',') + 1), numQueryCount)\n    | extend QueryCount = iif(isnotempty(QueryCount), QueryCount, double(1)))\n    on UserId\n| summarize\n    QuerySizes = make_set(QueryCount),\n    MostRecentQuery = max(TimeGenerated),\n    IPs = make_set(ClientIp),\n    UserAgents = make_set(UserAgent),\n    Entities = make_set(EntityName),\n    Queries = make_set(Query)\n    by UserId, InstanceUrl, HistoricalBaseline, CurrentExportRate\n| extend\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1]),\n    CloudAppId = int(32780)\n| project\n    MostRecentQuery,\n    UserId,\n    IPs,\n    UserAgents,\n    InstanceUrl,\n    Queries,\n    QuerySizes,\n    Entities,\n    HistoricalBaseline,\n    CurrentExportRate,\n    AccountName,\n    UPNSuffix,\n    CloudAppId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for virtual disks (images) seen for VM.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "VMwareESXi\n| where TimeGenerated > ago(24h)\n| where SyslogMessage has ('Matched discovered VM')\n| extend DstHostname = extract(@'vim.VirtualMachine\\S+,(.*?)\\]', 1, SyslogMessage)\n| extend ImageName = extract(@'ds:///vmfs/volumes/(.*)/(.*?),', 2, SyslogMessage)\n| summarize makeset(ImageName) by DstHostname\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects new user SSO success login.\n Topic: PingFederate"}, {"role": "assistant", "content": "let known_usrs = \nPingFederateEvent\n| where TimeGenerated between (ago(14d) .. (1d))\n| where isnotempty(DstUserName)\n| summarize makeset(DstUserName);\nPingFederateEvent\n| where EventType =~ 'SSO'\n| where EventMessage has 'success'\n| where DstUserName !in (known_usrs)\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in OfficeActivity.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour for OfficeActivity events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\nlet OfficeActivity_ = materialize(OfficeActivity\n  | where isnotempty(ClientIP)\n  | where TimeGenerated >= ago(dt_lookBack)\n  | extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]%]+)(%\\d+)?\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIP)[0]\n  | extend IPAddress = iff(array_length(ClientIPValues) > 0, tostring(ClientIPValues[0]), '')\n  | project-rename OfficeActivity_TimeGenerated = TimeGenerated);\nlet ActivityIPs = OfficeActivity_ | summarize IPs = make_list(IPAddress);\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = materialize(ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = coalesce(NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress)\n  | where TI_ipEntity in (ActivityIPs)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where  Active == true and ExpirationDateTime > now()\n  | where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\");\nIP_Indicators\n// Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n| join kind=innerunique (OfficeActivity_)\n  on $left.TI_ipEntity == $right.IPAddress\n// Filter out OfficeActivity events that occurred after the expiration of the corresponding indicator\n| where OfficeActivity_TimeGenerated < ExpirationDateTime\n// Group the results by IndicatorId and keep the OfficeActivity event with the latest timestamp\n| summarize OfficeActivity_TimeGenerated = arg_max(OfficeActivity_TimeGenerated, *) by IndicatorId\n// Select the desired output fields\n| project OfficeActivity_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, TI_ipEntity, ClientIP, UserId, Operation, ResultStatus, RecordType, OfficeObjectId, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n| extend timestamp = OfficeActivity_TimeGenerated, Name = tostring(split(UserId, '@', 0)[0]), UPNSuffix = tostring(split(UserId, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected usage of AttachUserPolicy/AttachGroupPolicy/AttachRolePolicy by CRUD IAM policy. Attackers could use these operations for privilege escalation. Verify these actions with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n  | where EventName in (\"PutUserPolicy\",\"PutRolePolicy\",\"PutGroupPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n  | extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n  | extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n  | mvexpand Statement\n  | extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n  | extend Action = tostring(Action)\n  | where Effect =~ \"Allow\" and (Action contains \"iam:Create\" and (Action contains \"iam:Get\" or Action contains \"iam:List\")  and Action contains \"iam:Update\" and Action contains \"iam:Delete\") and Resource == \"*\" and Condition == \"\"\n  | extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n  | extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n  | extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n  | extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n    AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n  | distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, UserIdentityUserName\n  | extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies IPs with failed attempts to sign in to one or more disabled accounts using the IP through which successful signins from other accounts have happened.\nThis could indicate an attacker who obtained credentials for a list of accounts and is attempting to login with those accounts, some of which may have already been disabled.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n50057 - User account is disabled. The account has been disabled by an administrator.\nThis query has also been updated to include UEBA logs IdentityInfo and BehaviorAnalytics for contextual information around the results.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let aadFunc = (tableName: string) {\nlet failed_signins = table(tableName)\n| where ResultType == \"50057\"\n| where ResultDescription == \"User account is disabled. The account has been disabled by an administrator.\";\nlet disabled_users = failed_signins | summarize by UserPrincipalName;\ntable(tableName)\n  | where ResultType == 0\n  | where isnotempty(UserPrincipalName)\n  | where UserPrincipalName !in (disabled_users)\n| summarize\n        successfulAccountsTargettedCount = dcount(UserPrincipalName),\n        successfulAccountSigninSet = make_set(UserPrincipalName, 100),\n        successfulApplicationSet = make_set(AppDisplayName, 100)\n    by IPAddress, Type\n    // Assume IPs associated with sign-ins from 100+ distinct user accounts are safe\n    | where successfulAccountsTargettedCount < 50\n    | where isnotempty(successfulAccountsTargettedCount)\n  | join kind=inner (failed_signins\n| summarize\n    StartTime = min(TimeGenerated),\n    EndTime = max(TimeGenerated),\n    totalDisabledAccountLoginAttempts = count(),\n    disabledAccountsTargettedCount = dcount(UserPrincipalName),\n    applicationsTargeted = dcount(AppDisplayName),\n    disabledAccountSet = make_set(UserPrincipalName, 100),\n    disabledApplicationSet = make_set(AppDisplayName, 100)\nby IPAddress, Type\n| order by totalDisabledAccountLoginAttempts desc) on IPAddress\n| project StartTime, EndTime, IPAddress, totalDisabledAccountLoginAttempts, disabledAccountsTargettedCount, disabledAccountSet, disabledApplicationSet, successfulApplicationSet, successfulAccountsTargettedCount, successfulAccountSigninSet, Type\n| order by totalDisabledAccountLoginAttempts};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n| join kind=leftouter (\n    BehaviorAnalytics\n    | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n    | where EventSource =~ \"Azure AD\"\n    | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress, UserPrincipalName\n    | project-rename IPAddress = SourceIPAddress\n    | summarize\n        Users = make_set(UserPrincipalName, 100),\n        UsersInsights = make_set(UsersInsights, 100),\n        DevicesInsights = make_set(DevicesInsights, 100),\n        IPInvestigationPriority = sum(InvestigationPriority)\n    by IPAddress\n) on IPAddress\n| extend SFRatio = toreal(toreal(disabledAccountsTargettedCount)/toreal(successfulAccountsTargettedCount))\n| where SFRatio >= 0.5\n| sort by IPInvestigationPriority desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies changes to DLP policy, specifically policies which are updated or removed. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let create_policy_ignore_time_window = 10m;\nlet query_frequency = 1h;\nlet dlp_policy_events = PowerPlatformAdminActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where EventOriginalType == \"GovernanceApiPolicyOperation\"\n    | where PropertyCollection has_any (\"DeleteDlpPolicy\", \"UpdateDlpPolicy\", \"CreateDlpPolicy\")\n    | mv-expand PropertyCollection\n    | extend\n        Name = tostring(PropertyCollection.Name),\n        Value = tostring(PropertyCollection.Value)\n    | summarize Properties = make_bag(bag_pack(Name, Value))\n        by\n        TimeGenerated,\n        EventOriginalUid\n    | extend\n        PolicyName = tostring(Properties['powerplatform.analytics.resource.display_name']),\n        EventType = tostring(Properties['powerplatform.analytics.resource.tenant.governance.api_policy.operation_name']),\n        ActorName = tostring(Properties['enduser.principal_name']),\n        PolicyId = tostring(Properties['powerplatform.analytics.resource.id']),\n        AdditionalInfo = Properties['powerplatform.analytics.resource.tenant.governance.api_policy.additional_resources'];\nlet delete_events = dlp_policy_events\n    | where EventType == \"DeleteDlpPolicy\";\nlet update_events = dlp_policy_events\n    | where EventType == \"UpdateDlpPolicy\";\nlet create_events = dlp_policy_events\n    | where EventType == \"CreateDlpPolicy\"\n    | extend ignore_time = TimeGenerated + create_policy_ignore_time_window;\nunion\n    delete_events,\n    (update_events\n    | join kind=leftouter (\n        create_events\n        | project-away TimeGenerated\n        )\n        on PolicyId\n    | where isempty(ignore_time) or TimeGenerated > ignore_time\n    | project-away ignore_time)\n| where TimeGenerated >= ago(query_frequency)\n| extend\n    AccountName = tostring(split(ActorName, \"@\")[0]),\n    UPNSuffix = tostring(split(ActorName, \"@\")[1])\n| project\n    TimeGenerated,\n    ActorName,\n    EventType,\n    PolicyName,\n    PolicyId,\n    AccountName,\n    UPNSuffix,\n    AdditionalInfo\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for PLC login security alerts.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where TimeGenerated > ago(24h)\n| where EventOriginalType =~ 'Alert'\n| where EventType has 'Login'\n| project TimeGenerated, DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The following query tries to detect creation of a new user using a known DEV-0270 username/password schema\n Topic: Dev 0270 Detection and Hunting"}, {"role": "assistant", "content": "(union isfuzzy=true\n(SecurityEvent\n| where EventID == 4688\n| where CommandLine has_all ('net user', '/add') \n| parse CommandLine with * \"user \" username \" \"*\n| extend password = extract(@\"\\buser\\s+[^\\s]+\\s+([^\\s]+)\", 1, CommandLine) \n| where username in('DefaultAccount') or password in('P@ssw0rd1234', '_AS_@1394') \n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName, ProcessNameFullPath = NewProcessName, EventID, Activity, CommandLine, EventSourceName, Type\n),\n(DeviceProcessEvents \n| where InitiatingProcessCommandLine has_all('net user', '/add') \n| parse InitiatingProcessCommandLine with * \"user \" username \" \"* \n| extend password = extract(@\"\\buser\\s+[^\\s]+\\s+([^\\s]+)\", 1, InitiatingProcessCommandLine) \n| where username in('DefaultAccount') or password in('P@ssw0rd1234', '_AS_@1394') \n| extend Account = strcat(InitiatingProcessAccountDomain, @'\\', InitiatingProcessAccountName), Computer = DeviceName\n)\n)\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountNTDomain = tostring(split(Account, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a Global Administrator elevates access to all subscriptions and management groups in a tenant. When a Global Administrator elevates access they are assigned the User Access Administrator role at root scope. This Microsoft Sentinel Analytic Rule monitors who has elevated access in your tenant so that admins can take appropriate action. [Learn more](https://learn.microsoft.com/en-us/azure/role-based-access-control/elevate-access-global-admin?tabs=azure-portal)\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where Category =~ \"AzureRBACRoleManagementElevateAccess\"\n| where ActivityDisplayName =~ \"User has elevated their access to User Access Administrator for their Azure Resources\"\n| extend Actor = tostring(InitiatedBy.user.userPrincipalName)\n| extend IPAddress = tostring(InitiatedBy.user.ipAddress) \n| project\n    TimeGenerated,\n    Actor,\n    OperationName,\n    IPAddress,\n    Result,\n    LoggedByService\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query lists DNS queries not found in the top 1 million queries in the past 14 days. Please note: To enhance performance, this query uses summarized data if available.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let min_t = ago(14d);\nlet max_t = now();\nlet dt = 1d;\n// calculate avg. eps(events per second)\nlet eps = materialize (_Im_Dns\n  | project TimeGenerated\n  | where TimeGenerated > ago(5m)\n  | count\n  | extend Count = Count / 300);\nlet maxSummarizedTime = toscalar (\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL \n      | where EventTime_t >= min_t\n      | summarize max_TimeGenerated=max(EventTime_t)\n      | extend max_TimeGenerated = datetime_add('hour', 1, max_TimeGenerated)\n      ),\n      (\n      print(min_t)\n      | project max_TimeGenerated = print_0\n      )\n  | summarize maxTimeGenerated = max(max_TimeGenerated) \n  );\nlet summarizationexist = materialize(\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > ago(1d) \n      | project v = int(2)\n      ),\n      (\n      print int(1) \n      | project v = print_0\n      )\n  | summarize maxv = max(v)\n  | extend sumexist = (maxv > 1)\n  );\n  let allData = ( union isfuzzy=true\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) > 1000\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(starttime=todatetime(ago(2d)), endtime=ago(dt))\n          | where TimeGenerated > maxSummarizedTime\n          | summarize Count=count() by DnsQuery\n          | top 1000000 by Count\n          | summarize TopOneMillionDNSQuery=make_list(DnsQuery,1000000)\n          | extend exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) between (501 .. 1000)\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(starttime=todatetime(ago(3d)), endtime=ago(dt))\n          | where TimeGenerated > maxSummarizedTime\n          | summarize Count=count() by DnsQuery\n          | top 1000000 by Count\n          | summarize TopOneMillionDNSQuery=make_list(DnsQuery,1000000)\n          | extend exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) <= 500\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(starttime=todatetime(ago(4d)), endtime=ago(dt))\n          | where TimeGenerated > maxSummarizedTime\n          | summarize Count=count() by DnsQuery\n          | top 1000000 by Count\n          | summarize TopOneMillionDNSQuery=make_list(DnsQuery,1000000)\n          | extend exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t between (min_t .. ago(dt)) and isnotempty(DnsQuery_s)\n      | project-rename\n          DnsQuery=DnsQuery_s,\n          Count=count__d\n      | extend Count = toint(Count)\n      | summarize TotalCount=toint(sum(Count)) by DnsQuery\n      | top 1000000 by TotalCount\n      | summarize TopOneMillionDNSQuery=make_list(DnsQuery,1000000)\n      )\n      );\n_Im_Dns(starttime=ago(dt),endtime=now())\n| summarize Count=count() by DnsQuery\n| where isnotempty(DnsQuery) and DnsQuery !in (allData)\n| extend DNS_0_DomainName = DnsQuery\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The VMware SD-WAN Edge Management Plane reported a failed IDS/IPS signature update. This can indicate a potential management plane issue, an Edge OS version mismatch (IDS/IPS has been introduced in release 5.2.0.0), or a software issue.\n\nIf the Edge was able to download signature files before, this error means that the IPS/IDS engine can still provide a level of protection, however, signatures might be missing or inaccurate. If the Edge has no valid signature file, this error could indicate that the Edge Firewall cannot protect from network threats. Topic: VMware SD-WAN and SASE"}, {"role": "assistant", "content": "VMware_VECO_EventLogs_CL\n| where event == \"MGD_ATPUP_APPLY_IDPS_SIGNATURE_FAILED\"\n| extend idpsSignatureVersion = extract(\"\\\"version\\\":\\\"([0-9]+)\\\"\", 1, tostring(todynamic(detail).data))\n| extend todynamic(detail).edgeSerialNumber\n| extend todynamic(detail).data\n| project-rename idpsSignatureData = detail_data\n| project-rename edgeSerialNumber = detail_edgeSerialNumber\n| project-away detail\n\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule detects any registry value creation or modification of Windows Update registry keys to disable Windows Update. This could be an indication of defense evasion by an adversary on a compromised host.\n Topic: Malware Protection Essentials"}, {"role": "assistant", "content": "// List of Windows Firewall registry keys to monitor\nlet windowsUpdateRegistryList = dynamic([\n  'HKEY_LOCAL_MACHINE\\\\Software\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate',\n  'HKEY_LOCAL_MACHINE\\\\Software\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate\\\\AU'\n  ]);\n_ASim_RegistryEvent\n| where EventType in ('RegistryValueSet', 'RegistryKeyCreated') \n| where RegistryKey has_any (windowsUpdateRegistryList) \n| where RegistryValue has_any ('AUOptions', 'NoAutoUpdate') and RegistryValueData == '1'\n| project\n    TimeGenerated,\n    DvcHostname,\n    ActorUsername,\n    ActorUsernameType,\n    ActingProcessId,\n    ActingProcessName,\n    ActingProcessCommandLine,\n    RegistryKey,\n    RegistryValue,\n    RegistryValueType,\n    RegistryValueData\n| extend HostName = tostring(split(DvcHostname, '.')[0])\n| extend DnsDomain = tostring(strcat_array(array_slice(split(DvcHostname, '.'), 1, -1), '.'))\n| extend Username = iff(tostring(ActorUsernameType) == 'Windows', tostring(split(ActorUsername, '\\\\')[1]), ActorUsername)\n| extend NTDomain = iff(tostring(ActorUsernameType) == 'Windows', tostring(split(ActorUsername, '\\\\')[0]), ActorUsername)\n| extend Username = iff(tostring(ActorUsernameType) == 'UPN', tostring(split(ActorUsername, '@')[0]), Username)\n| extend UPNSuffix = iff(tostring(ActorUsernameType) == 'UPN', tostring(split(ActorUsername, '@')[1]), '')\n| extend RegHive = tostring(split(RegistryKey, '\\\\')[0]), RegKey = tostring(strcat_array(array_slice(split(RegistryKey, '\\\\'), 1, -1), '\\\\')) \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests from different countries for user in shotr term.\n Topic: PingFederate"}, {"role": "assistant", "content": "let known_countries = \nPingFederateEvent\n| where TimeGenerated between (ago(1d) .. (1h))\n| where isnotempty(DstGeoCountry)\n| summarize makeset(DstGeoCountry);\nPingFederateEvent\n| where isnotempty(DstGeoCountry)\n| where DstGeoCountry !in (known_countries)\n| extend AccountCustomEntity = DstUserName\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when multiple (more than one) users mailboxes are configured to forward to the same destination. \nThis could be an attacker-controlled destination mailbox configured to collect mail from multiple compromised user accounts.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let queryfrequency = 1d;\nlet queryperiod = 7d;\nOfficeActivity\n| where TimeGenerated > ago(queryperiod)\n| where OfficeWorkload =~ \"Exchange\"\n//| where Operation in (\"Set-Mailbox\", \"New-InboxRule\", \"Set-InboxRule\")\n| where Parameters has_any (\"ForwardTo\", \"RedirectTo\", \"ForwardingSmtpAddress\")\n| mv-apply DynamicParameters = todynamic(Parameters) on (summarize ParsedParameters = make_bag(bag_pack(tostring(DynamicParameters.Name), DynamicParameters.Value)))\n| evaluate bag_unpack(ParsedParameters, columnsConflict='replace_source')\n| extend DestinationMailAddress = tolower(case(\n    isnotempty(column_ifexists(\"ForwardTo\", \"\")), column_ifexists(\"ForwardTo\", \"\"),\n    isnotempty(column_ifexists(\"RedirectTo\", \"\")), column_ifexists(\"RedirectTo\", \"\"),\n    isnotempty(column_ifexists(\"ForwardingSmtpAddress\", \"\")), trim_start(@\"smtp:\", column_ifexists(\"ForwardingSmtpAddress\", \"\")),\n    \"\"))\n| where isnotempty(DestinationMailAddress)\n| mv-expand split(DestinationMailAddress, \";\")\n| extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIP)[0]\n| extend ClientIP = tostring(ClientIPValues[0]), Port = tostring(ClientIPValues[1])\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DistinctUserCount = dcount(UserId), UserId = make_set(UserId, 250), Ports = make_set(Port, 250), EventCount = count() by tostring(DestinationMailAddress), ClientIP\n| where DistinctUserCount > 1 and EndTime > ago(queryfrequency)\n| mv-expand UserId to typeof(string)\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Exploitable Cloud Security Issues are ones that expose cloud resources to the internet and allow initial access to your environment. Topic: ARGOSCloudSecurity"}, {"role": "assistant", "content": "ARGOS_CL | where exploitable_b\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible protocol abuse.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "CiscoWSAEvent\n| where DstPortNumber !in ('80', '443')\n| where NetworkApplicationProtocol in~ ('HTTP', 'HTTPs')\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a sudden increase in count of Azure Key Vault secret or vault access operations by CallerIPAddress. The query leverages a built-in KQL anomaly detection algorithm to find large deviations from baseline Azure Key Vault access patterns.\nAny sudden increase in the count of Azure Key Vault accesses can be an indication of adversary dumping credentials via automated methods. If you are seeing any noise, try filtering known source(IP/Account) and user-agent combinations.\nTimeSeries Reference Blog: https://techcommunity.microsoft.com/t5/azure-sentinel/looking-for-unknown-anomalies-what-is-normal-time-series/ba-p/555052\n Topic: Azure Key Vault"}, {"role": "assistant", "content": "let starttime = 14d;\nlet timeframe = 1d;\nlet scorethreshold = 3;\nlet baselinethreshold = 25;\n// To avoid any False Positives, filtering using AppId is recommended. For example the AppId 509e4652-da8d-478d-a730-e9d4a1996ca4 has been added in the query as it corresponds\n// to Azure Resource Graph performing VaultGet operations for indexing and syncing all tracked resources across Azure.\nlet Allowedappid = dynamic([\"509e4652-da8d-478d-a730-e9d4a1996ca4\"]);\nlet OperationList = dynamic(\n[\"SecretGet\", \"KeyGet\", \"VaultGet\"]);\nlet TimeSeriesData = AzureDiagnostics\n| where TimeGenerated between (startofday(ago(starttime))..startofday(now()))\n| where not((identity_claim_appid_g in (Allowedappid)) and OperationName == 'VaultGet')\n  | where ResourceType =~ \"VAULTS\" and ResultType =~ \"Success\"\n| where OperationName in (OperationList)\n| extend ResultType = column_ifexists(\"ResultType\", \"None\"), CallerIPAddress = column_ifexists(\"CallerIPAddress\", \"None\")\n| where ResultType !~ \"None\" and isnotempty(ResultType)\n| where CallerIPAddress !~ \"None\" and isnotempty(CallerIPAddress)\n| project TimeGenerated, OperationName, Resource, CallerIPAddress\n| make-series HourlyCount=count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step timeframe by CallerIPAddress;\n//Filter anomolies against TimeSeriesData\nlet TimeSeriesAlerts = TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(HourlyCount, scorethreshold, -1, 'linefit')\n| mv-expand HourlyCount to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)\n| where anomalies > 0 | extend AnomalyHour = TimeGenerated\n| where baseline > baselinethreshold // Filtering low count events per baselinethreshold\n| project CallerIPAddress, AnomalyHour, TimeGenerated, HourlyCount, baseline, anomalies, score;\nlet AnomalyHours = TimeSeriesAlerts | where TimeGenerated > ago(2d) | project TimeGenerated;\n// Filter the alerts since specified timeframe\nTimeSeriesAlerts\n| where TimeGenerated > ago(2d)\n// Join against base logs since specified timeframe to retrive records associated with the hour of anomoly\n| join kind = innerunique (\nAzureDiagnostics\n| where TimeGenerated > ago(2d)\n| where not((identity_claim_appid_g in (Allowedappid)) and OperationName == 'VaultGet')\n| where ResourceType =~ \"VAULTS\" and ResultType =~ \"Success\"\n| where OperationName in (OperationList)\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\n| extend ResultType = column_ifexists(\"ResultType\", \"NoResultType\")\n| extend requestUri_s = column_ifexists(\"requestUri_s\", \"None\"), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = column_ifexists(\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\", \"None\"),identity_claim_oid_g = column_ifexists(\"identity_claim_oid_g\", \"\"),\n  identity_claim_upn_s = column_ifexists(\"identity_claim_upn_s\", \"\")\n| extend\n    CallerObjectId = iff(isempty(identity_claim_oid_g), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, identity_claim_oid_g),\n    CallerObjectUPN = iff(isempty(identity_claim_upn_s), identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s, identity_claim_upn_s)\n| extend id_s = column_ifexists(\"id_s\", \"None\"), CallerIPAddress = column_ifexists(\"CallerIPAddress\", \"None\"), clientInfo_s = column_ifexists(\"clientInfo_s\", \"None\")\n| summarize PerOperationCount=count(), LatestAnomalyTime = arg_max(TimeGenerated,*) by bin(TimeGenerated,1h), Resource, OperationName, id_s, CallerIPAddress, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, identity_claim_oid_g, requestUri_s, clientInfo_s\n) on CallerIPAddress\n| extend\n    CallerObjectId = iff(isempty(identity_claim_oid_g), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, identity_claim_oid_g),\n    CallerObjectUPN = iff(isempty(identity_claim_upn_s), identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s, identity_claim_upn_s)\n| summarize EventCount=count(), OperationNameList = make_set(OperationName,1000), RequestURLList = make_set(requestUri_s, 100), AccountList = make_set(CallerObjectId, 100), AccountMax = arg_max(CallerObjectId,*) by Resource, id_s, clientInfo_s, LatestAnomalyTime\n| extend timestamp = LatestAnomalyTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "User account created and then deleted within 10 minutes across last 14 days\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// TimeDelta is the difference between when the account was created and when it was deleted, default is set to 10min or less\nlet timedelta = 10m;\nSecurityEvent \n// A user account was created\n| where EventID == \"4720\"\n| where AccountType == \"User\"\n| project creationTime = TimeGenerated, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid \n| join kind= inner (\n   SecurityEvent\n   // A user account was deleted \n   | where EventID == \"4726\" \n| where AccountType == \"User\"\n| project deletionTime = TimeGenerated, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid \n) on Computer, TargetUserName\n| where deletionTime - creationTime < timedelta\n| extend TimeDelta = deletionTime - creationTime\n| where tolong(TimeDelta) >= 0\n| project TimeDelta, creationTime, CreateEventID, Computer, TargetUserName, UserPrincipalName, AccountUsedToCreate, \ndeletionTime, DeleteEventID, AccountUsedToDelete\n| extend timestamp = creationTime, HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')), Name = tostring(split(UserPrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(UserPrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple failed queries in short timeframe.\n Topic: Snowflake"}, {"role": "assistant", "content": "let threshold = 50;\nSnowflake\n| where EXECUTION_STATUS_s !~ 'SUCCESS'\n| summarize count() by TargetUsername, bin(TimeGenerated, 5m)\n| where count_ > threshold\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for top applications with protocol or network errors.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "ImpervaWAFCloud\n| where TimeGenerated > ago(24h)\n| where DvcAction startswith 'REQ_BAD_'\n| summarize count() by DstIpAddr, DstDomainHostname\n| top 10 by count_\n| extend IPCustomEntity = DstIpAddr, DomainNameCustom = DstDomainHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies files downloaded from Dataverse by departing or terminated employees which are copied to USB mounted drives. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let drive_mount_lookback = 14d;\nlet query_frequency = 1h;\nDataverseActivity\n| distinct InstanceUrl\n| join kind=inner (DeviceFileEvents\n    | where TimeGenerated >= ago(query_frequency))\n    on $left.InstanceUrl == $right.FileOriginUrl\n| join kind=inner (MSBizAppsTerminatedEmployees()) on $left.InitiatingProcessAccountUpn == $right.UserPrincipalName\n| join kind=inner (DeviceEvents\n    | where TimeGenerated >= ago(drive_mount_lookback)\n    | where ActionType == \"UsbDriveMounted\"\n    | extend DriveLetter = tostring(AdditionalFields.DriveLetter)\n    | summarize MountedDriveLetters = make_set(DriveLetter, 26) by DeviceId, DeviceName)\n    on DeviceId\n| extend TargetDriveLetter = tostring(split(FolderPath, \"\\\\\")[0])\n| where set_has_element(MountedDriveLetters, TargetDriveLetter)\n| join kind=inner (DeviceInfo\n    | summarize arg_max(TimeGenerated, DeviceId, PublicIP) by DeviceName)\n    on DeviceId\n| project-rename\n    UserId = UserPrincipalName\n| summarize LatestEvent = arg_max(TimeGenerated, *), Files = make_set(FileName, 100) by UserId, InstanceUrl\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    LatestEvent,\n    UserId,\n    PublicIP,\n    Files,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0003 (Financial data has been observed in unencrypted data stores. Encrypt data at rest to comply with this CIS requirement)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0003\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a user consents to provide a previously-unknown Azure application with offline access via OAuth.\nOffline access will provide the Azure App with access to the listed resources without requiring two-factor authentication.\nConsent to applications with offline access and read capabilities should be rare, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let detectionTime = 1d;\nlet joinLookback = 14d;\nAuditLogs\n| where TimeGenerated > ago(detectionTime)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Consent to application\"\n| where TargetResources has \"offline\"\n| mv-apply TargetResource=TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\"\n      | extend ModifiedProperties = TargetResource.modifiedProperties,\n               AppDisplayName = tostring(TargetResource.displayName),\n               AppClientId = tolower(tostring(TargetResource.id))\n  )\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv\"] with (format=\"csv\")))\n| mv-apply Properties=ModifiedProperties on \n  (\n      where Properties.displayName =~ \"ConsentAction.Permissions\"\n      | extend ConsentFull = tostring(Properties.newValue)\n      | extend ConsentFull = trim(@'\"',tostring(ConsentFull))\n  )\n| parse ConsentFull with * \"ConsentType: \" GrantConsentType \", Scope: \" GrantScope1 \"]\" *\n| where ConsentFull has \"offline_access\" and ConsentFull has_any (\"Files.Read\", \"Mail.Read\", \"Notes.Read\", \"ChannelMessage.Read\", \"Chat.Read\", \"TeamsActivity.Read\", \"Group.Read\", \"EWS.AccessAsUser.All\", \"EAS.AccessAsUser.All\")\n| where GrantConsentType != \"AllPrincipals\" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\n| extend GrantInitiatedByAppName = tostring(InitiatedBy.app.displayName)\n| extend GrantInitiatedByAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend GrantInitiatedByUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend GrantInitiatedByAadUserId = tostring(InitiatedBy.user.id)\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\n| extend GrantInitiatedBy = iff(isnotempty(GrantInitiatedByUserPrincipalName), GrantInitiatedByUserPrincipalName, GrantInitiatedByAppName)\n| extend GrantUserAgent = tostring(iff(AdditionalDetails[0].key =~ \"User-Agent\", AdditionalDetails[0].value, \"\"))\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantInitiatedByUserPrincipalName, GrantInitiatedByAadUserId, GrantInitiatedByAppName, GrantInitiatedByAppServicePrincipalId, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\n| join kind = leftouter (AuditLogs\n| where TimeGenerated > ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add service principal\"\n| mv-apply TargetResource=TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\"\n      | extend ModifiedProperties = TargetResource.modifiedProperties,\n               AppClientId = tolower(TargetResource.id)\n  )\n| mv-apply ModifiedProperties=TargetResource.modifiedProperties on \n   (\n      where ModifiedProperties.displayName =~ \"AppAddress\" and ModifiedProperties.newValue has \"AddressType\"\n      | extend AppReplyURLs = ModifiedProperties.newValue\n   )\n | distinct AppClientId, tostring(AppReplyURLs)\n)\non AppClientId\n| join kind = innerunique (AuditLogs\n| where TimeGenerated > ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add OAuth2PermissionGrant\" or OperationName =~ \"Add delegated permission grant\"\n | mv-apply TargetResource=TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\" and array_length(TargetResource.modifiedProperties) > 0 and isnotnull(TargetResource.displayName)\n      | extend GrantAuthentication = tostring(TargetResource.displayName)\n  )\n| extend GrantOperation = OperationName\n| project GrantAuthentication, GrantOperation, CorrelationId\n) on CorrelationId\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantInitiatedByUserPrincipalName, GrantInitiatedByAadUserId, GrantInitiatedByAppName, GrantInitiatedByAppServicePrincipalId, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\n| extend Name = tostring(split(GrantInitiatedByUserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(GrantInitiatedByUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query detects Base64 obfuscated scripts for malicious file execution. This technique is used by attackers to exploit a remote code execution vulnerability in the Apache Log4j to evade detection.\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "Syslog\n| where Facility == 'user'\n| where SyslogMessage has \"AUOMS_EXECVE\"\n| parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n| project TimeGenerated, EventType, Computer, EventData\n| where EventType =~ \"AUOMS_EXECVE\"\n| parse EventData with * \"syscall=\" syscall \" syscall_r=\" * \" success=\" success \" exit=\" exit \" a0\" * \" ppid=\" ppid \" pid=\" pid \" audit_user=\" audit_user \" auid=\" auid \" user=\" user \" uid=\" uid \" group=\" group \" gid=\" gid \"effective_user=\" effective_user \" euid=\" euid \" set_user=\" set_user \" suid=\" suid \" filesystem_user=\" filesystem_user \" fsuid=\" fsuid \" effective_group=\" effective_group \" egid=\" egid \" set_group=\" set_group \" sgid=\" sgid \" filesystem_group=\" filesystem_group \" fsgid=\" fsgid \" tty=\" tty \" ses=\" ses \" comm=\\\"\" comm \"\\\" exe=\\\"\" exe \"\\\"\" * \"cwd=\\\"\" cwd \"\\\"\" * \"name=\\\"\" name \"\\\"\" * \"cmdline=\" cmdline\n| extend cmdline = trim_end('redactors=.*',cmdline) \n| where cmdline has \"/Basic/Command/Base64/\"\n| where exe has_any (\"curl\", \"wget\")\n| parse cmdline with * \"Base64/\" OriginalEncodedCommand:string\n| extend EncodedCommand = extract(\"((?:[A-Za-z0-9+/-]{4})*(?:[A-Za-z0-9+/-]{2}==|[A-Za-z0-9+/-]{3}=|[A-Za-z0-9+/-]{4}))\", 1, OriginalEncodedCommand) \n| extend DecodedCommand = base64_decode_tostring(EncodedCommand) \n| project TimeGenerated, Computer, audit_user, user, cmdline, DecodedCommand, EncodedCommand\n| extend timestamp = TimeGenerated\n| extend Host_0_HostName = Computer\n| extend Account_0_Name = user\n| sort by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match across IOCs related to an actor tracked by Microsoft as Caramel Tsunami\n Topic: Windows Forwarded Events"}, {"role": "assistant", "content": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/SOURGUM.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet file_path1 = (iocs | where Type =~ \"filepath1\" | project IoC);\nlet file_path2 = (iocs | where Type =~ \"filepath2\" | project IoC);\nlet file_path3 = (iocs | where Type =~ \"filepath3\" | project IoC);\nlet reg_key = (iocs | where Type =~ \"regkey\" | project IoC);\nWindowsEvent\n| where EventID == 4688 and (EventData has_any (file_path1) or EventData has_any (file_path2) or  EventData has_any (file_path3) or EventData has_any ('reg add') or EventData has_any (reg_key) )\n| extend CommandLine = tostring(EventData.CommandLine)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| where (CommandLine has_any (file_path1)) or\n  (CommandLine has_any (file_path3)) or\n  (CommandLine has 'reg add' and CommandLine has_any (reg_key) and CommandLine has_any (file_path2)) or \n  (NewProcessName has_any (file_path1)) or\n  (NewProcessName has_any (file_path3)) or\n  (ParentProcessName has_any (file_path1)) or \n  (ParentProcessName has_any (file_path3)) \n| extend Account = strcat(EventData.SubjectDomainName,\"\\\\\", EventData.SubjectUserName)\n| extend NewProcessId = tostring(EventData.NewProcessId)\n| extend IP = tostring(EventData.IpAddress)\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type, IP\n| extend Alert = 'SOURGUM IOC detected'\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountNTDomain = tostring(split(Account, @'\\')[0])\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Suspicious activity of the STS token of a Glue endpoint machine hosted by ECS (for example, by SSRF) indicates a possible token hijacking. An attacker may have stolen the token and could abuse its permissions to escalate privileges and move laterally in the cloud account.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let aws_public_ips = externaldata(prefixes: string)\n[ \n     h@'https://aka.ms/awspublicipaddresse/aws-public-ip-addresses/ip-ranges.json'\n]\nwith(format='multijson');\nlet timeframe = 30m;\nlet lookback = 12h;\n//Get the AccessKey in the STS token when Lambda service assumes the Role periodically (max assumed session can be 12h)\nlet sts_token = AWSCloudTrail\n| where TimeGenerated >= ago (lookback)\n| where EventSource == \"sts.amazonaws.com\" and SourceIpAddress == \"glue.amazonaws.com\"\n| extend instanceId = tostring(parse_json(RequestParameters).roleSessionName)\n| extend token = tostring(parse_json(ResponseElements).credentials.accessKeyId);\n//Get the identities who used that STS token - this can be the Lambda function itself which assumed it (legit),\n//but it can also be an external identity which abuses the token permissions\nlet tokenUsage = AWSCloudTrail\n| where TimeGenerated >= ago (timeframe)\n| join kind=inner sts_token on $left.UserIdentityAccessKeyId == $right.token\n| extend region = AWSRegion1\n| project-away SourceIpAddress1, UserIdentityUserName1, UserIdentityArn1, TimeGenerated1;\n//Check whether the called identity is legit\naws_public_ips\n| mv-expand todynamic(prefixes)\n| extend ip_prefix=tostring(todynamic(prefixes.['ip_prefix']))\n| extend region=tostring(todynamic(prefixes.['region']))\n| extend service=tostring(todynamic(prefixes.['service']))\n| project-away prefixes\n| where service == \"AMAZON\" \n| join kind=inner tokenUsage on region\n| where SourceIpAddress !contains \"amazonaws.com\"\n| where ipv4_is_private(SourceIpAddress) == false\n| extend IsInRange = ipv4_is_in_range(SourceIpAddress, ip_prefix)\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName, AssumedRoleArn = UserIdentityArn\n| summarize timestamp=arg_max(timestamp,*), r = make_set(IsInRange) by SourceIpAddress, UserIdentityUserName, UserIdentityArn\n| where not (set_has_element(r, true))\n| project-away ip_prefix, IsInRange\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for top applications.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "CiscoWSAEvent\n| where TimeGenerated > ago(24h)\n| summarize count() by AvcApplicationName, SrcUserName\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule generates an alert when the configured threshold for DNS queries to non-existent domains is breached. This helps in identifying possible C2 communications. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let lookback = 1h;\nlet threshold = 200;\n_Im_Dns(starttime=ago(lookback), responsecodename='NXDOMAIN')\n| summarize NXDOMAINCount=count() by SrcIpAddr, bin(TimeGenerated, 15m)\n| where NXDOMAINCount > threshold\n| join kind=inner (_Im_Dns(starttime=ago(lookback), responsecodename='NXDOMAIN')\n  | summarize DNSQueries = makeset(DnsQuery) by SrcIpAddr)\n  on SrcIpAddr\n| extend NXDOMAINthreshold=threshold\n| project-away SrcIpAddr1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in W3CIISLog.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour for W3CIISLog events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and W3CIISLog events\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      W3CIISLog\n      | where TimeGenerated >= ago(dt_lookBack)\n      | where isnotempty(cIP)\n      | where ipv4_is_private(cIP) == false and cIP !startswith \"fe80\" and cIP !startswith \"::\" and cIP !startswith \"127.\"\n      | extend W3CIISLog_TimeGenerated = TimeGenerated\n  )\n  on $left.TI_ipEntity == $right.cIP\n  // Filter out W3CIISLog events that occurred after the expiration of the corresponding indicator\n  | where W3CIISLog_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and keep the W3CIISLog event with the latest timestamp\n  | summarize W3CIISLog_TimeGenerated = arg_max(W3CIISLog_TimeGenerated, *) by IndicatorId, cIP\n  // Select the desired output fields\n  | project timestamp = W3CIISLog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\n    TI_ipEntity, Computer, sSiteName, cIP, sIP, sPort, csMethod, csUserName, scStatus, scSubStatus, scWin32Status,\n    NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Hunting Query detects unusual child processes of w3wp.exe not seen in 14 days, signaling potential web server compromise and web shell installation.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet known_procs = (\nSecurityEvent\n| where TimeGenerated between(lookback..starttime)\n| where EventID == 4688\n| where ParentProcessName hassuffix \"w3wp.exe\"\n| extend ProcessHost = strcat(Process, \"-\", Computer)\n| summarize by ProcessHost);\nSecurityEvent\n| where TimeGenerated between(starttime..endtime)\n| where EventID == 4688\n| where ParentProcessName hassuffix \"w3wp.exe\"\n| extend ProcessHost = strcat(Process, \"-\", Computer)\n| where ProcessHost !in (known_procs)\n| project-reorder TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "At least 200 high threat level queries generated by single host in 1 hour. Queries do not need to be the same. Customize query count, scheduling, responses and more. This rule depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC**](https://aka.ms/sentinel-InfobloxCloudDataConnector-parser).\n Topic: Infoblox Cloud Data Connector"}, {"role": "assistant", "content": "let threshold = 200;\nInfobloxCDC\n| where DeviceEventClassID has_cs \"RPZ\"\n| where ThreatLevel_Score >= 80\n| summarize count() by SourceIP\n| where count_ > threshold\n| join kind=inner (InfobloxCDC\n  | where DeviceEventClassID has_cs \"RPZ\"\n  | where ThreatLevel_Score >= 80\n  ) on SourceIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The security analytic rule is designed to scrutinize network activity involving private IP addresses within an organizations internal network. By filtering log entries to include only those where either the source or the destination IP is private, the rule focuses on internal communications that could indicate unauthorized access, internal threats, or other security anomalies. Topic: SINEC Security Guard"}, {"role": "assistant", "content": "SINECSecurityGuard_CL\n| where ipv4_is_private(source_ip) or ipv4_is_private(destination_ip)\n| project source_ip, destination_ip, signature_id, signature_name\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies setting a registry key under HKCU, launching slui.exe and then ChangePK.exe.\n Topic: FalconFriday"}, {"role": "assistant", "content": "DeviceProcessEvents\n| where InitiatingProcessParentFileName =~ \"slui.exe\"\n| where InitiatingProcessFileName =~ \"changepk.exe\"\n| where ProcessIntegrityLevel == \"High\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for DCShadow attacks\n Topic: Alsid For AD"}, {"role": "assistant", "content": "afad_parser\n| where MessageType == 2 and Codename == \"DCShadow\"\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The VMware SD-WAN Edge appliance captured a potentially malicious traffic flow. Please investigate the IOC information available.\n\nThis analytics rule analyzes Syslog streams. Topic: VMware SD-WAN and SASE"}, {"role": "assistant", "content": "Syslog\n| where SyslogMessage contains \"VCF Alert\"\n| project-rename EdgeName=HostName\n| project-away Computer, HostIP, SourceSystem, Type\n| extend IdpsSignatureName = extract(\"SIGNATURE=(.+) CATEGORY=\", 1, SyslogMessage)\n| extend IdpsAlertCategory = extract(\"CATEGORY=(.+) SEVERITY=\", 1, SyslogMessage)\n| extend IdpsAlertSeverity = extract(\"SEVERITY=(.+) SRC_IP=\", 1, SyslogMessage)\n| extend IdpsSignatureId = extract(\"SIG_ID=([0-9]+) SIGNATURE=\", 1, SyslogMessage)\n| extend OverlaySegmentName = extract(\"SEGMENT_NAME=(.+) SIG_ID=\", 1, SyslogMessage)\n| extend IpProtocol = extract(\"PROTO=([A-Z]+) SRC=\", 1, SyslogMessage)\n| extend SrcIpAddress = extract(\"SRC=(.+) DST=\", 1, SyslogMessage)\n| extend SrcPort = extract(\"SPT=([0-9]+) DPT=\", 1, SyslogMessage)\n| extend DstIpAddress = extract(\"DST=(.+) SPT=\", 1, SyslogMessage)\n| extend DstPort = extract(\"DPT=(.+) DEST_DOMAIN=\", 1, SyslogMessage)\n| extend VictimIp = extract(\"TARGET_IP=(.+) TARGET_PORT=\", 1, SyslogMessage)\n| extend AttackerIp = extract(\"SRC_IP=(.+) SRC_PORT=\", 1, SyslogMessage)\n| extend DomainName = extract(\"DEST_DOMAIN=(.+) FW_POLICY_NAME=\", 1, SyslogMessage)\n| extend EdgeFwAction = extract(\"ATP_ACTION=(.+) SEGMENT=\", 1, SyslogMessage)\n| extend SyslogTag = extract(\"$(.+): ACTION=\", 1, SyslogMessage)\n| extend FwPolicyName = extract(\"FW_POLICY_NAME=(.+) SEGMENT_NAME=\", 1, SyslogMessage)\n| project\n    TimeGenerated,\n    IdpsSignatureName,\n    IdpsAlertSeverity,\n    IdpsAlertCategory,\n    IdpsSignatureId,\n    EdgeFwAction,\n    EdgeName,\n    SrcIpAddress,\n    IpProtocol,\n    SrcPort,\n    DstIpAddress,\n    DstPort,\n    DomainName,\n    AttackerIp,\n    VictimIp,\n    FwPolicyName,\n    SyslogTag"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This creates an incident in the event a client generates excessive amounts of DNS queries for non-existent domains.\n Topic: Infoblox NIOS"}, {"role": "assistant", "content": "let threshold = 200;\nInfoblox_dnsclient\n| where isnotempty(DnsResponseCode)\n| where DnsResponseCode =~ \"NXDOMAIN\"\n| summarize count() by SrcIpAddr, bin(TimeGenerated,15m)\n| where count_ > threshold\n| join kind=inner (Infoblox_dnsclient\n    | where isnotempty(DnsResponseCode)\n    | where DnsResponseCode =~ \"NXDOMAIN\"\n    ) on SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule will monitor specific IPS event in the data.\n Topic: Cisco SD-WAN"}, {"role": "assistant", "content": "CiscoSyslogUTD \n| where Classification == \"Enter classification\" \n| summarize count() by Classification \n| where count_ > 10\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected S3 bucket thats publicly exposed, which could lead to sensitive information leakage to the public. Verify the S3 object configurations.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n  | where EventName == \"PutObjectAcl\" and isempty(ErrorCode) and isempty(ErrorMessage)\n  | extend Grant = parse_json(tostring((parse_json(RequestParameters).AccessControlPolicy))).AccessControlList.Grant\n  | mvexpand Grant\n  | extend cannedacl = parse_json(tostring((parse_json(RequestParameters))))\n  | extend URI = parse_json(Grant).Grantee.URI, type = parse_json(Grant).Grantee.[\"xsi:type\"], xamzacl = parse_json(cannedacl).[\"x-amz-acl\"]\n  | where (type == \"Group\" and (URI endswith \"AllUsers\" or URI endswith \"AuthenticatedUsers\"))\n    or xamzacl in (\"authenticated-read\",\"public-read\",\"public-read-write\")\n  | extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n  | extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n  | extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n  | extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n    AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n  | extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This creates an incident when a known Malware is detected on a endpoint managed by a Carbon Black.\n Topic: VMware Carbon Black Cloud"}, {"role": "assistant", "content": "CarbonBlackEvents_CL\n| extend eventTime = datetime(1970-01-01) + tolong(eventTime_d/1000) * 1sec\n| where targetApp_effectiveReputation_s =~ \"KNOWN_MALWARE\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by eventTime, deviceDetails_deviceName_s, deviceDetails_deviceIpAddress_s, processDetails_fullUserName_s, processDetails_targetName_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies compromises and attacks and detect malicious activities in ones IP entity from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1d;\nlet ioc_lookBack = 14d; \nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | where isnotempty(NetworkIP)\nor isnotempty(EmailSourceIpAddress)\nor isnotempty(NetworkDestinationIP)\nor isnotempty(NetworkSourceIP)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TIipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TIipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity);\nIP_Indicators\n  | join kind=innerunique (\n  CloudAppEvents\n    | where isnotempty(IPAddress)\n    | where TimeGenerated >= ago(dt_lookBack)\n    | extend CloudAppEvents_TimeGenerated = TimeGenerated) on $left.TI_ipEntity == $right.IPAddress\n    | where CloudAppEvents_TimeGenerated < ExpirationDateTime\n    | summarize CloudAppEventsTimeGenerated = argmax(CloudAppEvents_TimeGenerated, *) by IndicatorId, IPAddress\n    | extend\n        Description = max_CloudAppEvents_TimeGenerated_Description,\n        ActivityGroupNames = max_CloudAppEvents_TimeGenerated_ActivityGroupNames,\n        ThreatType = max_CloudAppEvents_TimeGenerated_ThreatType,\n        ExpirationDateTime = max_CloudAppEvents_TimeGenerated_ExpirationDateTime,\n        ConfidenceScore = max_CloudAppEvents_TimeGenerated_ConfidenceScore,\n        TI_ipEntity = max_CloudAppEvents_TimeGenerated_TI_ipEntity,\n        NetworkDestinationIP = max_CloudAppEvents_TimeGenerated_NetworkDestinationIP,\n        NetworkSourceIP = max_CloudAppEvents_TimeGenerated_NetworkSourceIP,\n        EmailSourceIPAddress = max_CloudAppEvents_TimeGenerated_EmailSourceIpAddress\n    | project CloudAppEventsTimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, TI_ipEntity, NetworkDestinationIP, NetworkSourceIP, EmailSourceIPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "TLSv1.1 in Use\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL\n| where severity_s == \"medium\"\n| where progress_status_s == \"New\"\n| where status_s != \"inactive\"\n| where issue_name_s == \"TLSv1.1 in Use\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches source IP addresses with blocked requests.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "ImpervaWAFCloud\n| where TimeGenerated > ago(24h)\n| where DvcAction startswith 'REQ_BLOCKED'\n| summarize count() by SrcIpAddr\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies IP addresses that may be performing DNS lookups associated with common currency mining pools.\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM DNS schema\n Topic: Detections"}, {"role": "assistant", "content": "let minersDomains=dynamic([\"monerohash.com\", \"do-dear.com\", \"xmrminerpro.com\", \"secumine.net\", \"xmrpool.com\", \"minexmr.org\", \"hashanywhere.com\", \n\"xmrget.com\", \"mininglottery.eu\", \"minergate.com\", \"moriaxmr.com\", \"multipooler.com\", \"moneropools.com\", \"xmrpool.eu\", \"coolmining.club\", \n\"supportxmr.com\", \"minexmr.com\", \"hashvault.pro\", \"xmrpool.net\", \"crypto-pool.fr\", \"xmr.pt\", \"miner.rocks\", \"walpool.com\", \"herominers.com\", \n\"gntl.co.uk\", \"semipool.com\", \"coinfoundry.org\", \"cryptoknight.cc\", \"fairhash.org\", \"baikalmine.com\", \"tubepool.xyz\", \"fairpool.xyz\", \"asiapool.io\", \n\"coinpoolit.webhop.me\", \"nanopool.org\", \"moneropool.com\", \"miner.center\", \"prohash.net\", \"poolto.be\", \"cryptoescrow.eu\", \"monerominers.net\", \"cryptonotepool.org\", \n\"extrmepool.org\", \"webcoin.me\", \"kippo.eu\", \"hashinvest.ws\", \"monero.farm\", \"supportxmr.com\", \"xmrpool.eu\", \"linux-repository-updates.com\", \"1gh.com\", \n\"dwarfpool.com\", \"hash-to-coins.com\", \"hashvault.pro\", \"pool-proxy.com\", \"hashfor.cash\", \"fairpool.cloud\", \"litecoinpool.org\", \"mineshaft.ml\", \"abcxyz.stream\", \n\"moneropool.ru\", \"cryptonotepool.org.uk\", \"extremepool.org\", \"extremehash.com\", \"hashinvest.net\", \"unipool.pro\", \"crypto-pools.org\", \"monero.net\", \n\"backup-pool.com\", \"mooo.com\", \"freeyy.me\", \"cryptonight.net\", \"shscrypto.net\"]);\n_Im_Dns(domain_has_any=minersDomains)\n| extend HostName = tostring(split(Dvc, \".\")[0]), DomainIndex = toint(indexof(Dvc, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Dvc, DomainIndex + 1), Dvc)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Attackers with the CreateAccessKey permissions for other users can create an access Key ID and secret access key belonging to another user in the AWS environment for privilege escalation.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n  | where  EventName == \"CreateAccessKey\" and tostring(parse_json(RequestParameters).userName) == \"Root\" and isempty(ErrorCode) and isempty(ErrorMessage)\n  | project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \n  UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource,UserIdentityArn, AdditionalEventData, ResponseElements, RequestParameters\n  | extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n  | extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This policy detects when access was granted directly (not via groups). This policy is defined by default by Authomize to track AWS only. It is possible to edit the existing policy or create more versions to track other apps. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"New direct access policy was granted against organizational policy\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query searches process creation events that are indicative of an attacker spawning OS commands from an Oracle database.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let timeframe= 1h;\nDeviceProcessEvents\n| where Timestamp >= ago(timeframe)\n| where InitiatingProcessFileName =~ \"oracle.exe\"\n| where not(FileName in~ (\"conhost.exe\", \"oradim.exe\"))\n// Begin allow-list.\n// End allow-list.\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects remote to local (R2L) SSH connection to internal host.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "UbiquitiAuditEvent\n| where EventCategory =~ 'firewall'\n| where ipv4_is_private(SrcIpAddr) == 'False'\n| where ipv4_is_private(DstIpAddr)\n| where DstPortNumber == '22'\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for scanned files.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where TimeGenerated > ago(24h)\n| where EventMessage =~ 'Scan Started'\n| order by TimeGenerated desc\n| extend FileCustomEntity = SrcFileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect Code-level runtime vulnerabilities in your environment Topic: Dynatrace"}, {"role": "assistant", "content": "DynatraceSecurityProblems\n| where VulnerabilityType == \"CODE_LEVEL\" and DAVISRiskLevel == \"CRITICAL\" and Muted == false\n| summarize  arg_max(LastUpdatedTimeStamp, *) by SecurityProblemId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects program run from unexpected location.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "let susp_exe_folders = dynamic([@'\\tmp\\', @'\\TEMP\\', @'/tmp/', @'\\Users\\Public\\', @'\\$Recycle.bin', @'\\Windows\\Fonts\\', @'$']);\nCyberArkEPM\n| where EventSubType != 'AttackAttempt'\n| where ActingProcessName has_any (susp_exe_folders)\n| project EventEndTime, EventMessage, ActorUsername, ActingProcessFileInternalName\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows processes which attempted to access Internet.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where TimeGenerated > ago(24h)\n| where EventSubType in~ ('DetectAccessInternet', 'Internet')\n| summarize count() by ActingProcessFileInternalName, ActorUsername\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Escalates threats detected by Eset.\n Topic: Eset Security Management Center"}, {"role": "assistant", "content": "eset_CL\n| where event_type_s == \"Threat_Event\"\n| extend HostCustomEntity = hostname_s, AccountCustomEntity = username_s, IPCustomEntity = ipv4_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query creates an alert for active IONIX Action Items with high urgency (9-10).\n Urgency can be altered using the \"min_urgency\" variable in the query.\n Topic: IONIX"}, {"role": "assistant", "content": "let timeframe = 14d;\nlet time_generated_bucket = 1h;\nlet min_urgency = 9;\nlet maxTimeGeneratedBucket = toscalar(\n   CyberpionActionItems_CL\n   | where TimeGenerated > ago(timeframe)\n   | summarize max(bin(TimeGenerated, time_generated_bucket))\n   );\nCyberpionActionItems_CL\n | where TimeGenerated > ago(timeframe) and is_open_b == true\n | where bin(TimeGenerated, time_generated_bucket) == maxTimeGeneratedBucket\n | where urgency_d >= min_urgency\n | extend timestamp = opening_datetime_t\n | extend DNSCustomEntity = host_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for Named Pipe events that either contain one of the known IOCs or make use of patterns that can be linked to CobaltStrike usage.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let timeframe=1h;\nlet CobaltStrikeDefaults= dynamic([@\"msagent_\", @\"MSSE-\", @\"postex_\", @\"status_\", @\"mypipe-f\", @\"mypipe-h\",@\"ntsvcs_\",@\"scerpc_\", @\"mojo.5688.8052.\"]);\nlet CobaltStrikeMallable= dynamic([@\"win_svc\", @\"ntsvcs\", @\"scerpc\", @\"status_\", @\"SearchTextHarvester\", @\"DserNamePipe\",@\"wkssvc_\",@\"scerpc_\", @\"spoolss_\",@\"CatalogChangeListener\",@\"fullduplex_\",@\"demoagent_\",@\"PGMessagePipe\",@\"MsFteWds\",@\"postex_ssh_\",@\"windows.update.manager\",@\"\\f4c3\",@\"\\f53f\",@\"halfduplex_\"]);\nDeviceEvents\n| where Timestamp >= ago(timeframe)\n| where ActionType == \"NamedPipeEvent\"\n| extend AdditionalFields=parse_json(AdditionalFields)\n| extend ThreadId=tostring(AdditionalFields.ThreadId)\n| extend PipeName=tostring(AdditionalFields.PipeName)\n// creating string based variants of the processIDs for matching several times later\n| extend InitiatingPID=tostring(InitiatingProcessId)\n| extend InitiatingParentPID=tostring(InitiatingProcessParentId)\n// Begin allow-list.\n// End allow-list.\n| where PipeName has_any (CobaltStrikeDefaults) or\n// Mojo is generated by Chrome(ium) browsers and teams and have distinct pattern including the (parent)ProcessId and ThreadId plus a random character string, CobaltStrike generates hex.\n      (PipeName matches regex @\"\\\\mojo\\.\\d+\\.\\d+\\.\" and not(PipeName matches regex @\"\\\\mojo\\.\\d+\\.\\d+\\.\\d+$\" or PipeName has InitiatingPID or PipeName has InitiatingParentPID or PipeName has ThreadId)) or\n// Chrome(ium) browsers sync processes have distinct pattern including the (parent)ProcessId and ThreadId plus a random character string, CobaltStrike generates hex.\n      (PipeName matches regex @\"\\\\(edge|chrome)\\.sync\\.\\d+\\.\\d+\\.\" and not(PipeName matches regex @\"\\\\(edge|chrome|edge\\.sync|chrome\\.sync)\\.\\d+\\.\\d+\\.\\d+$\" or PipeName has InitiatingPID or PipeName has InitiatingParentPID or PipeName has ThreadId)) or\n// PSHost is generated by PowerShell and has a distinct pattern including the (parent)ProcessId.\n      (PipeName matches regex @\"\\\\PSHost\\.\\d+\\.\" and not(PipeName matches regex @\"\\\\PSHost\\.\\d+\\.\\d+\\.\" or PipeName has InitiatingPID or PipeName has InitiatingParentPID)) or\n// Crashpad pipes have a distinct pattern including the ProcessId and a string of upper case characters.\n      (PipeName matches regex @\"\\\\crashpad_\" and not(PipeName matches regex @\"\\\\crashpad_\\d+_[A-Z]+\" or PipeName has InitiatingPID or PipeName has InitiatingParentPID)) or\n// Firefox pipes have a distinct pattern including the ProcessId and 1-3 digits which are sequential for each new pipe.\n      (PipeName matches regex @\"\\\\cubeb-pipe-\" and not(PipeName matches regex @\"\\\\cubeb-pipe-\\d+_[0-9]{1-3}+\" or PipeName has InitiatingPID)) or\n// Based on a list of public mallable profiles and a suffix that is a random HEX string.\n      (PipeName has_any (CobaltStrikeMallable) and PipeName matches regex @\"[a-fA-F0-9]{2,10}$\") or\n      (PipeName matches regex @\"\\\\pipe\\\\[0-9a-f]{7,10}\" or PipeName matches regex @\"\\\\pipe\\\\[0-9a-f]{8}\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Digital Shadows Analytic rule for generating Microsoft Sentinel incidents for the data ingested by app polling for excluded classifications Topic: Digital Shadows"}, {"role": "assistant", "content": "let DSSearchLight_view  = view () { DigitalShadows_CL | where app_s == \"exclude\" | extend EventVendor=\"Digital Shadows\", EventProduct=\"SearchLight\",Type=\"DigitalShadows_CL\",EventStartTime=raised_t,EventMessage=title_s,EventOriginalUid=triage_id_g,EventOriginalType=classification_s | extend EventOriginalSeverity=iif(isempty(risk_level_s), risk_assessment_risk_level_s, risk_level_s) | extend EventSeverity = case(EventOriginalSeverity == 'none', 'Informational', EventOriginalSeverity == 'very-low', 'Low',EventOriginalSeverity == 'low', 'Low',EventOriginalSeverity == 'medium', 'Medium',EventOriginalSeverity == 'high', 'High',EventOriginalSeverity == 'very-high', 'High','Informational') | extend EventReportUrl=iif(isempty(id_d), strcat('https://portal-digitalshadows.com/triage/alerts/',portal_id_s),strcat('https://portal-digitalshadows.com/triage/alert-incidents/',id_d)) | extend AdditionalFields = pack(\"assets\", assets_s, \"comments\", comments_s, \"description\", description_s, \"incident_id\", id_d, \"alert_id\", id_g, \"short_code\", portal_id_s, \"impact\", impact_description_s, \"mitigation\", mitigation_s, \"risk_factors\", risk_factors_s, \"triage_status\", status_s, \"triage_id\", triage_id_g, \"triage_raised\", triage_raised_time_t,\"triage_updated\", triage_updated_time_t, \"updated\", updated_t) | project TimeGenerated, EventVendor,EventProduct, Type, EventStartTime,EventMessage, EventOriginalUid, EventOriginalType,EventOriginalSeverity, EventSeverity, EventReportUrl,AdditionalFields};DSSearchLight_view | summarize arg_max(TimeGenerated, *) by EventOriginalUid | extend description = AdditionalFields.description | extend impact = AdditionalFields.impact | extend mitigation = AdditionalFields.mitigation | extend status = AdditionalFields.triage_status | extend comments = AdditionalFields.comments"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for account is Disabled. Does not effect score as its easily enabled.\n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'UserDisabled'"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies users whose user account or credentials have been compromised.\n Topic: Commvault Security IQ"}, {"role": "assistant", "content": "SecurityIncident\n| where Title has \"Cvlt Alert\" and Description has \"User\" and Description has \"Compromised\" and Status has \"New\"\n| extend extracted_word = extract(\"User\\\\s(.*?)\\\\sCompromised\", 1, Description)\n| project TimeGenerated, Title, Description, Status\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies a user clicking on an email link whose threat category is classified as a malware\n Topic: ProofPointTap"}, {"role": "assistant", "content": "ProofPointTAPClicksPermitted_CL\n| where classification_s =~ \"malware\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by TimeGenerated, Sender = sender_s, SenderIPAddress = senderIP_s, Recipient = recipient_s, TimeClicked = clickTime_t, URLClicked = url_s\n| extend RecipientName = tostring(split(Recipient, \"@\")[0]), RecipientUPNSuffix = tostring(split(Recipient, \"@\")[1])\n| extend SenderName = tostring(split(Sender, \"@\")[0]), SenderUPNSuffix = tostring(split(Sender, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects query with abnormal proccess time.\n Topic: Snowflake"}, {"role": "assistant", "content": "let threshold = 10000;\nSnowflake\n| where TOTAL_ELAPSED_TIME_d > threshold\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when the log ingestion for the OnePasswordEventLogs_CL logs is failing. The alert is based on the healthevents that are created every 5 minutes and will trigger if no logs have been received for 1 hour.\n\nLog ingestion troubleshooting:\n<insert URL>\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "OnePasswordEventLogs_CL\n| where log_source == \"healthevents\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests using not the latest version of SAML protocol.\n Topic: PingFederate"}, {"role": "assistant", "content": "PingFederateEvent\n| where isnotempty(DeviceCustomString3)\n| extend proto = extract(@'(SAML)', 1, DeviceCustomString3)\n| extend ver = extract(@'(\\d+)', 1, DeviceCustomString3)\n| where proto =~ 'SAML'\n| where ver !~ '20'\n| extend AccountCustomEntity = DstUserName\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for outbound block rules deleted by non AI.\n Topic: ZeroNetworks"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nZNSegmentAudit\n| where TimeGenerated > ago(endtime-starttime)\n| where AuditTypeId == 30\n| where EnforcementSource != \"AI\"\n| extend Account_0_FullName = PerformedByName\n| extend Host_0_NetBiosName = DestinationEntityName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects server errors after multiple requests from same IP address.\n Topic: Tomcat"}, {"role": "assistant", "content": "let multi_errors = TomcatEvent\n| where toint(HttpStatusCode) >= 500 and toint(HttpStatusCode) <= 599\n| sort by EventStartTime asc\n| summarize MultipleServerErrors = count() by SrcIpAddr, bin(EventStartTime, 5m)\n| where MultipleServerErrors > 10;\nlet error_time_table = TomcatEvent\n| where toint(HttpStatusCode) >= 500 and toint(HttpStatusCode) <= 599\n| summarize error_time=min(EventStartTime) by SrcIpAddr\n| join kind=innerunique (multi_errors) on SrcIpAddr;\nTomcatEvent\n| where toint(HttpStatusCode) >= 100 and toint(HttpStatusCode) <= 399\n| summarize success_time=max(EventStartTime) by SrcIpAddr\n| join kind=innerunique (error_time_table) on SrcIpAddr\n| extend time_between_error_and_success = datetime_diff('second', error_time, success_time)\n| where time_between_error_and_success between (1 .. 300)\n| project time_between_error_and_success, error_time, success_time, SrcIpAddr\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query helps identify new, and potentially unapproved applications or bots being added to Teams.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet historical_bots = (\nOfficeActivity\n| where TimeGenerated between(lookback..starttime)\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where isnotempty(AddonName)\n| project AddonName);\nOfficeActivity\n| where TimeGenerated between(starttime..endtime)\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n// Look for add-ins we have never seen before\n| where AddonName in (historical_bots)\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for failed authentication events.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "CiscoISEEvent\n| where TimeGenerated > ago(24h)\n| where EventId in ('5400', '5401', '5412', '12508', '12514', '12516')\n| summarize count() by DstUserName\n| sort by count_"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query is Deprecated as its filter conditions will never yield results. This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in OfficeActivity data.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\n// let ioc_lookBack = 14d;\n// ThreatIntelligenceIndicator\n// // Picking up only IOC's that contain the entities we want\n// | where isnotempty(Url)\n// | where TimeGenerated >= ago(ioc_lookBack)\n// | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n// | where Active == true and ExpirationDateTime > now()\n// // using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n// | join kind=innerunique (\n// OfficeActivity\n// | where TimeGenerated >= ago(dt_lookBack)\n// //Extract the Url from a number of potential fields\n// | extend Url = iif(OfficeWorkload == \"AzureActiveDirectory\",extract(\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\", 1,ModifiedProperties),tostring(parse_json(ModifiedProperties)[12].NewValue))\n// | where isnotempty(Url)\n// // Ensure we get a clean URL\n// | extend Url = tostring(split(Url, ';')[0])\n// | extend OfficeActivity_TimeGenerated = TimeGenerated\n// // Project a single user identity that we can use for entity mapping\n// | extend User = iif(isnotempty(UserId), UserId, iif(isnotempty(Actor), tostring(parse_json(Actor)[0].ID), tostring(parse_json(Parameters)[0].Value)))\n// ) on Url\n// | where OfficeActivity_TimeGenerated < ExpirationDateTime\n// | summarize OfficeActivity_TimeGenerated = arg_max(OfficeActivity_TimeGenerated, *) by IndicatorId, Url\n// | project OfficeActivity_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Operation,\n// UserType, OfficeWorkload, Parameters, Url, User\n// | extend timestamp = OfficeActivity_TimeGenerated, Name = tostring(split(User, '@', 0)[0]), UPNSuffix = tostring(split(User, '@', 1)[0])\ndatatable() []\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Infected Device found on darkweb or Telegram\n Topic: Flare"}, {"role": "assistant", "content": "Firework_CL\n| where category_name_s contains \"Infected Device\" or source_s==\"genesis_market\" and (risk_score_d == \"3\" or risk_score_d == \"4\" or risk_score_d == \"5\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies potential tampering related to Microsoft security related products and services.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "let includeProc = dynamic([\"sc.exe\",\"net1.exe\",\"net.exe\", \"taskkill.exe\", \"cmd.exe\", \"powershell.exe\"]);\nlet action = dynamic([\"stop\",\"disable\", \"delete\"]);\nlet service1 = dynamic(['sense', 'windefend', 'mssecflt']);\nlet service2 = dynamic(['sense', 'windefend', 'mssecflt', 'healthservice']);\nlet params1 = dynamic([\"-DisableRealtimeMonitoring\", \"-DisableBehaviorMonitoring\" ,\"-DisableIOAVProtection\"]);\nlet params2 = dynamic([\"sgrmbroker.exe\", \"mssense.exe\"]);\nlet regparams1 = dynamic(['reg add \"HKLM\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender\"', 'reg add \"HKLM\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Advanced Threat Protection\"']);\nlet regparams2 = dynamic(['ForceDefenderPassiveMode', 'DisableAntiSpyware']);\nlet regparams3 = dynamic(['sense', 'windefend']);\nlet regparams4 = dynamic(['demand', 'disabled']);\nlet regparams5 = dynamic(['reg add \"HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\services\\\\HealthService\"', 'reg add \"HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Sense\"', 'reg add \"HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\WinDefend\"', 'reg add \"HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\MsSecFlt\"', 'reg add \"HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\DiagTrack\"', 'reg add \"HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\SgrmBroker\"', 'reg add \"HKLMSYSTEM\\\\CurrentControlSet\\\\Services\\\\SgrmAgent\"', 'reg add \"HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\AATPSensorUpdater\"' , 'reg add \"HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\AATPSensor\"', 'reg add \"HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\mpssvc\"']);\nlet regparams6 = dynamic(['/d 4','/d \"4\"','/d 0x00000004']);\nlet regparams7 = dynamic(['/d 1','/d \"1\"','/d 0x00000001']);\n(union isfuzzy=true\n(\nSecurityEvent\n| where EventID == 4688\n| extend ProcessName = tostring(split(NewProcessName, '\\\\')[-1])\n| where ProcessName in~ (includeProc)\n| where (CommandLine has_any (action) and CommandLine has_any (service1)) \nor (CommandLine has_any (params1) and CommandLine has 'Set-MpPreference' and CommandLine has '$true')\nor (CommandLine has_any (params2) and CommandLine has \"/IM\") \nor (CommandLine has_any (regparams5) and CommandLine has 'Start' and CommandLine has_any (regparams6))\nor (CommandLine has_any (regparams1) and CommandLine has_any (regparams2) and CommandLine has_any (regparams7)) \nor (CommandLine has \"start\" and CommandLine has \"config\" and CommandLine has_any (regparams3) and CommandLine has_any (regparams4))\n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName, ProcessNameFullPath = NewProcessName, EventID, Activity, CommandLine, EventSourceName, Type\n),\n(\nWindowsEvent\n| where EventID == 4688 and EventData has_any(includeProc)\n| where (EventData  has_any (action) and EventData has_any (service1)) \nor (EventData has_any (params1) and EventData has 'Set-MpPreference' and EventData has '$true')\nor (EventData has_any (params2) and EventData has \"/IM\") \nor (EventData has_any (regparams5) and EventData has 'Start' and EventData has_any (regparams6))\nor (EventData has_any (regparams1) and EventData has_any (regparams2) and EventData has_any (regparams7)) \nor (EventData has \"start\" and EventData has \"config\" and EventData has_any (regparams3) and EventData has_any (regparams4))\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend ProcessName = tostring(split(NewProcessName, '\\\\')[-1])\n| where ProcessName in~ (includeProc)\n| extend CommandLine = tostring(EventData.CommandLine) \n| where (CommandLine has_any (action) and CommandLine has_any (service1)) \nor (CommandLine has_any (params1) and CommandLine has 'Set-MpPreference' and CommandLine has '$true')\nor (CommandLine has_any (params2) and CommandLine has \"/IM\") \nor (CommandLine has_any (regparams5) and CommandLine has 'Start' and CommandLine has_any (regparams6))\nor (CommandLine has_any (regparams1) and CommandLine has_any (regparams2) and CommandLine has_any (regparams7)) \nor (CommandLine has \"start\" and CommandLine has \"config\" and CommandLine has_any (regparams3) and CommandLine has_any (regparams4))\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend AccountDomain = tostring(EventData.AccountDomain)\n| extend Activity=\"4688 - A new process has been created.\"\n| extend EventSourceName=Provider\n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName, ProcessNameFullPath = NewProcessName, EventID, Activity, CommandLine, EventSourceName, Type\n),\n(\nEvent\n| where Source =~ \"Microsoft-Windows-SENSE\"\n| where EventID == 87 and ParameterXml in (\"<Param>sgrmbroker</Param>\", \"<Param>WinDefend</Param>\")\n| project TimeGenerated, Computer, Account = UserName, EventID, Activity = RenderedDescription, EventSourceName = Source, Type\n),\n(\nDeviceProcessEvents\n| where InitiatingProcessFileName in~ (includeProc)\n| where (InitiatingProcessCommandLine has_any(action) and InitiatingProcessCommandLine has_any (service2) and InitiatingProcessParentFileName != 'cscript.exe')\nor (InitiatingProcessCommandLine has_any (params1) and InitiatingProcessCommandLine has 'Set-MpPreference' and InitiatingProcessCommandLine has '$true') \nor (InitiatingProcessCommandLine has_any (params2) and InitiatingProcessCommandLine has \"/IM\") \nor ( InitiatingProcessCommandLine has_any (regparams5) and  InitiatingProcessCommandLine has 'Start' and  InitiatingProcessCommandLine has_any (regparams6))\nor (InitiatingProcessCommandLine has_any (regparams1) and InitiatingProcessCommandLine has_any (regparams2) and InitiatingProcessCommandLine has_any (regparams7)) \nor (InitiatingProcessCommandLine has_any(\"start\") and InitiatingProcessCommandLine has \"config\" and InitiatingProcessCommandLine has_any (regparams3) and InitiatingProcessCommandLine has_any (regparams4))\n| extend Account = iff(isnotempty(InitiatingProcessAccountUpn), InitiatingProcessAccountUpn, InitiatingProcessAccountName), Computer = DeviceName\n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName = InitiatingProcessFileName, ProcessNameFullPath = FolderPath, Activity = ActionType, CommandLine = InitiatingProcessCommandLine, Type, InitiatingProcessParentFileName\n)\n)\n| extend timestamp = TimeGenerated\n| extend NTDomain = tostring(split(Account, '\\\\', 0)[0]), UserName = tostring(split(Account, '\\\\', 1)[0])\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = UserName\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies changes made at organization level in the Dataverse environment. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_frequency = 1h;\nDataverseActivity\n| where TimeGenerated >= ago(query_frequency)\n| where Message == \"Update\" and EntityName == \"organization\"\n| mv-expand Fields\n| extend FieldName = tostring(Fields.Name)\n| extend Value = tostring(Fields.Value)\n| where FieldName != \"organizationid\"\n| lookup MSBizAppsOrgSettings on FieldName\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    TimeGenerated,\n    UserId,\n    ClientIp,\n    FieldName,\n    Value,\n    DisplayName,\n    Description,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Alert if a cmdlet that can be translated to data exfiltration or mailbox access is executed on a VIP Mailbox.\n Topic: Microsoft Exchange Security - Exchange On-Premises"}, {"role": "assistant", "content": "let VIPRestriction = \"on\";\nExchangeAdminAuditLogs\n| where IsVIP or VIPRestriction =~ \"off\"\n| where UserOriented =~ 'Yes' and IsSensitive and ((IsRestrictedCmdLet and IsSenstiveCmdletParameters) or IsRestrictedCmdLet == false)\n| extend Level = iif (Status == \"Failure\", \"Medium\", \"High\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects alerts with high risk score value.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where Reason =~ 'NEW_ALERT'\n| where Status =~ 'open'\n| extend r_score = 0.85 * toint(RiskDetailRiskScoreMaxScore)\n| extend i_RiskDetailRiskScoreScore = toint(RiskDetailRiskScoreScore)\n| where i_RiskDetailRiskScoreScore > r_score\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses AzureActivity logs (Administrative category) to identify a suspicious application adding a server instance to an Microsoft Entra ID Hybrid Health AD FS service or deleting the AD FS service instance.\nUsually the Microsoft Entra ID Connect Health Agent application with ID cf6d7e68-f018-4e0a-a7b3-126e053fb88d and ID cb1056e2-e479-49de-ae31-7812af012ed8 is used to perform those operations.\n Topic: Azure Activity"}, {"role": "assistant", "content": "// Microsoft Entra ID Connect Health Agent - cf6d7e68-f018-4e0a-a7b3-126e053fb88d\n// Microsoft Entra ID Connect - cb1056e2-e479-49de-ae31-7812af012ed8\nlet appList = dynamic(['cf6d7e68-f018-4e0a-a7b3-126e053fb88d','cb1056e2-e479-49de-ae31-7812af012ed8']);\nlet operationNamesList = dynamic(['Microsoft.ADHybridHealthService/services/servicemembers/action','Microsoft.ADHybridHealthService/services/delete']);\nAzureActivity\n| where CategoryValue =~ 'Administrative'\n| where ResourceProviderValue =~ 'Microsoft.ADHybridHealthService'\n| where _ResourceId has 'AdFederationService'\n| where OperationNameValue in~ (operationNamesList)\n| extend claimsJson = parse_json(Claims)\n| extend AppId = tostring(claimsJson.appid), AccountName = tostring(claimsJson.name), Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| where AppId !in (appList)\n| project-away claimsJson\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies SFTP File Transfers above certain threshold in a 15min time period. It requires SFTP VERBOSE loglevel to be enabled.\n Please note that entity mapping for arrays is not supported, so when there is a single value in an array, we will pull that value from the array as a single string to populate the entity to support entity mapping features within Sentinel. Additionally, if the array is multivalued, we will input a string to indicate this with a unique hash so that matching will not occur.\n Topic: Syslog"}, {"role": "assistant", "content": "let threshold = 50;\nSyslog\n| where ProcessName has \"sftp\"\n    and SyslogMessage has \"close \"\n    and SyslogMessage has \" bytes read \"\n| parse SyslogMessage with \"close \\\"\" filepath \"\\\" bytes read \" readbytes: int \" written \" writtenbytes: int\n| join kind=leftouter (\n    Syslog\n    | where ProcessName has \"sftp\" and SyslogMessage has \"session opened for\"\n    | parse SyslogMessage with \"session opened for local user \" username: string \" from [\" src_ip \"]\"\n    | project username, src_ip, ProcessID\n    )\n    on ProcessID\n| project-away ProcessID1\n| summarize count_distinct_filepath=dcount(filepath), fileslist=make_set(filepath) by Computer, username, src_ip, bin(TimeGenerated, 15m)\n| where count_distinct_filepath >= threshold\n| extend FileSample = iff(array_length(fileslist) == 1, tostring(fileslist[0]), strcat(\"SeeFilesListField\",\"_\", tostring(hash(tostring(fileslist)))))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows top source IP.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "ZPAEvent\n| where DvcAction == 'open'\n| summarize EventCount = count()by SrcIpAddr\n| top 20 by EventCount desc \n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection flags the occurrences of deleting multiple teams within an hour.\nThis data is a part of Office 365 Connector in Microsoft Sentinel.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "// Adjust this value to change how many Teams should be deleted before including\nlet max_delete_count = 3;\n// Adjust this value to change the timewindow the query runs over\n  OfficeActivity\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where Operation =~ \"TeamDeleted\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DeletedTeams = make_set(TeamName, 1000) by UserId\n| where array_length(DeletedTeams) > max_delete_count\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a user deletes many items in short period of time.\n Topic: Box"}, {"role": "assistant", "content": "let threshold = 100;\nBoxEvents\n| where EventType =~ 'DELETE'\n| summarize deleted_items = dcount(SourceItemName) by SrcUserName, bin(TimeGenerated, 5m)\n| where deleted_items > threshold\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects compressed archives transferre over HTTP.\n Topic: Corelight"}, {"role": "assistant", "content": "let threshold = 25;\ncorelight_http\n| where method in~ ('POST', 'PUT')\n| where isempty(referrer)\n| where orig_mime_types has_any ('application/vnd.ms-cab-compressed', 'application/warc', 'application/x-7z-compressed', 'application/x-ace', 'application/x-arc', 'application/x-archive', 'application/x-arj', 'application/x-compress', 'application/x-cpio', 'application/x-dmg', 'application/x-eet', 'application/x-gzip', 'application/x-lha', 'application/x-lrzip', 'application/x-lz4', 'application/x-lzma', 'application/x-lzh', 'application/x-lzip', 'application/x-rar', 'application/x-rpm', 'application/x-stuffit', 'application/x-tar', 'application/x-xz', 'application/x-zoo', 'application/zip')\n| summarize count() by uri, id_orig_h, bin(TimeGenerated, 15m)\n| where count_ > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule detects and alerts when access denied operations generated by the CTERA Edge Filer goes over a predefined threshold Topic: CTERA"}, {"role": "assistant", "content": "Syslog\n| where ProcessName == 'gw-audit'\n| extend\n    TenantName = extract(\"\\\"vportal\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage),\n    UserName = extract(\"user=([^|]*)\", 1, SyslogMessage),\n    Operation = extract(\"op=([^|]*)\", 1, SyslogMessage),\n    EdgeFiler = extract(\"\\\"client\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage),\n    RootPath = extract(\"rootPath=([^|]*)\", 1, SyslogMessage),\n    Share = extract(\"share=([^|]*)\", 1, SyslogMessage),\n    LocalPath = extract(\"path=([^|]*)\", 1, SyslogMessage),\n    Timestamp = todatetime(extract(\"\\\"@timestamp\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage))\n| where Operation in ('OpenDenied', 'createDenied', 'AclDenied', 'deleteDenied')\n| summarize Count = count() by bin(Timestamp, 5m), UserName, EdgeFiler\n| where Count > 1000\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule detects when a suspicious PowerShell commandlet is executed on a host. Threat actors often use PowerShell to execute commands and scripts to move laterally, escalate privileges, and exfiltrate data.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "// Adjust the list of suspicious commandlets as needed\nlet SuspiciousPowerShellCommandList = dynamic([\"Get-ADUserResultantPasswordPolicy\",\n  \"Get-DomainPolicy\",\n  \"Get-DomainUser\",\n  \"Get-DomainComputer\",\n  \"Get-DomainController\",\n  \"Get-DomainGroup\",\n  \"Get-DomainTrust\",\n  \"Get-ADTrust\",\n  \"Get-ForestTrust\"\n  ]);\nDeviceEvents\n| where ActionType == \"PowerShellCommand\"\n| extend Commandlet = tostring(parse_json(AdditionalFields).Command)\n| where Commandlet has_any (SuspiciousPowerShellCommandList)\n| project TimeGenerated, DeviceName, LocalIP, InitiatingProcessAccountUpn, InitiatingProcessId, InitiatingProcessFileName, InitiatingProcessFolderPath, InitiatingProcessCommandLine\n| extend Username = tostring(split(InitiatingProcessAccountUpn, '@')[0]), UPNSuffix = tostring(split(InitiatingProcessAccountUpn, '@')[1])\n| extend DvcHostname = tostring(split(DeviceName, '.')[0]), DvcDomain = tostring(strcat_array(array_slice(split(DeviceName, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects file deletions generated by the CTERA Edge Filer. Topic: CTERA"}, {"role": "assistant", "content": "Syslog\n| where ProcessName == 'gw-audit'\n| extend\n    TenantName = extract(\"\\\"vportal\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage),\n    UserName = extract(\"user=([^|]*)\", 1, SyslogMessage),\n    Permission = extract(\"op=([^|]*)\", 1, SyslogMessage),\n    EdgeFiler = extract(\"\\\"client\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage),\n    RootPath = extract(\"rootPath=([^|]*)\", 1, SyslogMessage),\n    Share = extract(\"share=([^|]*)\", 1, SyslogMessage),\n    LocalPath = extract(\"path=([^|]*)\", 1, SyslogMessage),\n    Timestamp = todatetime(extract(\"\\\"@timestamp\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage))\n| where Permission == 'delete'\n| summarize Count = count() by UserName, bin(Timestamp, 2m)\n| where Count > 100\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies GitHub activites its the first time a user deleted a repo that may be a sign of compromise.\n Topic: GitHub"}, {"role": "assistant", "content": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet LearningPeriod = 7d;\nlet EndLearningTime = starttime - LearningPeriod;\nlet GitHubRepositoryDestroyEvents = (GitHubAuditData\n| where Action == \"repo.destroy\");\nGitHubRepositoryDestroyEvents\n| where TimeGenerated between (EndLearningTime .. starttime)\n| distinct Actor\n| join kind=rightanti (\n  GitHubRepositoryDestroyEvents\n  | where TimeGenerated between (starttime .. endtime)\n  | distinct Actor\n) on Actor\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Vulnerability allows attackers to execute arbitrary code on affected systems by exploiting a flaw in the way Log4j handles log messages containing specially crafted strings\n Topic: Silverfort"}, {"role": "assistant", "content": "CommonSecurityLog \n| where DeviceVendor has 'Silverfort'\n| where DeviceProduct has 'Admin Console'\n| where DeviceEventClassID == \"NewIncident\"\n| where Message has \"Log4Shell\"\n| extend UserName = parse_json(replace('^\"\"|\"\"$', '', Message))['userName']"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for users who recently reseted their passwords.\n Topic: PingFederate"}, {"role": "assistant", "content": "PingFederateEvent\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'PWD_RESET' or EventSubType =~ 'PWD_RESET'\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures.\n Topic: Tenable App"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.yaml parser into the workspace\n// Retrieve the parser here: https://aka.ms/sentinel-TenableApp-afad-parser\n// Then, create the Kusto Function with alias afad_parser\nlet SeverityTable=datatable(Severity:string,Level:int) [\n  \"low\", 1,\n  \"medium\", 2,\n  \"high\", 3,\n  \"critical\", 4\n  ];\n  afad_parser\n  | where MessageType == 0\n  | lookup kind=leftouter SeverityTable on Severity\n  | order by Level\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple client errors from one source in short timeframe\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "let threshold = 100;\nOracleWebLogicServerEvent\n| where HttpStatusCode >= 400 and HttpStatusCode <= 499 \n| summarize MultipleClientErrors = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleClientErrors > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses Windows security events to detect suspicious access attempts to the registry key of Microsoft Entra ID Health monitoring agent.\nThis detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable object HKLM\\SOFTWARE\\Microsoft\\Microsoft Online\\Reporting\\MonitoringAgent.\nYou can find more information in here https://github.com/OTRF/Set-AuditRule/blob/master/rules/registry/aad_connect_health_monitoring_agent.yml\n\n Topic: Detections"}, {"role": "assistant", "content": "// ADHealth Monitoring Agent Registry Key\nlet aadHealthMonAgentRegKey = \"\\\\REGISTRY\\\\MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Microsoft Online\\\\Reporting\\\\MonitoringAgent\";\n// Filter out known processes\nlet aadConnectHealthProcs = dynamic ([\n    'Microsoft.Identity.Health.Adfs.DiagnosticsAgent.exe',\n    'Microsoft.Identity.Health.Adfs.InsightsService.exe',\n    'Microsoft.Identity.Health.Adfs.MonitoringAgent.Startup.exe',\n    'Microsoft.Identity.Health.Adfs.PshSurrogate.exe',\n    'Microsoft.Identity.Health.Common.Clients.ResourceMonitor.exe',\n    'Microsoft.Identity.Health.AadSync.MonitoringAgent.Startup.exe',\n    'Microsoft.Identity.AadConnect.Health.AadSync.Host.exe',\n    'Microsoft.Azure.ActiveDirectory.Synchronization.Upgrader.exe',\n    'miiserver.exe'\n]);\n(union isfuzzy=true\n(\nSecurityEvent\n| where EventID == '4656'\n| where EventData has aadHealthMonAgentRegKey\n| extend EventData = parse_xml(EventData).EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Computer, EventID)\n| extend ObjectName = column_ifexists(\"ObjectName\", \"\"),\n    ObjectType = column_ifexists(\"ObjectType\", \"\")\n| where ObjectType == 'Key'\n| where ObjectName == aadHealthMonAgentRegKey\n| extend SubjectUserName = column_ifexists(\"SubjectUserName\", \"\"),\n    SubjectDomainName = column_ifexists(\"SubjectDomainName\", \"\"),\n    ProcessName = column_ifexists(\"ProcessName\", \"\")\n| extend Process = split(ProcessName, '\\\\', -1)[-1],\n    Account = strcat(SubjectDomainName, \"\\\\\", SubjectUserName)\n| where Process !in (aadConnectHealthProcs)\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), count() by EventID, Account, Computer, Process, SubjectUserName, SubjectDomainName, ObjectName, ObjectType, ProcessName\n),\n(\nWindowsEvent\n| where EventID == '4656' and EventData has aadHealthMonAgentRegKey\n| extend ObjectType = tostring(EventData.ObjectType)\n| where ObjectType == 'Key'\n| extend ObjectName = tostring(EventData.ObjectName)\n| where ObjectName == aadHealthMonAgentRegKey\n| extend ProcessName = tostring(EventData.ProcessName)\n| extend Process = tostring(split(ProcessName, '\\\\')[-1])\n| where Process !in (aadConnectHealthProcs)\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend SubjectUserName = tostring(EventData.SubjectUserName)\n| extend SubjectDomainName = tostring(EventData.SubjectDomainName)\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), count() by EventID, Account, Computer, Process, SubjectUserName, SubjectDomainName, ObjectName, ObjectType, ProcessName\n),\n(\nSecurityEvent\n| where EventID == '4663'\n| where ObjectType == 'Key'\n| where ObjectName == aadHealthMonAgentRegKey\n| extend Process = tostring(split(ProcessName, '\\\\', -1)[-1])\n| where Process !in (aadConnectHealthProcs)\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), count() by EventID, Account, Computer, Process, SubjectUserName, SubjectDomainName, ObjectName, ObjectType, ProcessName\n),\n  (\nWindowsEvent\n| where EventID == '4663' and EventData has aadHealthMonAgentRegKey\n| extend ObjectType = tostring(EventData.ObjectType)\n| where ObjectType == 'Key'\n| extend ObjectName = tostring(EventData.ObjectName)\n| where ObjectName == aadHealthMonAgentRegKey\n| extend ProcessName = tostring(EventData.ProcessName)\n| extend Process = tostring(split(ProcessName, '\\\\')[-1])\n| where Process !in (aadConnectHealthProcs)\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend SubjectUserName = tostring(EventData.SubjectUserName)\n| extend SubjectDomainName = tostring(EventData.SubjectDomainName)\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), count() by EventID, Account, Computer, Process, SubjectUserName, SubjectDomainName, ObjectName, ObjectType, ProcessName\n)\n)\n// You can filter out potential machine accounts\n//| where AccountType != 'Machine'\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend Name = tostring(split(Account, \"\\\\\")[1]), NTDomain = tostring(split(Account, \"\\\\\")[0])\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Triggers on two-step authentification disabled for a user.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports \n| where EventMessage =~ 'TURN_OFF_2_STEP_VERIFICATION'\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a user account is enabled and then disabled within 10 minutes. This can be an indication of compromise and an adversary attempting to hide in the noise.\n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = 1d;\nlet spanoftime = 10m;\nlet threshold = 0;\n  (union isfuzzy=true\n    (SecurityEvent\n    | where TimeGenerated > ago(timeframe+spanoftime)\n    // A user account was enabled\n    | where EventID == 4722\n    | where AccountType =~ \"User\"\n    | where TargetAccount !endswith \"$\"\n    | project EnableTime = TimeGenerated, EnableEventID = EventID, EnableActivity = Activity, Computer = toupper(Computer), \n    TargetAccount = tolower(TargetAccount), TargetUserName, TargetDomainName, TargetSid, \n    AccountUsedToEnable = SubjectAccount, EnabledBySubjectUserName = SubjectUserName, EnabledBySubjectDomainName = SubjectDomainName, SIDofAccountUsedToEnable = SubjectUserSid, UserPrincipalName\n    ),\n    (\n    WindowsEvent\n    | where TimeGenerated > ago(timeframe+spanoftime)\n    // A user account was enabled\n    | where EventID == 4722\n    | extend SubjectUserSid = tostring(EventData.SubjectUserSid)\n    | extend AccountType=case(EventData.SubjectUserName endswith \"$\" or SubjectUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(SubjectUserSid), \"\", \"User\")\n    | where AccountType =~ \"User\"\n    | extend SubjectAccount = strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n    | extend SubjectDomainName = tostring(EventData.SubjectDomainName), SubjectUserName = tostring(EventData.SubjectUserName)\n    | extend TargetAccount = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n    | where TargetAccount !endswith \"$\"\n    | extend Activity=\"4722 - A user account was enabled.\"\n    | extend TargetUserName = tostring(EventData.TargetUserName), TargetDomainName = tostring(EventData.TargetDomainName) \n    | extend TargetSid = tostring(EventData.TargetSid)\n    | extend UserPrincipalName = tostring(EventData.UserPrincipalName)\n    | project EnableTime = TimeGenerated, EnableEventID = EventID, EnableActivity = Activity, Computer = toupper(Computer), \n    TargetAccount = tolower(TargetAccount), TargetUserName, TargetDomainName, TargetSid, \n    AccountUsedToEnable = SubjectAccount, EnabledBySubjectUserName = SubjectUserName, EnabledBySubjectDomainName = SubjectDomainName, SIDofAccountUsedToEnable = SubjectUserSid, UserPrincipalName\n    )\n  )\n| join kind= inner (\n  (union isfuzzy=true\n    (SecurityEvent\n    | where TimeGenerated > ago(timeframe)\n    // A user account was disabled\n    | where EventID == 4725\n    | where AccountType =~ \"User\"\n    | project DisableTime = TimeGenerated, DisableEventID = EventID, DisableActivity = Activity, Computer = toupper(Computer), \n    TargetAccount = tolower(TargetAccount), TargetUserName, TargetDomainName, TargetSid, \n    AccountUsedToDisable = SubjectAccount, DisabledBySubjectUserName = SubjectUserName, DisabledBySubjectDomainName = SubjectDomainName, SIDofAccountUsedToDisable = SubjectUserSid, UserPrincipalName\n    ),\n    (WindowsEvent\n    | where TimeGenerated > ago(timeframe)\n    // A user account was disabled\n    | where EventID == 4725\n    | extend SubjectUserSid = tostring(EventData.SubjectUserSid)\n    | extend AccountType=case(EventData.SubjectUserName endswith \"$\" or SubjectUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(SubjectUserSid), \"\", \"User\")\n    | where AccountType =~ \"User\"\n    | extend SubjectAccount = strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n    | extend SubjectDomainName = tostring(EventData.SubjectDomainName), SubjectUserName = tostring(EventData.SubjectUserName)\n    | extend TargetAccount = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n    | extend TargetUserName = tostring(EventData.TargetUserName), TargetDomainName = tostring(EventData.TargetDomainName) \n    | extend TargetSid = tostring(EventData.TargetSid)\n    | extend UserPrincipalName = tostring(EventData.UserPrincipalName)\n    | extend Activity = \"4725 - A user account was disabled.\"\n    | project DisableTime = TimeGenerated, DisableEventID = EventID, DisableActivity = Activity, Computer = toupper(Computer), \n    TargetAccount = tolower(TargetAccount), TargetUserName, TargetDomainName, TargetSid, \n    AccountUsedToDisable = SubjectAccount, DisabledBySubjectUserName = SubjectUserName, DisabledBySubjectDomainName = SubjectDomainName, SIDofAccountUsedToDisable = SubjectUserSid, UserPrincipalName\n    )\n  )\n) on Computer, TargetAccount\n| where DisableTime - EnableTime < spanoftime\n| extend TimeDelta = DisableTime - EnableTime\n| where tolong(TimeDelta) >= threshold\n| project TimeDelta, EnableTime, EnableEventID, EnableActivity, Computer, TargetAccount, TargetSid, TargetUserName, TargetDomainName, UserPrincipalName, \nAccountUsedToEnable, SIDofAccountUsedToEnable, DisableTime, DisableEventID, DisableActivity, AccountUsedToDisable, SIDofAccountUsedToDisable, \nEnabledBySubjectUserName, EnabledBySubjectDomainName, DisabledBySubjectUserName, DisabledBySubjectDomainName\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects command in URI\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "let cmd_list = dynamic(['cat%20/etc/passwd', '/etc/passwd', 'ping -i', '/usr/bin/id(', '%2f%75%73%72%2f%62%69%6e%2f%69%64', 'phpinfo()', '%70%68%70%69%6e%66%6f%28%29', ';id', '%3b%69%64', '/bin/bash -c', '%2f%62%69%6e%2f%62%61%73%68%20%2d%63%27', '/bin/bash', '%2f%62%69%6e%2f%62%61%73%68', 'sleep(', '%73%6c%65%65%70%28', 'curl', '%63%75%72%6c', '&dir', '%26%64%69%72', '& dir', '%26%20%64%69%72', '<script>', '%3c%73%63%72%69%70%74%3e', 'eval(', '%65%76%61%6c%28', 'exec(', '%65%78%65%63%28', 'whoami', '%77%68%6f%61%6d%69', 'wget', 'python', 'gcc', 'uname', 'systeminfo', '%77%67%65%74', '%70%79%74%68%6f%6e', '%75%6e%61%6d%65', '%73%79%73%74%65%6d%69%6e%66%6f']);\nNGINXHTTPServer\n| where UrlOriginal has_any (cmd_list)\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of top blocked connections to internal services.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "UbiquitiAuditEvent\n| where TimeGenerated > ago(24h)\n| where EventCategory =~ 'firewall'\n| where DvcAction =~ 'Blocked'\n| where isnotempty(DstPortNumber)\n| where ipv4_is_private(DstIpAddr)\n| extend svc_name = case(DstPortNumber in ('20', '21'), 'FTP',\n                        DstPortNumber == '22', 'SSH',\n                        DstPortNumber == '23', 'Telnet',\n                        DstPortNumber == '25', 'SMTP',\n                        DstPortNumber == '53', 'DNS',\n                        DstPortNumber in ('67', '68'), 'DHCP',\n                        DstPortNumber == '110', 'POP3',\n                        DstPortNumber == '123', 'NTP',\n                        DstPortNumber in ('137', '138', '139'), 'NeTBIOS',\n                        DstPortNumber == '143', 'IMAP',\n                        DstPortNumber == '220', 'IMAPv3',\n                        DstPortNumber == '389', 'LDAP',\n                        DstPortNumber == '3389', 'RDP',\n                        DstPortNumber == '514', 'Syslog',\n                        DstPortNumber == '80', 'HTTP',\n                        DstPortNumber == '443', 'HTTPS',\n                        DstPortNumber )\n| summarize count() by svc_name, SrcIpAddr\n| top 10 by count_\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies anomalous data transfer to public networks. The query leverages built-in KQL anomaly detection algorithms that detects large deviations from a baseline pattern.\nA sudden increase in data transferred to unknown public networks is an indication of data exfiltration attempts and should be investigated.\nThe higher the score, the further it is from the baseline value.\nThe output is aggregated to provide summary view of unique source IP to destination IP address and port bytes sent traffic observed in the flagged anomaly hour.\nThe source IP addresses which were sending less than bytessentperhourthreshold have been exluded whose value can be adjusted as needed .\nYou may have to run queries for individual source IP addresses from SourceIPlist to determine if anything looks suspicious\n Topic: Detections"}, {"role": "assistant", "content": "let starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet scorethreshold = 5;\nlet bytessentperhourthreshold = 10;\nlet TimeSeriesData = (union isfuzzy=true\n(\nVMConnection\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where isnotempty(DestinationIp) and isnotempty(SourceIp)\n| extend SourceIP = SourceIp, DestinationIP = DestinationIp\n| where ipv4_is_private(DestinationIP) == false\n| extend DeviceVendor = \"VMConnection\"\n| project TimeGenerated, BytesSent, DeviceVendor\n| make-series TotalBytesSent=sum(BytesSent) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor\n),\n(\nCommonSecurityLog\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\n| where ipv4_is_private(DestinationIP) == false\n| project TimeGenerated, SentBytes, DeviceVendor\n| make-series TotalBytesSent=sum(SentBytes) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor\n)\n);\n//Filter anomolies against TimeSeriesData\nlet TimeSeriesAlerts = materialize(TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalBytesSent, scorethreshold, -1, 'linefit')\n| mv-expand TotalBytesSent to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)\n| where anomalies > 0 | extend AnomalyHour = TimeGenerated\n| extend TotalBytesSentinMBperHour = round(((TotalBytesSent / 1024)/1024),2), baselinebytessentperHour = round(((baseline / 1024)/1024),2), score = round(score,2)\n| project DeviceVendor, AnomalyHour, TimeGenerated, TotalBytesSentinMBperHour, baselinebytessentperHour, anomalies, score);\nlet AnomalyHours = materialize(TimeSeriesAlerts  | where TimeGenerated > ago(2d) | project TimeGenerated);\n//Union of all BaseLogs aggregated per hour\nlet BaseLogs = (union isfuzzy=true\n(\nCommonSecurityLog\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\n| where TimeGenerated > ago(2d)\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\n| where ipv4_is_private(DestinationIP) == false\n| extend SentBytesinMB = ((SentBytes / 1024)/1024), ReceivedBytesinMB = ((ReceivedBytes / 1024)/1024)\n| summarize HourlyCount = count(), TimeGeneratedMax=arg_max(TimeGenerated, *), DestinationIPList=make_set(DestinationIP, 100), DestinationPortList = make_set(DestinationPort,100), TotalSentBytesinMB = sum(SentBytesinMB), TotalReceivedBytesinMB = sum(ReceivedBytesinMB) by SourceIP, DeviceVendor, TimeGeneratedHour=bin(TimeGenerated,1h)\n| where TotalSentBytesinMB > bytessentperhourthreshold\n| sort by TimeGeneratedHour asc, TotalSentBytesinMB desc\n| extend Rank=row_number(1, prev(TimeGeneratedHour) != TimeGeneratedHour) // Ranking the dataset per Hourly Partition\n| where Rank < 10  // Selecting Top 10 records with Highest BytesSent in each Hour\n| project DeviceVendor, TimeGeneratedHour, TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, Rank\n),\n(\nVMConnection\n| where isnotempty(DestinationIp) and isnotempty(SourceIp)\n| where TimeGenerated > ago(2d)\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\n| extend SourceIP = SourceIp, DestinationIP = DestinationIp\n| where ipv4_is_private(DestinationIP) == false | extend DeviceVendor = \"VMConnection\"\n| extend SentBytesinMB = ((BytesSent / 1024)/1024), ReceivedBytesinMB = ((BytesReceived / 1024)/1024)\n| summarize HourlyCount = count(),TimeGeneratedMax=arg_max(TimeGenerated, *), DestinationIPList=make_set(DestinationIP, 100), DestinationPortList = make_set(DestinationPort, 100), TotalSentBytesinMB = sum(SentBytesinMB),TotalReceivedBytesinMB = sum(ReceivedBytesinMB) by SourceIP, DeviceVendor, TimeGeneratedHour=bin(TimeGenerated,1h)\n| where TotalSentBytesinMB > bytessentperhourthreshold\n| sort by TimeGeneratedHour asc, TotalSentBytesinMB desc\n| extend Rank=row_number(1, prev(TimeGeneratedHour) != TimeGeneratedHour) // Ranking the dataset per Hourly Partition\n| where Rank < 10  // Selecting Top 10 records with Highest BytesSent in each Hour\n| project DeviceVendor, TimeGeneratedHour, TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, Rank\n)\n);\n// Join against base logs to retrive records associated with the hour of anomoly\nTimeSeriesAlerts\n| where TimeGenerated > ago(2d)\n| join (\n    BaseLogs | extend AnomalyHour = TimeGeneratedHour\n) on DeviceVendor, AnomalyHour | sort by score desc\n| project DeviceVendor, AnomalyHour,TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies\n| summarize EventCount = count(), StartTimeUtc= min(TimeGeneratedMax), EndTimeUtc= max(TimeGeneratedMax), SourceIPMax= arg_max(SourceIP,*), TotalBytesSentinMB = sum(TotalSentBytesinMB), TotalBytesReceivedinMB = sum(TotalReceivedBytesinMB), SourceIPList = make_set(SourceIP, 100), DestinationIPList = make_set(DestinationIPList, 100) by AnomalyHour,TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies\n| project DeviceVendor, AnomalyHour, StartTimeUtc, EndTimeUtc, SourceIPMax, SourceIPList, DestinationIPList, DestinationPortList, TotalBytesSentinMB, TotalBytesReceivedinMB, TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies, EventCount\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Tracking via user agent is one way to differentiate between types of connecting device.\nIn homogeneous enterprise environments the user agent associated with an attacker device may stand out as unusual.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet MINIMUM_BLOCKS = 10;\nlet SUCCESS_THRESHOLD = 0.2;\n// Identify user agents or client apps with a low success-to-block ratio in Sign-in Logs\nlet HistoricalActivity = SigninLogs\n    | where TimeGenerated > lookback\n    | where isnotempty(UserAgent)\n    | summarize SuccessfulSignins = countif(ResultType == \"0\"), BlockedSignins = countif(ResultType == \"50053\") by UserAgent\n    | extend SuccessBlockRatio = 1.00 * SuccessfulSignins / BlockedSignins\n    | where SuccessBlockRatio < SUCCESS_THRESHOLD\n    | where BlockedSignins > MINIMUM_BLOCKS;\n// OfficeActivity Query: File operations by matching user agents\nlet OfficeEvents = OfficeActivity\n    | where TimeGenerated between (starttime .. endtime)\n    | where RecordType == \"SharePointFileOperation\"\n    | where Operation in (\"FileDownloaded\", \"FileUploaded\")\n    | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), RecentFileActivities = count() by UserAgent, UserId, ClientIP, Site_Url\n    | join kind=innerunique (HistoricalActivity) on UserAgent\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n    | extend IP_0_Address = ClientIP, Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix, URL_0_Url = Site_Url;\n// EnrichedMicrosoft365AuditLogs Query: File operations by matching client apps (UserAgent)\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated between (starttime .. endtime)\n    | where RecordType == \"SharePointFileOperation\"\n    | where Operation in (\"FileDownloaded\", \"FileUploaded\")\n    | extend UserAgent = tostring(parse_json(tostring(AdditionalProperties)).UserAgent)  // Ensure matching with UserAgent column\n    | extend SiteUrl = tostring(parse_json(tostring(AdditionalProperties)).SiteUrl)\n    | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), RecentFileActivities = count() by UserAgent, UserId, ClientIp, SiteUrl\n    | join kind=innerunique (HistoricalActivity) on UserAgent\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n    | extend IP_0_Address = ClientIp, Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix, URL_0_Url = SiteUrl;\n// Combine Office and Enriched Logs\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize arg_min(StartTime, *) by UserId, ClientIP;\n// Final Output\nCombinedEvents\n    | project StartTime, EndTime, RecentFileActivities, IP_0_Address, Account_0_Name, Account_0_UPNSuffix, URL_0_Url\n    | order by StartTime desc;\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies accounts associated with multiple authentications from different geographical locations in a short period of time.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let starttime = ago(4d);\nlet endtime =  ago(2d);\nlet common_locations = (OktaSSO\n  | where TimeGenerated between(starttime..endtime)\n  //| where eventType_s =~ 'user.session.start'\n  | extend locationString= strcat(client_geographicalContext_country_s, \"/\",client_geographicalContext_state_s, \"/\", client_geographicalContext_city_s)\n  | where locationString != \"//\"\n  | summarize count() by locationString\n  //modify the most common location value(below) based on your enviornment \n  | take 20\n  | project locationString);\nlet signIns = (OktaSSO\n  | where TimeGenerated between(starttime..endtime)\n // | where eventType_s =~ 'user.session.start'\n  | extend locationString= strcat(client_geographicalContext_country_s, \"/\",client_geographicalContext_state_s, \"/\", client_geographicalContext_city_s)\n  | where locationString != \"//\" and locationString !endswith \"/\"\n  | where locationString !in (common_locations));\n // Adjust these to tune your query\nlet lookupWindow = 10m;\nlet lookupBin = lookupWindow / 2.0; // lookup bin = equal to 1/2 of the lookup window\nlet threshold = 5;\nlet users = (signIns\n| summarize dcount(locationString) by actor_displayName_s\n| where dcount_locationString > threshold\n| project actor_displayName_s);\nsignIns\n  | where actor_displayName_s in (users)\n  | project-rename Start=TimeGenerated\n  | extend TimeKey = bin(Start, lookupBin)\n  | join kind = inner (\n  signIns\n  | project-rename End=TimeGenerated, EndLocationString=locationString\n    // TimeKey on the right side of the join - emulates this authentication appearing several times\n    | extend TimeKey = range(bin(End - lookupWindow, lookupBin),\n    bin(End, lookupBin), lookupBin)\n    | mvexpand TimeKey to typeof(datetime) // translate TimeKey arrange range to a column\n  ) on actor_displayName_s, TimeKey\n  | where End > Start\n  | project tostring(Start), tostring(End), locationString, EndLocationString, timeSpan = End - Start, actor_displayName_s, client_ipAddress_s, client_userAgent_rawUserAgent_s, client_userAgent_browser_s, client_device_s, displayMessage_s, outcome_result_s, outcome_reason_s, column_ifexists('debugContext_debugData_logOnlySecurityData_s', \"\"), debugContext_debugData_threatSuspected_s, client_geographicalContext_geolocation_lat_d, client_geographicalContext_geolocation_lon_d, eventType_s\n  | where locationString != EndLocationString\n  | summarize ips=make_set(client_ipAddress_s,100), UAs=make_set(client_userAgent_rawUserAgent_s,100) by timeSpan, actor_displayName_s, locationString, EndLocationString, Start, End, client_userAgent_rawUserAgent_s, client_userAgent_browser_s, client_device_s\n  | extend Account_0_Name = actor_displayName_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This creates an incident in the event a critical threat was identified on a Carbon Black managed endpoint.\n Topic: VMware Carbon Black Cloud"}, {"role": "assistant", "content": "let threshold = 8;\nCarbonBlackNotifications_CL\n| where threatHunterInfo_score_d >= threshold\n| extend eventTime = datetime(1970-01-01) + tolong(threatHunterInfo_time_d/1000) * 1sec\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by eventTime, Threat_Name = threatHunterInfo_reportName_s, Device_Name = deviceInfo_deviceName_s,  Internal_IP = deviceInfo_internalIpAddress_s, External_IP = deviceInfo_externalIpAddress_s, Threat_Score = threatHunterInfo_score_d\n| project-away count_\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match across IOCs related to Chia cryptocurrency farming/plotting activity\n Topic: Windows Forwarded Events"}, {"role": "assistant", "content": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/ChiaCryptoIOC.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet process = (iocs | where Type =~ \"process\" | project IoC);\n//This query uses sysmon data, sections that have - | where Source == \"Microsoft-Windows-Sysmon\" - may need to be updated with latest\nWindowsEvent\n| where EventID == '4688' and EventData has_any (process)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| where NewProcessName  has_any (process)\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n  , Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n  , NewProcessId = tostring(EventData.NewProcessId)\n| extend Computer, Account, File = tostring(split(NewProcessName, '\\\\', -1)[-1]), AlertDetail = 'Chia crypto IOC detected'\n| extend FilePath = replace_string(NewProcessName, File, '')\n| project TimeGenerated, File, AlertDetail, FilePath,Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountNTDomain = tostring(split(Account, @'\\')[0])\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when changes to multiple users permissions are changed at once. Investigate immediately if not a planned change. This setting could enable an attacker access to Azure subscriptions in your environment.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-identity-management\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let AdminRecords = AuditLogs\n| where Category =~ \"RoleManagement\"\n| where ActivityDisplayName has_any (\"Add eligible member to role\", \"Add member to role\")\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend TargetUserPrincipalName = tostring(TargetResource.userPrincipalName),\n               props = TargetResource.modifiedProperties\n  )\n| mv-apply Property = props on \n  (\n      where Property.displayName =~ \"Role.DisplayName\"\n      | extend RoleName = trim('\"',tostring(Property.newValue))\n  )\n| where RoleName contains \"Admin\";\nAdminRecords\n| summarize dcount(TargetUserPrincipalName) by bin(TimeGenerated, 1h)\n| where dcount_TargetUserPrincipalName > 9\n| join kind=rightsemi  (\n  AdminRecords\n  | extend TimeWindow = bin(TimeGenerated, 1h)\n) on $left.TimeGenerated == $right.TimeWindow\n| extend InitiatedByUser = iff(isnotempty(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.user.userPrincipalName), \"\")\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will check for sign-ins into LastPass which are not confirmed using MFA based on the Sign-in Logs\n Topic: LastPass"}, {"role": "assistant", "content": "LastPassNativePoller_CL\n| where Action_s == \"Log in\"\n| join (SigninLogs | where AppDisplayName == \"LastPass Enterprise\") on $left.IP_Address_s == $right.IPAddress and $left.Username_s == $right.UserPrincipalName\n| where ResultType in (50074, 50076)\n| extend AccountCustomEntity = Username_s, IPCustomEntity = IP_Address_s, TimestampCustomEntity = todatetime(Time_s)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect threat when potentially malicious url found Topic: MimecastSEG"}, {"role": "assistant", "content": "MimecastSIEM_CL| where mimecastEventId_s==\"mail_ttp_url\" and reason_s != \"clean\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query below identifies modification of registry by Dev-0270 actor to disable security feature as well as to add ransom notes\n Topic: Dev 0270 Detection and Hunting"}, {"role": "assistant", "content": "(union isfuzzy=true\n(SecurityEvent\n| where EventID == 4688\n| where (CommandLine has_all  ('reg', 'add', 'HKLM\\\\SOFTWARE\\\\Policies\\\\', '/v','/t', 'REG_DWORD', '/d', '/f') and CommandLine has_any('DisableRealtimeMonitoring', 'UseTPMKey', 'UseTPMKeyPIN', 'UseAdvancedStartup', 'EnableBDEWithNoTPM', 'RecoveryKeyMessageSource'))\n  or CommandLine has_all ('reg', 'add', 'HKLM\\\\SOFTWARE\\\\Policies\\\\', '/v','/t', 'REG_DWORD', '/d', '/f', 'RecoveryKeyMessage', 'Your drives are Encrypted!', '@')\n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName, ProcessNameFullPath = NewProcessName, EventID, Activity, CommandLine, EventSourceName, Type\n),\n(DeviceProcessEvents \n| where (InitiatingProcessCommandLine has_all(@'\"reg\"', 'add', @'\"HKLM\\SOFTWARE\\Policies\\', '/v','/t', 'REG_DWORD', '/d', '/f') \n   and InitiatingProcessCommandLine has_any('DisableRealtimeMonitoring', 'UseTPMKey', 'UseTPMKeyPIN', 'UseAdvancedStartup', 'EnableBDEWithNoTPM', 'RecoveryKeyMessageSource') ) \n   or InitiatingProcessCommandLine has_all('\"reg\"', 'add', @'\"HKLM\\SOFTWARE\\Policies\\', '/v','/t', 'REG_DWORD', '/d', '/f', 'RecoveryKeyMessage', 'Your drives are Encrypted!', '@')\n| extend Account = strcat(InitiatingProcessAccountDomain, @'\\', InitiatingProcessAccountName), Computer = DeviceName\n )\n )\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountNTDomain = tostring(split(Account, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Result found on Code Sharing platform\n Topic: Flare"}, {"role": "assistant", "content": "Firework_CL\n| where source_s contains \"driller_github\" and (risk_score_d == \"3\" or risk_score_d == \"4\" or risk_score_d == \"5\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in LastPass table from any IP IOC from TI\n Topic: LastPass"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| where Active == true\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n// As there is potentially more than 1 indicator type for matching IP, taking Network IP first, then others if that is empty.\n// Taking the first non-empty value based on potential IOC match availability\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n| join (\n    LastPassNativePoller_CL | where todatetime(Time_s) >= ago(dt_lookBack)\n    | where Action_s != \"Reporting\"\n    // renaming time column so it is clear the log this came from\n    | extend LastPass_TimeGenerated = todatetime(Time_s)\n)\non $left.TI_ipEntity == $right.IP_Address_s\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, LastPass_TimeGenerated, \nTI_ipEntity, IP_Address_s, Username_s, Action_s, Data_s, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when users attempting to access sites from high risk category.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "let risky_sites = dynamic(['IW_adlt', 'IW_hack', 'IW_porn']);\nCiscoWSAEvent\n| where UrlCategory in~ (risky_sites)\n| where DvcAction =~ 'DEFAULT_CASE'\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects batches of distinct SQL queries that execute (or attempt to) commands that could indicate potential security issues - such as attempts to access external sites or resources (e.g. for downloading malicious content).\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet hotwords = pack_array('http:', 'https:', 'ftp:', 'onion.pet'); // List of monitored hot words.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | extend hasHotword = iff(Statement has_any (hotwords), 1, 0)\n    | summarize countEvents = count(), countStatements = dcount(Statement)\n        , countStatementsWithHotwords = dcountif(Statement, hasHotword == 1)\n        , countFailedStatementsWithHotwords = dcountif(Statement, (hasHotword == 1) and (Error > 0))\n        , countSuccessfulStatementsWithHotwords = dcountif(Statement, ((hasHotword == 1)) and (Error == 0))\n        , anyMonitoredStatement = anyif(Statement, (hasHotword == 1))\n        , anySuccessfulMonitoredStatement = anyif(Statement, (hasHotword == 1) and (Error == 0))\n        , anyInfo = anyif(AdditionalInfo, hasHotword == 1)\n        , hotWord = anyif(extract(strcat_array(hotwords, '|'), 0, tolower(Statement)), hasHotword == 1)\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId   \n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithHotwords = dcountif(timeSlice, countStatementsWithHotwords >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsHotwordAnomalyOnStatement = iff(((countStatementsWithHotwords >= monitoredStatementsThreshold) and (countSlicesWithHotwords <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithHotwords/monitoredStatementsThreshold, 0)\n| where IsHotwordAnomalyOnStatement == 'true'\n| sort by countSuccessfulStatementsWithHotwords desc,  anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])    \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects request from localhost IP address.\n Topic: Tomcat"}, {"role": "assistant", "content": "TomcatEvent\n| where SrcIpAddr == \"127.0.0.1\"\n| extend File = extract(@'(.*\\/)?(.*)', 2, tostring(UrlOriginal))\n| extend IPCustomEntity = SrcIpAddr, FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests to resources with malicious Python packages.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "GCPCloudDNS\n| where Query has_any ('psec.forward.io.global.prod.fastly.net', 'b0a0374cd1cb4305002e.d.requestbin.net', 'tornadodomain.000webhostapp.com', 'yxznlysc47wvrb9r9z211e1jbah15q')\n| extend DNSCustomEntity = Query, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for user devices.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'access'\n| where isnotempty(Dvc)\n| summarize makeset(Dvc) by User\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for connections with insecure protocol.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where TimeGenerated > ago(24h)\n| where tostring(AdditionalFields) has 'ESATLSOutProtocol'\n| extend tls_status = extract(@'ESATLSOutProtocol\":\"(.*?)\"', 1, tostring(AdditionalFields))\n| where tls_status != 'TLSv1.2'\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This indicator looks for security principals that contain specific SIDs of accounts from built-in privileged groups within their sIDHistory attribute. This would allow those security principals to have the same privileges as those privileged accounts, but in a way that is not obvious to monitor (e.g. through group membership).\n Topic: Semperis Directory Services Protector"}, {"role": "assistant", "content": "dsp_parser\n| where EventID == 9212\n| where SecurityIndicatorName == \"Well-known privileged SIDs in sIDHistory\"\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies execution of Impacket tool. Impacket is a popular tool used by attackers for remote service execution,     Kerberos   manipulation and Windows credential dumping.\n Topic: Attacker Tools Threat Protection Essentials"}, {"role": "assistant", "content": "(union isfuzzy=true\n(SecurityEvent\n| where EventID == '5145'\n| where RelativeTargetName has 'SYSTEM32' and RelativeTargetName endswith @\".tmp\"\n| where ShareName has \"\\\\\\\\*\\\\ADMIN$\"\n),\n(WindowsEvent\n| where EventID == '5145' \n| extend RelativeTargetName= tostring(EventData.RelativeTargetName)\n| extend ShareName= tostring(EventData.ShareName)\n| where RelativeTargetName has 'SYSTEM32' and RelativeTargetName endswith @\".tmp\"\n| where ShareName has \"\\\\\\\\*\\\\ADMIN$\"\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n)\n)\n| extend timestamp = TimeGenerated \n| extend NTDomain = split(Account, '\\\\', 0)[0], UserName = split(Account, '\\\\', 1)[0]\n| extend HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n| extend Account_0_Name = UserName\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create a Microsoft Sentinel incident upon a new Illusive alert (incident) and associate all related Illusive events to the relevant Microsoft Sentinel alert. This is done by filtering and processing Illusive Syslog messages.\n Topic: Illusive Platform"}, {"role": "assistant", "content": "CommonSecurityLog\n| where DeviceProduct == \"illusive\"\n| extend DeviceCustomNumber2 = coalesce(column_ifexists(\"FieldDeviceCustomNumber2\", long(null)),DeviceCustomNumber2)\n| summarize arg_max(TimeGenerated, *) by DeviceCustomNumber2, AdditionalExtensions, TimeGenerated\n| extend Category = extract(@'cat=([^;]+)(\\;|$)', 1, AdditionalExtensions), HasForensics = extract(@'cs7=([^;]+)(\\;|$)', 1, AdditionalExtensions)\n| extend Category = coalesce(column_ifexists(\"DeviceEventCategory\",\"\"),Category)\t\n| where Category == \"illusive:alerts\"\n| extend IncidentId = DeviceCustomNumber2, IncidentURL = DeviceCustomString5\n| project TimeGenerated, SourceIP, SourceHostName,Computer , DeviceEventClassID ,HasForensics ,SourceUserName, Activity, DeviceAddress,  DestinationHostName, DestinationUserName, IncidentId, IncidentURL\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when new exclusion added.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where EventOriginalMessage has_all ('added', 'exclusion')\n| project EventCreationTime, SrcUserName, EventOriginalMessage\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects Attack Discovery Detection events.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where EventMessage has \"Attack Discovery Detection\"\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in AuditLogs.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet AuditEvents = materialize(AuditLogs\n  | where TimeGenerated >= ago(dt_lookBack)\n  // Extract the URL that is contained within the JSON data\n  | extend Url = extract(\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\", 1,tostring(TargetResources))\n  | where isnotempty(Url)\n  | extend userPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | extend TargetResourceDisplayName = tostring(TargetResources[0].displayName)\n  | extend Audit_TimeGenerated = TimeGenerated);\nlet AuditUrls = AuditEvents | distinct Url = tolower(Url) | summarize make_list(Url);\nThreatIntelligenceIndicator\n| where isnotempty(Url)\n| where TimeGenerated >= ago(ioc_lookBack)\n| where tolower(Url) in (AuditUrls)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\"\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (AuditEvents) on Url\n| where Audit_TimeGenerated < ExpirationDateTime\n| summarize Audit_TimeGenerated = arg_max(Audit_TimeGenerated, *) by IndicatorId, Url\n| project Audit_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore,\nOperationName, Identity, userPrincipalName, TargetResourceDisplayName, Url\n| extend AccountName = tostring(split(userPrincipalName, \"@\")[0]), AccountUPNSuffix = tostring(split(userPrincipalName, \"@\")[1])\n| extend HostName = tostring(split(TargetResourceDisplayName, \".\")[0]), DomainIndex = toint(indexof(TargetResourceDisplayName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(TargetResourceDisplayName, DomainIndex + 1), TargetResourceDisplayName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New Executive Impersonation with severity Informational found\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL | where severity_s == \"Informational\" | where type_s == \"Executive Impersonation\" | where status_s != \"Closed\" or status_s != \"Resolved\" | where remarks_s == \"New Executive Impersonation with severity Informational found\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for senders with large number of corrupted messages.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "ProofpointPOD\n| where EventType == 'message'\n| where NetworkDirection == 'outbound'\n| extend isCorrupted = todynamic(MsgParts)[0]['isCorrupted']\n| where isCorrupted == 'true'\n| summarize count() by SrcUserUpn\n| sort by count_\n| where count_ > 10"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query helps to detect bruteforce of a user account.\n Topic: SlackAudit"}, {"role": "assistant", "content": "let threshold = 10;\nSlackAudit\n| where DvcAction =~ 'user_login_failed'\n| summarize count() by SrcUserName, bucket = bin(TimeGenerated, 5m)\n| where count_ > threshold\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The NoPac vulnerability involves privilege escalation, allowing attackers to gain unauthorized access and potentially take control of an entire Active Directory domain\n Topic: Silverfort"}, {"role": "assistant", "content": "CommonSecurityLog \n| where DeviceVendor has 'Silverfort'\n| where DeviceProduct has 'Admin Console'\n| where DeviceEventClassID == \"NewIncident\"\n| where Message has \"NoPacBreach\"\n| extend UserName = parse_json(replace('^\"\"|\"\"$', '', Message))['userName']"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a new privileged role is assigned to a user.  Any account eligible for a role is now being given privileged access. If the assignment is unexpected or into a role that isnt the responsibility of the account holder, investigate.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#things-to-monitor-1\n Topic: SecurityThreatEssentialSolution"}, {"role": "assistant", "content": "AuditLogs\n| where Category =~ \"RoleManagement\"\n| where AADOperationType in~ (\"Assign\", \"AssignEligibleRole\")\n| where ActivityDisplayName has_any (\"Add eligible member to role\", \"Add member to role\")\n| mv-expand TargetResources\n| mv-expand TargetResources.modifiedProperties\n| extend displayName_ = tostring(TargetResources_modifiedProperties.displayName)\n| where displayName_ =~ \"Role.DisplayName\"\n| extend RoleName = tostring(parse_json(tostring(TargetResources_modifiedProperties.newValue)))\n| where RoleName contains \"Admin\"\n| extend InitiatingApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend Initiator = iif(isnotempty(InitiatingApp), InitiatingApp, tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName))\n| extend Target = tostring(TargetResources.userPrincipalName)\n| summarize by bin(TimeGenerated, 1h), OperationName,  RoleName, Target, Initiator, Result\n| extend InitiatorName=split(Initiator, \"@\")[0], InitiatorUPNSuffix=split(Initiator, \"@\")[1]\n| extend TargetName=split(Target, \"@\")[0], TargetUPNSuffix=split(Target, \"@\")[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possibly phishing emails.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "let r_threshold = 5;\nCiscoSEGEvent\n| where NetworkDirection =~ 'Incoming'\n| where isnotempty(EventMessage)\n| where strlen(EventMessage) < 20\n| summarize rec=makeset(DstUserName) by EventMessage, bin(TimeGenerated, 10m)\n| where array_length(rec) > r_threshold\n| extend AccountCustomEntity = rec\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when attempt to delete local store logs failed.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "let lbtime = 5m;\nCiscoISEEvent\n| where TimeGenerated > ago(lbtime)\n| where EventId == '59103'\n| project TimeGenerated, DvcHostname, DvcIpAddr, DstUserName\n| extend HostCustomEntity = DvcHostname\n| extend IPCustomEntity = DvcIpAddr\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query for searching user accounts whith new privileges.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let lbtime_30d = 30d;\nlet lbtime_1d = 1d;\nOracleDatabaseAuditEvent\n| where TimeGenerated between (ago(lbtime_30d) .. ago(lbtime_1d))\n| where isnotempty(Privilege) and isnotempty(DstUserName)\n| summarize Privileges = makeset(Privilege) by DstUserName\n| join (OracleDatabaseAuditEvent\n      | where TimeGenerated > ago(lbtime_1d)\n      | where isnotempty(DstUserName) and isnotempty(Privilege)\n      | project DstUserName, Privilege\n      ) on DstUserName\n|mv-expand Privileges\n|extend Privileges = tostring(Privileges)\n| where Privilege != Privileges\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unusual mail domain in authentication requests.\n Topic: PingFederate"}, {"role": "assistant", "content": "let known_domains = \nPingFederateEvent\n| where TimeGenerated between (ago(14d) .. (1d))\n| extend email = extract(@'email=(.*?),.*', 1, AdditionalExtensions)\n| extend m_domain = extract(@'@(.*)', 1, email)\n| where isnotempty(m_domain)\n| summarize makeset(m_domain);\nPingFederateEvent\n| extend email = extract(@'email=(.*?),.*', 1, AdditionalExtensions)\n| extend m_domain = extract(@'@(.*)', 1, email)\n| where isnotempty(m_domain)\n| where m_domain !in (known_domains)\n| extend AccountCustomEntity = DstUserName\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Threat actors may attempt to phish users in order to hijack a users sign-in session, and skip the authentication process even if the user had enabled multifactor authentication (MFA) by stealing and replaying stolen credentials and session cookies.\nThis detection looks for successful Microsoft Entra ID sign ins that had a high risk profile, indicating it had suspicious characteristics such as an unusual location, ISP, user agent, or use of anonymizer services.\nIt then looks for a network connection to the IP address that made the sign in immediately before the sign in, that may indicate a user connecting to a phishing site at that IP address and having their authentication session hijacked.\nRef: https://www.microsoft.com/security/blog/2022/07/12/from-cookie-theft-to-bec-attackers-use-aitm-phishing-sites-as-entry-point-to-further-financial-fraud/\n Topic: SecurityThreatEssentialSolution"}, {"role": "assistant", "content": "let time_threshold = 10m;\nlet RiskySignins = materialize (SigninLogs\n| where TimeGenerated > ago(1d)\n| where ResultType == 0\n| where RiskLevelDuringSignIn =~ \"high\" or RiskLevelAggregated =~ \"high\"\n| extend SignInTime = TimeGenerated, Name=split(UserPrincipalName, \"@\")[0], UPNSuffix=split(UserPrincipalName, \"@\")[1]);\nlet ips = todynamic(toscalar(RiskySignins | summarize make_list(IPAddress)));\nRiskySignins\n| join kind=inner (_Im_WebSession(starttime=ago(1d), ipaddr_has_any_prefix=ips, eventresult=\"Success\", pack=True))\non $left.IPAddress == $right.DstIpAddr\n| where EventStartTime < TimeGenerated\n| extend TimeDelta = TimeGenerated - EventStartTime\n| where TimeDelta <= time_threshold\n| extend NetworkEventStartTime = EventStartTime, NetworkEventEndTime = EventEndTime\n| extend SrcUsername = column_ifexists(\"SrcUsername\", \"Unknown\")\n| project-reorder SignInTime, UserPrincipalName, IPAddress, AppDisplayName, ClientAppUsed, DeviceDetail, LocationDetails, NetworkLocationDetails, RiskEventTypes, UserAgent, NetworkEventStartTime, NetworkEventEndTime, SrcIpAddr, DstIpAddr, DstPortNumber, Dvc, DvcHostname, SrcBytes, NetworkProtocol, SrcUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies contacts with domains names in CommonSecurityLog that might have been generated by a Domain Generation Algorithm (DGA). DGAs can be used by malware to generate rendezvous points that are difficult to predict in advance.\nThis detection uses the Alexa Top 1 million domain names to build a model of what normal domains look like. It uses this to identify domains that may have been randomly generated by an algorithm.\nThe triThreshold is set to 500 - increase this to report on domains that are less likely to have been randomly generated, decrease it for more likely.\nThe start time and end time look back over 6 hours of data and the dgaLengthThreshold is set to 8 - meaning domains whose length is 8 or more are reported.\nNOTE - The top1M csv zip file used in the query is dynamic and may produce different results over various time periods. Its important to cross-check the events against the entities involved in the incident.\n Topic: Detections"}, {"role": "assistant", "content": "let triThreshold = 500;\nlet startTime = 6h;\nlet dgaLengthThreshold = 8;\n// fetch the alexa top 1M domains\nlet top1M =  (externaldata (Position:int, Domain:string)   [@\"http://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip\"]  with (format=\"csv\", zipPattern=\"*.csv\"));\n// extract tri grams that are above our threshold - i.e. are common\nlet triBaseline =   top1M\n| extend Domain = tolower(extract(\"([^.]*).{0,7}$\", 1, Domain))\n| extend AllTriGrams = array_concat(extract_all(\"(...)\", Domain), extract_all(\"(...)\", substring(Domain, 1)), extract_all(\"(...)\", substring(Domain, 2)))\n| mvexpand Trigram=AllTriGrams\n| summarize triCount=count() by tostring(Trigram)\n| sort by triCount desc\n| where triCount > triThreshold\n| distinct Trigram;\n// collect domain information from common security log, filter and extract the DGA candidate and its trigrams\nlet allDataSummarized =   CommonSecurityLog\n| where TimeGenerated > ago(startTime)\n| where isnotempty(DestinationHostName)\n| extend Name = tolower(DestinationHostName)\n| distinct Name\n| where Name has \".\"\n| where Name !endswith \".home\" and Name !endswith \".lan\"\n// extract DGA candidate\n| extend DGADomain = extract(\"([^.]*).{0,7}$\", 1, Name)\n| where strlen(DGADomain) > dgaLengthThreshold\n// throw out domains with number in them\n| where DGADomain matches regex \"^[A-Za-z]{0,}$\"\n// extract the tri grams from summarized data\n| extend AllTriGrams = array_concat(extract_all(\"(...)\", DGADomain), extract_all(\"(...)\", substring(DGADomain, 1)), extract_all(\"(...)\", substring(DGADomain, 2)));\n// throw out domains that have repeating tri's and/or >=3 repeating letters\nlet nonRepeatingTris =  allDataSummarized\n| join kind=leftanti\n(\n    allDataSummarized\n    | mvexpand AllTriGrams\n    | summarize count() by tostring(AllTriGrams), DGADomain\n    | where count_ > 1\n    | distinct DGADomain\n)\non DGADomain;\n// find domains that do not have a common tri in the baseline\nlet dataWithRareTris =  nonRepeatingTris\n| join kind=leftanti\n(\n    nonRepeatingTris\n    | mvexpand AllTriGrams\n    | extend Trigram = tostring(AllTriGrams)\n    | distinct Trigram, DGADomain\n    | join kind=inner\n    (\n        triBaseline\n    )\n    on Trigram\n    | distinct DGADomain\n)\non DGADomain;\ndataWithRareTris\n// join DGAs back on connection data\n| join kind=inner\n(\n    CommonSecurityLog\n    | where TimeGenerated > ago(startTime)\n    | where isnotempty(DestinationHostName)\n    | extend DestinationHostName = tolower(DestinationHostName)\n    | project-rename Name=DestinationHostName, DataSource=DeviceVendor\n    | summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated) by Name, SourceIP, DestinationIP, DataSource\n)\non Name\n| project StartTime, EndTime, Name, DGADomain, SourceIP, DestinationIP, DataSource\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Malicious actors often abuse misconfigured LDAP servers or applications that use the LDAP servers in organizations. Outbound LDAP traffic should not be allowed outbound through your perimeter firewall.\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "_Im_NetworkSession(starttime=ago(1d))\n| where EventResult==\"Failure\" and ipv4_is_private(SrcIpAddr) and not(ipv4_is_private(DstIpAddr)) and SrcIpAddr != DstIpAddr\n| where tostring(DstPortNumber) has_any (\"389\", \"636\")\n| summarize Starttime= min(TimeGenerated),EndTime= max(TimeGenerated),Eventscount=sum(EventCount), EventVendors=make_set(EventVendor,10) by SrcIpAddr,DstIpAddr,DstPortNumber,NetworkProtocol,EventResult\n| extend IP_0_Address = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates Incidents for Blocked events sourced from the Contrast Protect agent.\n Topic: Contrast Protect"}, {"role": "assistant", "content": "let extract_data=(a:string, k:string) {\n  parse_urlquery(replace(@';', @'&', a))[\"Query Parameters\"][k]\n};\n\nCommonSecurityLog \n| where DeviceVendor == \"Contrast Security\"\n| where AdditionalExtensions contains \"BLOCKED\"\n| extend DeviceProduct\n| extend SourceIP\n| extend DeviceVersion\n| extend Activity\n| extend ApplicationProtocol\n| extend RequestURL\n| extend RequestMethod\n| extend Rule = extract_data(AdditionalExtensions, 'pri')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Using PATs for new operations may signal misuse. This query flags unfamiliar PAT-based operations, potentially indicating malicious use of a stolen PAT.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = totimespan((endtime-starttime)*10);\nlet PAT_Actions = AzureDevOpsAuditing\n| where TimeGenerated > ago(lookback) and TimeGenerated < starttime\n| where AuthenticationMechanism startswith \"PAT\"\n| summarize by OperationName;\nAzureDevOpsAuditing\n| where TimeGenerated between(starttime..endtime)\n| where AuthenticationMechanism startswith \"PAT\"\n| where OperationName !in (PAT_Actions)\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows powershell downloads.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where TimeGenerated > ago(24h)\n| where ActingProcessFileInternalName =~ 'powershell.exe'\n| where ActingProcessCommandLine has_any ('WebClient', 'DownloadString', 'DownloadFile')\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for any mass download by a single user with possible file copy activity to a new USB drive. Malicious insiders may perform such activities that may cause harm to the organization. \nThis query could also reveal unintentional insider that had no intention of malicious activity but their actions may impact an organizations security posture.\nReference:https://docs.microsoft.com/defender-cloud-apps/policy-template-reference\n Topic: Detections"}, {"role": "assistant", "content": "let Alerts = SecurityAlert\n| where AlertName =~ \"mass download by a single user\"\n| where Status != 'Resolved'\n| extend ipEnt = parse_json(Entities), accountEnt = parse_json(Entities)\n| mv-apply tempParams = ipEnt on (\nmv-expand ipEnt\n| where ipEnt.Type == \"ip\" \n| extend IpAddress = tostring(ipEnt.Address)\n)\n| mv-apply tempParams = accountEnt on (\nmv-expand accountEnt\n| where accountEnt.Type == \"account\"\n| extend AADUserId = tostring(accountEnt.AadUserId)\n)\n| extend Alert_TimeGenerated = TimeGenerated\n| distinct Alert_TimeGenerated, IpAddress, AADUserId, DisplayName, Description, ProductName, ExtendedProperties, Entities, Status, CompromisedEntity\n;\nlet CA_Events = CloudAppEvents\n| where ActionType == \"FileDownloaded\"\n| extend parsed = parse_json(RawEventData)\n| extend UserId = tostring(parsed.UserId)\n| extend FileName = tostring(parsed.SourceFileName)\n| extend FileExtension = tostring(parsed.SourceFileExtension)\n| summarize CloudAppEvent_StartTime = min(TimeGenerated), CloudAppEvent_EndTime = max(TimeGenerated), CloudAppEvent_Files = make_set(FileName), FileCount = dcount(FileName) by Application, AccountObjectId, UserId, IPAddress, City, CountryCode\n| extend CloudAppEvents_Details = pack_all();\nlet CA_Alerts_Events = Alerts | join kind=inner (CA_Events)\non $left.AADUserId == $right.AccountObjectId and $left.IpAddress == $right.IPAddress\n// Cloud app event comes before Alert\n| where CloudAppEvent_EndTime <= Alert_TimeGenerated\n| project Alert_TimeGenerated, UserId, AADUserId, IPAddress, CloudAppEvents_Details, CloudAppEvent_Files\n;\n// setup list to filter DeviceFileEvents for only files downloaded as indicated by CloudAppEvents\nlet CA_FileList = CA_Alerts_Events | project CloudAppEvent_Files;\nCA_Alerts_Events\n| join kind=inner ( DeviceFileEvents\n| where ActionType in (\"FileCreated\", \"FileRenamed\")\n| where FileName in~ (CA_FileList)\n| summarize DeviceFileEvent_StartTime = min(TimeGenerated), DeviceFileEvent_EndTime = max(TimeGenerated), DeviceFileEvent_Files = make_set(FolderPath), DeviceFileEvent_FileCount = dcount(FolderPath) by InitiatingProcessAccountUpn, DeviceId, DeviceName, InitiatingProcessFolderPath, InitiatingProcessParentFileName//, InitiatingProcessCommandLine\n| extend DeviceFileEvents_Details = pack_all()\n) on $left.UserId == $right.InitiatingProcessAccountUpn\n| where DeviceFileEvent_StartTime >= Alert_TimeGenerated\n| join kind=inner (\n// get device events where a USB drive was mounted\nDeviceEvents\n| where ActionType == \"UsbDriveMounted\"\n| extend parsed = parse_json(AdditionalFields)\n| extend USB_DriveLetter = tostring(AdditionalFields.DriveLetter), USB_ProductName = tostring(AdditionalFields.ProductName), USB_Volume = tostring(AdditionalFields.Volume)\n| where isnotempty(USB_DriveLetter)\n| project USB_TimeGenerated = TimeGenerated, DeviceId, USB_DriveLetter, USB_ProductName, USB_Volume\n| extend USB_Details = pack_all()\n)  \non DeviceId\n// USB event occurs after the Alert\n| where USB_TimeGenerated >= Alert_TimeGenerated\n| mv-expand DeviceFileEvent_Files\n| extend DeviceFileEvent_Files = tostring(DeviceFileEvent_Files)\n// make sure that we only pickup the files that have the USB drive letter\n| where DeviceFileEvent_Files startswith USB_DriveLetter\n| summarize USB_Drive_MatchedFiles = make_set_if(DeviceFileEvent_Files, DeviceFileEvent_Files startswith USB_DriveLetter) by Alert_TimeGenerated, USB_TimeGenerated, UserId, AADUserId, DeviceId, DeviceName, IPAddress, CloudAppEvents_Details = tostring(CloudAppEvents_Details), DeviceFileEvents_Details = tostring(DeviceFileEvents_Details), USB_Details = tostring(USB_Details)\n| extend InitiatingProcessFileName = tostring(split(todynamic(DeviceFileEvents_Details).InitiatingProcessFolderPath, \"\\\\\")[-1]), InitiatingProcessFolderPath = tostring(todynamic(DeviceFileEvents_Details).InitiatingProcessFolderPath)\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DeviceName != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures related to privileged accounts issues.\n Topic: Tenable App"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.yaml parser into the workspace\n// Retrieve the parser here: https://aka.ms/sentinel-TenableApp-afad-parser\n// Then, create the Kusto Function with alias afad_parser\nlet SeverityTable=datatable(Severity:string,Level:int) [\n\"low\", 1,\n\"medium\", 2,\n\"high\", 3,\n\"critical\", 4\n];\nlet codeNameList = datatable(Codename:string)[\"C-PRIV-ACCOUNTS-SPN\", \"C-NATIVE-ADM-GROUP-MEMBERS\", \"C-KRBTGT-PASSWORD\", \"C-PROTECTED-USERS-GROUP-UNUSED\", \"C-ADMINCOUNT-ACCOUNT-PROPS\", \"C-ADM-ACC-USAGE\", \"C-LAPS-UNSECURE-CONFIG\", \"C-DISABLED-ACCOUNTS-PRIV-GROUPS\"];\nafad_parser\n| where MessageType == 0 and Codename in~ (codeNameList)\n| lookup kind=leftouter SeverityTable on Severity\n| order by Level\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects mailbox login from Exchange PowerShell. All accounts can use it by default, but admins can change it. Whitelist benign activities.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\n    let endtime = todatetime('{{EndTimeISO}}');\n    // EnrichedMicrosoft365AuditLogs query\n    let EnrichedMailboxLogin = EnrichedMicrosoft365AuditLogs\n        | where TimeGenerated between (starttime .. endtime)\n        | where Workload == \"Exchange\" and Operation == \"MailboxLogin\"\n        | extend ClientApplication = tostring(parse_json(AdditionalProperties).ClientInfoString)\n        | where ClientApplication == \"Client=Microsoft.Exchange.Powershell; Microsoft WinRM Client\"\n        | extend TenantName = tostring(parse_json(AdditionalProperties).TenantName)\n        | extend MailboxOwner = tostring(parse_json(AdditionalProperties).MailboxOwnerUPN)\n        | extend LogonType = tostring(parse_json(AdditionalProperties).LogonType)\n        | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Count = count() by Operation, TenantName, UserType, UserId, MailboxOwner, LogonType, ClientApplication\n        | extend AccountName = iff(UserId contains '@', tostring(split(UserId, '@')[0]), UserId)\n        | extend AccountUPNSuffix = iff(UserId contains '@', tostring(split(UserId, '@')[1]), '')\n        | extend AccountName = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[1]), AccountName)\n        | extend AccountNTDomain = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[0]), '');\n    // OfficeActivity query\n    let OfficeMailboxLogin = OfficeActivity\n        | where TimeGenerated between (starttime .. endtime)\n        | where OfficeWorkload == \"Exchange\" and Operation == \"MailboxLogin\"\n        | where ClientInfoString == \"Client=Microsoft.Exchange.Powershell; Microsoft WinRM Client\"\n        | extend LogonType = \"Unknown\"  // If LogonType does not exist, create a placeholder\n        | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Count = count() by Operation, OrganizationName, UserType, UserId, MailboxOwnerUPN, LogonType, ClientInfoString\n        | extend AccountName = iff(UserId contains '@', tostring(split(UserId, '@')[0]), UserId)\n        | extend AccountUPNSuffix = iff(UserId contains '@', tostring(split(UserId, '@')[1]), '')\n        | extend AccountName = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[1]), AccountName)\n        | extend AccountNTDomain = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[0]), '');\n    // Combine Enriched and Office queries\n    let CombinedMailboxLogin = EnrichedMailboxLogin\n        | union OfficeMailboxLogin\n        | summarize arg_min(StartTime, *) by UserId, Operation\n        | project StartTime, EndTime, Operation, TenantName, OrganizationName, UserType, UserId, MailboxOwner, LogonType, ClientApplication, ClientInfoString, Count, AccountName, AccountUPNSuffix, AccountNTDomain;\n    // Final output\n    CombinedMailboxLogin\n        | order by StartTime desc;\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies abnormal deny rate for specific source IP to destination IP based on the normal average and standard deviation learned during a configured period. This can indicate potential exfiltration, initial access, or C2, where an attacker tries to exploit the same vulnerability on machines in the organization but is being blocked by firewall rules.\n\nConfigurable Parameters:\n    - minimumOfStdsThreshold: The number of stds to use in the threshold calculation. Default is set to 3.\n    - learningPeriodTime: Learning period for threshold calculation in days. Default is set to 5.\n    - binTime: Learning buckets time in hours. Default is set to 1 hour.\n    - minimumThreshold: Minimum threshold for alert. Default is set to 5.\n    - minimumBucketThreshold: Minimum learning buckets threshold for alert. Default is set to 5.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let NumOfStdsThreshold = 3;\nlet LearningPeriod = 5d;\nlet BinTime = 1h;\nlet MinThreshold = 5.0;\nlet MinLearningBuckets = 5;\nlet TrafficLogs = NetworkAccessTraffic\n  | where Action == \"Denied\"\n  | where isnotempty(DestinationIp) and isnotempty(SourceIp);\nlet LearningSrcIpDenyRate = TrafficLogs\n  | where TimeGenerated between (ago(LearningPeriod + 1d) .. ago(1d))\n  | summarize count_ = count() by SourceIp, bin(TimeGenerated, BinTime), DestinationIp\n  | summarize LearningTimeSrcIpDenyRateAvg = avg(count_), LearningTimeSrcIpDenyRateStd = stdev(count_), LearningTimeBuckets = count() by SourceIp, DestinationIp\n  | where LearningTimeBuckets > MinLearningBuckets;\nlet AlertTimeSrcIpDenyRate = TrafficLogs\n  | where TimeGenerated between (ago(1h) .. now())\n  | summarize AlertTimeSrcIpDenyRateCount = count() by SourceIp, DestinationIp;\nAlertTimeSrcIpDenyRate\n  | join kind=leftouter (LearningSrcIpDenyRate) on SourceIp, DestinationIp\n  | extend LearningThreshold = max_of(LearningTimeSrcIpDenyRateAvg + NumOfStdsThreshold * LearningTimeSrcIpDenyRateStd, MinThreshold)\n  | where AlertTimeSrcIpDenyRateCount > LearningThreshold\n  | project SourceIp, DestinationIp, AlertTimeSrcIpDenyRateCount, LearningThreshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates an incident in the event that a user generates an excessive amount of failed authentications due to invalid inputs, indications of a potential brute force.\n Topic: Symantec VIP"}, {"role": "assistant", "content": "let threshold = 15;\nSymantecVIP\n| where isnotempty(RADIUSAuth)\n| where RADIUSAuth =~ \"Reject\"\n| summarize Total = count() by bin(TimeGenerated, 15m), User, ClientIP\n| where Total > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies beaconing patterns from PAN traffic logs based on recurrent timedelta patterns.\n Reference Blog:https://techcommunity.microsoft.com/t5/microsoft-sentinel-blog/detect-network-beaconing-via-intra-request-time-delta-patterns/ba-p/779586\n Topic: Azure Cloud NGFW by Palo Alto Networks"}, {"role": "assistant", "content": "let starttime = 2d;\nlet endtime = 1d;\nlet TimeDeltaThreshold = 25;\nlet TotalEventsThreshold = 30;\nlet MostFrequentTimeDeltaThreshold = 25;\nlet PercentBeaconThreshold = 80;\nfluentbit_CL\n| where isnotempty(FirewallName_s) and ident_s == \"TRAFFIC\"\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| extend DestinationIP = extractjson(\"$.dst_ip\", Message)\n| where ipv4_is_private(DestinationIP) == false\n| project TimeGenerated, FirewallName_s, SourceIP=extractjson(\"$.src_ip\", Message), SourcePort=extractjson(\"$.sport\", Message), DestinationIP, DestinationPort=extractjson(\"$.dport\", Message), ReceivedBytes=tolong(extractjson(\"$.bytes_recv\", Message)), SentBytes=tolong(extractjson(\"$.bytes_sent\", Message))\n| sort by SourceIP asc, TimeGenerated asc, DestinationIP asc, DestinationPort asc\n| serialize\n| extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceIP = next(SourceIP, 1)\n| extend TimeDeltainSeconds = datetime_diff('second', nextTimeGenerated, TimeGenerated)\n| where SourceIP == nextSourceIP\n// Whitelisting criteria/ threshold criteria\n| where TimeDeltainSeconds > TimeDeltaThreshold\n| summarize count(), sum(ReceivedBytes), sum(SentBytes)\nby TimeDeltainSeconds, bin(TimeGenerated, 1h), FirewallName_s, SourceIP, DestinationIP, DestinationPort\n| summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds), TotalEvents=sum(count_), TotalSentBytes = sum(sum_SentBytes), TotalReceivedBytes = sum(sum_ReceivedBytes)\nby bin(TimeGenerated, 1h), FirewallName_s, SourceIP, DestinationIP, DestinationPort\n| where TotalEvents > TotalEventsThreshold and MostFrequentTimeDeltaCount > MostFrequentTimeDeltaThreshold\n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent > PercentBeaconThreshold\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIP, HostCustomEntity = FirewallName_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies deletion of user from SQL Database. It relies on the SQLEvent KQL Parser function.\n Topic: Microsoft Windows SQL Server Database Audit"}, {"role": "assistant", "content": "// SQLEvent is not the table name, it is the function name that should already be imported into your workspace.\n// The underlying table where the data exists is the Event table.\n// This query checks for user removed from a database by parsing the statement field at the query time.\n//\nSQLEvent\n| where Statement has_all (\"Alter role\", \"drop member\")\n| parse Statement with * \"DROP MEMBER [\" TargetUser:string \"]\" *\n| project TimeGenerated, Computer, Action, ClientIP, CurrentUser, DatabaseName, TargetUser, ObjectName, Statement\n| extend Name = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 0)[0]), CurrentUser)\n| extend UPNSuffix = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 1)[0]), '')\n| extend Name = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 1)[0]), Name)\n| extend NTDomain = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 0)[0]), '')\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search authentication attempts to suspended user account.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "CiscoISEEvent\n| where TimeGenerated > ago(24h)\n| where EventId == '86014'\n| extend AccountCustomEntity = DstUserName"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for with insecure web protocol version.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "ImpervaWAFCloud\n| where TimeGenerated > ago(24h)\n| where NetworkApplicationProtocoVersion !startswith 'TLSv1.2'\n| summarize count() by DstDomainHostname\n| extend DomainNameCustom = DstDomainHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert audits your logging architecture for recommended data tables aligned to Advanced Event Logging (EL3) of the Maturity Model for Event Log Management (M-21-31) standard. The alert triggers when recommended data tables in EL3 are not present.\n Topic: MaturityModelForEventLogManagementM2131"}, {"role": "assistant", "content": "let M2131Mapping = datatable(DataTable:string, MaturityLevel:string)\n[\n\"SigninLogs\",\t\"Event Logging (EL0)\",\n\"AADManagedIdentitySignInLogs\", \"Event Logging (EL0)\",\n\"AADServicePrincipalSignInLogs\",\t\"Event Logging (EL0)\",\n\"StorageBlobLogs\",\t\"Event Logging (EL0)\",\n\"StorageFileLogs\",\t\"Event Logging (EL0)\",\n\"AzureMetrics\",\t\"Event Logging (EL0)\",\n\"AuditLogs\",\t\"Event Logging (EL0)\",\n\"IdentityInfo\",\t\"Event Logging (EL0)\",\n\"CommonSecurityLog\",\t\"Event Logging (EL0)\",\n\"ThreatIntelligenceIndicator\",\t\"Event Logging (EL0)\",\n\"DeviceNetworkInfo\",\t\"Event Logging (EL0)\",\n\"DnsEvents\",\t\"Event Logging (EL0)\",\n\"DeviceNetworkEvents\",\t\"Event Logging (EL0)\",\n\"AzureDiagnostics\",\t\"Event Logging (EL0)\",\n\"Usage\",\t\"Event Logging (EL0)\",\n\"SecurityIncident\",\t\"Event Logging (EL0)\",\n\"SecurityAlert\",\t\"Event Logging (EL0)\",\n\"AzureActivity\",\t\"Event Logging (EL0)\",\n\"Heartbeat\",\t\"Event Logging (EL0)\",\n\"OfficeActivity\",\t\"Event Logging (EL0)\",\n\"SecurityEvent\",\t\"Event Logging (EL0)\",\n\"Syslog\",\t\"Event Logging (EL0)\",\n\"AWSCloudTrail\",\t\"Event Logging (EL0)\",\n\"GWorkspaceActivityReports\",\t\"Event Logging (EL0)\",\n\"AWSGuardDuty\",\t\"Event Logging (EL0)\",\n\"AWSVPCFlow\",\t\"Event Logging (EL0)\",\n\"Perf\",\t\"Basic Event Logging (EL1)\",\n\"SentinelHealth\",\t\"Basic Event Logging (EL1)\",\n\"DeviceLogonEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceNetworkEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceFileEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceRegistryEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceProcessEvents\",\t\"Basic Event Logging (EL1)\",\n\"VMConnection\",\t\"Basic Event Logging (EL1)\",\n\"EmailEvents\",\t\"Basic Event Logging (EL1)\",\n\"ThreatIntelligenceIndicator\",\t\"Basic Event Logging (EL1)\",\n\"SecurityRecommendation\",\t\"Basic Event Logging (EL1)\",\n\"DeviceProcessEvents\",\t\"Basic Event Logging (EL1)\",\n\"ConfigurationData\",\t\"Basic Event Logging (EL1)\",\n\"ConfigurationChange\",\t\"Basic Event Logging (EL1)\",\n\"GatewayDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"TunnelDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"IKEDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"RouteDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"PS2DiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"Event\",\t\"Basic Event Logging (EL1)\",\n\"SqlAtpStatus\",\t\"Basic Event Logging (EL1)\",\n\"ConstainerInstanceLog_CL\",\t\"Basic Event Logging (EL1)\",\n\"ContainerEvent_CL\",\t\"Basic Event Logging (EL1)\",\n\"InsightsMetrics\",\t\"Intermediate Event Logging (EL2)\",\n\"EmailUrlInfo\",\t\"Intermediate Event Logging (EL2)\",\n\"EmailAttachmentInfo\",\t\"Intermediate Event Logging (EL2)\",\n\"InformationProtectionLogs_CL\",\t\"Intermediate Event Logging (EL2)\",\n\"CloudAppEvents\",\t\"Intermediate Event Logging (EL2)\",\n\"ContainerInventory\",\t\"Intermediate Event Logging (EL2)\",\n\"Update\",\t\"Advanced Event Logging (EL3)\",\n\"BehaviorAnalytics\",\t\"Advanced Event Logging (EL3)\",\n\"Anomalies\",\t\"Advanced Event Logging (EL3)\",\n\"SecurityRegulatoryCompliance\",\t\"Advanced Event Logging (EL3)\"\n];\nUsage\n  | summarize Entries = count(), Size = sum(Quantity), last_log = datetime_diff(\"second\",now(), max(TimeGenerated)) by DataType\n  | join kind=fullouter(M2131Mapping) on $left.DataType == $right.DataTable\n  | project RecommendedDataTable=DataTable, ExistingDataTable=DataType, MaturityLevel, Size\n  | summarize Logged = countif(Size > 0), NotLogged = countif(isempty(Size)) by RecommendedDataTable, MaturityLevel\n  | where NotLogged > 0 and MaturityLevel == \"Advanced Event Logging (EL3)\"\n  //| where RecommendedDataTable <> \"Data Table Name\" \n  | project RecommendedDataTable, MaturityLevel, NotLogged, TimeObserved=now()\n  | extend CloudApplication = RecommendedDataTable\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert joins SecurityAlerts to SecurityIncidents to associate Security Alerts and Incidents with user accounts. This aligns all Microsoft Alerting Products with Microsoft Incident Generating Products (Microsoft Sentinel, M365 Defender) for a count of user security incidents over time. The default threshold is 5 security incidents, and this is customizable per the organizations requirements. Results include UserPrincipalName (UPN), SecurityIncident, LastIncident, ProductName, LastObservedTime, and Previous Incidents. There is an option for configuration of correlations against Microsoft Sentinel watchlists. For more information, see [Investigate incidents with Microsoft Sentinel]( https://docs.microsoft.com/azure/sentinel/investigate-cases).\n Topic: MicrosoftPurviewInsiderRiskManagement"}, {"role": "assistant", "content": "let PreviousIncidents =\nSecurityIncident\n| summarize hint.strategy = shuffle arg_max(LastModifiedTime, *) by IncidentNumber\n| mv-expand AlertIds\n| extend AlertId = tostring(AlertIds)\n| join kind= innerunique ( \n          SecurityAlert \n          )\n          on $left.AlertId == $right.SystemAlertId\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| summarize PreviousIncidents = make_set(IncidentNumber) by UPN;\nlet LastTimeObserved =\nSecurityIncident\n| summarize hint.strategy = shuffle arg_max(LastModifiedTime, *) by IncidentNumber\n| mv-expand AlertIds\n| extend AlertId = tostring(AlertIds)\n| join kind= innerunique ( \n          SecurityAlert \n          )\n          on $left.AlertId == $right.SystemAlertId\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| summarize arg_max(TimeGenerated, IncidentName) by UPN;\n  SecurityIncident\n| summarize hint.strategy = shuffle arg_max(LastModifiedTime, *) by IncidentNumber\n| mv-expand AlertIds\n| extend AlertId = tostring(AlertIds)\n| join kind= innerunique ( \n          SecurityAlert \n          )\n          on $left.AlertId == $right.SystemAlertId\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| summarize count() by UPN, IncidentName, IncidentNumber, IncidentUrl, Severity, ProductName\n| extend SecurityIncidents = count_\n| where SecurityIncidents > 5 //Adjust & Tune within Organzational Requirements\n| join (LastTimeObserved) on UPN\n| project-rename LastObserved = TimeGenerated, LastIncident = IncidentNumber\n| project-away IncidentName, count_, UPN1, IncidentName1, Severity, IncidentUrl\n| join kind=inner (PreviousIncidents) on UPN\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UPN == $right.SearchKey\n| project UPN, SecurityIncidents, LastIncident, ProductName, LastObserved, PreviousIncidents\n| sort by SecurityIncidents desc\n| extend AccountName = tostring(split(UPN, \"@\")[0]), AccountUPNSuffix = tostring(split(UPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "TLSv1 in Use\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"medium\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"TLSv1 in Use\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Triggeres when ransomware was detected.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where EventType =~ 'ransomware'\n| extend AccountCustomEntity = DstUserName, MalwareCustomEntity = RansomwareName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for hosts wich were not scanned recently.\n Topic: SentinelOne"}, {"role": "assistant", "content": "let scanned_agents = SentinelOne\n| where TimeGenerated > ago(24h)\n| where ActivityType == 92\n| order by TimeGenerated\n| summarize makeset(DataComputerName);\nSentinelOne\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'Agents.'\n| where ComputerName !in (scanned_agents)\n| extend HostCustomEntity = ComputerName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query shows new user created.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where TimeGenerated > ago(24h)\n| where DvcAction =~ 'user_created'\n| extend AccountCustomEntity = SrcUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An attacker with the necessary permissions could be executing code remotely on a machine and saving the output to his own S3 bucket. Verify this action with the user identity.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let command_executed = AWSCloudTrail\n| where EventName in (\"SendCommand\",\"CreateAssociation\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend params = tostring(parse_json(RequestParameters).parameters)\n| extend s3bucketCommand = tostring(parse_json(RequestParameters).outputS3BucketName)\n| extend s3bucketAssociation = tostring(parse_json(RequestParameters).outputLocation.s3Location.outputS3BucketName)\n| where isnotempty(params)\n| extend commandId = tostring(parse_json(ResponseElements).command.commandId)\n| extend associationId = tostring(parse_json(ResponseElements).associationDescription.associationId)\n| extend executionId = iff(isnotempty(commandId), commandId, associationId)\n| extend s3bucket = iff(isnotempty(s3bucketCommand), s3bucketCommand, s3bucketAssociation)\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated;\nAWSCloudTrail\n| where EventName == \"PutObject\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend s3bucket = tostring(parse_json(RequestParameters).bucketName)\n| mv-expand todynamic(Resources)\n| extend accountId=tostring(todynamic(Resources.['accountId']))\n| where Resources contains \"accountId\" and accountId <> RecipientAccountId\n| join command_executed on s3bucket\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects a successful logon by a privileged account from an ASN not logged in from in the last 14 days.\n  Monitor these logons to ensure they are legitimate and identify if there are any similar sign ins.\n Topic: Detections"}, {"role": "assistant", "content": "let admins=(IdentityInfo\n  | where AssignedRoles contains \"admin\" or GroupMembership has \"Admin\"\n  | summarize by tolower(AccountUPN));\n  let known_asns = (\n  SigninLogs\n  | where TimeGenerated between(ago(14d)..ago(1d))\n  | where ResultType == 0\n  | summarize by AutonomousSystemNumber);\n  SigninLogs\n  | where TimeGenerated > ago(1d)\n  | where ResultType == 0\n  | where tolower(UserPrincipalName) in (admins)\n  | where AutonomousSystemNumber !in (known_asns)\n  | project-reorder TimeGenerated, UserPrincipalName, UserAgent, IPAddress, AutonomousSystemNumber\n  | extend AccountName = tostring(split(UserPrincipalName, \"@\")[0]), AccountUPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects web shells by analyzing the distribution of commonly-used scripts against regular scripts for public client IPs with no W3CIIS activity in a fixed lookback period.\n Topic: Web Shells Threat Protection"}, {"role": "assistant", "content": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - (3d);\nlet script_extensions = dynamic([\".asp\", \".aspx\", \".armx\", \".asax\", \".ashz\", \".asmx\", \".axd\", \".cshtml\", \".php\", \".phps\", \".php3\", \".php4\", \".php5\", \".php7\", \".jsp\", \".jspx\", \".cfm\", \".cfml\", \".phtml\"]);\nlet ignore_uristems = dynamic([\"/ews/exchange.asmx\"]);\nlet lookback_period = (\nW3CIISLog\n| where TimeGenerated between (lookback .. starttime)\n//Exclude local addresses, using the ipv4_is_private operator\n| where ipv4_is_private(cIP) == false and  cIP !startswith \"fe80\" and cIP !startswith \"::\" and cIP !startswith \"127.\"\n| summarize count() by cIP, csUserAgent\n| project cIP, csUserAgent\n);\nlet potential_webshell_activity = (W3CIISLog\n| where TimeGenerated between (starttime .. endtime)\n| extend csUriStem = tolower(csUriStem)\n| where csUriStem matches regex \"\\\\.[a-zA-Z][a-zA-Z0-9]+$\"\n| where csUriStem !in~ (ignore_uristems) // Remove noisy uri stems in the final results by editing the ignore_uristems variable\n| extend suffix = strcat(\".\", split(split(csUriStem, \"/\")[-1], \".\")[-1])\n| extend is_script = iff(suffix in (script_extensions), 1, 0)\n//Exclude local addresses using ipv4_is_private operator\n|where ipv4_is_private(cIP) == false and  cIP !startswith \"fe80\" and cIP !startswith \"::\" and cIP !startswith \"127.\"\n| extend status_xx = strcat(substring(tostring(scStatus), 0, 1), 'XX')\n| serialize cIP, csUserAgent, TimeGenerated\n| extend SessionStarted = row_window_session(TimeGenerated, 30s, 3s, (cIP != prev(cIP)) and (csUserAgent != prev(csUserAgent))));\nlet dynamic_scripts = (potential_webshell_activity\n| where is_script == 1\n| summarize set_dynamic_scripts = make_set(csUriStem) by cIP, csUserAgent, SessionStarted);\nlet non_dynamic_scripts = (potential_webshell_activity\n| where is_script == 0\n| summarize set_non_dynamic_scripts = make_set(csUriStem) by cIP, csUserAgent, SessionStarted);\npotential_webshell_activity\n| summarize num_non_dyn_scripts = count() - sum(is_script), num_dynamic_scripts = sum(is_script) by cIP, csUserAgent, SessionStarted\n| join kind=leftanti (lookback_period) on cIP, csUserAgent\n| join kind=inner (dynamic_scripts) on cIP, csUserAgent, SessionStarted\n| join kind=leftouter (non_dynamic_scripts) on cIP, csUserAgent, SessionStarted\n| extend dyn_to_non_dyn_ratio = iff(num_non_dyn_scripts == 0, 10000.0, 1.0 * num_dynamic_scripts/num_non_dyn_scripts)\n| project cIP, csUserAgent, SessionStarted,  num_dynamic_scripts, set_dynamic_scripts, num_non_dyn_scripts, set_non_dynamic_scripts,  dyn_to_non_dyn_ratio\n| sort by dyn_to_non_dyn_ratio desc, num_dynamic_scripts desc\n| extend summary = pack('IPCustomEntity', cIP, 'user_agent', csUserAgent, 'num_dynamic_scripts', num_dynamic_scripts, 'set_dynamic_scripts', set_dynamic_scripts, 'num_non_dyn_scripts', num_non_dyn_scripts, 'set_non_dynamic_scripts', set_non_dynamic_scripts, 'ratio', dyn_to_non_dyn_ratio, 'Session_StartTime', SessionStarted)\n| summarize summaries=make_list(summary), num_of_sessions_on_day = count() by cIP, csUserAgent\n| sort by num_of_sessions_on_day asc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects outbound relays may be added to collect email.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where EventMessage has \"TOGGLE_OUTBOUND_RELAY\"\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of requests to unexisting files\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "NGINXHTTPServer\n| where TimeGenerated > ago(24h)\n| where EventType =~ \"ErrorLog\"\n| where EventMessage contains \"File does not exist\"\n| extend File = extract(@\"(.*\\/)(.*)\", 2, tostring(EventMessage))\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in EmailUrlInfo.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet EmailUrlInfo_ = materialize(EmailUrlInfo\n    | where isnotempty(Url)\n    | where TimeGenerated >= ago(dt_lookBack)\n    | extend Url = tolower(Url)\n    | extend EmailUrlInfo_TimeGenerated = TimeGenerated);\nlet EmailUrls = EmailUrlInfo_ | distinct Url | summarize make_list(Url);\nlet EmailUrlDomains = EmailUrlInfo_ | distinct UrlDomain | summarize make_list(UrlDomain);\nlet EmailEvents_ = materialize(EmailEvents\n    | where TimeGenerated >= ago(dt_lookBack));\nlet TI = materialize(ThreatIntelligenceIndicator\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | where (isnotempty(Url) or isnotempty(DomainName)) \n    | where tolower(Url) in (EmailUrls) or tolower(DomainName) in (EmailUrlDomains)\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now());\n(union\n    (TI | join kind=innerunique (EmailUrlInfo_) on Url),\n    (TI | join kind=innerunique (EmailUrlInfo_) on $left.DomainName == $right.UrlDomain))\n| where EmailUrlInfo_TimeGenerated < ExpirationDateTime\n| summarize EmailUrlInfo_TimeGenerated = arg_max(EmailUrlInfo_TimeGenerated, *) by IndicatorId, Url\n| project EmailUrlInfo_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, UrlDomain, UrlLocation, NetworkMessageId\n| extend timestamp = EmailUrlInfo_TimeGenerated\n| join kind=inner (EmailEvents_) on NetworkMessageId\n| where DeliveryAction !has \"Blocked\"\n| extend Name = tostring(split(RecipientEmailAddress, '@', 0)[0]), UPNSuffix = tostring(split(RecipientEmailAddress, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies if an AV scan fails in Azure App Services.\n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = ago(1d);\nAppServiceAntivirusScanAuditLogs\n| where ScanStatus == \"Failed\"\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for powered off VMs.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "VMwareESXi\n| where TimeGenerated > ago(24h)\n| where SyslogMessage has ('VmPoweredOffEvent')\n| extend SrcUsername = extract(@'\\[info\\]\\s+\\[(.*?)\\]', 1, SyslogMessage)\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| project TimeGenerated, SrcUsername, DstHostname\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create Microsoft Sentinel Incident When Ven Goes Into Deactivated state\n Topic: IllumioSaaS"}, {"role": "assistant", "content": "Illumio_Auditable_Events_CL\n| union IllumioSyslogAuditEvents  \n| where event_type has 'agent.deactivate'\n| mv-expand resource_changes\n| extend hostname = resource_changes['resource']['workload']['hostname'],\n    workload_href = resource_changes['resource']['workload']['href'],\n    workload_labels = resource_changes['resource']['workload']['labels']\n| extend ipaddress = action.src_ip,       \n      ven_href = created_by.ven.href\n| project-away resource_changes, action, version \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects batches of distinct SQL queries that execute (or attempt to) commands that could indicate potential security issues - such as attempts to drop tables or databases (e.g. for data vandalism).\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet hotwords = pack_array('drop table', 'drop database'); // List of monitored hot words.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | extend hasHotword = iff(Statement has_any (hotwords), 1, 0)\n    | summarize countEvents = count(), countStatements = dcount(Statement)\n        , countStatementsWithHotwords = dcountif(Statement, hasHotword == 1)\n        , countFailedStatementsWithHotwords = dcountif(Statement, (hasHotword == 1) and (Error > 0))\n        , countSuccessfulStatementsWithHotwords = dcountif(Statement, ((hasHotword == 1)) and (Error == 0))\n        , anyMonitoredStatement = anyif(Statement, (hasHotword == 1))\n        , anySuccessfulMonitoredStatement = anyif(Statement, (hasHotword == 1) and (Error == 0))\n        , anyInfo = anyif(AdditionalInfo, hasHotword == 1)\n        , hotWord = anyif(extract(strcat_array(hotwords, '|'), 0, tolower(Statement)), hasHotword == 1)\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId   \n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithHotwords = dcountif(timeSlice, countStatementsWithHotwords >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsHotwordAnomalyOnStatement = iff(((countStatementsWithHotwords >= monitoredStatementsThreshold) and (countSlicesWithHotwords <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithHotwords/monitoredStatementsThreshold, 0)\n| where IsHotwordAnomalyOnStatement == 'true'\n| sort by countSuccessfulStatementsWithHotwords desc,  anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])    \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects threats from email anti virus scan Topic: MimecastSEG"}, {"role": "assistant", "content": "MimecastSIEM_CL| where mimecastEventId_s==\"mail_av\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Digital Shadows Analytic rule for generating Microsoft Sentinel incidents for the data ingested by app polling for included classifications Topic: Digital Shadows"}, {"role": "assistant", "content": "let DSSearchLight_view  = view () { DigitalShadows_CL | where app_s == \"include\" | extend EventVendor=\"Digital Shadows\", EventProduct=\"SearchLight\",Type=\"DigitalShadows_CL\",EventStartTime=raised_t,EventMessage=title_s,EventOriginalUid=triage_id_g,EventOriginalType=classification_s | extend EventOriginalSeverity=iif(isempty(risk_level_s), risk_assessment_risk_level_s, risk_level_s) | extend EventSeverity = case(EventOriginalSeverity == 'none', 'Informational', EventOriginalSeverity == 'very-low', 'Low',EventOriginalSeverity == 'low', 'Low',EventOriginalSeverity == 'medium', 'Medium',EventOriginalSeverity == 'high', 'High',EventOriginalSeverity == 'very-high', 'High','Informational') | extend EventReportUrl=iif(isempty(id_d), strcat('https://portal-digitalshadows.com/triage/alerts/',portal_id_s),strcat('https://portal-digitalshadows.com/triage/alert-incidents/',id_d)) | extend AdditionalFields = pack(\"assets\", assets_s, \"comments\", comments_s, \"description\", description_s, \"incident_id\", id_d, \"alert_id\", id_g, \"short_code\", portal_id_s, \"impact\", impact_description_s, \"mitigation\", mitigation_s, \"risk_factors\", risk_factors_s, \"triage_status\", status_s, \"triage_id\", triage_id_g, \"triage_raised\", triage_raised_time_t,\"triage_updated\", triage_updated_time_t, \"updated\", updated_t) | project TimeGenerated, EventVendor,EventProduct, Type, EventStartTime,EventMessage, EventOriginalUid, EventOriginalType,EventOriginalSeverity, EventSeverity, EventReportUrl,AdditionalFields};DSSearchLight_view | summarize arg_max(TimeGenerated, *) by EventOriginalUid | extend description = AdditionalFields.description | extend impact = AdditionalFields.impact | extend mitigation = AdditionalFields.mitigation | extend status = AdditionalFields.triage_status | extend comments = AdditionalFields.comments"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Looks for valid variations of the -EncodedCommand parameter. Commonly used to encode or obfuscate commands, and not all occurrences are malicious.\n Topic: Cyborg Security HUNTER"}, {"role": "assistant", "content": "SecurityEvent\n| where TimeGenerated >= ago(7d)\n| project TimeGenerated, Computer, Activity, EventID, CommandLine, NewProcessName, processId = tolong(NewProcessId), ParentProcessName, parentProcessId = tolong(ProcessId)\n| where NewProcessName endswith \"powershell.exe\"\n| where CommandLine matches regex \"-[Ee^]{1,2}[NnCcOoDdEeMmAaPpHh^`]+\\\\s+\\\"?[a-zA-Z0-9+/=]{6,}\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection mechanism identifies requests originating from a single source within a brief time period that exhibit multiple user agents. Such behavior could indicate unusual web browsing activities performed by unconventional processes\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let threshold = 5; // Please update threshold limit as per your environment\n_Im_WebSession(starttime=ago(1h), eventresult=\"Success\")\n| where isnotempty(HttpUserAgent)\n| summarize\n    EventCount=count(),\n    UserAgentList=make_set(HttpUserAgent, 100),\n    URL_List = make_set(Url, 100),\n    DestinationIPList = make_set(DstIpAddr, 100)\n    by SrcIpAddr, SrcUsername, SrcHostname, bin(TimeGenerated, 5min)\n| extend UserAgentCount = array_length(UserAgentList)\n| where UserAgentCount > threshold\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\"), Threshold=threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests where user agent is empty.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where isempty(HttpUserAgentOriginal)\n| extend AccountName = tostring(split(PayloadAuthenticationinfoPrincipalemail, \"@\")[0]), AccountUPNSuffix = tostring(split(PayloadAuthenticationinfoPrincipalemail, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identity and Access Management (IAM) securely manages access to AWS services and resources. \nIdentifies when a policy is created with Full Administrators Access (Allow-Action:*,Resource:*). \nThis policy can be attached to role,user or group and may be used by an adversary to escalate a normal user privileges to an adminsitrative level.\nAWS IAM Policy Grammar: https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_grammar.html \nand AWS IAM API at https://docs.aws.amazon.com/IAM/latest/APIReference/API_Operations.html\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\nlet createPolicy = dynamic([\"CreatePolicy\", \"CreatePolicyVersion\"]);\nlet timeframe = 1d;\nlet lookback = 14d;\n// Creating Master table with all the events to use with materialize for better performance\nlet EventInfo = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName in (EventNameList) or EventName in (createPolicy)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\");\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\nlet FullAdminPolicyEvents =  materialize(  EventInfo\n| where TimeGenerated >= ago(lookback)\n| where EventName in (createPolicy)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource)\n| mvexpand Action\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and Action == \"*\" and Resource == \"*\"\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn, UserIdentityUserName, RecipientAccountId, AccountName, AccountUPNSuffix\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| project-rename StartTime = TimeGenerated  );\nlet PolicyAttach = materialize(  EventInfo\n| where TimeGenerated >= ago(timeframe)\n| where EventName in (EventNameList)\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\"/\")[1])\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName,   UserIdentityType , UserIdentityArn, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, PolicyName\n| extend AttachEvent = pack(\"StartTime\", StartTime, \"EndTime\", EndTime, \"EventName\", EventName, \"UserIdentityType\",   UserIdentityType, \"AccountName\", AccountName, \"AccountUPNSuffix\", AccountUPNSuffix, \"RecipientAccountId\", RecipientAccountId, \"UserIdentityArn\", UserIdentityArn, \"SourceIpAddress\", SourceIpAddress)\n| project EventSource, PolicyName, AttachEvent, RecipientAccountId, AccountName, AccountUPNSuffix, AttachEventCount\n);\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\nFullAdminPolicyEvents\n| join kind=leftouter\n(\n    PolicyAttach\n)\non PolicyName\n| project-away PolicyName1\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for an service principal is not using a client certificate or secret is not secure. \n It is recommended that you review your needs and use an Authentication method \n for sign-in.\n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'ServicePrincipalNotUsingClientCredentials'"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies clients with a high NXDomain count, which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live).\nAlerts are generated when a new IP address is seen (based on not being associated with NXDomain records in the prior 10-day baseline period).\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "let starttime = 10d;\nlet endtime = 1d;\nlet threshold = 100;\nlet nxDomainDnsEvents = DnsEvents\n// ResultCode 3 => 'NXDOMAIN'\n| where ResultCode == 3\n| where QueryType in~ (\"A\", \"AAAA\")\n| where ipv4_is_match(\"127.0.0.1\", ClientIP) == False\n| where Name !has \"/\"\n| where Name has \".\";\nnxDomainDnsEvents\n| where TimeGenerated > ago(endtime)\n// sld = Second Level Domain\n| extend sld = tostring(split(Name, \".\")[-2])\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), dcount(sld), sampleNXDomainList=make_set(Name, 100) by ClientIP\n| where dcount_sld > threshold\n// Filter out previously seen IPs\n// Returns all the records from the left side that don't have matches from the right\n| join kind=leftanti (nxDomainDnsEvents\n    | where TimeGenerated between(ago(starttime)..ago(endtime))\n    | extend sld = tostring(split(Name, \".\")[-2])\n    | summarize dcount(sld) by ClientIP, bin(TimeGenerated,1d)\n    | where dcount_sld > threshold\n    ) on ClientIP\n    | order by dcount_sld desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query correlates a risky user sign ins with access to sensitive data classified by data loss prevention capabilities (watchlist configurable). For more information, see https://docs.microsoft.com/azure/sentinel/watchlists\n Topic: MicrosoftPurviewInsiderRiskManagement"}, {"role": "assistant", "content": "let RiskySignIns = SigninLogs\n| where RiskState == \"atRisk\"\n| where RiskLevelDuringSignIn == \"high\" or RiskLevelDuringSignIn == \"medium\"\n| extend RiskTypes = strcat(RiskEventTypes_V2);\nInformationProtectionLogs_CL\n| extend UserPrincipalName = UserId_s\n| where LabelName_s <> \"\"\n| join kind=inner (SigninLogs) on UserPrincipalName\n| extend City = tostring(LocationDetails.city)\n// | where City <> \"New York\" // Configure Location Details within Organizational Requirements\n| extend State = tostring(LocationDetails.state)\n// | where State <> \"Texas\" // Configure Location Details within Organizational Requirements\n| extend Country_Region = tostring(LocationDetails.countryOrRegion)\n// | where Country_Region <> \"US\" // Configure Location Details within Organizational Requirements\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UserPrincipalName == $right.SearchKey\n| summarize count() by UserPrincipalName, LabelName_s, Activity_s, City, State, Country_Region, TimeGenerated\n| join kind=inner (RiskySignIns) on UserPrincipalName\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UserPrincipalName == $right.SearchKey\n| project UserPrincipalName, RiskTypes, City, State, Country_Region, LabelName_s, Activity_s, count_, TimeGenerated\n| sort by count_ desc\n| limit 100\n| extend AccountCustomEntity = UserPrincipalName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects unusual file content created by UMWorkerProcess, indicating exploitation of CVE-2021-26858 to generate a web shell. More related queries can be found on the Microsoft Security Response Center blog.\n Topic: Web Shells Threat Protection"}, {"role": "assistant", "content": "DeviceFileEvents\n| where InitiatingProcessFileName == \"UMWorkerProcess.exe\" \n| where FileName !in~(\"CacheCleanup.bin\", \"cleanup.bin\")\n| where FileName !endswith \".txt\"\n| where FileName !endswith \".LOG\" \n| where FileName !endswith \".cfg\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for updated workflow schemes.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where TimeGenerated > ago(24h)\n| where EventMessage =~ 'Workflow scheme updated'\n| project EventCreationTime, UserName, SrcIpAddr, ObjectItemName\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may generate temporary credentials of existing privileged IAM roles to access AWS resources that were not previously accessible to perform malicious actions. The credentials may be generated by trusted IAM user or via AWS Cloud Instance Metadata API.\nThis query will look for AWS STS API Assume Role operations for RoleArn (Role Amazon Resource Names) which was not historically seen.\nYou can also limit the query to only sensitive IAM Roles which needs to be monitored.\nRead more about ingest custom logs using Logstash at https://github.com/Azure/Azure-Sentinel/wiki/Ingest-Custom-Logs-LogStash \nAWS API AssumeRole at https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html and AWS Instance Metadata API at https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\n// Generating historical table of AssumeRole operations for IAM Roles to be compared with last 24 hour\nAWSCloudTrail\n| where TimeGenerated between (starttime..endtime)\n| where EventName == \"AssumeRole\" | extend RoleArn = tostring(parse_json(RequestParameters).roleArn)\n| project TimeGenerated, EventSource, EventName, UserIdentityType, UserIdentityInvokedBy , SourceIpAddress, RoleArn\n// Doing Leftanti join to find new AssumeRole operation for IAM role which was not seen historically generated from previous table.\n| join kind= leftanti\n(\n  AWSCloudTrail\n  | where TimeGenerated  between (lookback..starttime)\n  | where EventName == \"AssumeRole\" | extend RoleArn = tostring(parse_json(RequestParameters).roleArn)\n  | project TimeGenerated, EventSource, EventName, UserIdentityType, UserIdentityInvokedBy , SourceIpAddress, RoleArn\n) on RoleArn, UserIdentityInvokedBy\n| summarize EventCount = count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by RoleArn, EventSource, EventName, UserIdentityType, UserIdentityInvokedBy, SourceIpAddress\n| extend timestamp = StartTimeUtc, IPCustomEntity = SourceIpAddress, AccountCustomEntity = tostring(split(RoleArn, \"/\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Organizations are added in the Cross-tenant Access Settings to control communication inbound or outbound for users and applications. This detection notifies when an Organization is deleted from the Microsoft Entra ID Cross-tenant Access Settings.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where OperationName has \"Delete partner specific cross-tenant access setting\"\n| mv-apply TargetResource = TargetResources on\n  (\n      where TargetResource.type =~ \"Policy\"\n      | extend Properties = TargetResource.modifiedProperties\n  )\n| mv-apply Property = Properties on\n  (\n      where Property.displayName =~ \"tenantId\"\n      | extend ExtTenantDeleted = trim('\"',tostring(Property.oldValue))\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for Password spraying attacks\n Topic: Alsid For AD"}, {"role": "assistant", "content": "afad_parser\n| where MessageType == 2 and Codename == \"Password Spraying\"\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Organizations are added in the Cross-tenant Access Settings to control communication inbound or outbound for users and applications. This detection notifies when Organization Inbound Collaboration Settings are changed for \"Users & Groups\" and for \"Applications\".\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "// In User & Groups and in Applications, the following \"AccessType\" values in columns PremodifiedInboundSettings and ModifiedInboundSettings are interpreted accordingly\n// When Access Type in premodified inbound settings value was 1 that means that the initial access was allowed. When Access Type in premodified inbound settings value was 2 that means that the initial access was blocked.\n// When Access Type in modified inbound settings value is 1 that means that now access is allowed. When Access Type in modified inbound settings value is 2 that means that now access is blocked.\nAuditLogs\n| where OperationName has \"Update a partner cross-tenant access setting\"\n| mv-apply TargetResource = TargetResources on\n  (\n      where TargetResource.type =~ \"Policy\"\n      | extend Properties = TargetResource.modifiedProperties\n  )\n| mv-apply Property = Properties on\n  (\n      where Property.displayName =~ \"b2bCollaborationInbound\"\n      | extend PremodifiedInboundSettings = trim('\"',tostring(Property.oldValue)),\n               ModifiedInboundSettings = trim(@'\"',tostring(Property.newValue))\n  )\n| where PremodifiedInboundSettings != ModifiedInboundSettings\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects connections from known malicious clients.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "ImpervaWAFCloud\n| where ClientApp in~ ('VulnerabilityScanner', 'DDoSBot', 'ClickBot','CommentSpamBot','HackingTool', 'SpamBot', 'Worm')\n| where DvcAction !startswith 'REQ_BLOCKED' or DvcAction !startswith 'REQ_BAD_'\n| extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = QueryString\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identify scanning of services that may be available on the internal network.\n Topic: Corelight"}, {"role": "assistant", "content": "let threshold = 25;\nunion corelight_conn, corelight_conn_red\n| where local_resp == true\n| where local_orig == true\n| where conn_state in~ ('S0', 'REJ')\n| where history !contains 'D'\n| summarize count() by id_orig_h, id_resp_p, bin(TimeGenerated, 1m)\n| where count_ > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when same custom rule was triggered on different hosts.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where ActivityType == 3608\n| extend RuleName = extract(@'Custom Rule:\\s(.*?)\\sin Group', 1, EventOriginalMessage)\n| extend DstHostname = extract(@'detected on\\s(\\S+)\\.', 1, EventOriginalMessage)\n| summarize hosts = makeset(DstHostname) by RuleName, bin(TimeGenerated, 15m)\n| where array_length(hosts) > 1\n| extend HostCustomEntity = hosts\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected Bucket versioning suspended event. Attackers could use this technique to be able to ransom buckets without the option for the victim to have a backup.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"PutBucketVersioning\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend status = tostring(parse_json(RequestParameters).VersioningConfiguration.Status)\n| where status == \"Suspended\"\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for when an API call is made to change an IAM, particularly those related to new policies being \nattached to users and roles, as well as changes to access methods and changes to account level policies.  \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "\nAWSCloudTrail\n| where  EventName in~ (\"AttachGroupPolicy\", \"AttachRolePolicy\", \"AttachUserPolicy\", \"CreatePolicy\",\n\"DeleteGroupPolicy\", \"DeletePolicy\", \"DeleteRolePolicy\", \"DeleteUserPolicy\", \"DetachGroupPolicy\",\n\"PutUserPolicy\", \"PutGroupPolicy\", \"CreatePolicyVersion\", \"DeletePolicyVersion\", \"DetachRolePolicy\", \"CreatePolicy\")\n| project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityAccountId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a new eligible or active privileged role is assigned to a user. Does not alert on PIM activations. Any account eligible for a role is now being given privileged access. If the assignment is unexpected or into a role that isnt the responsibility of the account holder, investigate.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#things-to-monitor-1\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where Category =~ \"RoleManagement\"\n| where AADOperationType in (\"Assign\", \"AssignEligibleRole\", \"CreateRequestGrantedRole\", \"CreateRequestPermanentEligibleRole\", \"CreateRequestPermanentGrantedRole\")\n| where ActivityDisplayName has_any (\"Add eligible member to role\", \"Add member to role\")\n| mv-apply TargetResourceSubject = TargetResources on \n  (\n      where TargetResourceSubject.type in~ (\"User\", \"ServicePrincipal\")\n      | extend Target = iff(TargetResourceSubject.type =~ \"ServicePrincipal\", tostring(TargetResourceSubject.displayName), tostring(TargetResourceSubject.userPrincipalName)),\n               subjectProps = TargetResourceSubject.modifiedProperties\n  )\n| mv-apply TargetResourceRole = TargetResources on \n  (\n    // mimic modifiedProperties so we can use the same logic to get the role name regardless of where it comes from\n    where TargetResourceRole.type in~ (\"Role\")\n    | extend roleProps = pack_array(bag_pack(\"displayName\",\"Role.DisplayName\", \"newValue\", TargetResourceRole.displayName))\n  )\n| mv-apply Property = iff(array_length(subjectProps) > 0, subjectProps, roleProps) on \n  ( \n    where Property.displayName =~ \"Role.DisplayName\"\n      | extend RoleName = trim('\"',tostring(Property.newValue))\n  )\n| where RoleName contains \"Admin\"\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend Initiator = iif(isnotempty(InitiatingAppName), InitiatingAppName, InitiatingUserPrincipalName)\n// Comment below to alert for PIM activations\n| where Initiator != \"MS-PIM\"\n| summarize by bin(TimeGenerated, 1h), OperationName, RoleName, Target, Initiator, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, Result\n| extend TargetName = tostring(split(Target,'@',0)[0]), TargetUPNSuffix = tostring(split(Target,'@',1)[0]), InitiatorName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatorUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies anomalies using user behavior by setting a threshold for significant changes in file upload/download activities from new IP addresses. It establishes a baseline of typical behavior, compares it to recent activity, and flags deviations exceeding a default threshold of 25.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let threshold = 25;\nlet szSharePointFileOperation = \"SharePointFileOperation\";\nlet szOperations = dynamic([\"FileDownloaded\", \"FileUploaded\"]);\nlet starttime = 14d;\nlet endtime = 1d;\n\n// Define a baseline of normal user behavior for OfficeActivity\nlet userBaselineOffice = OfficeActivity\n    | where TimeGenerated between(ago(starttime)..ago(endtime))\n    | where RecordType =~ szSharePointFileOperation\n    | where Operation in~ (szOperations)\n    | where isnotempty(UserAgent)\n    | summarize Count = count() by UserId, Operation, Site_Url, ClientIP\n    | summarize AvgCount = avg(Count) by UserId, Operation, Site_Url, ClientIP;\n\n// Get recent user activity for OfficeActivity\nlet recentUserActivityOffice = OfficeActivity\n    | where TimeGenerated > ago(endtime)\n    | where RecordType =~ szSharePointFileOperation\n    | where Operation in~ (szOperations)\n    | where isnotempty(UserAgent)\n    | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), RecentCount = count() by UserId, UserType, Operation, Site_Url, ClientIP, OfficeObjectId, OfficeWorkload, UserAgent;\n\n// Define a baseline of normal user behavior for EnrichedMicrosoft365AuditLogs\nlet userBaselineEnriched = EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated between(ago(starttime)..ago(endtime))\n    | where RecordType == szSharePointFileOperation\n    | where Operation in (szOperations)\n    | extend UserAgent = tostring(parse_json(tostring(AdditionalProperties)).UserAgent)\n    | extend Site_Url = tostring(parse_json(tostring(AdditionalProperties)).SiteUrl)\n    | where isnotempty(UserAgent)\n    | summarize Count = count() by UserId, Operation, Site_Url, ClientIp\n    | summarize AvgCount = avg(Count) by UserId, Operation, Site_Url, ClientIp;\n\n// Get recent user activity for EnrichedMicrosoft365AuditLogs\nlet recentUserActivityEnriched = EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated > ago(endtime)\n    | where RecordType == szSharePointFileOperation\n    | where Operation in (szOperations)\n    | extend UserAgent = tostring(parse_json(tostring(AdditionalProperties)).UserAgent)\n    | extend Site_Url = tostring(parse_json(tostring(AdditionalProperties)).SiteUrl)\n    | where isnotempty(UserAgent)\n    | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), RecentCount = count() by UserId, UserType, Operation, Site_Url, ClientIp, ObjectId, Workload, UserAgent;\n\n// Combine user baselines and recent activity, calculate deviation, and deduplicate\nlet UserBehaviorAnalysis = userBaselineOffice\n    | join kind=inner (recentUserActivityOffice) on UserId, Operation, Site_Url, ClientIP\n    | union (userBaselineEnriched | join kind=inner (recentUserActivityEnriched) on UserId, Operation, Site_Url, ClientIp)\n    | extend Deviation = abs(RecentCount - AvgCount) / AvgCount;\n\n// Filter for significant deviations\nUserBehaviorAnalysis\n    | where Deviation > threshold\n    | project StartTimeUtc, EndTimeUtc, UserId, UserType, Operation, ClientIP, Site_Url, ObjectId, OfficeObjectId, OfficeWorkload, Workload, UserAgent, Deviation, Count = RecentCount\n    | order by Count desc, ClientIP asc, Operation asc, UserId asc\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for DNS queries that resulted in errors. This query utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let timeframe = 1d;\n_Im_Dns(starttime=ago(timeframe), endtime=now())\n| where EventSubType =~ 'response' and DnsResponseCodeName != 'NOERROR'\n| summarize Count=count() by DnsQuery, DnsResponseCodeName\n| order by Count\n| take 25\n| extend DNS_0_DomainName = DnsQuery\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects Active Directory account lockouts\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID == 4740\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), LockoutsCount = count() by Activity, Account, TargetSid, TargetDomainName, SourceComputerId, SourceDomainController = Computer\n| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = TargetDomainName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for unscanned objects.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "let lbtime = 24h;\nMcAfeeEPOEvent\n| where TimeGenerated > ago(lbtime)\n| where EventId in ('1051', '34925', '34926')\n| extend Reason = case(EventId == '1051', \"Unable to scan password protected\",\n                              EventId == '34925', \"The object was not scanned because the scanner does not have enough rights to read it\",\n                              \"The object was not scanned because the file size exceeds the configured maximum file size to scan\")\n| project DvcIpAddr, EventId, Reason, DstFileName\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when incident has not block action.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where isnotempty(IncidentStatus)\n| extend inc_act = split(IncidentStatus, ',')\n| where inc_act has 'New'\n| where inc_act !contains 'Block'\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which low sensitive HR information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let lowRisk = 1;\nlet hr = 'HR Information';\nCognniIncidents_CL \n| where Severity == lowRisk\n| where informationType_s == hr\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query detects Unexpected Post Requests\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where TimeGenerated > ago(24h)\n| where HttpRequestMethod in~ (\"POST\", \"PUT\")\n| project UrlOriginal, HttpStatusCode\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is designed to monitor recommended data tables aligned to the Maturity Model for Event Log Management (M-21-31) standard. The alert triggers when a recommended data table hasnt been observed in over 48 hours.\n Topic: MaturityModelForEventLogManagementM2131"}, {"role": "assistant", "content": "let M2131Mapping = datatable(DataTable:string, MaturityLevel:string)\n[\n\"SigninLogs\",\t\"Event Logging (EL0)\",\n\"AADManagedIdentitySignInLogs\", \"Event Logging (EL0)\",\n\"AADServicePrincipalSignInLogs\",\t\"Event Logging (EL0)\",\n\"StorageBlobLogs\",\t\"Event Logging (EL0)\",\n\"StorageFileLogs\",\t\"Event Logging (EL0)\",\n\"AzureMetrics\",\t\"Event Logging (EL0)\",\n\"AuditLogs\",\t\"Event Logging (EL0)\",\n\"IdentityInfo\",\t\"Event Logging (EL0)\",\n\"CommonSecurityLog\",\t\"Event Logging (EL0)\",\n\"ThreatIntelligenceIndicator\",\t\"Event Logging (EL0)\",\n\"DeviceNetworkInfo\",\t\"Event Logging (EL0)\",\n\"DnsEvents\",\t\"Event Logging (EL0)\",\n\"DeviceNetworkEvents\",\t\"Event Logging (EL0)\",\n\"AzureDiagnostics\",\t\"Event Logging (EL0)\",\n\"Usage\",\t\"Event Logging (EL0)\",\n\"SecurityIncident\",\t\"Event Logging (EL0)\",\n\"SecurityAlert\",\t\"Event Logging (EL0)\",\n\"AzureActivity\",\t\"Event Logging (EL0)\",\n\"Heartbeat\",\t\"Event Logging (EL0)\",\n\"OfficeActivity\",\t\"Event Logging (EL0)\",\n\"SecurityEvent\",\t\"Event Logging (EL0)\",\n\"Syslog\",\t\"Event Logging (EL0)\",\n\"AWSCloudTrail\",\t\"Event Logging (EL0)\",\n\"GWorkspaceActivityReports\",\t\"Event Logging (EL0)\",\n\"AWSGuardDuty\",\t\"Event Logging (EL0)\",\n\"AWSVPCFlow\",\t\"Event Logging (EL0)\",\n\"Perf\",\t\"Basic Event Logging (EL1)\",\n\"SentinelHealth\",\t\"Basic Event Logging (EL1)\",\n\"DeviceLogonEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceNetworkEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceFileEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceRegistryEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceProcessEvents\",\t\"Basic Event Logging (EL1)\",\n\"VMConnection\",\t\"Basic Event Logging (EL1)\",\n\"EmailEvents\",\t\"Basic Event Logging (EL1)\",\n\"ThreatIntelligenceIndicator\",\t\"Basic Event Logging (EL1)\",\n\"SecurityRecommendation\",\t\"Basic Event Logging (EL1)\",\n\"DeviceProcessEvents\",\t\"Basic Event Logging (EL1)\",\n\"ConfigurationData\",\t\"Basic Event Logging (EL1)\",\n\"ConfigurationChange\",\t\"Basic Event Logging (EL1)\",\n\"GatewayDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"TunnelDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"IKEDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"RouteDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"PS2DiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"Event\",\t\"Basic Event Logging (EL1)\",\n\"SqlAtpStatus\",\t\"Basic Event Logging (EL1)\",\n\"ConstainerInstanceLog_CL\",\t\"Basic Event Logging (EL1)\",\n\"ContainerEvent_CL\",\t\"Basic Event Logging (EL1)\",\n\"InsightsMetrics\",\t\"Intermediate Event Logging (EL2)\",\n\"EmailUrlInfo\",\t\"Intermediate Event Logging (EL2)\",\n\"EmailAttachmentInfo\",\t\"Intermediate Event Logging (EL2)\",\n\"InformationProtectionLogs_CL\",\t\"Intermediate Event Logging (EL2)\",\n\"CloudAppEvents\",\t\"Intermediate Event Logging (EL2)\",\n\"ContainerInventory\",\t\"Intermediate Event Logging (EL2)\",\n\"Update\",\t\"Advanced Event Logging (EL3)\",\n\"BehaviorAnalytics\",\t\"Advanced Event Logging (EL3)\",\n\"Anomalies\",\t\"Advanced Event Logging (EL3)\",\n\"SecurityRegulatoryCompliance\",\t\"Advanced Event Logging (EL3)\"\n];\nlet LastLogTime = Usage\n| summarize LastLog_Time = arg_max(TimeGenerated, *) by DataType;\nUsage\n| summarize last_log = datetime_diff(\"day\",now(), max(TimeGenerated)) by DataType\n| where last_log > 0\n| join kind=inner (LastLogTime) on DataType\n| project DataTable = DataType, ['Last Log Received'] = last_log, LastLog_Time\n| where ['Last Log Received'] > 2\n| join kind=inner (M2131Mapping) on DataTable\n| project-away DataTable1\n| order by ['Last Log Received'] desc\n| extend CloudApplication = DataTable\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for dropped outgoing mails.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where TimeGenerated > ago(24h)\n| where NetworkDirection =~ 'Outgoing'\n| where SimplifiedDeviceAction =~ 'DROPPED'\n| summarize count() by SrcUserName\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects .NET being loaded from wscript or cscript to run .NET code, such as cactustorch and sharpshooter.\nAll based on the DotNetToJScript by James Foreshaw documented here https://github.com/tyranid/DotNetToJScript. \n Topic: FalconFriday"}, {"role": "assistant", "content": "DeviceImageLoadEvents \n| where FileName in~ (\"mscoree.dll\", \"mscorlib.dll\", \"mscorlib.ni.dll\") \n| where tolower(InitiatingProcessFileName) in (\"wscript.exe\", \"cscript.exe\", \"mshta.exe\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "High severity disk alerts found by Prancer.\n Topic: Prancer PenSuiteAI Integration"}, {"role": "assistant", "content": "union prancer_CL\n| where deviceProduct_s == 'azure'\n| where parse_json(data_data_snapshots_s)[0].type == 'Microsoft.Compute/disks'\n| where data_data_severity_s == 'High' and data_data_result_s == 'failed'\n| extend snapshot = parse_json(data_data_snapshots_s)\n| mv-expand snapshot \n| extend\n  id = tostring(snapshot.id),\n  structure = tostring(snapshot.structure),\n  reference = tostring(snapshot.reference),\n  source = tostring(snapshot.source),\n  collection = tostring(snapshot.collection),\n  type = tostring(snapshot.type),\n  region = tostring(snapshot.region),\n  resourceTypes = tostring(snapshot.resourceTypes),\n  path = tostring(snapshot.path)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect failed login attacks and delete user Topic: Pure Storage"}, {"role": "assistant", "content": "Syslog\n| where SyslogMessage has \"purity.alert\" and SyslogMessage has \"invalid username or password\"\n| extend Message = SyslogMessage\n| extend ParsedLog = extract_all(@\"((?P<process>.*?)\\[(?P<processid>.*?)\\][\\s\\S]*?Array name:\\s*'(?P<arrayname>\\S+)'[\\s\\S]*?Controller:\\s*'?(?P<controller>[^']+)'?[\\s\\S]*Interface:\\s*'(?P<interface>\\S+)'.*?User:\\s'(?P<login>.*?)'\\sLocation: '(?P<location>[^']+)'\\sSublocation: '(?P<sublocation>[^']+)\\s*(?P<part2log>[\\s\\S]*))\", dynamic(['process', 'processid', 'arrayname', 'controller', 'interface','login', 'location', 'sublocation', 'part2log']), Message)\n| mv-expand ParsedLog\n| extend ResidueLog = tostring(ParsedLog[8])\n| extend Rlog = extract_all(@\"[\\s\\S]*Action:\\s'(?P<action>[^']+)'[\\s\\S]*Method:\\s'(?P<method>[^']+)'[\\s\\S]*Result:\\s(?P<result>[^']+)[\\s\\S]*Description:\\s'(?P<description>[^']*)'\", dynamic(['action', 'method', 'result', 'description']), ResidueLog)\n| mv-expand Rlog\n| extend PureLogType = ParsedLog[0], PureProcessID = ParsedLog[1], PureArrayName = ParsedLog[2], PureController = ParsedLog[3], PureInterface = ParsedLog[4], PureLogin = ParsedLog [5], PureLocation = ParsedLog [6], PureSublocation = ParsedLog [7], PureAction = Rlog [0], PureMethod = Rlog [1], PureResult = Rlog [2], PureDescription = Rlog [3]\n| project-away ResidueLog, Rlog, ParsedLog\n| summarize count() by tostring(PureLogin), tostring(PureArrayName), HostIP\n| where count_ >= 10"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies malicious clients blocked by the Ransomware Protection service running on a Nasuni Edge Appliance. Topic: Nasuni"}, {"role": "assistant", "content": "Syslog\n| project TimeGenerated, Computer, SyslogMessage\n| where SyslogMessage has \"The Filer has enforced the mitigation policy on volume\"\n| extend SrcIpAddr = substring(SyslogMessage, indexof(SyslogMessage, \"(\")+1, indexof(SyslogMessage, \")\") - indexof(SyslogMessage,\"(\")-1)\n| extend volume_name = substring(SyslogMessage, indexof(SyslogMessage, \"volume\")+7, indexof(SyslogMessage,\"and\") - (indexof(SyslogMessage, \"volume\")+7))\n| sort by TimeGenerated desc"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when new admin user is created.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where ActivityType == 23\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies changes to Microsoft Entra client apps registered for Finance & Operations, specifically when a new client is mapped to a predefined list of sensitive privileged user accounts, or when a user associates a client app with their own account. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// Add sensitive privilege accounts to the privileged_user_accounts variable.\n// Example: let privileged_user_accounts = dynamic([\"Admin1\", \"Admin\"]);\nlet privileged_user_accounts = dynamic([]);\nFinanceOperationsActivity_CL\n| where TableName == \"SysAADClientTable\" and LogType in (\"Insert\", \"Update\")\n| extend ClientId = tostring(parse_json(tostring(FormattedData.[\"03::AADClientId\"])).NewData)\n| extend User = parse_json(tostring(FormattedData.UserId))\n| extend\n    MappedUser = tostring(User.NewData),\n    PreviousUserId = tostring(User.OldData),\n    TargetAppName = tostring(parse_json(tostring(FormattedData.Name)).NewData),\n    FinOpsAppId = 32780\n| where MappedUser in (privileged_user_accounts) or LogCreatedBy == MappedUser\n| project\n    LogCreatedDateTime,\n    LogCreatedBy,\n    LogType,\n    TargetAppName,\n    MappedUser,\n    PreviousUserId,\n    ClientId,\n    FinOpsAppId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects renamed windows binaries.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where EventSubType != 'AttackAttempt'\n| where ActingProcessName has @'\\'\n| where ActingProcessName !has ActingProcessFileInternalName\n| project EventEndTime, EventMessage, ActorUsername, ActingProcessFileInternalName\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert creates an incident when Tabular classification AI Model Evasion high suspicious, high severity vulnerability detected from the AIShield.\n Topic: AIShield AI Security Monitoring"}, {"role": "assistant", "content": "AIShield\n| where Message has 'Tabular Classification AI Model Evasion Attack Identified'\n| where Severity =~ 'High'\n| where SuspiciousLevel =~ 'high suspicious attack'\n| extend NTDomain = tostring(split(Computer, '\\\\')[0]), HostName = tostring(split(Computer, '.')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for alerts with unresolved status.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where TimeGenerated > ago(24h)\n| where EventOriginalType =~ 'Alert'\n| where ResolvedAs =~ 'Unresolved'\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Mimikatzs DCShadow switch allows a user who has compromised an AD domain, to inject arbitrary changes into AD using a \"fake\" domain controller. These changes bypass the security event log and cant be spotted using normal AD tools. This rule looks for evidence that a machine has been used in this capacity.\n Topic: Semperis Directory Services Protector"}, {"role": "assistant", "content": "dsp_parser\n| where EventID == 9212\n| where SecurityIndicatorName == \"Evidence of Mimikatz DCShadow attack\"\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects suspicious user agent strings used by crypto miners in proxy logs.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "Cisco_Umbrella\n| where EventType == \"proxylogs\"\n| where HttpUserAgentOriginal contains \"XMRig\" or HttpUserAgentOriginal contains \"ccminer\"\n| extend Message = \"Crypto Miner User Agent\"\n| project TimeGenerated, Message, SrcIpAddr, DstIpAddr, UrlOriginal, HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for an active Azure Premium P2 license is required to use and edit this policy. \n You will be required to have setup the MFA Policy before activating this policy\n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'AzureSecureScoreUserRiskPolicy'"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies Accounts that are new or inactive and have accessed or used GitHub that may be a sign of compromise.\n Topic: GitHub"}, {"role": "assistant", "content": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet LearningPeriod = 7d;\nlet EndLearningTime = starttime - LearningPeriod;\nlet GitHubActorLogin = (GitHubAuditData\n| where Actor != \"\");\nlet GitHubUser = (GitHubAuditData\n| where ImpactedUser != \"\");\nlet GitHubNewActorLogin = (GitHubActorLogin\n| where TimeGenerated between (EndLearningTime .. starttime)\n| summarize makeset(Actor)\n| extend Dummy = 1\n| join kind=innerunique (\n  GitHubActorLogin\n  | where TimeGenerated between (starttime .. endtime)\n  | distinct Actor\n  | extend Dummy = 1\n) on Dummy\n| project-away Dummy\n| where set_Actor  !contains Actor);\nlet GitHubNewUser = ( GitHubUser\n| where TimeGenerated between (EndLearningTime .. starttime)\n| summarize makeset(ImpactedUser)\n| extend Dummy = 1\n| join kind=innerunique (\n  GitHubUser\n  | where TimeGenerated between (starttime .. endtime)\n  | distinct ImpactedUser\n  | extend Dummy = 1\n) on Dummy\n| project-away Dummy\n| where set_ImpactedUser !contains ImpactedUser);\nunion GitHubNewActorLogin, GitHubNewUser\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when email was marked as spam.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "McAfeeEPOEvent\n| where EventId == '4650'\n| extend IPCustomEntity = DvcIpAddr, HostCustomEntity = DvcHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection highlights executables deployed to hosts via either the Default Domain or Default Domain Controller Policies. These policies apply to all hosts or Domain Controllers and best practice is that these policies should not be used for deployment of files.\n  A threat actor may use these policies to deploy files or scripts to all hosts in a domain.\n  This query uses the ASIM parsers and will need them deployed before usage - https://docs.microsoft.com/azure/sentinel/normalization\n Topic: Detections"}, {"role": "assistant", "content": "let known_processes = (\n  imProcess\n  // Change these values if adjusting Query Frequency or Query Period\n  | where TimeGenerated between(ago(14d)..ago(1d))\n  | where Process has_any (\"Policies\\\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\", \"Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\")\n  | summarize by Process);\n  imProcess\n  // Change these values if adjusting Query Frequency or Query Period\n  | where TimeGenerated > ago(1d)\n  | where Process has_any (\"Policies\\\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\", \"Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\")\n  | where Process !in (known_processes)\n  | summarize FirstSeen=min(TimeGenerated), LastSeen=max(TimeGenerated) by Process, CommandLine, DvcHostname\n  | extend HostName = tostring(split(DvcHostname, \".\")[0]), DomainIndex = toint(indexof(DvcHostname, '.'))\n  | extend HostNameDomain = iff(DomainIndex != -1, substring(DvcHostname, DomainIndex + 1), DvcHostname)\n  | project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare files requested\n Topic: Tomcat"}, {"role": "assistant", "content": "TomcatEvent\n| where TimeGenerated > ago(24h)\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| summarize RareFiles = count() by File\n| top 20 by RareFiles asc\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "When a Knox mobile app has transitioned from an acceptable uid/esuid/fsuid to a different, non-App id.\n Topic: Samsung Knox Asset Intelligence"}, {"role": "assistant", "content": "Samsung_Knox_Process_CL \n| where Name == \"PROCESS_PRIVILEGE_ESCALATION\"\n| where MitreTtp has \"T1548\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection identifies when an external user is added to a Team or Teams chat and shares a file which is accessed by many users (>10) and the users is removed within short period of time. This might be an indicator of suspicious activity.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let fileAccessThreshold = 10;\n// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n    | where OfficeWorkload =~ \"MicrosoftTeams\"\n    | where Operation =~ \"MemberAdded\"\n    | extend MemberAdded = tostring(parse_json(Members)[0].UPN)\n    | where MemberAdded contains \"#EXT#\"\n    | project TimeAdded = TimeGenerated, Operation, MemberAdded, UserWhoAdded = UserId, TeamName\n    | join kind=inner (\n        OfficeActivity\n        | where OfficeWorkload =~ \"MicrosoftTeams\"\n        | where Operation =~ \"MemberRemoved\"\n        | extend MemberAdded = tostring(parse_json(Members)[0].UPN)\n        | where MemberAdded contains \"#EXT#\"\n        | project TimeDeleted = TimeGenerated, Operation, MemberAdded, UserWhoDeleted = UserId, TeamName\n    ) on MemberAdded\n    | where TimeDeleted > TimeAdded\n    | join kind=inner (\n        OfficeActivity\n        | where RecordType == \"SharePointFileOperation\"\n        | where SourceRelativeUrl has \"Microsoft Teams Chat Files\"\n        | where Operation == \"FileUploaded\"\n        | extend MemberAdded = UserId\n        | join kind=inner (\n            OfficeActivity\n            | where RecordType == \"SharePointFileOperation\"\n            | where Operation == \"FileAccessed\"\n            | where SourceRelativeUrl has \"Microsoft Teams Chat Files\"\n            | summarize FileAccessCount = count() by OfficeObjectId\n            | where FileAccessCount > fileAccessThreshold\n        ) on OfficeObjectId\n    ) on MemberAdded\n    | project TimeAdded, TimeDeleted, MemberAdded, UserWhoAdded, UserWhoDeleted, TeamName;\n// EnrichedMicrosoft365AuditLogs Query\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where Workload =~ \"MicrosoftTeams\"\n    | where Operation =~ \"MemberAdded\"\n    | extend MemberAdded = tostring(parse_json(tostring(AdditionalProperties)).Members[0].UPN)\n    | where MemberAdded contains \"#EXT#\"\n    | project TimeAdded = TimeGenerated, Operation, MemberAdded, UserWhoAdded = UserId, TeamName = tostring(parse_json(tostring(AdditionalProperties)).TeamName)\n    | join kind=inner (\n        EnrichedMicrosoft365AuditLogs\n        | where Workload =~ \"MicrosoftTeams\"\n        | where Operation =~ \"MemberRemoved\"\n        | extend MemberAdded = tostring(parse_json(tostring(AdditionalProperties)).Members[0].UPN)\n        | where MemberAdded contains \"#EXT#\"\n        | project TimeDeleted = TimeGenerated, Operation, MemberAdded, UserWhoDeleted = UserId, TeamName = tostring(parse_json(tostring(AdditionalProperties)).TeamName)\n    ) on MemberAdded, TeamName\n    | where TimeDeleted > TimeAdded\n    | join kind=inner (\n        EnrichedMicrosoft365AuditLogs\n        | where RecordType == \"SharePointFileOperation\"\n        | where Operation == \"FileUploaded\"\n        | extend MemberAdded = UserId, SourceRelativeUrl = tostring(parse_json(tostring(AdditionalProperties)).SourceRelativeUrl), TeamName = tostring(parse_json(tostring(AdditionalProperties)).TeamName)\n        | where SourceRelativeUrl has \"Microsoft Teams Chat Files\"\n        | join kind=inner (\n            EnrichedMicrosoft365AuditLogs\n            | where RecordType == \"SharePointFileOperation\"\n            | where Operation == \"FileAccessed\"\n            | extend SourceRelativeUrl = tostring(parse_json(tostring(AdditionalProperties)).SourceRelativeUrl), TeamName = tostring(parse_json(tostring(AdditionalProperties)).TeamName)\n            | where SourceRelativeUrl has \"Microsoft Teams Chat Files\"\n            | summarize FileAccessCount = count() by ObjectId, TeamName\n            | where FileAccessCount > fileAccessThreshold\n        ) on ObjectId, TeamName\n    ) on MemberAdded, TeamName\n    | project TimeAdded, TimeDeleted, MemberAdded, UserWhoAdded, UserWhoDeleted, TeamName;\n// Combine Office and Enriched Events and Deduplicate\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize arg_min(TimeAdded, *) by MemberAdded, UserWhoAdded, UserWhoDeleted, TeamName;\n// Project Final Output\nCombinedEvents\n    | extend MemberAddedAccountName = tostring(split(MemberAdded, \"@\")[0]), MemberAddedAccountUPNSuffix = tostring(split(MemberAdded, \"@\")[1])\n    | extend UserWhoAddedAccountName = tostring(split(UserWhoAdded, \"@\")[0]), UserWhoAddedAccountUPNSuffix = tostring(split(UserWhoAdded, \"@\")[1])\n    | extend UserWhoDeletedAccountName = tostring(split(UserWhoDeleted, \"@\")[0]), UserWhoDeletedAccountUPNSuffix = tostring(split(UserWhoDeleted, \"@\")[1])\n    | project TimeAdded, TimeDeleted, MemberAdded, UserWhoAdded, UserWhoDeleted, TeamName, MemberAddedAccountName, MemberAddedAccountUPNSuffix, UserWhoAddedAccountName, UserWhoAddedAccountUPNSuffix, UserWhoDeletedAccountName, UserWhoDeletedAccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for usage of http protocol.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where TimeGenerated > ago(24h)\n| where EventType in~ ('swgweb', 'swgwebdlp')\n| where NetworkProtocol =~ 'http'\n| extend AccountCustomEntity = User, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect runtime vulnerabilities in your environment insights by snyk Topic: Dynatrace"}, {"role": "assistant", "content": "DynatraceSecurityProblems\n| where DAVISRiskLevel != \"CRITICAL\"  and Muted == false\n| summarize  arg_max(LastUpdatedTimeStamp, *) by SecurityProblemId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for DCSync attacks\n Topic: Alsid For AD"}, {"role": "assistant", "content": "afad_parser\n| where MessageType == 2 and Codename == \"DCSync\"\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected usage of AttachUserPolicy/AttachGroupPolicy/AttachRolePolicy on FullAccess managed policy. Attackers could use these operations for privilege escalation. Verify these actions with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where  EventName in (\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| where tostring(parse_json(RequestParameters).policyArn) has \"FullAccess\" and tostring(parse_json(RequestParameters).policyArn) !has \"Admin\"\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, RequestParameters, UserIdentityArn, ResponseElements\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Organizations are added in the Cross-tenant Access Settings to control communication inbound or outbound for users and applications. This detection notifies when an Organization is added other than the list that is supposed to exist from the Microsoft Entra ID Cross-tenant Access Settings.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "// Tenants IDs can be found by navigating to Azure Active Directory then from menu on the left, select External Identities, then from menu on the left, select Cross-tenant access settings and from the list shown of Tenants\nlet ExpectedTenantIDs = dynamic([\"List of expected tenant IDs\",\"Tenant ID 2\"]);\nAuditLogs\n| where OperationName has \"Add a partner to cross-tenant access setting\"\n| mv-apply TargetResource = TargetResources on\n  (\n      where TargetResource.type =~ \"Policy\"\n      | extend Properties = TargetResource.modifiedProperties\n  )\n| mv-apply Property = Properties on\n  (\n      where Property.displayName =~ \"tenantId\"\n      | extend ExtTenantIDAdded = trim('\"',tostring(Property.newValue))\n  )\n| where ExtTenantIDAdded !in (ExpectedTenantIDs)\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects access keys which were not rotated for 90 days.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where Reason =~ 'NEW_ALERT'\n| where Status =~ 'open'\n| where AlertMessage has 'access keys are not rotated for 90 days'\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple failure requests from single source in short timeframe.\n Topic: Cloudflare"}, {"role": "assistant", "content": "let threshold = 100;\nCloudflare\n| where HttpRequestMethod =~ 'GET'\n| summarize err_cnt = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where err_cnt > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for requires you to setup Microsoft Entra ID Connect. \n Microsoft Entra ID Connect is free with all Azure Subscriptions\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'AzureSecureScoreSelfServicePasswordReset'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects potentialy suspicious downloads.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where DvcAction =~ 'file_downloaded'\n| extend fe = split(EntityFileName, '.')\n| where array_length(fe) > 2\n| where fe[1] matches regex @\"\\D+\"\n| where strlen(fe[1]) < 5\n| project EntityFileName, SrcUserName\n| extend AccountCustomEntity = SrcUserName\n| extend FileCustomEntity = EntityFileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows all users from a given department, which have a high impact on the organization, who connected to a resource for the first time and none of their peers accessed it.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "let Group = 'Helpdesk'; // Update this value as per your requirement\nIdentityInfo\n| summarize arg_max(TimeGenerated, *) by AccountObjectId //get latest information\n| where Department =~ Group\n| where BlastRadius =~ 'High'\n| join kind=inner ( BehaviorAnalytics\n         | where ActivityType =~ 'LogOn'\n         | where ActionType =~ 'ResourceAccess' //filter for specific activties\n         | where ActivityInsights.FirstTimeUserAccessedResource == True\n         | where ActivityInsights.ResourceUncommonlyAccessedAmongPeers == True )\non $left.AccountUPN == $right.UserPrincipalName\n| extend AadUserId = UsersInsights.AccountObjectID\n| extend Account_0_AadUserId = AadUserId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checks for event id 1102 which indicates the security event log was cleared.\nIt uses Event Source Name \"Microsoft-Windows-Eventlog\" to avoid generating false positives from other sources, like AD FS servers for instance.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID == 1102 and EventSourceName == \"Microsoft-Windows-Eventlog\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), EventCount = count() by Computer, Account, EventID, Activity\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountNTDomain = tostring(split(Account, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies instances of a base64-encoded PE file header seen in the process command line parameter.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "let ProcessCreationEvents=(union isfuzzy=true\n(SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName,\nFileName = Process, CommandLine, ParentProcessName\n),\n(WindowsEvent\n| where EventID==4688\n| where EventData has \"TVqQAAMAAAAEAAA\"\n| extend CommandLine = tostring(EventData.CommandLine)\n| where isnotempty(CommandLine)\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1])\n| extend SubjectUserName = tostring(EventData.SubjectUserName)\n| extend SubjectDomainName = tostring(EventData.SubjectDomainName)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName,\nFileName = Process, CommandLine, ParentProcessName));\nProcessCreationEvents\n| where CommandLine contains \"TVqQAAMAAAAEAAA\"\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New brand_impersonation with severity High found\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL | where severity_s == \"High\" | where type_s == \"Brand Impersonation\" | where status_s != \"Closed\" or status_s != \"Resolved\" | where remarks_s == \"New brand_impersonation with severity High found\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule helps to detect empty and unusual user agent indicating web browsing activity by an unusual process other than a web browser.\n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = 15m;\nCisco_Umbrella\n| where EventType == \"proxylogs\"\n| where TimeGenerated > ago(timeframe)\n| where HttpUserAgentOriginal == ''\n| extend Message = \"Empty User Agent\"\n| project Message, SrcIpAddr, DstIpAddr, UrlOriginal, TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for messages related to file downloads of suspicious file types on an Exchange Server. This could indicate attempted deployment of webshells. \nThis query uses the Exchange HttpProxy AOBGeneratorLog, you will need to onboard this log as a custom log under the table http_proxy_oab_CL before using this query. \nThis log is commonly found at C:\\Program Files\\Microsoft\\Exchange Server\\V15\\Logging\\OABGeneratorLog on the Exchange server. Details on collecting custom logs into Sentinel\ncan be found here: https://learn.microsoft.com/azure/sentinel/connect-custom-logs\n Topic: Detections"}, {"role": "assistant", "content": "let scriptExtensions = dynamic([\".php\", \".jsp\", \".js\", \".aspx\", \".asmx\", \".asax\", \".cfm\", \".shtml\"]);\nhttp_proxy_oab_CL\n| where RawData contains \"Download failed and temporary file\"\n| extend File = extract(\"([^\\\\\\\\]*)(\\\\\\\\[^']*)\",2,RawData)\n| extend Extension = strcat(\".\",split(File, \".\")[-1])\n| extend InteractiveFile = iif(Extension in (scriptExtensions), \"Yes\", \"No\")\n// Uncomment the following line to alert only on interactive file download type\n//| where InteractiveFile =~ \"Yes\"\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects a Service Principal being assigned an app role that has sensitive access such as Mail.Read.\n  A threat actor who compromises a Service Principal may assign it an app role to allow it to access sensitive data, or to perform other actions.\n  Ensure that any assignment to a Service Principal is valid and appropriate.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-applications#application-granted-highly-privileged-permissions\n Topic: Detections"}, {"role": "assistant", "content": "// Add other permissions to this list as needed\nlet permissions = dynamic([\".All\", \"ReadWrite\", \"Mail.\", \"offline_access\", \"Files.Read\", \"Notes.Read\", \"ChannelMessage.Read\", \"Chat.Read\", \"TeamsActivity.Read\",\n\"Group.Read\", \"EWS.AccessAsUser.All\", \"EAS.AccessAsUser.All\"]);\nlet auditList = \nAuditLogs\n| where OperationName =~ \"Add app role assignment to service principal\"\n| mv-expand TargetResources[0].modifiedProperties\n| extend TargetResources_0_modifiedProperties = column_ifexists(\"TargetResources_0_modifiedProperties\", '')\n| where isnotempty(TargetResources_0_modifiedProperties)\n;\nlet detailsList = auditList\n| where TargetResources_0_modifiedProperties.displayName =~ \"AppRole.Value\" or TargetResources_0_modifiedProperties.displayName =~ \"DelegatedPermissionGrant.Scope\"\n| extend Permissions = split((parse_json(tostring(TargetResources_0_modifiedProperties.newValue))), \" \")\n| where Permissions has_any (permissions)\n| summarize AddedPermissions=make_set(Permissions,200) by CorrelationId\n| join kind=inner auditList on CorrelationId\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n| extend InitiatedBy = tostring(iff(isnotempty(InitiatingUserPrincipalName),InitiatingUserPrincipalName, InitiatingAppName))\n| extend displayName = tostring(TargetResources_0_modifiedProperties.displayName), newValue = tostring(parse_json(tostring(TargetResources_0_modifiedProperties.newValue)))\n| where displayName == \"ServicePrincipal.ObjectID\" or displayName == \"ServicePrincipal.DisplayName\"\n| extend displayName = case(displayName == \"ServicePrincipal.ObjectID\", \"ServicePrincipalObjectID\", displayName == \"ServicePrincipal.DisplayName\", \"ServicePrincipalDisplayName\", displayName)\n| project TimeGenerated, CorrelationId, Id, AddedPermissions = tostring(AddedPermissions), InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIPAddress, InitiatingUserPrincipalName, InitiatedBy, displayName, newValue\n;\ndetailsList | project Id, displayName, newValue\n| evaluate pivot(displayName, make_set(newValue))\n| join kind=inner detailsList on Id\n| extend ServicePrincipalObjectID = todynamic(column_ifexists(\"ServicePrincipalObjectID\", \"\")), ServicePrincipalDisplayName = todynamic(column_ifexists(\"ServicePrincipalDisplayName\", \"\"))\n| mv-expand ServicePrincipalObjectID, ServicePrincipalDisplayName\n| project-away Id1, displayName, newValue\n| extend ServicePrincipalObjectID = tostring(ServicePrincipalObjectID), ServicePrincipalDisplayName = tostring(ServicePrincipalDisplayName)\n| summarize FirstSeen = min(TimeGenerated), LastSeen = max(TimeGenerated), EventIds = make_set(Id,200) by CorrelationId, AddedPermissions, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIPAddress, InitiatingUserPrincipalName, InitiatedBy, ServicePrincipalDisplayName, ServicePrincipalObjectID\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple infected files on same source.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "CiscoWSAEvent\n| where isnotempty(AmpFileName)\n| where isnotempty(ThreatName)\n| summarize count() by SrcIpAddr, SrcUserName, bin(TimeGenerated, 15m)\n| where count_ > 1\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple empty requests from same IP\n Topic: Tomcat"}, {"role": "assistant", "content": "let threshold = 50;\nTomcatEvent\n| where HttpResponseBodyBytes == 0\n| summarize MultipleClientErrors = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleClientErrors > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query triggers when a scheduled task is created or updated and it is going to run programs from writable user paths.\nRef: https://blog.menasec.net/2019/03/threat-hunting-25-scheduled-tasks-for.html\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "// Enter a reference list for writable user paths\nlet WritableUserPaths = dynamic ([\"\\\"C:\\\\Users\\\\\",\"\\\"C:\\\\ProgramData\\\\\"]);\nSecurityEvent\n| where EventID in (4698,4702) and EventData has_any (WritableUserPaths)\n| parse EventData with * 'Command&gt;' Command \"&lt\" *\n| parse EventData with * 'Arguments&gt;' Arguments \"&lt\" *\n| where Command has_any (WritableUserPaths) or Arguments has_any (WritableUserPaths)\n| parse EventData with * 'SubjectUserName\">' SubjectUserName \"<\" * 'SubjectDomainName\">' SubjectDomainName \"<\" * 'TaskName\">' TaskName \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by Activity, Computer, SubjectUserName, SubjectDomainName, TaskName, Command, Arguments\n| extend CommandLine = strcat(split(Command, '\\\\')[-1], ' ', Arguments)\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = SubjectUserName\n| extend Account_0_NTDomain = SubjectDomainName\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n| extend Process_0_CommandLine = CommandLine\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies if an AV scan finds infected files in Azure App Services.\n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = ago(1d);\nAppServiceAntivirusScanAuditLogs\n| where NumberOfInfectedFiles > 0\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows URLs list with server errors.\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "NGINXHTTPServer\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 500 and HttpStatusCode <= 599\n| summarize TopUrls = count() by tostring(UrlOriginal)\n| top 20 by TopUrls desc \n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when multiple (more than one) users mailboxes are configured to forward to the same destination.\nThis could be an attacker-controlled destination mailbox configured to collect mail from multiple compromised user accounts.\n Topic: Detections"}, {"role": "assistant", "content": "OfficeActivity\n| where OfficeWorkload =~ \"Exchange\"\n| where Parameters has_any (\"ForwardTo\", \"RedirectTo\", \"ForwardingSmtpAddress\")\n| mv-apply DynamicParameters = todynamic(Parameters) on (summarize ParsedParameters = make_bag(pack(tostring(DynamicParameters.Name), DynamicParameters.Value)))\n| evaluate bag_unpack(ParsedParameters, columnsConflict='replace_source')\n| extend DestinationMailAddress = tolower(case(\n    isnotempty(column_ifexists(\"ForwardTo\", \"\")), column_ifexists(\"ForwardTo\", \"\"),\n    isnotempty(column_ifexists(\"RedirectTo\", \"\")), column_ifexists(\"RedirectTo\", \"\"),\n    isnotempty(column_ifexists(\"ForwardingSmtpAddress\", \"\")), trim_start(@\"smtp:\", column_ifexists(\"ForwardingSmtpAddress\", \"\")),\n    \"\"))\n| where isnotempty(DestinationMailAddress)\n| mv-expand split(DestinationMailAddress, \";\")\n| extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIP)[0]\n| extend ClientIP = tostring(ClientIPValues[0]), Port = tostring(ClientIPValues[1])\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DistinctUserCount = dcount(UserId), UserId = make_set(UserId, 250), Ports = make_set(Port, 250), EventCount = count() by tostring(DestinationMailAddress), ClientIP\n| where DistinctUserCount > 1\n| mv-expand UserId to typeof(string)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect activities when a user visibility Was changed. This query runs every day and its severity is Medium.\n Topic: GitHub"}, {"role": "assistant", "content": "GitHubAuditData\n| where Visibility != PreviousVisibility\n| project Actor, PreviousVisibility, Visibility\n| extend Name = iif(Actor contains \"@\", split(Actor, \"@\")[0], Actor)\n| extend UPNSuffix = iif(Actor contains \"@\", split(Actor, \"@\")[1], \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New Suspicious Mobile App with severity Informational found\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL | where severity_s == \"Informational\" | where type_s == \"Suspicious Mobile App\" | where status_s != \"Closed\" or status_s != \"Resolved\" | where remarks_s == \"New Suspicious Mobile App with severity Informational found\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects WAF \"Allowed\" action on threat events.\n Topic: Cloudflare"}, {"role": "assistant", "content": "Cloudflare\n| where isnotempty(WAFRuleID) or isnotempty(WAFRuleMessage)\n| where WAFAction =~ 'Allow'\n| extend IPCustomEntity = SrcIpAddr\n| extend UrlCustomEntity = ClientRequestURI\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies users who have been made Owner of multiple Teams.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let max_owner_count = 3;  \n// Adjust this value to change how many teams a user is made owner of before detecting\n// OfficeActivity Query: Identify users who have been made owners of more than 'max_owner_count' teams\nlet high_owner_count_office = (\n    OfficeActivity\n    | where OfficeWorkload =~ \"MicrosoftTeams\"\n    | where Operation =~ \"MemberRoleChanged\"\n    | extend Member = tostring(parse_json(Members)[0].UPN) \n    | extend NewRole = toint(parse_json(Members)[0].Role)\n    | where NewRole == 2  // Role 2 corresponds to \"Owner\"\n    | summarize TeamCount = dcount(TeamName) by Member\n    | where TeamCount > max_owner_count\n    | project Member\n);\n// OfficeActivity Query: Fetch details for users with high ownership count\nlet OfficeEvents = OfficeActivity\n    | where OfficeWorkload =~ \"MicrosoftTeams\"\n    | where Operation =~ \"MemberRoleChanged\"\n    | extend Member = tostring(parse_json(Members)[0].UPN)\n    | extend NewRole = toint(parse_json(Members)[0].Role)\n    | where NewRole == 2  // Role 2 corresponds to \"Owner\"\n    | where Member in (high_owner_count_office)\n    | extend AccountName = tostring(split(Member, \"@\")[0]), AccountUPNSuffix = tostring(split(Member, \"@\")[1]);\n// EnrichedMicrosoft365AuditLogs Query: Identify users who have been made owners of more than 'max_owner_count' teams\nlet high_owner_count_enriched = (\n    EnrichedMicrosoft365AuditLogs\n    | where Workload == \"MicrosoftTeams\"\n    | where Operation == \"MemberRoleChanged\"\n    | extend Member = tostring(UserId)\n    | extend NewRole = toint(parse_json(tostring(AdditionalProperties)).Role)\n    | where NewRole == 2  // Role 2 corresponds to \"Owner\"\n    | summarize TeamCount = dcount(ObjectId) by Member\n    | where TeamCount > max_owner_count\n    | project Member\n);\n// EnrichedMicrosoft365AuditLogs Query: Fetch details for users with high ownership count\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where Workload == \"MicrosoftTeams\"\n    | where Operation == \"MemberRoleChanged\"\n    | extend Member = tostring(UserId)\n    | extend NewRole = toint(parse_json(tostring(AdditionalProperties)).Role)\n    | where NewRole == 2  // Role 2 corresponds to \"Owner\"\n    | where Member in (high_owner_count_enriched)\n    | extend AccountName = tostring(split(Member, \"@\")[0]), AccountUPNSuffix = tostring(split(Member, \"@\")[1]);\n// Combine Office and Enriched Logs\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize by Member, AccountName, AccountUPNSuffix;\n// Final Output\nCombinedEvents\n| order by Member asc\n| project Member, AccountName, AccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection compiles and correlates unauthorized user access alerts originating from AWS GuardDuty with Azure portal sign-in activities. It focuses on AWS GuardDuty alerts related to unauthorized user access, specifically targeting network IP associations tied to activities such as logins from malicious IP addresses or instance credential exfiltration attempts. The ditection leverages these common network IP advisories to detect and pinpoint unauthorized users attempting to access both AWS and Azure resources.\n Topic: Multi Cloud Attack Coverage Essentials - Resource Abuse"}, {"role": "assistant", "content": "// Define a variable 'AwsAlert' to collect Unauthorized user access alerts from AWS GuardDuty table\nlet AwsAlert = materialize (\n    AWSGuardDuty\n    | where ActivityType has_any (\"UnauthorizedAccess:IAMUser/TorIPCaller\", \"UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom\", \n    \"UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS\", \"UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.InsideAWS\",\n    \"UnauthorizedAccess:IAMUser/ConsoleLoginSuccess.B\",\"UnauthorizedAccess:IAMUser/MaliciousIPCaller\")\n    | extend\n        AWSAlertId = Id, \n        AWSAlertTitle = Title,\n        AWSAlertDescription = Description,\n        AWSresourceType = tostring(parse_json(ResourceDetails).resourceType),\n        AWSNetworkEntity = tostring(parse_json(ServiceDetails).action.awsApiCallAction.remoteIpDetails.ipAddressV4),\n        AWSAlertUserNameEntity = tostring(parse_json(ResourceDetails).accessKeyDetails.userName),\n        InstanceType = tostring(parse_json(ResourceDetails).instanceDetails.instanceType),\n        AWSTargetingService = parse_json(ServiceDetails).additionalInfo.apiCalls,\n        AWSAlertTime = TimeCreated,\n        AWSAlertLink= tostring(strcat('https://us-east-1.console.aws.amazon.com/guardduty/home?region=us-east-1#/findings?macros=current&fId=',Id)),\n        Severity = \n  case (\n    Severity >= 7.0, \"High\",\n    Severity between (4.0 .. 6.9), \"Medium\",\n    Severity between (1.0 .. 3.9), \"Low\",\n    \"Unknown\")\n    | mv-apply AIPCall = AWSTargetingService on \n        ( \n        where AIPCall has \"name\"    \n        | extend APICallName = tostring(AIPCall.name), APICallCount = tostring(AIPCall[\"count\"])\n        ) \n    | distinct\n        AWSAlertTime,\n        ActivityType,\n        Severity,\n        AWSAlertId,\n        AWSAlertTitle,\n        AWSAlertDescription,\n        AWSAlertLink,\n        Arn,\n        AWSresourceType,\n        AWSNetworkEntity,\n        AWSAlertUserNameEntity,\n        InstanceType,\n        APICallName,\n        APICallCount      \n    );\n    // Define a variable 'Azure_sigin' to collect Azure portal Signing activity from SigninLogs Table\n    let Azure_sigin = materialize (SigninLogs\n        | where AppDisplayName == \"Azure Portal\"\n        | where isnotempty(OriginalRequestId)\n        | summarize \n            totalAzureLoginEventId = dcount(OriginalRequestId), \n            AzureFailedEventsCount = dcountif(OriginalRequestId, ResultType != 0), \n            AzureSuccessfulEventsCount = dcountif(OriginalRequestId, ResultType == 0),\n            AzureSetOfFailedEvents = makeset(iff(ResultType != 0, OriginalRequestId, \"\"), 5), \n            AzureSetOfSuccessfulEvents = makeset(iff(ResultType == 0, OriginalRequestId, \"\"), 5) \n        by \n            IPAddress, \n            UserPrincipalName, \n            bin(TimeGenerated, 1min), \n            UserAgent,\n            ConditionalAccessStatus,\n            OperationName,\n            RiskDetail,\n            AuthenticationRequirement,\n            ClientAppUsed \n        // Extracting the name and UPN suffix from UserPrincipalName\n        | extend\n            Name = tostring(split(UserPrincipalName, \"@\")[0]),\n            UPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n    );\n    // Join 'AwsAlert' and 'Azure_sigin' on the AWS Network Entity and Azure IP Address\n    AwsAlert\n    | join kind=inner Azure_sigin on $left.AWSNetworkEntity == $right.IPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects modification in the AdminSDHolder  in the Active Directory which could indicate an attempt for persistence. \nAdminSDHolder Modification is a persistence technique in which an attacker abuses the SDProp process in Active Directory to establish a persistent backdoor to Active Directory.\nThis query searches for the event id 5136 where the Object DN is AdminSDHolder.\nRef: https://attack.stealthbits.com/adminsdholder-modification-ad-persistence\n Topic: Detections"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID == 5136 and EventData contains \"<Data Name=\\\"ObjectDN\\\">CN=AdminSDHolder,CN=System\"\n| parse EventData with * 'ObjectDN\">' ObjectDN \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by Computer, SubjectAccount, SubjectUserSid, SubjectLogonId, ObjectDN\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend Name = tostring(split(SubjectAccount, \"\\\\\")[1]), NTDomain = tostring(split(SubjectAccount, \"\\\\\")[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule triggers on attack attempt which was not blocked by CyberArkEPM.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where EventSubType =~ 'AttackAttempt'\n| where ThreatProtectionAction =~ 'Detect'\n| project EventEndTime, EventMessage, ActorUsername, ActingProcessFileInternalName, Evidences\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Often times after the initial compromise the attackers create inbox rules to delete emails that contain certain keywords.\nThis is done so as to limit ability to warn compromised users that theyve been compromised. Below is a sample query that tries to detect this.\nReference: https://www.reddit.com/r/sysadmin/comments/7kyp0a/recent_phishing_attempts_my_experience_and_what/\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let Keywords = dynamic([\"helpdesk\", \"alert\", \"suspicious\", \"fake\", \"malicious\", \"phishing\", \"spam\", \"do not click\", \"do not open\", \"hijacked\", \"Fatal\"]);\n// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n  | where OfficeWorkload =~ \"Exchange\" \n  | where Operation =~ \"New-InboxRule\" and (ResultStatus =~ \"True\" or ResultStatus =~ \"Succeeded\")\n  | where Parameters has \"Deleted Items\" or Parameters has \"Junk Email\" or Parameters has \"DeleteMessage\"\n  | extend Events = todynamic(Parameters)\n  | parse Events with * \"SubjectContainsWords\" SubjectContainsWords '}'*\n  | parse Events with * \"BodyContainsWords\" BodyContainsWords '}'*\n  | parse Events with * \"SubjectOrBodyContainsWords\" SubjectOrBodyContainsWords '}'*\n  | where SubjectContainsWords has_any (Keywords)\n      or BodyContainsWords has_any (Keywords)\n      or SubjectOrBodyContainsWords has_any (Keywords)\n  | extend ClientIPAddress = case(\n      ClientIP has \".\", tostring(split(ClientIP, \":\")[0]),\n      ClientIP has \"[\", tostring(trim_start(@'[[]', tostring(split(ClientIP, \"]\")[0]))),\n      ClientIP\n    )\n  | extend Keyword = iff(isnotempty(SubjectContainsWords), SubjectContainsWords, iff(isnotempty(BodyContainsWords), BodyContainsWords, SubjectOrBodyContainsWords))\n  | extend RuleDetail = case(\n      OfficeObjectId contains '/', tostring(split(OfficeObjectId, '/')[-1]),\n      OfficeObjectId contains '\\\\', tostring(split(OfficeObjectId, '\\\\')[-1]),\n      \"Unknown\"\n    )\n  | summarize count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by Operation, UserId, ClientIPAddress, ResultStatus, Keyword, OriginatingServer, OfficeObjectId, RuleDetail\n  | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n  | extend OriginatingServerName = tostring(split(OriginatingServer, \" \")[0]);\n\n// EnrichedMicrosoft365AuditLogs Query\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n  | where Workload =~ \"Exchange\"\n  | where Operation =~ \"New-InboxRule\" and (ResultStatus =~ \"True\" or ResultStatus =~ \"Succeeded\")\n  | where tostring(parse_json(tostring(AdditionalProperties)).Parameters) has \"Deleted Items\" \n      or tostring(parse_json(tostring(AdditionalProperties)).Parameters) has \"Junk Email\" \n      or tostring(parse_json(tostring(AdditionalProperties)).Parameters) has \"DeleteMessage\"\n  | extend Events = parse_json(tostring(AdditionalProperties)).Parameters\n  | extend SubjectContainsWords = tostring(Events.SubjectContainsWords), \n           BodyContainsWords = tostring(Events.BodyContainsWords), \n           SubjectOrBodyContainsWords = tostring(Events.SubjectOrBodyContainsWords)\n  | where SubjectContainsWords has_any (Keywords) \n      or BodyContainsWords has_any (Keywords) \n      or SubjectOrBodyContainsWords has_any (Keywords)\n  | extend ClientIPAddress = case(\n      ClientIp has \".\", tostring(split(ClientIp, \":\")[0]),\n      ClientIp has \"[\", tostring(trim_start(@'[[]', tostring(split(ClientIp, \"]\")[0]))),\n      ClientIp\n    )\n  | extend Keyword = iff(isnotempty(SubjectContainsWords), SubjectContainsWords, iff(isnotempty(BodyContainsWords), BodyContainsWords, SubjectOrBodyContainsWords))\n  | extend RuleDetail = case(\n      ObjectId contains '/', tostring(split(ObjectId, '/')[-1]),\n      ObjectId contains '\\\\', tostring(split(ObjectId, '\\\\')[-1]),\n      \"Unknown\"\n    )\n  | summarize count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by Operation, UserId, ClientIPAddress, ResultStatus, Keyword, ObjectId, RuleDetail\n  | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n\n// Combine and Deduplicate\nlet CombinedEvents = OfficeEvents\n  | union EnrichedEvents\n  | summarize arg_min(StartTimeUtc, *) by Operation, UserId, ClientIPAddress;\n\n// Final Output\nCombinedEvents\n  | project StartTimeUtc, EndTimeUtc, Operation, UserId, ClientIPAddress, ResultStatus, Keyword, RuleDetail, AccountName, AccountUPNSuffix;\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alerts when there is a new security vulnerability in a GitHub repository.\n Topic: GitHub"}, {"role": "assistant", "content": "GitHubRepo\n| where Action == \"vulnerabilityAlert\"\n| project TimeGenerated, DismmisedAt, Reason, vulnerableManifestFilename, Description, Link, PublishedAt, Severity, Summary\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows the most prevalent users who perform write operations on Azure Machine Learning resources. List the common source IP address for each of those accounts. If an operation is not from those IP addresses, it may be worthy of investigation.\n Topic: Azure Activity"}, {"role": "assistant", "content": "AzureActivity\n| where ResourceProviderValue == \"MICROSOFT.MACHINELEARNINGSERVICES\"  // Filter activities related to Microsoft Machine Learning Services\n| extend SCOPE = tostring(parse_json(Authorization).scope)  // Parse Authorization scope as string\n| extend subname = split(Hierarchy, \"/\")  // Split Hierarchy to extract Subscription Name and ID\n| extend ['Subscription Name'] = subname[-2], ['Subscription ID'] = subname[-1]  // Extract Subscription Name and ID\n| extend Properties = parse_json(Properties)  // Parse Properties as JSON\n| extend Properties_entity = tostring(Properties.entity)  // Cast Properties.entity to string\n| where isnotempty(Properties_entity)  // Filter activities where Properties.entity is not empty\n// | where Properties_entity contains \"deepseek\"  // Filter activities where Properties.entity contains \"deepseek\"\n| where OperationNameValue contains \"write\"  // Filter activities where OperationNameValue contains \"write\"\n| where OperationNameValue !contains \"MICROSOFT.AUTHORIZATION/ROLEASSIGNMENTS/WRITE\"  // Exclude role assignments\n| extend LLM = tostring(split(Properties_entity, \"/\")[-1])  // Extract the last segment of Properties_entity and cast it to string\n| distinct TimeGenerated, tostring(['Subscription Name']), ResourceGroup, tostring(['Subscription ID']), Caller, CallerIpAddress, OperationNameValue, LLM, _ResourceId  // Select distinct relevant fields for output\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a successful vault export has occurred within 1Password.\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "OnePasswordEventLogs_CL\n| where action == \"export\"\n| where object_type == \"vault\"\n| extend\n    TargetUsername = actor_details.email\n    , SrcIpAddr = session.ip"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytics rule creates notifications of newly connected devices. These clients are connected to the LAN interface of the Edge. Topic: VMware SD-WAN and SASE"}, {"role": "assistant", "content": "VMware_VECO_EventLogs_CL\n| extend details = todynamic(detail)\n| evaluate bag_unpack(details)\n| where event == \"EDGE_NEW_DEVICE\"\n\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches web proxy logs for a specific type of beaconing behavior by joining a number of sources together: \n- Traffic by actual web browsers - by looking at traffic generated by a UserAgent that looks like a browser and is used by multiple users to visit a large number of domains.\n- Users that make requests using one of these actual browsers, but only to a small set of domains, none of which are common domains.\n- The traffic is beacon-like; meaning that it occurs during many different hours of the day (i.e. periodic). \n Topic: FalconFriday"}, {"role": "assistant", "content": "let timeframe = 1d; // Timeframe during which to search for beaconing behavior.\nlet lookback = 7d; // Look back period to find if browser was used for other domains by user.\nlet min_requests=50; // Minimum number of requests to consider it beacon traffic.\nlet min_hours=8; // Minimum number of different hours during which connections were made to consider it beacon traffic.\nlet trusted_user_count=10; // If visited by this many users a domain is considered 'trusted'.\nlet max_sites=3; // Maximum number of different sites visited using this user-agent.\n// Client-specific query to obtain 'browser-like' traffic from proxy logs.\nlet BrowserTraffic = (p:timespan) {\nCommonSecurityLog\n| where DeviceVendor == \"Zscaler\" and DeviceProduct == \"NSSWeblog\"\n| where TimeGenerated >ago(p)\n| project TimeGenerated, SourceUserName, DestinationHostName, RequestClientApplication\n| where (RequestClientApplication startswith \"Mozilla/\" and RequestClientApplication contains \"Gecko\")\n};\nlet CommonDomains = BrowserTraffic(timeframe)\n| summarize source_count=dcount(SourceUserName) by DestinationHostName\n| where source_count>trusted_user_count\n| project DestinationHostName;\nlet CommonUA = BrowserTraffic(timeframe)\n| summarize source_count=dcount(SourceUserName), host_count=dcount(DestinationHostName) by RequestClientApplication\n| where source_count>trusted_user_count and host_count > 100 // Normal browsers are browsers used by many people and visiting many different sites.\n| project RequestClientApplication;\n// Find browsers that are common, i.e. many users use them and they use them to visit many different sites,\n// but some users only use the browser to visit a very limited set of sites.\n// These are considered suspicious, since they might be an attacker masquerading a beacon as a legitimate browser.\nlet SuspiciousBrowers = BrowserTraffic(timeframe)\n| where RequestClientApplication in(CommonUA)\n| summarize BrowserHosts=make_set(DestinationHostName),request_count=count() by RequestClientApplication, SourceUserName\n| where array_length(BrowserHosts) <= max_sites and request_count >= min_requests\n| project RequestClientApplication, SourceUserName,BrowserHosts;\n// Just reporting on suspicious browsers gives too many false positives.\n// For example, users that have the browser open on the login screen of 1 specific application.\n// In the suspicious browsers we can search for 'beacon-like' behavior.\n// Get all browser traffic by the suspicious browsers.\nlet PotentialAlerts=SuspiciousBrowers\n| join BrowserTraffic(timeframe) on RequestClientApplication, SourceUserName\n// Find beaconing-like traffic - i.e. contacting the same host in many different hours.\n| summarize hour_count=dcount(bin(TimeGenerated,1h)), BrowserHosts=any(BrowserHosts), request_count=count() by RequestClientApplication, SourceUserName, DestinationHostName\n| where hour_count >= min_hours and request_count >= min_requests\n// Remove common domains like login.microsoft.com.\n| join kind=leftanti CommonDomains on DestinationHostName\n| summarize RareHosts=make_set(DestinationHostName), TotalRequestCount=sum(request_count), BrowserHosts=any(BrowserHosts) by RequestClientApplication, SourceUserName\n// Remove browsers that visit any common domains.\n| where array_length(RareHosts) == array_length(BrowserHosts);\n// Look back for X days to see if the browser was not used to visit more hosts.\n// This is to get rid of someone that started up the browser a long time ago, and left only a single tab open.\nPotentialAlerts\n| join BrowserTraffic(lookback) on SourceUserName, RequestClientApplication\n| summarize RareHosts=any(RareHosts),BrowserHosts1d=any(BrowserHosts),BrowserHostsLookback=make_set(DestinationHostName) by SourceUserName, RequestClientApplication\n| where array_length(RareHosts) == array_length(BrowserHostsLookback)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a user is added to any of the Privileged Groups.\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\nFor Administrator role permissions in Microsoft Entra ID please see https://docs.microsoft.com/azure/active-directory/users-groups-roles/directory-assign-admin-roles\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let OperationList = dynamic([\"Add member to role\",\"Add member to role in PIM requested (permanent)\"]);\nlet PrivilegedGroups = dynamic([\"UserAccountAdmins\",\"PrivilegedRoleAdmins\",\"TenantAdmins\"]);\nAuditLogs\n//| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"RoleManagement\"\n| where OperationName in~ (OperationList)\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend TargetUserPrincipalName = tostring(TargetResource.userPrincipalName),\n               modProps = TargetResource.modifiedProperties\n  )\n| mv-apply Property = modProps on \n  (\n      where Property.displayName =~ \"Role.WellKnownObjectName\"\n      | extend DisplayName = trim('\"',tostring(Property.displayName)),\n               GroupName = trim('\"',tostring(Property.newValue))\n  )\n| extend InitiatingAppId = tostring(InitiatedBy.app.appId)\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingAppServicePrincipalName = tostring(InitiatedBy.app.servicePrincipalName)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))        \n| extend InitiatingUserRoles = InitiatedBy.user.roles\n| where GroupName in~ (PrivilegedGroups)\n// If you don't want to alert for operations from PIM, remove below filtering for MS-PIM.\n//| where InitiatingAppName != \"MS-PIM\"\n| project TimeGenerated, AADOperationType, Category, OperationName, AADTenantId, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppId, InitiatingAppServicePrincipalId, InitiatingIpAddress, InitiatingUserRoles, DisplayName, GroupName, TargetUserPrincipalName\n| extend InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule triggers when multiple malware where detected on host.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "let threshold = 2;\nCiscoSecureEndpoint\n| where isnotempty(ThreatName)\n| summarize infected = makeset(ThreatName) by DstHostname, bin(TimeGenerated, 10m)\n| where array_length(infected) >= threshold\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0018 (Theom has observed National IDs in a data store that is publicly exposed. As per this requirement, use this information to apply data access control lists or access permissions to secure your data)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0018\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for source IP addresses with the most requests\n Topic: PingFederate"}, {"role": "assistant", "content": "PingFederateEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(SrcIpAddr)\n| summarize count() by SrcIpAddr\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checks if Sonrai tickets have been closed. \nIt uses the action type to check if a ticket has been closed\n Topic: SonraiSecurity"}, {"role": "assistant", "content": "Sonrai_Tickets_CL\n| where action_d == 2\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query aims to detect instances of successful AWS console logins that align with high-severity credential access or Initial Access alerts generated by Defender Products.\n Specifically, it focuses on scenarios where the successful login takes place within a 60-minute timeframe of the high-severity alert. The login is considered relevant if it originates from an IP address associated with potential attackers.\n Topic: Multi Cloud Attack Coverage Essentials - Resource Abuse"}, {"role": "assistant", "content": "SecurityAlert \n// Filtering alerts based on Microsoft product names\n  | where ProductName in (\"Microsoft 365 Defender\", \"Azure Active Directory\", \"Microsoft Defender Advanced Threat Protection\", \"Microsoft Cloud App Security\",\"Azure Active Directory Identity Protection\", \"Microsoft Defender ATP\")\n// Narrowing down alerts to specific tactics\n  | where Tactics in(\"CredentialAccess\", \"InitialAccess\")\n// Focusing on high-severity alerts\n  | where AlertSeverity == \"High\"\n// Parsing and extending the 'Entities' column as JSON objects\n  | extend Entities = parse_json(Entities) \n// Exploring IP entities within the alert entities\n  | mv-apply Entity = Entities on \n      ( \n      where Entity.Type == 'ip' \n      | extend EntityIp = tostring(Entity.Address) \n      ) \n// Exploring account entities within the alert entities\n  | mv-apply Entity = Entities on \n      ( \n      where Entity.Type == 'account' \n      | extend AccountObjectId = tostring(Entity.AadUserId)\n      )\n// Filtering out alerts with missing IP or account information\n  | where isnotempty(EntityIp) and isnotempty(AccountObjectId)\n// Summarizing relevant fields for further analysis\n  | summarize \n      by \n      AlertName,\n      ProductName,\n      ProviderName,\n      AlertSeverity,\n      EntityIp,\n      Tactics,\n      Techniques,\n      AlertTime= bin(TimeGenerated, 1min),\n      AccountObjectId,\n      AlertTimeGenerated=TimeGenerated\n// Joining with IdentityInfo to obtain additional account details\n  | join kind=inner (\n      IdentityInfo\n      | where TimeGenerated >= ago(1d)\n      | distinct AccountObjectId, AccountUPN=tolower(AccountUPN)\n      )\n      on AccountObjectId \n      |extend Name = tostring(split(AccountUPN,'@')[0]), UPNSuffix =tostring(split(AccountUPN,'@')[1])\n// Joining with AWSCloudTrail data to correlate AWS console logins\n  | join kind=inner (\n      AWSCloudTrail\n      | where EventName == \"ConsoleLogin\"\n      | extend CTUPN= tolower(tostring(tolower(split(UserIdentityArn, \"/\", 2)[0])))\n      | extend ActionType= tostring(parse_json(ResponseElements).ConsoleLogin)  \n      | where ActionType == \"Success\"\n      | extend AWSTime= bin(TimeGenerated, 1min)\n      | project\n          EventName,\n          EventSource,\n          EventTypeName,\n          RecipientAccountId,\n          ResponseElements,\n          SessionMfaAuthenticated,\n          SourceIpAddress,\n          TimeGenerated,\n          UserAgent,\n          UserIdentityArn,\n          UserIdentityType,\n          CTUPN,\n          AWSTime,\n          UserIdentityUserName\n      )\n      on $left.EntityIp == $right.SourceIpAddress \n// Filtering login event after the Alert generation time\n  | where AlertTimeGenerated >= AWSTime\n// Calculating the time difference between alert generation and AWS login\n  | extend timediff = datetime_diff('minute', AlertTimeGenerated, TimeGenerated) \n// Filtering alerts with a time difference of up to 60 minutes\n  | where timediff between ((-60)..(60))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "42Crunch API protection against rate limiting\n Topic: 42Crunch API Protection"}, {"role": "assistant", "content": "let firstRec = apifirewall_log_1_CL\n| where TimeGenerated >= ago(5m) \n| project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Request_Header_s, Response_Header_s, Errors_s, Type, UUID_g\n| where Instance_Name_s == \"Instance_8\" and URI_Path_s has \"/api/login\" and Status_d == 429;\nlet rateLimitCount = (toscalar(firstRec | count));\nlet recCount = iff((rateLimitCount > 20), 1, 0);\nfirstRec | top recCount by Timestamp_t desc;\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when OAS scanning engine was disabled.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "McAfeeEPOEvent\n| where EventId == '1127'\n| extend IPCustomEntity = DvcIpAddr, HostCustomEntity = DvcHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies evidence of password spray activity against Microsoft Entra ID applications by looking for failures from multiple accounts from the same IP address within a time window. If the number of accounts breaches the threshold just once, all failures from the IP address within the time range are bought into the result. Details on whether there were successful authentications by the IP address within the time window are also included.\nThis can be an indicator that an attack was successful.\nThe default failure acccount threshold is 5, Default time window for failures is 20m and default look back window is 1 day\nNote: Due to the number of possible accounts involved in a password spray it is not possible to map identities to a custom entity.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let timeRange = 1d;\nlet lookBack = 7d;\nlet authenticationWindow = 20m;\nlet authenticationThreshold = 5;\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet failureCodes = dynamic([50053, 50126, 50055]); // invalid password, account is locked - too many sign ins, expired password\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\n// Lookup up resolved identities from last 7 days\nlet aadFunc = (tableName:string){\nlet identityLookup = table(tableName)\n| where TimeGenerated >= ago(lookBack)\n| where not(Identity matches regex isGUID)\n| where isnotempty(UserId)\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName, Type;\n// collect window threshold breaches\ntable(tableName)\n| where TimeGenerated > ago(timeRange)\n| where ResultType in(failureCodes)\n| summarize FailedPrincipalCount = dcount(UserPrincipalName) by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName, Type\n| where FailedPrincipalCount >= authenticationThreshold\n| summarize WindowThresholdBreaches = count() by IPAddress, Type\n| join kind= inner (\n// where we breached a threshold, join the details back on all failure data\ntable(tableName)\n| where TimeGenerated > ago(timeRange)\n| where ResultType in(failureCodes)\n| extend LocationDetails = todynamic(LocationDetails)\n| extend FullLocation = strcat(LocationDetails.countryOrRegion,'|', LocationDetails.state, '|', LocationDetails.city)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed,20), make_set(FullLocation,20), FailureCount = count() by IPAddress, AppDisplayName, UserPrincipalName, UserDisplayName, Identity, UserId, Type\n// lookup any unresolved identities\n| extend UnresolvedUserId = iff(Identity matches regex isGUID, UserId, \"\")\n| join kind= leftouter (\n identityLookup\n) on $left.UnresolvedUserId==$right.UserId\n| extend UserDisplayName=iff(isempty(lu_UserDisplayName), UserDisplayName, lu_UserDisplayName)\n| extend UserPrincipalName=iff(isempty(lu_UserPrincipalName), UserPrincipalName, lu_UserPrincipalName)\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), make_set(UserPrincipalName,20), make_set(UserDisplayName,20), make_set(set_ClientAppUsed,20), make_set(set_FullLocation,20), make_list(FailureCount,20) by IPAddress, AppDisplayName, Type\n| extend FailedPrincipalCount = array_length(set_UserPrincipalName)\n) on IPAddress\n| project IPAddress, StartTime, EndTime, TargetedApplication=AppDisplayName, FailedPrincipalCount, UserPrincipalNames=set_UserPrincipalName, UserDisplayNames=set_UserDisplayName, ClientAppsUsed=set_set_ClientAppUsed, Locations=set_set_FullLocation, FailureCountByPrincipal=list_FailureCount, WindowThresholdBreaches, Type\n| join kind= inner (\ntable(tableName) // get data on success vs. failure history for each IP\n| where TimeGenerated > ago(timeRange)\n| where ResultType in(successCodes) or ResultType in(failureCodes) // success or failure types\n| summarize GlobalSuccessPrincipalCount = dcountif(UserPrincipalName, (ResultType in (successCodes))), ResultTypeSuccesses = make_set_if(ResultType, (ResultType in (successCodes))), GlobalFailPrincipalCount = dcountif(UserPrincipalName, (ResultType in (failureCodes))), ResultTypeFailures = make_set_if(ResultType, (ResultType in (failureCodes))) by IPAddress, Type\n| where GlobalFailPrincipalCount > GlobalSuccessPrincipalCount // where the number of failed principals is greater than success - eliminates FPs from IPs who authenticate successfully alot and as a side effect have alot of failures\n) on IPAddress\n| project-away IPAddress1\n| extend timestamp=StartTime\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of top triggered firewall rules.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "UbiquitiAuditEvent\n| where TimeGenerated > ago(24h)\n| where EventCategory =~ 'firewall'\n| summarize count() by NetworkRuleName\n| top 10 by count_\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rare URLs with errors.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "CiscoWSAEvent\n| where TimeGenerated > ago(24h)\n| where DvcAction =~ 'OTHER'\n| summarize count() by UrlOriginal\n| order by count_ asc\n| extend URLCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for delete operations performed by user.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where TimeGenerated > ago(24h)\n| where data_eventName_s startswith 'Delete'\n| extend AccountCustomEntity = data_definedTags_Oracle_Tags_CreatedBy_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for email related threat events.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "let lbtime = 24h;\nMcAfeeEPOEvent\n| where TimeGenerated > ago(lbtime)\n| where EventId in ('1417', '1418', '1419', '1420', '1500', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1513', '1514')\n| extend EventMessage = case(EventId == '1417', \"Email message deleted (user defined detection)\",\n                              EventId == '1418', \"Email message deleted (user defined detection), Clean failed\",\n                              EventId == '1419', \n                              \"Email message deleted (user defined detection), Move failed\",\n                              EventId == '1420', \"Email message deleted (user defined detection), Delete failed\",\n                              EventId == '1500', \"Infected email cleaned (Medium)\",\n                              EventId == '1501', \"Infected email quarantined\",\n                              EventId == '1502', \"Unable to clean infected mail\", \n                              EventId == '1503', \"Infected email detected\",\n                              EventId == '1504', \"Infected mail item deleted\",\n                              EventId == '1505', \"Email content filtered\",\n                              EventId == '1506', \"Email content blocked\",\n                              EventId == '1507', \"Inbound email suspended for low disk\",\n                              EventId == '1513', \"Mail virus quarantined and cleaned\",\n                              \"Mail virus quarantined (not cleaned)\")\n| project DvcIpAddr, EventId, EventMessage\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows all users with more than 1 display name in recent history.  This is to hunt for users maliciously changing their display name as a masquerading technique\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "\nAzureDevOpsAuditing\n| where ActorCUID != '00000000-0000-0000-0000-000000000000' and ActorDisplayName != \"Azure DevOps User\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DisplayNameCount = dcount(ActorDisplayName), ActorDisplayNames = make_set(ActorDisplayName), make_set(IpAddress), make_set(ProjectName) by ActorCUID, ActorUPN\n| where DisplayNameCount > 1\n| extend timestamp = StartTime, AccountCustomEntity = ActorUPN"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects an account that is elevated to a new role where that account has not had that role in the last 14 days.\n  Role elevations are a key mechanism for gaining permissions, monitoring which users have which roles, and for anomalies in those roles is useful for finding suspicious activity.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#changes-to-privileged-accounts\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "let auditList =\nAuditLogs\n| where TimeGenerated >= ago(14d)\n| where OperationName =~ \"Add member to role completed (PIM activation)\"\n| where Result =~ \"success\"\n| extend TargetUserPrincipalName = tostring(TargetResources[2].userPrincipalName)\n| extend displayName = tostring(TargetResources[0].displayName)\n| extend displayName2 = tostring(TargetResources[3].displayName)\n| extend ElevatedRole = iif(displayName =~ \"Member\", displayName2, displayName)\n;\nlet lookbackList = auditList\n| where TimeGenerated between(ago(14d)..ago(1d))\n;\nlet recentList = auditList\n| where TimeGenerated > ago(1d)\n;\nlet newlyElevated = recentList\n| join kind = leftanti lookbackList on ElevatedRole, TargetUserPrincipalName\n;\nnewlyElevated | project Id, AdditionalDetails\n| mv-expand bagexpansion=array AdditionalDetails\n| evaluate bag_unpack(AdditionalDetails)\n| extend key = column_ifexists(\"key\", ''), value = column_ifexists(\"value\", '')\n| evaluate pivot(key, make_set(value))\n| extend ipaddr = todynamic(column_ifexists(\"ipaddr\", \"\"))\n| mv-expand ipaddr\n| project Id, InitiatingIPAddress = tostring(ipaddr)\n| join kind=rightouter newlyElevated on Id\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIPAddress = iff(isnotempty(tostring(InitiatedBy.user.ipAddress)), tostring(InitiatedBy.user.ipAddress), InitiatingIPAddress)\n| extend ElevatedBy = iff(isnotempty(InitiatingUserPrincipalName), InitiatingUserPrincipalName, InitiatingAppName)\n| extend ElevatedUser = TargetUserPrincipalName\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n| extend TargetAccountName = tostring(split(TargetUserPrincipalName, \"@\")[0]), TargetAccountUPNSuffix = tostring(split(TargetUserPrincipalName, \"@\")[1])\n| project-reorder ElevatedUser, ElevatedRole, ResultReason, ElevatedBy, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIPAddress, TargetUserPrincipalName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when email with high risk score was not rejected or discarded by filters.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let lbtime = 10m;\nProofpointPOD\n| where TimeGenerated > ago(lbtime)\n| where EventType == 'message'\n| where NetworkDirection == 'inbound'\n| where FilterDisposition !in ('reject', 'discard')\n| where FilterModulesSpamScoresOverall == '100'\n| project SrcUserUpn, DstUserUpn\n| extend AccountCustomEntity = SrcUserUpn\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for Golden Ticket attacks.\n Topic: Tenable App"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.yaml parser into the workspace\n// Retrieve the parser here: https://aka.ms/sentinel-TenableApp-afad-parser\n// Then, create the Kusto Function with alias afad_parser\nafad_parser\n  | where MessageType == 2 and Codename == \"Golden Ticket\"\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule will monitor Malware Events in Syslog and Netflow Data\n Topic: Cisco SD-WAN"}, {"role": "assistant", "content": "CiscoSyslogUTD\n| where isnotempty(Malware) and Malware != \"None\"\n| distinct Malware, SourceIP\n| join kind=inner (CiscoSDWANNetflow\n| where isnotempty(NetflowUsername)\n| summarize arg_max(TimeStamp, NetflowUsername) by NetflowFwSrcAddrIpv4\n| distinct \n    [\"Username\"] = NetflowUsername,\n    [\"SourceIP\"] = NetflowFwSrcAddrIpv4) on SourceIP\n| project Malware, SourceIP, Username\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for new users.\n Topic: PingFederate"}, {"role": "assistant", "content": "let known_users = \nPingFederateEvent\n| where TimeGenerated between (ago(30d) .. (1d))\n| where isnotempty(DstUserName)\n| summarize makeset(DstUserName);\nPingFederateEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(DstUserName)\n| where DstUserName !in (known_users)\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies external users added to Teams where the users domain is not one previously seen in Teams data.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = totimespan((endtime-starttime)*7);\nlet known_orgs = (\nOfficeActivity\n| where TimeGenerated between(ago(lookback)..starttime)\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where Operation =~ \"MemberAdded\" or Operation =~ \"TeamsSessionStarted\"\n// Extract the correct UPN and parse our external organization domain\n| extend UPN = iif(Operation == \"MemberAdded\", tostring(Members[0].UPN), UserId)\n| extend Organization = tostring(split(split(UPN, \"_\")[1], \"#\")[0])\n| where isnotempty(Organization)\n| summarize by Organization);\nOfficeActivity\n| where TimeGenerated between(starttime..endtime)\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where Operation =~ \"MemberAdded\"\n| extend UPN = tostring(parse_json(Members)[0].UPN)\n| extend Organization = tostring(split(split(UPN, \"_\")[1], \"#\")[0])\n| where isnotempty(Organization)\n| where Organization !in (known_orgs)\n| extend AccountName = tostring(split(UPN, \"@\")[0]), AccountUPNSuffix = tostring(split(UPN, \"@\")[1])\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for requests to online/cloud shares.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "GCPCloudDNS\n| where TimeGenerated > ago(24h)\n| where Query has_any ('dropbox.com', 'mediafire.com', 'onedrive.com', 'wire.com', 'massive.io', 'efilecabinet.com', 'c-v.sh', 'file.io', '0x0.st', 'instant.io', 'copy.com', 'mega.nz', 'icloud.com', 'pcloud.com', 'icedrive.net', 'WeTransfer.com', 'Onehub.com', 'getfilecloud.com', 'ki.tc', 'uguu.se', 'flyle.app', 'transfer.sh', 'expirebox.com', 'disk.yandex.com', 'filestage.io', 'zippyshare.com', 'drive.google.com', 'box.com', 'hubic.com', 'wikisend.com', 'dropsend.com', 'anonymousfiles.io', 'anonfiles.com', 'filedropper.com', 'privatlab.com', 'dropmefiles.com', 'onionshare.org', 'sendGB.com', 'volafile.org', 'openload.co', 'uploadfiles.io', 'gofile.io')\n| extend DNSCustomEntity = Query, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection flags the occurrences of external user accounts that are added to a Team and then removed within one hour.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let TeamsAddDel = (Op:string){\nOfficeActivity\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where Operation == Op\n| where Members has (\"#EXT#\")\n| mv-expand Members\n| extend UPN = tostring(Members.UPN)\n| where UPN has (\"#EXT#\")\n| project TimeGenerated, Operation, UPN, UserId, TeamName, ClientIP\n};\nlet TeamsAdd = TeamsAddDel(\"MemberAdded\")\n| project TimeAdded=TimeGenerated, Operation, MemberAdded = UPN, UserWhoAdded = UserId, TeamName, ClientIP;\nlet TeamsDel = TeamsAddDel(\"MemberRemoved\")\n| project TimeDeleted=TimeGenerated, Operation, MemberRemoved = UPN, UserWhoDeleted = UserId, TeamName, ClientIP;\nTeamsAdd\n| join kind=inner (TeamsDel) on $left.MemberAdded == $right.MemberRemoved\n| where TimeDeleted > TimeAdded\n| project TimeAdded, TimeDeleted, MemberAdded_Removed = MemberAdded, UserWhoAdded, UserWhoDeleted, TeamName, ClientIP\n| extend MemberAdded_RemovedAccountName = tostring(split(MemberAdded_Removed, \"@\")[0]), MemberAdded_RemovedAccountUPNSuffix = tostring(split(MemberAdded_Removed, \"@\")[1])\n| extend UserWhoAddedAccountName = tostring(split(UserWhoAdded, \"@\")[0]), UserWhoAddedAccountUPNSuffix = tostring(split(UserWhoAdded, \"@\")[1])\n| extend UserWhoDeletedAccountName = tostring(split(UserWhoDeleted, \"@\")[0]), UserWhoDeletedAccountUPNSuffix = tostring(split(UserWhoDeleted, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for recipients with high number of discarded or rejected emails.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let threshold = 10;\nProofpointPOD\n| where EventType == 'message'\n| where NetworkDirection == 'inbound'\n| where FilterDisposition !in ('reject', 'discard')\n| summarize count() by DstUserUpn\n| where count_ > threshold\n| extend AccountCustomEntity = DstUserUpn"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies malware that has been hidden in the recycle bin.\nTo use this analytics rule, make sure you have deployed the [ASIM normalization parsers](https://aka.ms/ASimProcessEvent)\n Topic: Detections"}, {"role": "assistant", "content": "let procList = dynamic([\"cmd.exe\",\"ftp.exe\",\"schtasks.exe\",\"powershell.exe\",\"rundll32.exe\",\"regsvr32.exe\",\"msiexec.exe\"]);  \nimProcessCreate\n| where CommandLine has \"recycler\"\n| where Process has_any (procList)\n| extend FileName = tostring(split(Process, '\\\\')[-1])\n| where FileName in~ (procList)\n| project TimeGenerated, Dvc, User, Process, FileName, CommandLine, ActingProcessName, EventVendor, EventProduct\n| extend AccountName = tostring(split(User, @'\\')[1]), AccountNTDomain = tostring(split(User, @'\\')[0])\n| extend HostName = tostring(split(Dvc, \".\")[0]), DomainIndex = toint(indexof(Dvc, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Dvc, DomainIndex + 1), Dvc)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "42Crunch API protection against first-time access\n Topic: 42Crunch API Protection"}, {"role": "assistant", "content": "let firstRec = apifirewall_log_1_CL\n| where TimeGenerated >= ago(5m) \n| project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Request_Header_s, Response_Header_s, Errors_s, Type, UUID_g\n| where Instance_Name_s == \"Instance_9\" and URI_Path_s has \"/api/login\" |\ntop 1 by Timestamp_t desc;\nlet ipAddress = toscalar(firstRec | summarize by Source_IP_s);\nlet secondRec = apifirewall_log_1_CL\n| where TimeGenerated >= ago(7d) \n| project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Request_Header_s, Response_Header_s, Errors_s, Type, UUID_g\n| where Instance_Name_s == \"Instance_9\" and URI_Path_s has \"/api/login\" and Source_IP_s == ipAddress;\nlet recCount = iff((toscalar(secondRec | count) > 1), 0, 1);\nsecondRec | take recCount\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected creation of new Glue policy and usage one of the attach policy operations (AttachUserPolicy/AttachRolePolicy/AttachGroupPolicy). This might indicate a privilege escalation technique that attackers could use.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\nlet createPolicy =  dynamic([\"CreatePolicy\", \"CreatePolicyVersion\"]);\nlet timeframe = 1d;\nlet lookback = 14d;\n// Creating Master table with all the events to use with materialize for better performance\nlet EventInfo = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName in (EventNameList) or EventName in (createPolicy)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\");\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\nlet FullAdminPolicyEvents =  materialize(  EventInfo\n| where TimeGenerated >= ago(lookback)\n| where EventName in (createPolicy)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and ((((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"glue:*\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"glue:CreateDevEndpoint\" and Action contains \"glue:GetDevEndpoints\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"glue:Create*\" and Action contains \"glue:Get*\")) or (Action contains \"glue:*\") or (Action contains \"glue:GetDevEndpoints\" and Action contains \"glue:UpdateDevEndpoint\") or (Action contains \"glue:Get*\" and Action contains \"glue:Update*\")) and Resource == \"*\" and Condition == \"\"\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn, RecipientAccountId, AccountName, AccountUPNSuffix\n| project-rename StartTime = TimeGenerated  );\nlet PolicyAttach = materialize(  EventInfo\n| where TimeGenerated >= ago(timeframe)\n| where EventName in (EventNameList) and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\"/\")[1])\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName,   UserIdentityType , UserIdentityArn, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, PolicyName\n| extend AttachEvent = pack(\"StartTime\", StartTime, \"EndTime\", EndTime, \"EventName\", EventName, \"UserIdentityType\",   UserIdentityType,\"SourceIpAddress\", SourceIpAddress, \"AccountName\", AccountName, \"AccountUPNSuffix\", AccountUPNSuffix, \"RecipientAccountId\", RecipientAccountId, \"UserIdentityArn\", UserIdentityArn)\n| project EventSource, PolicyName, AttachEvent, RecipientAccountId, AccountName, AccountUPNSuffix, AttachEventCount\n);\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\nFullAdminPolicyEvents\n| join kind=leftouter\n(\n    PolicyAttach\n)\non PolicyName\n| project-away PolicyName1\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for baseline deviation events.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where TimeGenerated > ago(24h)\n| where EventOriginalType has 'Baseline Deviation' or EventType has 'Baseline Deviation'\n| project TimeGenerated, DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query generates baseline pattern of cloud resource deletions by an user and generated anomaly when any unusual spike is detected.\nThese anomalies from unusual or privileged users could be an indication of cloud infrastructure take-down by an adversary \n Topic: SecurityThreatEssentialSolution"}, {"role": "assistant", "content": "let starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet TotalEventsThreshold = 25; \nlet TimeSeriesData = \nAzureActivity \n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where OperationNameValue endswith \"delete\" \n| project TimeGenerated, Caller \n| make-series Total = count() on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by Caller; \nlet TimeSeriesAlerts = materialize(TimeSeriesData \n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, 3, -1, 'linefit') \n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long) \n| where anomalies > 0 \n| project Caller, TimeGenerated, Total, baseline, anomalies, score \n| where Total > TotalEventsThreshold and baseline > 0 ); \nTimeSeriesAlerts \n| where TimeGenerated > (ago(endtime)) \n| project TimeGenerated, Caller \n| join kind = inner (AzureActivity \n| where TimeGenerated > (ago(endtime)) \n| where OperationNameValue endswith \"delete\" \n| summarize count(), make_set(OperationNameValue), make_set(Resource) by bin(TimeGenerated, 1h), Caller) on TimeGenerated, Caller \n| extend Name = iif(Caller has '@',tostring(split(Caller,'@',0)[0]),\"\")\n| extend UPNSuffix = iif(Caller has '@',tostring(split(Caller,'@',1)[0]),\"\")\n| extend AadUserId = iif(Caller !has '@',Caller,\"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule makes use of the series decompose anomaly method to generate an alert when client requests excessive amount of DNS queries to non-existent domains. This helps in identifying possible C2 communications. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let threshold = 2.5;\nlet min_t = ago(14d);\nlet max_t = now();\nlet dt = 1d;\nlet summarizationexist = (\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > ago(1d) \n      | project v = int(2)\n      ),\n      (\n      print int(1) \n      | project v = print_0\n      )\n  | summarize maxv = max(v)\n  | extend sumexist = (maxv > 1)\n  );\nlet allData = union isfuzzy=true\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(responsecodename='NXDOMAIN', starttime=todatetime(min_t), endtime=max_t)\n          | summarize Count=count() by SrcIpAddr, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > min_t and EventResultDetails_s == 'NXDOMAIN'\n      | summarize Count=toint(sum(count__d)) by SrcIpAddr=SrcIpAddr_s, bin(EventTime=EventTime_t, 1h)\n      );\nallData\n| make-series EventCount=sum(Count) on EventTime from min_t to max_t step dt by SrcIpAddr\n| extend (anomalies, score, baseline) = series_decompose_anomalies(EventCount, threshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, EventTime, EventCount\n| extend\n  anomalies = toint(anomalies),\n  score = toint(score),\n  baseline = toint(baseline),\n  EventTime = todatetime(EventTime),\n  Total = tolong(EventCount)\n| where EventTime >= ago(dt)\n| where score >= threshold * 2\n| join kind=inner(_Im_Dns(responsecodename='NXDOMAIN', starttime=ago(dt), endtime=max_t)\n  | summarize DNSQueries = make_set(DnsQuery) by SrcIpAddr)\n  on SrcIpAddr\n| project-away SrcIpAddr1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows downloaded data volume per user.\n Topic: Box"}, {"role": "assistant", "content": "BoxEvents\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'DOWNLOAD'\n| summarize ['DataVolume(Bytes)'] = sum(FileSize) by SrcUserName\n| project SrcUserName, ['DataVolume(Bytes)']\n| order by ['DataVolume(Bytes)'] desc\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected change of the RDS Master password. Verify if this was intentional, or if it was caused by a malicious actor.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where  EventName == \"ModifyDBCluster\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| where isnotempty(tostring(parse_json(RequestParameters).masterUserPassword))\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert audits your logging architecture for recommended data tables aligned to Intermediate Event Logging (EL2) of the Maturity Model for Event Log Management (M-21-31) standard. The alert triggers when recommended data tables in EL2 are not present.\n Topic: MaturityModelForEventLogManagementM2131"}, {"role": "assistant", "content": "let M2131Mapping = datatable(DataTable:string, MaturityLevel:string)\n[\n\"SigninLogs\",\t\"Event Logging (EL0)\",\n\"AADManagedIdentitySignInLogs\", \"Event Logging (EL0)\",\n\"AADServicePrincipalSignInLogs\",\t\"Event Logging (EL0)\",\n\"StorageBlobLogs\",\t\"Event Logging (EL0)\",\n\"StorageFileLogs\",\t\"Event Logging (EL0)\",\n\"AzureMetrics\",\t\"Event Logging (EL0)\",\n\"AuditLogs\",\t\"Event Logging (EL0)\",\n\"IdentityInfo\",\t\"Event Logging (EL0)\",\n\"CommonSecurityLog\",\t\"Event Logging (EL0)\",\n\"ThreatIntelligenceIndicator\",\t\"Event Logging (EL0)\",\n\"DeviceNetworkInfo\",\t\"Event Logging (EL0)\",\n\"DnsEvents\",\t\"Event Logging (EL0)\",\n\"DeviceNetworkEvents\",\t\"Event Logging (EL0)\",\n\"AzureDiagnostics\",\t\"Event Logging (EL0)\",\n\"Usage\",\t\"Event Logging (EL0)\",\n\"SecurityIncident\",\t\"Event Logging (EL0)\",\n\"SecurityAlert\",\t\"Event Logging (EL0)\",\n\"AzureActivity\",\t\"Event Logging (EL0)\",\n\"Heartbeat\",\t\"Event Logging (EL0)\",\n\"OfficeActivity\",\t\"Event Logging (EL0)\",\n\"SecurityEvent\",\t\"Event Logging (EL0)\",\n\"Syslog\",\t\"Event Logging (EL0)\",\n\"AWSCloudTrail\",\t\"Event Logging (EL0)\",\n\"GWorkspaceActivityReports\",\t\"Event Logging (EL0)\",\n\"AWSGuardDuty\",\t\"Event Logging (EL0)\",\n\"AWSVPCFlow\",\t\"Event Logging (EL0)\",\n\"Perf\",\t\"Basic Event Logging (EL1)\",\n\"SentinelHealth\",\t\"Basic Event Logging (EL1)\",\n\"DeviceLogonEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceNetworkEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceFileEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceRegistryEvents\",\t\"Basic Event Logging (EL1)\",\n\"DeviceProcessEvents\",\t\"Basic Event Logging (EL1)\",\n\"VMConnection\",\t\"Basic Event Logging (EL1)\",\n\"EmailEvents\",\t\"Basic Event Logging (EL1)\",\n\"ThreatIntelligenceIndicator\",\t\"Basic Event Logging (EL1)\",\n\"SecurityRecommendation\",\t\"Basic Event Logging (EL1)\",\n\"DeviceProcessEvents\",\t\"Basic Event Logging (EL1)\",\n\"ConfigurationData\",\t\"Basic Event Logging (EL1)\",\n\"ConfigurationChange\",\t\"Basic Event Logging (EL1)\",\n\"GatewayDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"TunnelDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"IKEDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"RouteDiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"PS2DiagnosticLog\",\t\"Basic Event Logging (EL1)\",\n\"Event\",\t\"Basic Event Logging (EL1)\",\n\"SqlAtpStatus\",\t\"Basic Event Logging (EL1)\",\n\"ConstainerInstanceLog_CL\",\t\"Basic Event Logging (EL1)\",\n\"ContainerEvent_CL\",\t\"Basic Event Logging (EL1)\",\n\"InsightsMetrics\",\t\"Intermediate Event Logging (EL2)\",\n\"EmailUrlInfo\",\t\"Intermediate Event Logging (EL2)\",\n\"EmailAttachmentInfo\",\t\"Intermediate Event Logging (EL2)\",\n\"InformationProtectionLogs_CL\",\t\"Intermediate Event Logging (EL2)\",\n\"CloudAppEvents\",\t\"Intermediate Event Logging (EL2)\",\n\"ContainerInventory\",\t\"Intermediate Event Logging (EL2)\",\n\"Update\",\t\"Advanced Event Logging (EL3)\",\n\"BehaviorAnalytics\",\t\"Advanced Event Logging (EL3)\",\n\"Anomalies\",\t\"Advanced Event Logging (EL3)\",\n\"SecurityRegulatoryCompliance\",\t\"Advanced Event Logging (EL3)\"\n];\nUsage\n  | summarize Entries = count(), Size = sum(Quantity), last_log = datetime_diff(\"second\",now(), max(TimeGenerated)) by DataType\n  | join kind=fullouter(M2131Mapping) on $left.DataType == $right.DataTable\n  | project RecommendedDataTable=DataTable, ExistingDataTable=DataType, MaturityLevel, Size\n  | summarize Logged = countif(Size > 0), NotLogged = countif(isempty(Size)) by RecommendedDataTable, MaturityLevel\n  | where NotLogged > 0 and MaturityLevel == \"Intermediate Event Logging (EL2)\"\n  //| where RecommendedDataTable <> \"Data Table Name\" \n  | project RecommendedDataTable, MaturityLevel, NotLogged, TimeObserved=now()\n  | extend CloudApplication = RecommendedDataTable\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "High severity network security groups alerts found by Prancer.\n Topic: Prancer PenSuiteAI Integration"}, {"role": "assistant", "content": "union prancer_CL\n| where deviceProduct_s == 'azure'\n| where parse_json(data_data_snapshots_s)[0].type == 'Microsoft.Network/networkSecurityGroups' //and parse_json(data_data_snapshots_s)[0].region != ''\n| where data_data_severity_s == 'High' and data_data_result_s == 'failed'\n| extend snapshot = parse_json(data_data_snapshots_s)\n| mv-expand snapshot \n| extend\n    id = tostring(snapshot.id),\n    structure = tostring(snapshot.structure),\n    reference = tostring(snapshot.reference),\n    source = tostring(snapshot.source),\n    collection = tostring(snapshot.collection),\n    type = tostring(snapshot.type),\n    region = tostring(snapshot.region),\n    resourceTypes = tostring(snapshot.resourceTypes),\n    path = tostring(snapshot.path)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a user account successfully logs onto an Azure App from one IP and within 10 mins failed to logon to the same App via a different IP (may indicate a malicious attempt at password guessing with known account). \nUEBA added for context to gather all asoociated information assocaited with IP addressed initiating Faile Logon and affected user. \nPlease note, Failed logons from known IP ranges can be benign depending on the conditional access policies. In case of noisy behavior, consider tuning the source IP ranges after careful consideration\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let riskScoreCutoff = 3; //Adjust this score threshold based on volume of results. Activities identified as the most abnormal receive the highest scores (on a scale of 0-10)\nlet logonDiff = 10m; \nlet aadFunc = (tableName:string)\n{ \ntable(tableName)\n| where ResultType == \"0\"\n| where AppDisplayName !in (\"Office 365 Exchange Online\", \"Skype for Business Online\") // To remove false-positives, add more Apps to this array\n// ---------- Fix for SuccessBlock to also consider IPv6\n| extend SuccessIPv6Block = strcat(split(IPAddress, \":\")[0], \":\", split(IPAddress, \":\")[1], \":\", split(IPAddress, \":\")[2], \":\", split(IPAddress, \":\")[3])\n| extend SuccessIPv4Block = strcat(split(IPAddress, \".\")[0], \".\", split(IPAddress, \".\")[1])\n// ------------------\n| project SuccessLogonTime = TimeGenerated, UserPrincipalName, SuccessIPAddress = IPAddress, SuccessLocation = Location, AppDisplayName, SuccessIPBlock = iff(IPAddress contains \":\", strcat(split(IPAddress, \":\")[0], \":\", split(IPAddress, \":\")[1]), strcat(split(IPAddress, \".\")[0], \".\", split(IPAddress, \".\")[1])), Type\n| join kind= inner (\n    table(tableName)\n    | where ResultType !in (\"0\", \"50140\")\n    | where ResultDescription !~ \"Other\"\n    | where AppDisplayName !in (\"Office 365 Exchange Online\", \"Skype for Business Online\")\n    | project FailedLogonTime = TimeGenerated, UserPrincipalName, FailedIPAddress = IPAddress, FailedLocation = Location, AppDisplayName, ResultType, ResultDescription, Type \n) on UserPrincipalName, AppDisplayName\n| where SuccessLogonTime < FailedLogonTime and FailedLogonTime - SuccessLogonTime <= logonDiff and FailedIPAddress !startswith SuccessIPBlock\n| summarize FailedLogonTime = max(FailedLogonTime), SuccessLogonTime = max(SuccessLogonTime) by UserPrincipalName, SuccessIPAddress, SuccessLocation, AppDisplayName, FailedIPAddress, FailedLocation, ResultType, ResultDescription, Type\n| extend timestamp = SuccessLogonTime\n| extend UserPrincipalName = tolower(UserPrincipalName)};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n// UEBA context below - make sure you have these 2 datatypes, otherwise the query will not work. If so, comment all that is below.\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n) on UserPrincipalName\n//Below it will be joined with BehaviorAnalytics table to the Failed IP Addresses\n| join kind=leftouter (\n    BehaviorAnalytics\n    | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n    | where isnotempty(SourceIPAddress)\n    | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress, UserName\n    | project-rename FailedIPAddress = SourceIPAddress, Name = UserName\n    | summarize\n        MaxInvestigationScore = max(InvestigationPriority)  // Only retrieve maximum Investigation Property score for both FailedIP and User\n    by FailedIPAddress, Name)\non FailedIPAddress, Name  // Joining on both IP and User so as to only return context associated with same user\n| extend UEBARiskScore = MaxInvestigationScore\n| project-away *1 // removing duplicate columns post outer join from output\n| where  UEBARiskScore > riskScoreCutoff\n| sort by UEBARiskScore desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Header: X-Frame-Options Missing\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"low\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"SPF Policy Set to Soft Fail\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for suspicious files on sharepoint.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where TimeGenerated > ago(24h)\n| where EventCategoryType =~ 'sharepoint'\n| where EventOriginalResultDetails =~ 'Quarantine'\n| project DetectionTime, DstUserName, SrcFileName, SrcFileSHA1, SrcFileSHA256, SecurityRiskName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected S3 bucket publicly exposed via ACL, which could lead for sensitive information leakage to the public. Verify the S3 object configurations.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"PutBucketAcl\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| extend Grant = parse_json(tostring((parse_json(RequestParameters).AccessControlPolicy))).AccessControlList.Grant\n| mvexpand Grant\n| extend cannedacl = parse_json(tostring((parse_json(RequestParameters))))\n| extend URI = parse_json(Grant).Grantee.URI, type = parse_json(Grant).Grantee.[\"xsi:type\"], xamzacl = parse_json(cannedacl).[\"x-amz-acl\"]\n| where (type == \"Group\" and (URI endswith \"AllUsers\" or URI endswith \"AuthenticatedUsers\"))\n  or xamzacl in (\"authenticated-read\",\"public-read\",\"public-read-write\")\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects a password spraying attack, where a single machine has performed a large number of failed login attempts, with a large number of different accounts. \nFor each account, the attacker uses just a few attempts to prevent account lockout. This query uses the DeviceLogonEvents per machine to detect a password spraying attacks. \nThe machine against which the password spraying is performed (can be DC, a server or even an endpoint) needs to be enrolled in Microsoft Defender for Endpoint.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let thresholdForUniqueFailedAccounts = 20;\nlet upperBoundOfFailedLogonsPerAccount = 10;\nlet ratioSuccessFailedLogons = 0.5;\nlet timeframe = 1d;\nDeviceLogonEvents\n| where Timestamp >= ago(timeframe)\n| where LogonType != \"Unlock\" and ActionType in (\"LogonSuccess\", \"LogonFailed\")\n| where not(isempty( RemoteIP) and isempty( RemoteDeviceName))\n| extend LocalLogon=parse_json(AdditionalFields)\n| where RemoteIPType != \"Loopback\"\n| summarize SuccessLogonCount = countif(ActionType == \"LogonSuccess\"), FailedLogonCount = countif(ActionType == \"LogonFailed\"),\n    UniqueAccountFailedLogons=dcountif(AccountName, ActionType == \"LogonFailed\"), FirstFailed=minif(Timestamp, ActionType == \"LogonFailed\"),\n    LastFailed=maxif(Timestamp, ActionType == \"LogonFailed\"), LastTimestamp=arg_max(Timestamp, tostring(ReportId)) by RemoteIP, DeviceName // RemoteIP is the source of the logon attempt.\n| project-rename IPAddress=RemoteIP\n| where UniqueAccountFailedLogons > thresholdForUniqueFailedAccounts and SuccessLogonCount*ratioSuccessFailedLogons < FailedLogonCount and UniqueAccountFailedLogons*upperBoundOfFailedLogonsPerAccount > FailedLogonCount \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query for searching user accounts which last activity was more than 30 days ago.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let lbtime_30d = 30d;\nlet lbtime_1d = 1d;\nlet known_users_gt_30d = OracleDatabaseAuditEvent\n| where TimeGenerated < ago(lbtime_30d)\n| where isnotempty(DstUserName)\n| where isnotempty(Action)\n| summarize makeset(DstUserName);\nlet known_users_ls_30d = OracleDatabaseAuditEvent\n| where TimeGenerated between (ago(lbtime_30d) .. ago(lbtime_1d))\n| where isnotempty(DstUserName)\n| where isnotempty(Action)\n| summarize makeset(DstUserName);\nOracleDatabaseAuditEvent\n| where TimeGenerated > ago(lbtime_1d)\n| where isnotempty(DstUserName)\n| where DbAction =~ 'CONNECT'\n| where DstUserName in (known_users_gt_30d)\n| where DstUserName !in (known_users_ls_30d)\n| project DstUserName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects suspicious commandline arguments.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where EventMessage has \"Endpoint Application\"\n| where Command has_any (\"whoami\", \"dpkg\", \"useradd\", \"sudo\")\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rare post requests to a single location.\n Topic: Corelight"}, {"role": "assistant", "content": "corelight_http\n| where TimeGenerated > ago(24h)\n| where method in~ ('POST', 'PUT')\n| where toint(status_code) >= 400 and toint(status_code) < 500\n| where request_body_len != 0 or response_body_len != 0\n| extend fe = extract(@'.*(\\.\\w+)$', 1, uri)\n| where fe in~ ('.aspx', '.asp', '.php', '.jsp', '.jspx', '.war', '.ashx', '.asmx', '.ascx', '.asx', '.cshtml', '.cfm', '.cfc', '.cfml', '.wss', '.do', '.action', '.pl', '.plx', '.pm', '.xs', '.t', '.pod', '.php-s', '.pht', '.phar', '.phps', '.php7', '.php5', '.php4', '.php3', '.phtml', '.py', '.rb', '.rhtml', '.cgi', '.dll', '.ayws', '.cgi', '.erb', '.rjs', '.hta', '.htc', '.cs', '.kt', '.lua', '.vbhtml')\n| summarize count() by id_orig_h\n| where count_ < 10\n| order by count_ asc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query batches of distinct SQL queries that failed with error codes that might indicate malicious attempts to gain illegitimate access to the data. When attacker attempts to scan or gain access to server protected by firewall, he will be blocked by firewall and fail with error code 40615. Thus, if we see a large number of logins with such error codes, this could indicate attempts to gain access.\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet monitoredErrors = pack_array(40615);        // List of sql error codes relevant for this detection.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | summarize countEvents = count(), countStatements = dcount(Statement), countStatementsWithError = dcountif(Statement, Error in (monitoredErrors))\n        , anyMonitoredStatement = anyif(Statement, Error in (monitoredErrors)), anyInfo = anyif(AdditionalInfo, Error in (monitoredErrors))\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId\n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithErrors = dcountif(timeSlice, countStatementsWithError >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsErrorAnomalyOnStatement = iff(((countStatementsWithError >= monitoredStatementsThreshold) and (countSlicesWithErrors <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithError/monitoredStatementsThreshold, 0)\n| where IsErrorAnomalyOnStatement == 'true'\n| sort by anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])    \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies clients with a high reverse DNS counts that could be carrying out reconnaissance or discovery activity.\nAlerts are generated if the IP performing such reverse DNS lookups was not seen doing so in the preceding 7-day period.\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "let starttime = 8d;\nlet endtime = 1d;\nlet threshold = 10;\nDnsEvents\n| where TimeGenerated > ago(endtime)\n| where Name has \"in-addr.arpa\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), dcount(Name), ReverseDNSLookup_List = make_set(Name,100) by ClientIP\n| where dcount_Name > threshold\n| project StartTimeUtc, EndTimeUtc, ClientIP , dcount_Name, ReverseDNSLookup_List\n// Filter out previously seen IPs\n// Returns all the records from the left side that don't have matches from the right\n| join kind=leftanti (DnsEvents\n    | where TimeGenerated between(ago(starttime)..ago(endtime))\n    | where Name has \"in-addr.arpa\"\n    | summarize dcount(Name) by ClientIP, bin(TimeGenerated, 1d)\n    | where dcount_Name > threshold\n    | project ClientIP , dcount_Name\n) on ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies the creation of large size or expensive VMs (with GPUs or with a large number of virtual CPUs) in Azure.\nAn adversary may create new or update existing virtual machines to evade defenses or use them for cryptomining purposes.\nFor Windows/Linux Vm Sizes, see https://docs.microsoft.com/azure/virtual-machines/windows/sizes \nAzure VM Naming Conventions, see https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions\n Topic: Azure Activity"}, {"role": "assistant", "content": "let tokens = dynamic([\"416\",\"208\",\"192\",\"128\",\"120\",\"96\",\"80\",\"72\",\"64\",\"48\",\"44\",\"40\",\"nc12\",\"nc24\",\"nv24\"]);\nlet operationList = dynamic([\"microsoft.compute/virtualmachines/write\", \"microsoft.resources/deployments/write\"]);\nAzureActivity\n| where OperationNameValue in~ (operationList)\n| where ActivityStatusValue startswith \"Accept\"\n| where Properties has 'vmSize'\n| extend parsed_property= parse_json(tostring((parse_json(Properties).responseBody))).properties\n| extend vmSize = tostring((parsed_property.hardwareProfile).vmSize)\n| mv-apply token=tokens to typeof(string) on (where vmSize contains token)\n| extend ComputerName = tostring((parsed_property.osProfile).computerName)\n| project TimeGenerated, OperationNameValue, ActivityStatusValue, Caller, CallerIpAddress, ComputerName, vmSize\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for devices with multiple possibly malicious destinations. Topic: AristaAwakeSecurity"}, {"role": "assistant", "content": "CommonSecurityLog | where DeviceVendor == \"Arista Networks\" and DeviceProduct == \"Awake Security\"\n| summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), Models=make_set(Activity), ASPMatchURLs=make_set(DeviceCustomString2), SourceIPs=make_set(SourceIP),\n  DestinationIPs=make_set(DestinationIP), ModelMatchCount=sum(EventCount), MaxSeverity=max(toint(LogSeverity)) by SourceHostName\n| where array_length(DestinationIPs) > 1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects changes to an applications sign out URL.\n  Look for any modifications to a sign out URL. Blank entries or entries to non-existent locations would stop a user from terminating a session.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-applications#logout-url-modified-or-removed\n Topic: Detections"}, {"role": "assistant", "content": "AuditLogs\n  | where Category =~ \"ApplicationManagement\"\n  | where OperationName has_any (\"Update Application\", \"Update Service principal\")\n  | extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n  | extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n  | extend TargetAppName = tostring(TargetResources[0].displayName)\n  | extend mod_props = TargetResources[0].modifiedProperties\n  | mv-expand mod_props\n  | extend Action = tostring(mod_props.displayName)\n  | where Action contains \"Url\"\n  | extend UpdatedBy = iif(isnotempty(InitiatingAppName), InitiatingAppName, InitiatingUserPrincipalName)\n  | extend OldURL = tostring(mod_props.oldValue)\n  | extend NewURL = tostring(mod_props.newValue)\n  | extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n  | project-reorder TimeGenerated, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingAadUserId, InitiatingUserPrincipalName, InitiatingIPAddress, UpdatedBy\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rare IAM actions by users.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "let user_actions = \nGCP_IAM\n| where TimeGenerated between (ago(30d) .. (1d))\n| where isnotempty(PayloadMethodname)\n| summarize makeset(PayloadMethodname);\nGCP_IAM\n| where TimeGenerated > ago(24h)\n| extend result = parse_json(todynamic(PayloadAuthorizationinfo))[0]['granted']\n| where result =~ 'true'\n| project-away result\n| where PayloadMethodname !in~ (user_actions)\n| extend timestamp = TimeGenerated, AccountCustomEntity = PayloadRequestAccountId, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checks for Squid proxy events in Syslog associated with common mining pools .This query presumes the default Squid log format is being used.\n http://www.squid-cache.org/Doc/config/access_log/\n Topic: Syslog"}, {"role": "assistant", "content": "let DomainList = dynamic([\"monerohash.com\", \"do-dear.com\", \"xmrminerpro.com\", \"secumine.net\", \"xmrpool.com\", \"minexmr.org\", \"hashanywhere.com\", \"xmrget.com\",\n\"mininglottery.eu\", \"minergate.com\", \"moriaxmr.com\", \"multipooler.com\", \"moneropools.com\", \"xmrpool.eu\", \"coolmining.club\", \"supportxmr.com\",\n\"minexmr.com\", \"hashvault.pro\", \"xmrpool.net\", \"crypto-pool.fr\", \"xmr.pt\", \"miner.rocks\", \"walpool.com\", \"herominers.com\", \"gntl.co.uk\", \"semipool.com\",\n\"coinfoundry.org\", \"cryptoknight.cc\", \"fairhash.org\", \"baikalmine.com\", \"tubepool.xyz\", \"fairpool.xyz\", \"asiapool.io\", \"coinpoolit.webhop.me\", \"nanopool.org\",\n\"moneropool.com\", \"miner.center\", \"prohash.net\", \"poolto.be\", \"cryptoescrow.eu\", \"monerominers.net\", \"cryptonotepool.org\", \"extrmepool.org\", \"webcoin.me\",\n\"kippo.eu\", \"hashinvest.ws\", \"monero.farm\", \"supportxmr.com\", \"xmrpool.eu\", \"linux-repository-updates.com\", \"1gh.com\", \"dwarfpool.com\", \"hash-to-coins.com\",\n\"hashvault.pro\", \"pool-proxy.com\", \"hashfor.cash\", \"fairpool.cloud\", \"litecoinpool.org\", \"mineshaft.ml\", \"abcxyz.stream\", \"moneropool.ru\", \"cryptonotepool.org.uk\",\n\"extremepool.org\", \"extremehash.com\", \"hashinvest.net\", \"unipool.pro\", \"crypto-pools.org\", \"monero.net\", \"backup-pool.com\", \"mooo.com\", \"freeyy.me\", \"cryptonight.net\",\n\"shscrypto.net\"]);\nSyslog\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage),\n        SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage),\n        Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage),\n        HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n        User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n        RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n        Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n        Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n        contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where HTTP_Status_Code == '200'\n| where Domain contains \".\"\n| where Domain has_any (DomainList)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests to ip lookup resources.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "let dyndns = dynamic(['noip.com', 'dynu.com', 'dyn.com', 'dynv6.com']);\nGCPCloudDNS\n| where Query in~ (dyndns)\n| extend DNSCustomEntity = Query, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows SharePoint upload/download volume by IPs with high-risk ASNs. New IPs with volume spikes may be unauthorized and exfiltrating documents.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet BLOCK_THRESHOLD = 1.0;\n// Identify Autonomous System Numbers (ASNs) with a high block rate in Sign-in Logs\nlet HighBlockRateASNs = SigninLogs\n    | where TimeGenerated > lookback\n    | where isnotempty(AutonomousSystemNumber)\n    | summarize make_set(IPAddress), TotalIps = dcount(IPAddress), BlockedSignins = countif(ResultType == \"50053\"), TotalSignins = count() by AutonomousSystemNumber\n    | extend BlockRatio = 1.00 * BlockedSignins / TotalSignins\n    | where BlockRatio >= BLOCK_THRESHOLD\n    | distinct AutonomousSystemNumber;\n// Retrieve IP addresses from these high block rate ASNs\nlet ASNIPs = SigninLogs\n    | where TimeGenerated > lookback\n    | where AutonomousSystemNumber in (HighBlockRateASNs)\n    | distinct IPAddress, AutonomousSystemNumber;\n// OfficeActivity Query: File activities from identified ASN IPs\nlet OfficeEvents = OfficeActivity\n    | where TimeGenerated between(starttime .. endtime)\n    | where RecordType == \"SharePointFileOperation\"\n    | where Operation in (\"FileDownloaded\", \"FileUploaded\")\n    | where ClientIP in (ASNIPs)\n    | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), RecentFileActivities = count() by ClientIP\n    | extend IP_0_Address = ClientIP;\n// EnrichedMicrosoft365AuditLogs Query: File activities from identified ASN IPs\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated between (starttime .. endtime)\n    | where RecordType == \"SharePointFileOperation\"\n    | where Operation in (\"FileDownloaded\", \"FileUploaded\")\n    | where ClientIp in (ASNIPs)\n    | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), RecentFileActivities = count() by ClientIp\n    | extend IP_0_Address = ClientIp;\n// Combine Office and Enriched Logs\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize arg_min(StartTime, *) by ClientIP;\n// Final Output\nCombinedEvents\n    | project StartTime, EndTime, RecentFileActivities, IP_0_Address\n    | order by StartTime desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for unused VMs.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "let vm_p_off =\nVMwareESXi\n| where TimeGenerated > ago(30d)\n| where SyslogMessage has ('VmPoweredOffEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| summarize LastPowerOffTime=max(TimeGenerated) by DstHostname\n| where datetime_diff('day', datetime(now), LastPowerOffTime) >= 20; \nlet vm_p_on =\nVMwareESXi\n| where TimeGenerated > ago(30d)\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| summarize LastPowerOnTime=max(TimeGenerated) by DstHostname\n| where datetime_diff('day',datetime(now),LastPowerOnTime) >= 20;\nlet off_vms =\nvm_p_on\n| join (vm_p_off) on DstHostname\n| where LastPowerOffTime > LastPowerOnTime\n| summarize p_off_vm = makeset(DstHostname)\n| extend k=1;\nlet p_on_vms =\nVMwareESXi\n| where TimeGenerated between (ago(24h) .. datetime(now))\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| extend k=1\n| join (off_vms) on k\n| where p_off_vm !has DstHostname\n| summarize rec_p_on = makeset(DstHostname)\n| extend k=1;\nVMwareESXi\n| where TimeGenerated between (ago(24h) .. datetime(now))\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| extend k=1\n| join (p_on_vms) on k\n| where  rec_p_on !has DstHostname\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checks if Sonrai tickets have had a comment added. \nIt uses the action type to check if a ticket has had a comment added\n Topic: SonraiSecurity"}, {"role": "assistant", "content": "Sonrai_Tickets_CL\n| where action_d == 9\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies abnormal ports used in the organization based on learning period activity. This can indicate exfiltration attack or C2 control from machines in the organization by using new a port that has never been used.\n Topic: Azure Firewall"}, {"role": "assistant", "content": "let LearningPeriod = 7d; \nlet RunTime = 1h; \nlet StartLearningPeriod = LearningPeriod + RunTime; \nlet EndRunTime = RunTime - 1d; \nlet AllowedCommonPorts = dynamic([80, 443]); \nlet TrafficLogs = (union isfuzzy=true\n(AzureDiagnostics\n| where OperationName == \"AzureFirewallApplicationRuleLog\" or OperationName == \"AzureFirewallNetworkRuleLog\" \n| parse msg_s with * \"from \" SourceIp \":\" SourcePort:int \" to \" Fqdn \":\" DestinationPort:int \". \" * \"Action: \" Action \".\" *\n| where isnotempty(SourceIp)),\n(AZFWApplicationRule\n| where isnotempty(Fqdn) and isnotempty(SourceIp)),\n(AZFWNetworkRule\n| extend Fqdn = DestinationIp\n| where isnotempty(Fqdn) and isnotempty(SourceIp)));\nlet LearningSrcIp = (TrafficLogs \n| where TimeGenerated between (ago(StartLearningPeriod) .. ago(RunTime)) \n| distinct DestinationPort);\nlet AlertTimeSrcIpToPort = (TrafficLogs \n| where TimeGenerated between (ago(RunTime) .. ago(EndRunTime)) \n| distinct SourceIp, DestinationPort, Fqdn);\nAlertTimeSrcIpToPort \n| join kind=leftantisemi (LearningSrcIp) on DestinationPort \n| where DestinationPort !in (AllowedCommonPorts)\n| extend IPCustomEntity = SourceIp, URLCustomEntity = Fqdn\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for targets of network scans.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where TimeGenerated > ago(24h)\n| where EventOriginalType has_any ('Network Scan', 'TCP Scan', 'UDP Scan') or EventType has_any ('Network Scan', 'TCP Scan', 'UDP Scan')\n| project TimeGenerated, DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps any IP indicators of compromise (IOCs) from GreyNoise Threat Intelligence (TI), by searching for matches in DnsEvents.\n Topic: GreyNoiseThreatIntelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour for DNS events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | where SourceSystem == 'GreyNoise'\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\";\n// Perform a join between IP indicators and DNS events\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      DnsEvents\n      | where TimeGenerated >= ago(dt_lookBack)\n      | where SubType =~ \"LookupQuery\" and isnotempty(IPAddresses)\n      | mv-expand SingleIP = split(IPAddresses, \", \") to typeof(string)\n      | extend DNS_TimeGenerated = TimeGenerated\n  )\n  on $left.TI_ipEntity == $right.SingleIP\n  // Filter out DNS events that occurred after the expiration of the corresponding indicator\n  | where DNS_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and SingleIP, and keep the DNS event with the latest timestamp\n  | summarize DNS_TimeGenerated = arg_max(DNS_TimeGenerated, *) by IndicatorId, SingleIP\n  // Select the desired output fields\n  | project DNS_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, DomainName, ExpirationDateTime, ConfidenceScore,\n    TI_ipEntity, Computer, EventId, SubType, ClientIP, Name, IPAddresses, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n  | extend timestamp = DNS_TimeGenerated, HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies network connections whose ports are frequent targets of attacks and should not cross network boundaries or reach untrusted public networks.\nConsider updating the firewall policies to block the connections.\n Topic: PaloAlto-PAN-OS"}, {"role": "assistant", "content": "\nlet HighRiskPorts = datatable (Port:int, Protocol:string, RiskType:string, RiskDescription:string)[\n13,\"udp\",\"3rd Party Attacks\",\"Daytime protocol used in reflection/amplification attacks\",\n17,\"udp\",\"3rd Party Attacks\",\"QOTD protocol, reflection/amplification attacks\",\n19,\"udp\",\"3rd Party Attacks\",\"Chargen protocol, reflection/amplification attacks\",\n20,\"tcp\",\"Unencrypted\",\"Unencrypted FTP Traffic\",\n21,\"tcp\",\"Unencrypted\",\"Unencrypted FTP Traffic\",\n22,\"tcp\",\"Management\",\"SSH, brute force attacks common\",\n23,\"tcp\",\"Management\",\"Telnet, allows unauthenticated and/or unencrypted\",\n53,\"udp\",\"3rd Party Attacks\",\"DNS, reflection/amplification attacks\",\n69,\"udp\",\"Management\",\"TFTP, allows unauthenticated and/or unencrypted\",\n111,\"udp\",\"Management\",\"RPC, unencrypted authentication allowed\",\n111,\"tcp\",\"Management\",\"RPC, unencrypted authentication allowed\",\n119,\"tcp\",\"Unsecure\",\"NNTP, unencrypted authentication\",\n123,\"udp\",\"3rd Party Attacks\",\"Network Time Protocol, reflection/amplification attacks\",\n135,\"tcp\",\"Management\",\"End Point Mapper, multiple remote management srvcs\",\n135,\"udp\",\"Management\",\"End Point Mapper, multiple remote management srvcs\",\n137,\"tcp\",\"Hacker Recon\",\"Netbios Name Service\",\n137,\"udp\",\"Hacker Recon\",\"Netbios Name Service\",\n138,\"tcp\",\"Hacker Recon\",\"Netbios Datagram Service\",\n138,\"udp\",\"Hacker Recon\",\"Netbios Datagram Service\",\n139,\"tcp\",\"Hacker Recon\",\"Netbios Session Service\",\n161,\"tcp\",\"Unsecure/3rd Party Attacks\",\"SNMP, unsecure / no authentication UDP Reflection attacks\",\n161,\"udp\",\"Unsecure/3rd Party Attacks\",\"SNMP, unsecure / no authentication UDP Reflection attacks\",\n162,\"tcp\",\"Unsecure\",\"SNMP Trap, unsecure / no authentication\",\n162,\"udp\",\"Unsecure\",\"SNMP Trap, unsecure / no authentication\",\n389,\"tcp\",\"Hacker Recon/3rd Party Attacks\",\"LDAP/CLDAP\",\n389,\"udp\",\"Hacker Recon/3rd Party Attacks\",\"LDAP/CLDAP\",\n443,\"udp\",\"3rd Party Attacks\",\"UDP Reflection / Amplification attacks\",\n445,\"tcp\",\"Unsecure\",\"SMB - well known attack vector\",\n512,\"tcp\",\"Management\",\"Rexec on Linux, remote commands w/o encrypt auth\",\n514,\"tcp\",\"Management\",\"Remote Shell, remote commands w/o auth or encrypt\",\n593,\"tcp\",\"Management\",\"HTTP RPC EPMAP, unencrypted remote procedure call\",\n593,\"udp\",\"Management\",\"HTTP RPC EPMAP, unencrypted remote procedure call\",\n636,\"tcp\",\"Hacker Recon\",\"Lightweight Directory Access Protocol\",\n873,\"tcp\",\"Management\",\"Rsync, unencrypted file transfer\",\n1433,\"tcp\",\"Data Access/Mgmt\",\"MS SQL Management & Data Access\",\n1434,\"udp\",\"Data Access/Mgmt\",\"MS SQL Monitor Port\",\n1900,\"udp\",\"Hacker Recon/3rd Party Attacks\",\"Simple Service Discovery Protocol, unencrypted\",\n2049,\"tcp\",\"Unsecure\",\"Network File System\",\n2049,\"udp\",\"Unsecure\",\"Network File System\",\n2301,\"tcp\",\"Hacker Recon\",\"Compaq Management Service, no recent incidents\",\n2381,\"tcp\",\"Management\",\"Compaq Management Service, no recent incidents\",\n3268,\"tcp\",\"Hacker Recon\",\"Microsoft Global Catalog LDAP\",\n3306,\"tcp\",\"Data Access/Mgmt\",\"MySQL Database Management Port\",\n3389,\"tcp\",\"Management/3rd Party Attacks\",\"RDP, Common brute force attack port\",\n3389,\"udp\",\"Management/3rd Party Attacks\",\"RDP, Common brute force attack port\",\n4333,\"tcp\",\"Data Access/Mgmt\",\"MSql\",\n5353,\"udp\",\"3rd Party Attacks\",\"mDNS\",\n5432,\"tcp\",\"Data Access/Mgmt\",\"PostgresSQL Database Management\",\n5800,\"tcp\",\"Management\",\"VNC Remote Frame Buffer over HTTP\",\n5900,\"tcp\",\"Management\",\"VNC Remote Frame Buffer over HTTP\",\n5985,\"tcp\",\"Management\",\"Windows Powershell\",\n5986,\"tcp\",\"Management\",\"Windows Powershell\",\n6379,\"tcp\",\"Data Access/Mgmt\",\"Redis\",\n7000,\"tcp\",\"Data Access/Mgmt\",\"Cassandra\",\n7001,\"tcp\",\"Data Access/Mgmt\",\"Cassandra\",\n7199,\"tcp\",\"Data Access/Mgmt\",\"Cassandra\",\n9042,\"tcp\",\"Data Access/Mgmt\",\"Cassandra\",\n9160,\"tcp\",\"Data Access/Mgmt\",\"Cassandra\",\n9200,\"tcp\",\"Data Access/Mgmt\",\"Elastic Search\",\n9300,\"tcp\",\"Data Access/Mgmt\",\"Elastic Search\",\n9987,\"udp\",\"3rd Party Attack\",\"DSM/SCM Target Interface\",\n11211,\"udp\",\"Unencrypted\",\"Memcached\",\n16379,\"tcp\",\"Data Access/Mgmt\",\"Redis\",\n26379,\"tcp\",\"Data Access/Mgmt\",\"Redis\",\n27017,\"tcp\",\"Data Access/Mgmt\",\"MongoDB\",\n];\nHighRiskPorts\n| join kind=inner (\n  CommonSecurityLog\n  | where DeviceVendor == \"Palo Alto Networks\" and Activity == \"TRAFFIC\" and DeviceAction != \"deny\"\n  | where SentBytes > 0 and ReceivedBytes > 0\n  //Remove private IP communation from DestinationIP\n  | extend result = ipv4_is_private(DestinationIP) \n  | where result == 0\n  | summarize\n      Count = count(),\n      StartTime = min(TimeGenerated),\n      EndTime = max(TimeGenerated)\n      by \n      DeviceName,\n      SourceIP,\n      DestinationIP,\n      DestinationPort,\n      Protocol\n) on $left.Port == $right.DestinationPort and $left.Protocol == $right.Protocol\n| project-away Protocol1, Port\n| order by DeviceName asc, SourceIP asc, DestinationIP asc, DestinationPort asc\n| extend timestamp = StartTime, IPCustomEntity = SourceIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create Microsoft Sentinel Incident When Ven Changes Enforcement State from Full/Selective To Idle/Visibility state\n Topic: IllumioSaaS"}, {"role": "assistant", "content": "let enf_state = dynamic([\"full\", \"selective\"]);\nlet visibility_state = dynamic([\"visibility_only\", \"idle\"]);\nIllumio_Auditable_Events_CL\n| union IllumioSyslogAuditEvents\n| extend temp_resource_changes = parse_json(resource_changes)[0]\n| where event_type == 'workloads.update' \n| extend old_mode = temp_resource_changes.changes.enforcement_mode.before,\n        new_mode = temp_resource_changes.changes.enforcement_mode.after,\n        workload_href = temp_resource_changes.resource.workload.href,\n        workload_name = temp_resource_changes.resource.workload.hostname,\n        ipaddress = action.src_ip\n| where new_mode in (visibility_state) and old_mode in (enf_state)\n| project-away temp_*\n| project old_mode, new_mode, workload_href, workload_name, TimeGenerated, created_by, ipaddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which highly sensitive governance information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let highRisk = 3;\nlet governance = 'Governance Information';\nCognniIncidents_CL \n| where Severity == highRisk\n| where informationType_s == governance\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "By default guests have capability to invite more external guest users, guests also can do suspicious Microsoft Entra ID enumeration. This detection look at guest users, who have been invited or have invited recently, who also are logging via various PowerShell CLI.\nRef : https://danielchronlund.com/2021/11/18/scary-azure-ad-tenant-enumeration-using-regular-b2b-guest-accounts/\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let queryfrequency = 1h;\nlet queryperiod = 1d;\nAuditLogs\n| where TimeGenerated > ago(queryperiod)\n| where OperationName in (\"Invite external user\", \"Bulk invite users - started (bulk)\", \"Invite external user with reset invitation status\")\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend InitiatedBy = iff(isnotempty(InitiatingUserPrincipalName), InitiatingUserPrincipalName, InitiatingAppName)\n// Uncomment the following line to filter events where the inviting user was a guest user\n//| where InitiatedBy has_any (\"live.com#\", \"#EXT#\")\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend InvitedUser = tostring(TargetResource.userPrincipalName)\n  )\n| mv-expand UserToCompare = pack_array(InitiatedBy, InvitedUser) to typeof(string)\n| where UserToCompare has_any (\"live.com#\", \"#EXT#\")\n| extend\n    parsedUser = replace_string(tolower(iff(UserToCompare startswith \"live.com#\", tostring(split(UserToCompare, \"#\")[1]), tostring(split(UserToCompare, \"#EXT#\")[0]))), \"@\", \"_\"),\n    InvitationTime = TimeGenerated\n| join (\n    (union isfuzzy=true SigninLogs, AADNonInteractiveUserSignInLogs)\n    | where TimeGenerated > ago(queryfrequency)\n    | where UserType != \"Member\"\n    | where AppId has_any                       // This web may contain a list of these apps: https://msshells.net/\n        (\"1b730954-1685-4b74-9bfd-dac224a7b894\",// Azure Active Directory PowerShell\n         \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\",// Microsoft Azure CLI\n         \"1950a258-227b-4e31-a9cf-717495945fc2\",// Microsoft Azure PowerShell\n         \"a0c73c16-a7e3-4564-9a95-2bdf47383716\",// Microsoft Exchange Online Remote PowerShell\n         \"fb78d390-0c51-40cd-8e17-fdbfab77341b\",// Microsoft Exchange REST API Based Powershell\n         \"d1ddf0e4-d672-4dae-b554-9d5bdfd93547\",// Microsoft Intune PowerShell\n         \"9bc3ab49-b65d-410a-85ad-de819febfddc\",// Microsoft SharePoint Online Management Shell\n         \"12128f48-ec9e-42f0-b203-ea49fb6af367\",// MS Teams Powershell Cmdlets\n         \"23d8f6bd-1eb0-4cc2-a08c-7bf525c67bcd\",// Power BI PowerShell\n         \"31359c7f-bd7e-475c-86db-fdb8c937548e\",// PnP Management Shell\n         \"90f610bf-206d-4950-b61d-37fa6fd1b224\",// Aadrm Admin Powershell\n         \"14d82eec-204b-4c2f-b7e8-296a70dab67e\",// Microsoft Graph PowerShell\n         \"9cee029c-6210-4654-90bb-17e6e9d36617\" // Power Platform CLI - pac\"\n        )\n    | summarize arg_min(TimeGenerated, *) by UserPrincipalName\n    | extend\n        parsedUser = replace_string(UserPrincipalName, \"@\", \"_\"),\n        SigninTime = TimeGenerated\n    )\n    on parsedUser\n| project InvitationTime, InitiatedBy, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, OperationName, InvitedUser, SigninTime, SigninCategory = Category1, SigninUserPrincipalName = UserPrincipalName, AppDisplayName, ResourceDisplayName, UserAgent, InvitationAdditionalDetails = AdditionalDetails, InvitationTargetResources = TargetResources\n| extend InvitedUserName = tostring(split(InvitedUser,'@',0)[0]), InvitedUserUPNSuffix = tostring(split(InvitedUser,'@',1)[0]), \n         InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple failed logins by same user.\n Topic: Claroty"}, {"role": "assistant", "content": "let threshold = 5;\nClarotyEvent\n| where EventType has 'Login to SRA'\n| where EventType !has 'succeeded'\n| extend SrcUsername = extract(@'User\\s(.*?)\\sfailed', 1, EventMessage)\n| summarize count() by SrcUsername, bin(TimeGenerated, 5m)\n| where count_ > threshold\n| extend AccountCustomEntity = SrcUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches opened alerts.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where TimeGenerated > ago(24h)\n| where Reason =~ 'NEW_ALERT'\n| where Status =~ 'open'\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection looks for new onmicrosoft domains being added to a tenant. \nAn attacker who compromises a tenant may register a new onmicrosoft domain in order to masquerade as a service provider for launching phishing campaigns.\nDomain additions are not a common occurrence and users should validate that the domain was added by a legitimate user, with a legitimate purpose.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where AADOperationType == \"Add\"\n| where Result == \"success\"\n| where OperationName in (\"Add verified domain\", \"Add unverified domain\")\n| extend InitiatedBy = parse_json(InitiatedBy)\n| extend InitiatingUser = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIp = tostring(InitiatedBy.user.ipAddress)\n| extend InitiatingApp = tostring(InitiatedBy.app.displayName)\n| extend InitiatingSPID = tostring(InitiatedBy.app.servicePrincipalId)\n| extend DomainAdded = tostring(TargetResources[0].displayName)\n| where DomainAdded has \"onmicrosoft\"\n| extend ActionInitiatedBy = case(isnotempty(InitiatingUser), InitiatingUser, strcat(InitiatingApp, \" - \", InitiatingSPID))\n| extend UserName = split(InitiatingUser, \"@\")[0]\n| extend UPNSuffix = split(InitiatingUser, \"@\")[1]\n| project-reorder TimeGenerated, OperationName, DomainAdded, ActionInitiatedBy, InitiatingIp\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects mails with suspicious links.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "let bl_cat = dynamic(['Adult', 'Hacking', 'Cheating and Plagiarism', 'Child Abuse Content', 'Dating', 'Illegal Activities', 'Pornography']);\nCiscoSEGEvent\n| where NetworkDirection =~ 'Incoming'\n| where tostring(AdditionalFields) has 'ESAURLDetails'\n| extend link_cat = extract(@\"'Category': '(.*?)'\", 1, tostring(AdditionalFields))\n| where link_cat in~ (bl_cat)\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection focuses on identifying potential cross-cloud brute force / Password Spray attempts involving Azure and AWS platforms. It monitors sign-in activities within the Azure Portal and AWS ConsoleLogins where brute force attempts are successful on both platforms in a synchronized manner.\n Topic: Multi Cloud Attack Coverage Essentials - Resource Abuse"}, {"role": "assistant", "content": "// Materialize a table named \"Azure_Bruforce\" containing Azure Portal sign-in logs within the last 1 day\nlet Azure_Bruforce =  materialize (\n    SigninLogs\n// Filter sign-in logs related to the Azure Portal\n      | where AppDisplayName == \"Azure Portal\"\n// Exclude entries with empty OriginalRequestId\n    | where isnotempty(OriginalRequestId)\n// Summarize various counts and sets based on brute force criteria\n    | summarize \n      AzureSuccessfulEvent = countif(ResultType == 0), \n      AzureFailedEvent = countif(ResultType != 0), \n      totalAzureLoginEventId = dcount(OriginalRequestId), \n      AzureFailedEventsCount = dcountif(OriginalRequestId, ResultType != 0), \n      AzureSuccessfuleventsCount = dcountif(OriginalRequestId, ResultType == 0),\n      AzureSetOfFailedevents = makeset(iff(ResultType != 0, OriginalRequestId, \"\"), 5), \n      AzureSetOfSuccessfulEvents = makeset(iff(ResultType == 0, OriginalRequestId, \"\"), 5) \n      by \n      IPAddress, \n      UserPrincipalName, \n      bin(TimeGenerated, 1min), \n      UserAgent,\n      ConditionalAccessStatus,\n      OperationName,\n      RiskDetail,\n      AuthenticationRequirement,\n      ClientAppUsed\n// Extracting the name and UPN suffix from UserPrincipalName\n    | extend\n        Name = tostring(split(UserPrincipalName, '@')[0]),\n        UPNSuffix = tostring(split(UserPrincipalName, '@')[1]));\n// Materialize a table named \"AWS_Bruforce\" containing AWS CloudTrail events related to ConsoleLogins within the last 1 day\nlet AWS_Bruforce = materialize (\n    AWSCloudTrail \n// Filter CloudTrail events related to ConsoleLogin\n    | where EventName == \"ConsoleLogin\" \n// Extract ActionType from ResponseElements JSON\n    | extend ActionType = tostring(parse_json(ResponseElements).ConsoleLogin)  \n// Summarize various counts and sets based on  brute force criteria \n    | summarize \n        AWSSuccessful=countif(ActionType == \"Success\"), \n        AWSFailed = countif(ActionType == \"Failure\"), \n        totalAwsEventId= dcount(AwsEventId), \n        AWSFailedEventsCount = dcountif(AwsEventId, ActionType == \"Failure\"), \n        AWSSuccessfuleventsCount = dcountif(AwsEventId, ActionType == \"Success\"), \n        AWSFailedevents = makeset(iff(ActionType == \"Failure\", AwsEventId, \"\"), 5), \n        AWSSuccessfulEvents = makeset(iff(ActionType == \"Success\", AwsEventId, \"\"), 5)  \n// Grouping by various attributes\n        by \n        SourceIpAddress, \n        UserIdentityUserName,\n        bin(TimeGenerated, 1min), \n        UserAgent );\n// Joining the Azure_Bruforce and AWS_Bruforce tables on matching IP addresses and UserAgents\nAzure_Bruforce\n| join kind=inner AWS_Bruforce on $left.IPAddress == $right.SourceIpAddress and $left.UserAgent == $right.UserAgent\n// Filtering based on conditions for failed and successful events\n| where (AWSFailedEventsCount >= 4 and AzureFailedEventsCount >= 5) and ((AzureSuccessfuleventsCount >= 1 and AzureFailedEvent > AzureSuccessfulEvent) or (AWSSuccessfuleventsCount >= 1 and AWSFailedEventsCount > AWSSuccessfuleventsCount))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query looks for Command Lines that contain non ASCII characaters. Insertion of these characters could be used to evade detections.\n Command lines should be reviewed to determine whether inclusion of non ASCII characters was deliberate or not\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "let lolbins = dynamic([\"cmd.exe\", \"powershell.exe\", \"find.exe\", \"PowerShell_ISE.exe\", \"wmic.exe\", \"winrs.exe\", \"winrm.cmd\", \"whoami.exe\", \"wevtutil.exe\", \"vssadmin.exe\", \"vbc.exe\", \"tasklist.exe\", \"takeown.exe\", \"taskkill.exe\", \"systeminfo.exe\", \"schtasks.exe\", \"sc.exe\", \"route.exe\", \"robocopy.cmd\", \"regsrv32.exe\", \"ping.exe\", \"nslookup.exe\", \"netstat.exe\", \"netsh.exe\", \"net.exe\", \"msiexec.exe\", \"mpcmdrun.exe\", \"jsc.exe\", \"ipconfig.exe\", \"icals.exe\", \"forfiles.exe\", \"fltmc.exe\", \"findstr.exe\", \"curl.exe\", \"csc.exe\", \"cmstp.exe\", \"cmdkey.exe\", \"certutils.exe\", \"cacls.exe\", \"bitsadmin.exe\", \"at.exe\", \"arp.exe\"]);\n(union isfuzzy=true\n(SecurityEvent\n| where Process in~ (lolbins)\n| where isnotempty(CommandLine)\n| extend CommandLine = translate('\u2013\u201d\u201c', '-\"\"', CommandLine)\n| extend ASCII = isascii(CommandLine)\n| where ASCII == false),\n(DeviceProcessEvents\n| where isnotempty(InitiatingProcessCommandLine)\n| extend CommandLine = translate('\u2013\u201d\u201c', '-\"\"', InitiatingProcessCommandLine)\n| extend ASCII = isascii(CommandLine)\n| where ASCII == false\n| extend Account = AccountName, Computer = DeviceName),\n(imProcessCreate\n| where isnotempty(ActingProcessCommandLine)\n| extend CommandLine = translate('\u2013\u201d\u201c', '-\"\"', ActingProcessCommandLine)\n| extend ASCII = isascii(CommandLine)\n| where ASCII == false\n| extend Account = ActorUsername, Computer = DvcHostname))\n| summarize Computers=make_set(Computer, 1000), Users=make_set(Account, 1000), NumberOfTimesRun = dcount(TimeGenerated), FirstSeen=min(TimeGenerated), LastSeen=max(TimeGenerated) by Process, CommandLine\n| extend NumberOfComputers = array_length(Computers), NumberOfUsers = array_length(Users)\n| project-reorder FirstSeen, LastSeen, CommandLine, Process, NumberOfComputers, NumberOfTimesRun, Computers, Users\n| extend timestamp = FirstSeen\n| extend Process_0_CommandLine = CommandLine\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Results using a dork on google was found\n Topic: Flare"}, {"role": "assistant", "content": "Firework_CL\n| where source_s contains \"google_search\" and (risk_score_d == \"3\" or risk_score_d == \"4\" or risk_score_d == \"5\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query detects when a file is created in the Startup folder. This is a common technique used by adversaries to maintain persistence on a system.\n Topic: Malware Protection Essentials"}, {"role": "assistant", "content": "// List of startup folders to monitor for Windows and Linux\nlet startupFolderList = dynamic([\n    '\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\',\n    '\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\StartUp\\\\',\n    '/etc/init.d/',\n    '/etc/rc.d/',\n    '/etc/cron.d/'\n  ]);\n_ASim_FileEvent\n| where EventType == 'FileCreated'\n| where FilePath has_any (startupFolderList)\n| project TimeGenerated, DvcHostname, DvcDomain, User, ActingProcessId, ActingProcessName, CommandLine, FileName, FilePath, Hash, HashType\n| extend Username = iff(User contains '@', tostring(split(User, '@')[0]), User)\n| extend UPNSuffix = iff(User contains '@', tostring(split(User, '@')[1]), '')\n| extend Username = iff(User contains '\\\\', tostring(split(User, '\\\\')[1]), Username)\n| extend NTDomain = iff(User contains '\\\\', tostring(split(User, '\\\\')[0]), '')\n| extend Host_0_HostName = DvcHostname\n| extend Host_0_DnsDomain = DvcDomain\n| extend Host_0_NTDomain = NTDomain\n| extend Account_0_Name = Username\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend File_0_Name = FileName\n| extend File_0_Directory = FilePath\n| extend FileHash_0_Algorithm = HashType\n| extend FileHash_0_Value = Hash\n| extend Process_0_ProcessId = ActingProcessId\n| extend Process_0_CommandLine = CommandLine\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query looks for hosts that have attempted to interact with the Discord CDN. This activity is not normally invoked from the command line and could indicate C2, exfiltration, or malware delivery activity.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID == 4688\n| where Process has_any (\"powershell.exe\", \"powershell_ise.exe\", \"cmd.exe\") or CommandLine has \"powershell\"\n| where CommandLine has_any (\"cdn.discordapp.com\", \"moc.ppadrocsid.ndc\")\n| project-reorder TimeGenerated, Computer, Account, Process, CommandLine\n| extend NTDomain = tostring(split(Account,'\\\\',0)[0]), Name = tostring(split(Account,'\\\\',1)[0])\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query checks for admin permissions granted to users/groups, often used by adversaries for access and privilege elevation.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let Events = dynamic([\"group.privilege.grant\", \"user.account.privilege.grant\"]);\nOktaSSO\n| where eventType_s in (Events)\n| where outcome_result_s =~ \"SUCCESS\"\n| extend Target=parsejson(target_s)\n| mvexpand bagexpansion=array (Target)\n| evaluate bag_unpack(Target)\n| extend Target_Id = tostring(column_ifexists('id', \"\")), Target_type = tostring(column_ifexists('type', \"\")), Target_user = tostring(column_ifexists('displayName', \"\")), Target_alternateId = tostring(column_ifexists('alternateId', \"\"))\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by actor_id_s, actor_type_s, actor_alternateId_s, actor_displayName_s, Target_alternateId, Target_Id, Target_type, Target_user,column_ifexists('debugContext_debugData_privilegeGranted_s', \"\"),domain_s,\n authenticationContext_externalSessionId_s, eventType_s, displayMessage_s, transaction_id_s, uuid_g\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows new user accounts.\n Topic: Box"}, {"role": "assistant", "content": "BoxEvents\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'NEW_USER'\n| project TimeGenerated, SourceName, SourceLogin\n| extend AccountCustomEntity = SourceLogin\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Finds PowerShell execution events that could involve a download\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| project  TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName,        AccountDomain=SubjectDomainName,\n  FileName=tostring(split(NewProcessName, '\\\\')[-1]),\nProcessCommandLine = CommandLine, \nInitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\";\nprocessEvents};\nProcessCreationEvents\n| where FileName in~ (\"powershell.exe\", \"powershell_ise.exe\",\"pwsh.exe\")\n| where ProcessCommandLine has \"Net.WebClient\"\n   or ProcessCommandLine has \"DownloadFile\"\n   or ProcessCommandLine has \"Invoke-WebRequest\"\n   or ProcessCommandLine has \"Invoke-Shellcode\"\n   or ProcessCommandLine contains \"http:\"\n| project TimeGenerated, ComputerName, AccountName, InitiatingProcessFileName, FileName, ProcessCommandLine\n| top 100 by TimeGenerated\n| extend HostName = tostring(split(ComputerName, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(ComputerName, '.'), 1, -1), '.'))\n| extend Account_0_Name = AccountName\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Meant to detect process creations containing names consistent with the schema used by Metasploit or Impackets PsExec tool. Metasploit and Impackets PsExec tooling is used by malicious actors for lateral movement & performing actions on remote systems.\n Topic: Cyborg Security HUNTER"}, {"role": "assistant", "content": "SecurityEvent\n| where ParentProcessName has \"services.exe\"\n| where NewProcessName matches regex \"C:\\\\\\\\Windows\\\\\\\\[a-zA-Z]{8}.exe\"\n| where EventID == \"4688\"\n| project EventID, NewProcessName, CommandLine, Computer, ParentProcessName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query highlights uncommon, rare process runs, to flag new potentially unauthorized binaries in stable environments for potential attack detection.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n// filter out common randomly named files related to MSI installers and browsers\n| where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{3}\\.tmp\")\n| where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{4}\\.tmp\")\n| where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{3}\\.tmp\")\n| where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{4}\\.tmp\")\n| project TimeGenerated, ComputerName=Computer, AccountName=SubjectUserName, AccountDomain=SubjectDomainName,\nFileName=tostring(split(NewProcessName, '\\\\')[-1]), ProcessCommandLine = CommandLine, \nInitiatingProcessFileName=ParentProcessName, InitiatingProcessCommandLine=\"\", InitiatingProcessParentFileName=\"\";\nprocessEvents;\n};\nlet normalizedProcesses = ProcessCreationEvents \n// normalize guids\n| project TimeGenerated, FileName = replace(\"[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}\", \"<guid>\", FileName)\n// normalize digits away\n| project TimeGenerated, FileName=replace(@'\\d', 'n', FileName); \nlet freqs = normalizedProcesses\n| summarize frequency=count() by FileName\n| join kind= leftouter (\nnormalizedProcesses\n| summarize Since=min(TimeGenerated), LastSeen=max(TimeGenerated) by FileName\n) on FileName;\nfreqs \n| where frequency <= toscalar( freqs | serialize | project frequency | summarize percentiles(frequency, 5))\n| order by frequency asc\n| project FileName, frequency, Since, LastSeen \n// restrict results to unusual processes seen in last day \n| where LastSeen >= ago(1d)\n| extend timestamp = LastSeen \n| extend File_0_Name = FileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Hunts for commonly utilized Microsoft programs (Word, Excel, Publisher, etc) and other programs known to malicious launch powershell or cmd, such as Internet Explorer, Chrome and Firefox.\n Topic: Cyborg Security HUNTER"}, {"role": "assistant", "content": "let StartDate = ago(1d);\nSecurityEvent\n| where TimeGenerated > StartDate\n| where NewProcessName has_any (\n  \"winword.exe\",\n  \"EXCEL.EXE\",\n  \"OUTLOOK.EXE\",\n  \"POWERPNT.EXE\",\n  \"visio.exe\",\n  \"mspub.exe\",\n  \"Acrobat.exe\",\n  \"Acrord32.exe\",\n  \"chrome.exe\",\n  \"iexplore.exe\",\n  \"opera.exe\",\n  \"firefox.exe\",\n  \"mshta.exe\",\n  \"zoom.exe\",\n  \"utilman.exe\"\n)\n| where NewProcessName has_any (\n  \"cmd.exe\",\n  \"powershell.exe\"\n)\n| project TimeGenerated, Computer, tostring(EventID), ParentProcessName, NewProcessName, CommandLine, SubjectUserName, SourceComputerId, processID=tolong(NewProcessId), parentProcessID=tolong(ProcessId), EventData| order by TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a user creates an Azure CloudShell for the first time.\nMonitor this activity to ensure only the expected users are using CloudShell.\n Topic: Azure Activity"}, {"role": "assistant", "content": "let match_window = 3m;\nAzureActivity\n| where ResourceGroup has \"cloud-shell\"\n| where (OperationNameValue =~ \"Microsoft.Storage/storageAccounts/listKeys/action\")\n| where ActivityStatusValue =~ \"Success\"\n| extend TimeKey = bin(TimeGenerated, match_window), AzureIP = CallerIpAddress\n| join kind = inner\n(AzureActivity\n| where ResourceGroup has \"cloud-shell\"\n| where (OperationNameValue =~ \"Microsoft.Storage/storageAccounts/write\")\n| extend TimeKey = bin(TimeGenerated, match_window), UserIP = CallerIpAddress\n) on Caller, TimeKey\n| summarize count() by TimeKey, Caller, ResourceGroup, SubscriptionId, TenantId, AzureIP, UserIP, HTTPRequest, Type, Properties, CategoryValue, OperationList = strcat(OperationNameValue, ' , ', OperationNameValue1)\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies new scheduled task created, to run executables from uncommon location like temp folders. Malware often creates scheduled tasks to execute malicious code and maintain persistence on a system.\n Topic: Malware Protection Essentials"}, {"role": "assistant", "content": "// List of file locations to monitor\nlet fileLocations = dynamic([\n    '\\\\Windows\\\\Temp\\\\',\n    '\\\\AppData\\\\Local\\\\Temp\\\\',\n    '\\\\Recycle Bin\\\\'\n    ]);\n_ASim_ProcessEvent\n| where EventType == 'ProcessCreated'\n| where TargetProcessName has 'schtasks.exe' and TargetProcessCommandLine has_any (fileLocations)\n| project\n    TimeGenerated,\n    DvcHostname,\n    DvcIpAddr,\n    DvcDomain,\n    TargetUsername,\n    TargetUsernameType,\n    TargetProcessName,\n    TargetProcessId,\n    CommandLine\n| extend Username = iff(tostring(TargetUsernameType) == 'Windows', tostring(split(TargetUsername, '\\\\')[1]), TargetUsername)\n| extend NTDomain = iff(tostring(TargetUsernameType) == 'Windows', tostring(split(TargetUsername, '\\\\')[0]), TargetUsername)\n| extend Username = iff(tostring(TargetUsernameType) == 'UPN', tostring(split(TargetUsername, '@')[0]), Username)\n| extend UPNSuffix = iff(tostring(TargetUsernameType) == 'UPN', tostring(split(TargetUsername, '@')[1]), '')\n| extend Host_0_HostName = DvcHostname\n| extend Host_0_DnsDomain = DvcDomain\n| extend Host_0_NTDomain = NTDomain\n| extend IP_0_Address = DvcIpAddr\n| extend Account_0_Name = Username\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend Process_0_ProcessId = TargetProcessId\n| extend Process_0_CommandLine = CommandLine\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects new service account key creation.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where PayloadMethodname =~ 'google.iam.admin.v1.CreateServiceAccountKey'\n| extend result = parse_json(todynamic(PayloadAuthorizationinfo))[0]['granted']\n| where result =~ 'true'\n| extend service_account = extract(@'serviceAccounts\\/(.*?)@', 1, PayloadResponseName)\n| project-away result\n  | extend AccountName = tostring(split(service_account, \"@\")[0]), AccountUPNSuffix = tostring(split(service_account, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This content is utilized to identify instances of successful login by risky users, who have been observed engaging in potentially suspicious network activity on non-Microsoft network devices.\n Topic: Detections"}, {"role": "assistant", "content": "SigninLogs\n//Find risky Signin\n| where RiskState == \"atRisk\" and ResultType == 0\n| extend Signin_Time = TimeGenerated\n| summarize\n    AppDisplayName=make_set(AppDisplayName),\n    ClientAppUsed=make_set(ClientAppUsed),\n    UserAgent=make_set(UserAgent),\n    CorrelationId=make_set(CorrelationId),\n    Signin_Time= min(Signin_Time),\n    RiskEventTypes=make_set(RiskEventTypes)\n    by\n    ConditionalAccessStatus,\n    IPAddress,\n    IsRisky,\n    ResourceDisplayName,\n    RiskDetail,\n    ResultType,\n    RiskLevelAggregated,\n    RiskLevelDuringSignIn,\n    RiskState,\n    UserPrincipalName=tostring(tolower(UserPrincipalName)),\n    SourceSystem\n| join kind=inner (\n    CommonSecurityLog\n    | where DeviceVendor has_any  (\"Palo Alto Networks\", \"Fortinet\", \"Check Point\", \"Zscaler\")\n    | where DeviceProduct startswith \"FortiGate\" or DeviceProduct startswith  \"PAN\" or DeviceProduct startswith  \"VPN\" or DeviceProduct startswith \"FireWall\" or DeviceProduct startswith  \"NSSWeblog\" or DeviceProduct startswith \"URL\"\n    | where DeviceAction != \"Block\"\n    | where isnotempty(RequestURL)\n    | where isnotempty(SourceUserName)\n    | extend SourceUserName = tolower(SourceUserName)\n    | summarize\n        min(TimeGenerated),\n        max(TimeGenerated),\n        Activity=make_set(Activity)\n        by DestinationHostName, DestinationIP, RequestURL, SourceUserName=tostring(tolower(SourceUserName)),DeviceVendor,DeviceProduct\n    | extend 3p_observed_Time= min_TimeGenerated,Name = tostring(split(SourceUserName,\"@\")[0]),UPNSuffix =tostring(split(SourceUserName,\"@\")[1]))\n    on $left.IPAddress == $right.DestinationIP and $left.UserPrincipalName == $right.SourceUserName\n| extend Timediff = datetime_diff('day', 3p_observed_Time, Signin_Time)\n| where Timediff <= 1 and Timediff >= 0\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for emails with high score of phish filter classifier value.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let scoreThreshold = 80;\nProofpointPOD\n| where EventType == 'message'\n| where NetworkDirection == 'inbound'\n| where todynamic(FilterModulesSpamScoresClassifiers).phish > scoreThreshold"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "42Crunch API protection against invalid host access\n Topic: 42Crunch API Protection"}, {"role": "assistant", "content": "apifirewall_log_1_CL \n| where TimeGenerated >= ago(5m) \n| where Error_Step_s has \"hostpath_mapping\" \n| project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Response_Header_s, Request_Header_s, Errors_s, Type, UUID_g \n| sort by TimeGenerated desc \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule detects process creation events with base64 encoded command line arguments. This could be an indication of a malicious process being executed.\n Topic: Malware Protection Essentials"}, {"role": "assistant", "content": "_ASim_ProcessEvent\n| where EventType == 'ProcessCreated'\n| extend CommandLineArgs = strcat_array(array_slice(split(CommandLine, \" \"), 1, -1), \" \")\n| where strlen(CommandLineArgs) > 0\n| where CommandLineArgs contains \"base64\"\n| project\nTimeGenerated,\nDvcHostname,\nDvcIpAddr,\nDvcDomain,\nTargetUsername,\nTargetUsernameType,\nTargetProcessName,\nTargetProcessId,\nCommandLine\n| extend Username = iff(tostring(TargetUsernameType) == 'Windows', tostring(split(TargetUsername, '\\\\')[1]), TargetUsername)\n| extend NTDomain = iff(tostring(TargetUsernameType) == 'Windows', tostring(split(TargetUsername, '\\\\')[0]), TargetUsername)\n| extend Username = iff(tostring(TargetUsernameType) == 'UPN', tostring(split(TargetUsername, '@')[0]), Username)\n| extend UPNSuffix = iff(tostring(TargetUsernameType) == 'UPN', tostring(split(TargetUsername, '@')[1]), '')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Exposed User List\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"high\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"Exposed User List\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect activities when a user was blocked on the repository. This query runs every day and its severity is Medium.\n Topic: GitHub"}, {"role": "assistant", "content": "GitHubAuditData\n| where Action == \"org.block_user\"\n| project Actor, Action \n| extend Name = iif(Actor contains \"@\", split(Actor, \"@\")[0], Actor)\n| extend UPNSuffix = iif(Actor contains \"@\", split(Actor, \"@\")[1], \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "TLS Certificate Hostname Mismatch\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"medium\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"TLS Certificate Hostname Mismatch\" "}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for unexpected TLDs.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "GCPCloudDNS\n| where TimeGenerated > ago(24h)\n| extend tld = extract(@'.*\\.(\\w+)\\.$', 1, Query)\n| where strlen(tld) > 4\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting queries identify an unusual increase of repo deletion activities adversaries may want to disrupt availability or compromise integrity by deleting business data.\n Topic: GitLab"}, {"role": "assistant", "content": "let LearningPeriod = 7d;\nlet BinTime = 1h;\nlet RunTime = 1h;\nlet StartTime = 1h;\nlet NumberOfStds = 3;\nlet MinThreshold = 10.0;\nlet EndRunTime = StartTime - RunTime;\nlet EndLearningTime = StartTime + LearningPeriod;\nlet GitLabRepositoryDestroyEvents = (GitLabAudit\n| where RemoveAction == \"project\" or RemoveAction == \"repository\");\nGitLabRepositoryDestroyEvents\n| where TimeGenerated between (ago(EndLearningTime) .. ago(StartTime))\n| summarize count() by bin(TimeGenerated, BinTime)\n| summarize AvgInLearning = avg(count_), StdInLearning = stdev(count_)\n| extend LearningThreshold = max_of(AvgInLearning + StdInLearning * NumberOfStds, MinThreshold)\n| extend Dummy = 1\n| join kind=innerunique (GitLabRepositoryDestroyEvents\n| where TimeGenerated between (ago(StartTime) .. ago(EndRunTime))\n| summarize CountInRunTime = count() by bin(TimeGenerated, BinTime)\n| extend Dummy = 1) on Dummy\n| project-away Dummy\n| where CountInRunTime > LearningThreshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "New Exposed Email Address with severity High found\n Topic: CTM360"}, {"role": "assistant", "content": "CBSLog_Azure_1_CL | where severity_s == \"High\" | where type_s == \"Exposed Email Address\" | where status_s != \"Closed\" or status_s != \"Resolved\" | where remarks_s == \"New Exposed Email Address with severity High found\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in SecurityEvent table from any Email IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$';\nThreatIntelligenceIndicator\n//Filtering the table for Email related IOCs\n| where isnotempty(EmailSenderAddress)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n(union isfuzzy=true\n(SecurityEvent\n| where TimeGenerated >= ago(dt_lookBack) and isnotempty(TargetUserName)\n//Normalizing the column to lower case for exact match with EmailSenderAddress column\n| extend TargetUserName = tolower(TargetUserName)\n// renaming timestamp column so it is clear the log this came from SecurityEvent table\n| extend SecurityEvent_TimeGenerated = TimeGenerated\n),\n(WindowsEvent\n| where TimeGenerated >= ago(dt_lookBack)\n| extend TargetUserName = tostring(EventData.TargetUserName)\n| where isnotempty(TargetUserName)\n//Normalizing the column to lower case for exact match with EmailSenderAddress column\n| extend TargetUserName = tolower(TargetUserName)\n// renaming timestamp column so it is clear the log this came from SecurityEvent table\n| extend SecurityEvent_TimeGenerated = TimeGenerated\n))\n)\non $left.EmailSenderAddress == $right.TargetUserName\n| where SecurityEvent_TimeGenerated < ExpirationDateTime\n| summarize SecurityEvent_TimeGenerated = arg_max(SecurityEvent_TimeGenerated, *) by IndicatorId, TargetUserName\n| project SecurityEvent_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nEmailSenderName, EmailRecipient, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, Computer, EventID, TargetUserName, Activity, IpAddress, AccountType,\nLogonTypeName, LogonProcessName, Status, SubStatus\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend timestamp = SecurityEvent_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches suspicious files events.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where TimeGenerated > ago(24h)\n| where EventMessage has \"Suspicious File\"\n| extend AccountCustomEntity = DstUserName, FileCustomEntity = FileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "CommonSecurityLog (CEF) MalwareC2/MalwareC2DGA match found in your Infoblox TIDE Threat Intelligence. Customize query count, scheduling, responses and more. Modify data sources, types and threat properties as desired.\n Topic: Infoblox Cloud Data Connector"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet TI = ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()  \n| where Description has_cs \"Infoblox\"\n| where Description has_cs \"MalwareC2\"\n| where isnotempty(DomainName)\n;\nlet Data = CommonSecurityLog\n| extend HitTime = TimeGenerated\n| where TimeGenerated >= ago(dt_lookBack)\n| where isnotempty(DestinationDnsDomain)\n//Remove trailing period at end of domain\n| extend DestinationDnsDomain = trim_end(@\"\\.$\", DestinationDnsDomain)\n;\nTI | join kind=innerunique Data on $left.DomainName == $right.DestinationDnsDomain\n| where HitTime >= TimeGenerated and HitTime < ExpirationDateTime\n| project LatestIndicatorTime, HitTime, DeviceEventClassID, DestinationDnsDomain, DeviceAction, SourceIP, DeviceName, SourceMACAddress, SourceUserName, AdditionalExtensions, \nAdditionalInformation, Description, ThreatType, TrafficLightProtocolLevel, Type, ConfidenceScore, ExpirationDateTime, SourceSystem, Action, IndicatorId, ExternalIndicatorId, Tags\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The VMware SD-WAN Edge Management Plane reported a successful IDS/IPS signature update. New signatures might impact Data Plane traffic, therefore an audit event is generated. Topic: VMware SD-WAN and SASE"}, {"role": "assistant", "content": "VMware_VECO_EventLogs_CL\n| where event == \"MGD_ATPUP_APPLY_IDPS_SIGNATURE_SUCCEEDED\"\n| extend idpsSignatureVersion = extract(\"\\\"version\\\":\\\"([0-9]+)\\\"\", 1, tostring(todynamic(detail).data))\n| extend todynamic(detail).edgeSerialNumber\n| extend todynamic(detail).data\n| project-rename idpsSignatureData = detail_data\n| project-rename edgeSerialNumber = detail_edgeSerialNumber\n| project-away detail\n\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection tries to identify all DLLs loaded by \"high integrity\" processes and cross-checks the DLL paths against FileCreate/FileModify events of the same DLL by a medium integrity process.\nOf course, we need to do some magic to filter out false positives as much as possible. So any FileCreate/FileModify done by \"NT Authoriy\\System\" and the \"RID 500\" users arent interesting.\nAlso, we only want to see the FileCreate/FileModify actions which are performed with a default or limited token elevation. If done with a full elevated token, the user is apparently admin already.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let imls = materialize(\n    DeviceImageLoadEvents\n    | where InitiatingProcessIntegrityLevel in (\"High\", \"System\") and FileName !endswith \".exe\"\n    | project FolderPath=tolower(FolderPath), InitiatingProcessFileName, InitiatingProcessIntegrityLevel, DeviceId, DeviceName\n    | distinct FolderPath, InitiatingProcessFileName, InitiatingProcessIntegrityLevel, DeviceId, DeviceName\n);\nimls\n| join (\n    DeviceFileEvents\n    | where FolderPath in~ ((imls | project FolderPath)) and ActionType in (\"FileCreated\", \"FileModified\") and\n    InitiatingProcessIntegrityLevel !in (\"High\", \"System\", \"\") and InitiatingProcessAccountSid != \"S-1-5-18\" and\n    InitiatingProcessTokenElevation in (\"TokenElevationTypeDefault\", \"TokenElevationTypeLimited\") and InitiatingProcessAccountSid !endswith \"-500\"\n    | extend FolderPath=tolower(FolderPath)\n) on FolderPath, DeviceId, DeviceName\n| project-away FolderPath1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule will monitor access to highly sensitive passwords.\nWithin the Watchlist called LastPass define passwords which are deemed highly sensitive (such as password to a high privileged application).\nWhen an activity is observed against such password, an incident is created.\n Topic: LastPass"}, {"role": "assistant", "content": "let watchlist = (_GetWatchlist(\"LastPass\") | project name);\nLastPassNativePoller_CL\n| where Data_s in (watchlist)\n| extend AccountCustomEntity = Username_s, IPCustomEntity = IP_Address_s, URLCustomEntity = Data_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for failed authentication events\n Topic: PingFederate"}, {"role": "assistant", "content": "PingFederateEvent\n| where TimeGenerated > ago(24h)\n| extend EventResultDetails = extract(@'description=(.*?),.*', 1, AdditionalExtensions)\n| where isnotempty(EventResultDetails) or EventMessage contains \"fail\"\n| summarize count() by DstUserName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Often times after the initial compromise the attackers create inbox rules to delete emails that contain certain keywords.\n This is done so as to limit ability to warn compromised users that theyve been compromised. Below is a sample query that tries to detect this.\nReference: https://www.reddit.com/r/sysadmin/comments/7kyp0a/recent_phishing_attempts_my_experience_and_what/\n Topic: Detections"}, {"role": "assistant", "content": "let Keywords = dynamic([\"helpdesk\", \" alert\", \" suspicious\", \"fake\", \"malicious\", \"phishing\", \"spam\", \"do not click\", \"do not open\", \"hijacked\", \"Fatal\"]);\nOfficeActivity\n| where OfficeWorkload =~ \"Exchange\"\n| where Parameters has \"Deleted Items\" or Parameters has \"Junk Email\"  or Parameters has \"DeleteMessage\"\n| extend Events=todynamic(Parameters)\n| parse Events  with * \"SubjectContainsWords\" SubjectContainsWords '}'*\n| parse Events  with * \"BodyContainsWords\" BodyContainsWords '}'*\n| parse Events  with * \"SubjectOrBodyContainsWords\" SubjectOrBodyContainsWords '}'*\n| where SubjectContainsWords has_any (Keywords)\n or BodyContainsWords has_any (Keywords)\n or SubjectOrBodyContainsWords has_any (Keywords)\n| extend ClientIPAddress = case( ClientIP has \".\", tostring(split(ClientIP,\":\")[0]), ClientIP has \"[\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))), ClientIP )\n| extend Keyword = iff(isnotempty(SubjectContainsWords), SubjectContainsWords, (iff(isnotempty(BodyContainsWords),BodyContainsWords,SubjectOrBodyContainsWords )))\n| extend RuleDetail = case(OfficeObjectId contains '/' , tostring(split(OfficeObjectId, '/')[-1]) , tostring(split(OfficeObjectId, '\\\\')[-1]))\n| summarize count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by  UserId, ClientIPAddress, ResultStatus, Keyword, OriginatingServer, OfficeObjectId, RuleDetail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for suspicious powershell downloads.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where TimeGenerated > ago(24h)\n| where ThreatName has 'PowerShell Download String'\n| order by TimeGenerated desc\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies when a new trust monitor event is detected.\n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = ago(5m);\nDuoSecurityTrustMonitor_CL\n| where TimeGenerated >= timeframe\n| extend AccountName = tostring(split(surfaced_auth_user_name_s, \"@\")[0]), AccountUPNSuffix = tostring(split(surfaced_auth_user_name_s, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a user is rejected for a privileged role elevation via PIM. Monitor rejections for indicators of attacker compromise of the requesting account.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-identity-management\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where ActivityDisplayName =~ 'Add member to role request denied (PIM activation)'\n| mv-apply ResourceItem = TargetResources on \n  (\n      where ResourceItem.type =~ \"Role\"\n      | extend Role = trim(@'\"',tostring(ResourceItem.displayName))\n  )\n| mv-apply ResourceItem = TargetResources on \n  (\n      where ResourceItem.type =~ \"User\"\n      | extend TargetUserPrincipalName = trim(@'\"',tostring(ResourceItem.userPrincipalName))\n  )\n| where ResultReason != \"RoleAssignmentExists\"\n| where isnotempty(InitiatedBy.user)\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n| extend InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n| project-reorder TimeGenerated, TargetUserPrincipalName, Role, OperationName, Result, ResultDescription\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when Exchange Online transport rule configured to forward emails.\nThis could be an adversary mailbox configured to collect mail from multiple user accounts.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "OfficeActivity\n| where OfficeWorkload == \"Exchange\"\n| where Operation in~ (\"New-TransportRule\", \"Set-TransportRule\")\n| mv-apply DynamicParameters = todynamic(Parameters) on (summarize ParsedParameters = make_bag(pack(tostring(DynamicParameters.Name), DynamicParameters.Value)))\n| extend RuleName = case(\n    Operation =~ \"Set-TransportRule\", OfficeObjectId,\n    Operation =~ \"New-TransportRule\", ParsedParameters.Name,\n    \"Unknown\")\n| mv-expand ExpandedParameters = todynamic(Parameters)\n| where ExpandedParameters.Name in~ (\"BlindCopyTo\", \"RedirectMessageTo\") and isnotempty(ExpandedParameters.Value)\n| extend RedirectTo = ExpandedParameters.Value\n| extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIP)[0]\n| extend From = ParsedParameters.From\n| project TimeGenerated, RedirectTo, IPAddress = tostring(ClientIPValues[0]), Port = tostring(ClientIPValues[1]), UserId, From, Operation, RuleName, Parameters\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Use this query to look for activity related to PureLand activity, known to affect macOS devices via a MachO binary\n Topic: Jamf Protect"}, {"role": "assistant", "content": "JamfProtect\n| where TargetProcessSHA256 has \"0b9a3b00302faf3297b60fff0714f2db87245a613dcd9849645bffa7c4a3df9b\"\n    or DstIpAddr contains \"193.168.141.107\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when process started from different locations on a host.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where EventSubType != 'AttackAttempt'\n| extend bin_path = tolower(extract(@'\\A(.*)(\\\\|/)', 1, ActingProcessName))\n| summarize p = makeset(bin_path) by ActingProcessFileInternalName, DvcId\n| where array_length(p) > 1\n| extend FileCustomEntity = ActingProcessFileInternalName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for DCSync attacks.\n Topic: TenableAD"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.kql parser into the workspace\n// Retrieve the parser here: https://raw.githubusercontent.com/tenable/Azure-Sentinel/Tenable.ad-connector/Solutions/TenableAD/Parsers/afad_parser.kql\n// Then, create the Kusto Function with alias afad_parser\nafad_parser\n  | where MessageType == 2 and Codename == \"DCSync\"\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Email sender in TI list.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| where Active == true\n| where isnotempty(EmailSenderAddress)\n| extend TI_emailEntity = EmailSenderAddress\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n       ProofpointPOD\n       | where TimeGenerated >= ago(dt_lookBack)\n       | where isnotempty(SrcUserUpn)\n       | extend ProofpointPOD_TimeGenerated = TimeGenerated, ClientEmail = SrcUserUpn\n)\non $left.TI_emailEntity == $right.ClientEmail\n| where ProofpointPOD_TimeGenerated < ExpirationDateTime\n| summarize ProofpointPOD_TimeGenerated = arg_max(ProofpointPOD_TimeGenerated, *) by IndicatorId, ClientEmail\n| project ProofpointPOD_TimeGenerated, Description, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, ClientEmail\n| extend timestamp = ProofpointPOD_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests containing known malicious user agent strings.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "ImpervaWAFCloud\n| where HttpUserAgentOriginal has_any ('Nikto', 'hydra', 'advanced email extractor', 'BFAC', 'brutus', 'cgichk', 'cisco-torch', 'scanner', 'datacha0s', 'dirbuster', 'grabber', 'havij', 'internet ninja', 'masscan', 'morfeus', 'mysqloit', 'n-stealth', 'nessus', 'netsparker', 'nmap nse', 'nmap scripting engine', 'nmap-nse', 'nsauditor', 'openvas', 'pangolin', 'qualys was', 'security scan', 'springenwerk', 'sql power injector', 'sqlmap', 'sqlninja', 'w3af.sf.net', 'w3af.sourceforge.net', 'w3af.org', 'webbandit', 'webinspect', 'webvulnscan', 'xmlrpc exploit', 'WPScan', 'XSpider', 'Webster', 'fantomCrew', 'fantomBrowser')\n| summarize count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a new account was created manually within 1Password. This should only be used when a 1Password integration via a SCIM Bridge has been implemented.\n\nRef: https://support.1password.com/scim/\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "OnePasswordEventLogs_CL\n| where action == \"create\"\n| where object_type == \"invite\"\n| where actor_details.email !endswith \"@1passwordserviceaccounts.com\"\n| extend\n    ActorUsername = actor_details.email\n    , SrcIpAddr = session.ip\n    , TargetUsername = aux_info"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected usage of AttachUserPolicy/AttachGroupPolicy/AttachRolePolicy on AdministratorAccess managed policy. Attackers could use these events for privilege escalation. Verify these actions with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where  EventName in (\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| where tostring(parse_json(RequestParameters).policyArn) startswith \"arn:aws:iam::aws:policy/AdministratorAccess\"\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent,UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, RequestParameters, UserIdentityArn, ResponseElements, RecipientAccountId, AccountName, AccountUPNSuffix\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple errors for the same source IP address.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "let threshold = 10;\nlet err = dynamic(['NXDOMAIN', 'SERVFAIL', 'REFUSED']);\nGCPCloudDNS\n| where EventResultDetails in~ (err)\n| summarize count() by SrcIpAddr, bin(TimeGenerated, 10m)\n| where count_ > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query finds successful logons from known VPS providers with suspicious token patterns. Its not exhaustive but covers prevalent providers. Now includes UEBA logs IdentityInfo and BehaviorAnalytics for context.\n Topic: Cloud Identity Threat Protection Essentials"}, {"role": "assistant", "content": "let riskScoreCutoff = 20; //Adjust this based on volume of results\nlet IP_Data = (externaldata(network:string)\n[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/VPS_Networks.csv\"] with (format=\"csv\"));\nSigninLogs\n| where ResultType == 0\n| extend additionalDetails = tostring(Status.additionalDetails)\n| evaluate ipv4_lookup(IP_Data, IPAddress, network, return_unmatched = false)\n| summarize make_set(additionalDetails), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by IPAddress, UserPrincipalName\n// Uncomment the remaining lines to only see logons from VPS providers with token only logons.\n//| where array_length(set_additionalDetails) == 2\n//| where (set_additionalDetails[1] == \"MFA requirement satisfied by claim in the token\" and set_additionalDetails[0] == \"MFA requirement satisfied by claim provided by external provider\") or (set_additionalDetails[0] == \"MFA requirement satisfied by claim in the token\" and set_additionalDetails[1] == \"MFA requirement satisfied by claim provided by external provider\")\n| extend timestamp = StartTime, UserPrincipalName = tolower(UserPrincipalName), AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n) on UserPrincipalName\n| join kind=leftouter (\n    BehaviorAnalytics\n    | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n    | where isnotempty(SourceIPAddress)\n    | where ActivityInsights[\"ISPUncommonlyUsedInTenant\"] == True\n    | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress\n    | project-rename IPAddress = SourceIPAddress\n    | summarize\n      UsersInsights = make_set(UsersInsights, 1000),\n      DevicesInsights = make_set(DevicesInsights, 1000),\n      IPInvestigationPriority = sum(InvestigationPriority)\n    by IPAddress\n) on IPAddress\n| extend UEBARiskScore = IPInvestigationPriority\n| where UEBARiskScore > riskScoreCutoff\n| sort by UEBARiskScore desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects anomalous IP address usage by user accounts and then checks to see if a suspicious Teams action is performed.\nQuery calculates IP usage Delta for each user account and selects accounts where a delta >= 90% is observed between the most and least used IP.\nTo further reduce results the query performs a prevalence check on the lowest used IPs country, only keeping IPs where the country is unusual for the tenant (dynamic ranges). \nPlease note,  if the initial logic of prevalence to find suspicious logon activity is noisy then consider adding filtering based on Location. \nFinally the user accounts activity within Teams logs is checked for suspicious commands (modifying user privileges or admin actions) during the period the suspicious IP was active.\n Topic: Detections"}, {"role": "assistant", "content": "//The bigger the window the better the data sample size, as we use IP prevalence, more sample data is better.\n//The minimum number of countries that the account has been accessed from [default: 2]\nlet minimumCountries = 2;\n//The delta (%) between the largest in-use IP and the smallest [default: 95]\nlet deltaThreshold = 95;\n//The maximum (%) threshold that the country appears in login data [default: 10]\nlet countryPrevalenceThreshold = 10;\n//The time to project forward after the last login activity [default: 60min]\nlet projectedEndTime = 60m;\nlet queryfrequency = 1d;\nlet queryperiod = 14d;\nlet aadFunc = (tableName: string) {\n    // Get successful signins to Teams\n    let signinData =\n        table(tableName)\n        | where TimeGenerated > ago(queryperiod)\n        | where AppDisplayName has \"Teams\" and ConditionalAccessStatus =~ \"success\"\n        | extend Country = tostring(todynamic(LocationDetails)['countryOrRegion'])\n        | where isnotempty(Country) and isnotempty(IPAddress);\n    // Calculate prevalence of countries\n    let countryPrevalence =\n        signinData\n        | summarize CountCountrySignin = count() by Country\n        | extend TotalSignin = toscalar(signinData | summarize count())\n        | extend CountryPrevalence = toreal(CountCountrySignin) / toreal(TotalSignin) * 100;\n    // Count signins by user and IP address\n    let userIpSignin =\n        signinData\n        | summarize CountIPSignin = count(), Country = any(Country), ListSigninTimeGenerated = make_list(TimeGenerated) by IPAddress, UserPrincipalName;\n    // Calculate delta between the IP addresses with the most and minimum activity by user\n    let userIpDelta =\n        userIpSignin\n        | summarize MaxIPSignin = max(CountIPSignin), MinIPSignin = min(CountIPSignin), DistinctCountries = dcount(Country), make_set(Country) by UserPrincipalName\n        | extend UserIPDelta = toreal(MaxIPSignin - MinIPSignin) / toreal(MaxIPSignin) * 100;\n    // Collect Team operations the user account has performed within a time range of the suspicious signins\n    OfficeActivity\n    | where TimeGenerated > ago(queryfrequency)\n    | where Operation in~ (\"TeamsAdminAction\", \"MemberAdded\", \"MemberRemoved\", \"MemberRoleChanged\", \"AppInstalled\", \"BotAddedToTeam\")\n    | where not (Operation in~ (\"MemberAdded\", \"MemberRemoved\") and CommunicationType in~ (\"GroupChat\", \"OneonOne\")) // These events have been noisy and are related to initiaing chat conversation and not admin operations.\n    | project OperationTimeGenerated = TimeGenerated, UserId = tolower(UserId), Operation\n    | join kind = inner(\n        userIpDelta\n        // Check users with activity from distinct countries\n        | where DistinctCountries >= minimumCountries\n        // Check users with high IP delta\n        | where UserIPDelta >= deltaThreshold\n        // Add information about signins and countries\n        | join kind = leftouter userIpSignin on UserPrincipalName\n        | join kind = leftouter countryPrevalence on Country\n        // Check activity that comes from nonprevalent countries\n        | where CountryPrevalence < countryPrevalenceThreshold\n        | project\n            UserPrincipalName,\n            SuspiciousIP = IPAddress,\n            UserIPDelta,\n            SuspiciousSigninCountry = Country,\n            SuspiciousCountryPrevalence = CountryPrevalence,\n            EventTimes = ListSigninTimeGenerated\n    ) on $left.UserId == $right.UserPrincipalName\n    // Check the signins occured 60 min before the Teams operations\n    | mv-expand SigninTimeGenerated = EventTimes\n    | extend SigninTimeGenerated = todatetime(SigninTimeGenerated)\n    | where OperationTimeGenerated between (SigninTimeGenerated .. (SigninTimeGenerated + projectedEndTime))\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n| summarize arg_max(SigninTimeGenerated, *) by UserPrincipalName, SuspiciousIP, OperationTimeGenerated\n| summarize\n    ActivitySummary = make_bag(pack(tostring(SigninTimeGenerated), pack(\"Operation\", tostring(Operation), \"OperationTime\", OperationTimeGenerated)))\n    by UserPrincipalName, SuspiciousIP, SuspiciousSigninCountry, SuspiciousCountryPrevalence\n| extend AccountName = tostring(split(UserPrincipalName, \"@\")[0]), AccountUPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Find events from Cisco Secure Endpoint that are of High severity in the last hour.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "let endtime = 1h;\nCiscoSecureEndpoint_CL\n| where TimeGenerated >= ago(endtime)\n| where severity_s == \"High\"\n| project NetworkAddresses = parse_json(computer_network_addresses_s), computer_hostname_s, date_t, event_type_s, computer_links_trajectory_s\n| summarize CountInLastHour = count() by computer_hostname_s, date_t, event_type_s, tostring(NetworkAddresses.ip), computer_links_trajectory_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies Office365 SharePoint file transfers above a certain threshold in a 15-minute time period.\nPlease note that entity mapping for arrays is not supported, so when there is a single value in an array, we will pull that value from the array as a single string to populate the entity to support entity mapping features within Sentinel. Additionally, if the array is multivalued, we will input a string to indicate this with a unique hash so that matching will not occur.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let threshold = 5000;\n// EnrichedMicrosoft365AuditLogs Query\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where Workload has_any(\"SharePoint\", \"OneDrive\")\n    | where Operation has_any(\"FileDownloaded\", \"FileSyncDownloadedFull\", \"FileSyncUploadedFull\", \"FileUploaded\")\n    | extend ClientIP = ClientIp\n    | summarize TransferCount = dcount(ObjectId), fileslist = make_set(ObjectId, 10000)\n        by UserId, ClientIP, bin(TimeGenerated, 15m)\n    | where TransferCount >= threshold\n    | extend FileSample = iff(array_length(fileslist) == 1, tostring(fileslist[0]),\n             strcat(\"SeeFilesListField_\", tostring(hash(tostring(fileslist)))))\n    | extend AccountName = tostring(split(UserId, \"@\")[0]),\n             AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n    | where EventSource == \"SharePoint\"\n    | where OfficeWorkload has_any(\"SharePoint\", \"OneDrive\")\n    | where Operation has_any(\"FileDownloaded\", \"FileSyncDownloadedFull\", \"FileSyncUploadedFull\", \"FileUploaded\")\n    | summarize TransferCount = dcount(OfficeObjectId), fileslist = make_set(OfficeObjectId, 10000)\n        by UserId, ClientIP, bin(TimeGenerated, 15m)\n    | where TransferCount >= threshold\n    | extend FileSample = iff(array_length(fileslist) == 1, tostring(fileslist[0]),\n             strcat(\"SeeFilesListField_\", tostring(hash(tostring(fileslist)))))\n    | extend AccountName = tostring(split(UserId, \"@\")[0]),\n             AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n// Combine Office and Enriched Logs\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize arg_min(TimeGenerated, *) by UserId, ClientIP;\n// Final Output\nCombinedEvents\n    | project TimeGenerated, UserId, ClientIP, AccountName, AccountUPNSuffix, FileSample, TransferCount, fileslist\n    | order by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in Syslog from Recorded Future URLs Recently Reported as malicious by Insikt Group.\n Topic: Recorded Future"}, {"role": "assistant", "content": "// Identifies a match in Syslog from the Recorded Future URLs Recently Reported by Insikt Group\nlet dt_lookBack = 1h;\nlet ioc_lookBack = 1d;\nThreatIntelligenceIndicator\n// Picking up only Recorded Future IOC's that have been recently reported as malicious by Insikt Group\n| where Description == 'Recorded Future - URL - Recently Reported by Insikt Group'\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| where Active == true\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(Url)\n| join (\n  Syslog\n  | where TimeGenerated >= ago(dt_lookBack)\n  // Extract URL from the Syslog message but only take messages that include URLs\n  | extend Url = extract(\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\", 1,SyslogMessage)\n  | where isnotempty(Url)\n  | extend Syslog_TimeGenerated = TimeGenerated\n  ) \non Url\n| where Syslog_TimeGenerated >= TimeGenerated and Syslog_TimeGenerated < ExpirationDateTime\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Syslog_TimeGenerated, SyslogMessage, Computer, ProcessName, Url, AdditionalInformation, HostIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows uploaded data volume per user.\n Topic: Box"}, {"role": "assistant", "content": "BoxEvents\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'UPLOAD'\n| summarize ['DataVolume(Bytes)'] = sum(FileSize) by SrcUserName\n| project SrcUserName, ['DataVolume(Bytes)']\n| order by ['DataVolume(Bytes)'] desc\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects external proxy usage.\n Topic: Corelight"}, {"role": "assistant", "content": "corelight_http\n| where isnotempty(proxied)\n| where not(ipv4_is_private(id_orig_h))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection mechanism examines connections made to a domain where only a single file is requested, which is considered unusual since most contemporary web applications require additional resources. Such activity is often associated with malware beaconing or tracking URLs delivered via emails. \nThe query includes a sample set of popular web script extensions (scriptExtensions), which should be customized to align with the specific requirements of your environment\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let lookback = 1d;\nlet scriptExtensions = dynamic([\".php\", \".aspx\", \".asp\", \".cfml\", \".py\", \".sh\", \".bash\", \".pl\"]);\n//The number of URI's seen to be suspicious, higher = less likely to be suspicious\nlet uriThreshold = 1;\nlet ReqestCountThreshold = 10; // set minimum requests count to confirm repetitive connections\n// Only look at connections that were allowed through the web proxy\n_Im_WebSession (starttime=ago(lookback), eventresult='Success')\n| project\n    SrcBytes,\n    DstBytes,\n    Url,\n    TimeGenerated,\n    DstIpAddr,\n    SrcIpAddr,\n    HttpRequestMethod,\n    HttpReferrer\n| where not(ipv4_is_private(DstIpAddr)) // Only take traffic going to internet\n| extend DestHostName = tostring(parse_url(Url)[\"Host\"])\n// Only look at connections where some data was exchanged.\n| where SrcBytes > 0 and DstBytes > 0\n// Extract Domain\n| extend Domain = iif(countof(DestHostName, '.') >= 2, strcat(split(DestHostName, '.')[-2], '.', split(DestHostName, '.')[-1]), DestHostName)\n| extend GetData = iff(Url contains \"?\", 1, 0)\n| summarize\n    EventStartTime = min(TimeGenerated),\n    EventEndTime = max(TimeGenerated),\n    make_set(Url, 100),\n    make_set(DstIpAddr, 100),\n    make_set(SrcIpAddr, 100),\n    EventCount = count(),\n    make_set(HttpRequestMethod, 10),\n    max(GetData),\n    max(HttpReferrer)\n    by Domain\n// Determine the number of URIs that have been visited for the domain\n| extend destinationURICount = array_length(set_Url)\n| where destinationURICount <= uriThreshold and EventCount > ReqestCountThreshold // check for repetitive requests for single resource only.\n| where tostring(set_Url) has_any(scriptExtensions)\n//Remove matches with referer\n| where max_HttpReferrer == \"\"\n//Keep requests where data was transferred either in a GET with parameters or a POST\n| where set_HttpRequestMethod in~ (\"POST\") or max_GetData == 1\n//Defeat email click tracking, may increase FN's while decreasing FP's\n| where set_Url !has \"click\" and set_HttpRequestMethod !has \"GET\"\n| mv-expand set_Url, set_DstIpAddr, set_SrcIpAddr\n| extend\n    RequestURL = tostring(set_Url),\n    DestinationIP = tostring(set_DstIpAddr),\n    SourceIP = tostring(set_SrcIpAddr)\n| project\n    EventStartTime,\n    EventEndTime,\n    SourceIP,\n    DestinationIP,\n    EventCount,\n    RequestURL,\n    set_HttpRequestMethod\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which low sensitivity legal information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let lowRisk = 1;\nlet legal = 'Legal Information';\nCognniIncidents_CL \n| where Severity == lowRisk\n| where informationType_s == legal\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for uploaded files.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "CiscoWSAEvent\n| where TimeGenerated > ago(24h)\n| where HttpRequestMethod in~ ('POST', 'PUT')\n| where isnotempty(AmpFileName)\n| project AmpFileName, SrcUserName\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in UrlClickEvents.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet UrlClickEvents_ = materialize(UrlClickEvents\n    | where TimeGenerated >= ago(dt_lookBack)\n    | extend UrlClickEvents_TimeGenerated = TimeGenerated);\nlet ChainReportID = UrlClickEvents_\n    | mv-expand todynamic(UrlChain)\n    | extend UrlChain = tolower(UrlChain)\n    | project ReportId, Url, UrlChain;\n// Url is not always in UrlChain, so we need to check both\nlet ClickedUrls = \n  (union isfuzzy=false (ChainReportID), (ChainReportID | project Url = UrlChain))\n  | distinct Url\n  | summarize make_list(Url);\nlet TI = materialize(ThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | where isnotempty(Url) and tolower(Url) in (ClickedUrls)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | project-rename TI_Url = Url, TI_Type = Type\n  );\n(union isfuzzy=false (TI | join kind=innerunique (ChainReportID) on $left.TI_Url == $right.UrlChain),\n  (TI | join kind=innerunique (ChainReportID) on $left.TI_Url == $right.Url))\n| project-away UrlChain\n| join kind=innerunique (UrlClickEvents_) on ReportId\n| where UrlClickEvents_TimeGenerated < ExpirationDateTime\n| summarize UrlClickEvents_TimeGenerated = arg_max(UrlClickEvents_TimeGenerated, *) by IndicatorId\n| project UrlClickEvents_TimeGenerated, AccountUpn, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, NetworkMessageId\n| extend timestamp = UrlClickEvents_TimeGenerated\n| extend timestamp = UrlClickEvents_TimeGenerated, Name = tostring(split(AccountUpn, '@', 0)[0]), UPNSuffix = tostring(split(AccountUpn, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This identifies Windows Reserved Filenames on Office services like SharePoint and OneDrive. It also detects when a user uploads these files to another users workspace, which may indicate malicious activity.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let Reserved = dynamic(['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9']);\n  // Query for OfficeActivity\n  let OfficeActivityResults = OfficeActivity\n    | where isnotempty(SourceFileExtension)\n    | where SourceFileExtension in (Reserved) or SourceFileName in (Reserved)\n    | where UserAgent !has \"Mac OS\"\n    | extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])\n    | extend UserIdUserFolderFormat = tolower(replace_regex(UserId, '@|\\\\.', '_'))\n    | extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true, false)\n    | summarize TimeGenerated = make_list(TimeGenerated, 100000), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Operations = make_list(Operation, 100000), UserAgents = make_list(UserAgent, 100000), OfficeIds = make_list(OfficeId, 100000), SourceRelativeUrls = make_list(SourceRelativeUrl, 100000), FileNames = make_list(SourceFileName, 100000)\n    by OfficeWorkload, RecordType, UserType, UserKey, UserId, ClientIP, Site_Url, SourceFileExtension, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n    | extend IP_0_Address = ClientIP\n    | extend Account_0_Name = AccountName\n    | extend Account_0_UPNSuffix = AccountUPNSuffix\n    | extend URL_0_Url = Site_Url;\n  // Query for EnrichedMicrosoft365AuditLogs\n  let EnrichedMicrosoft365Results = EnrichedMicrosoft365AuditLogs\n    | extend SourceFileName = tostring(parse_json(tostring(AdditionalProperties)).SourceFileName)\n    | extend UserAgent = tostring(parse_json(tostring(AdditionalProperties)).UserAgent)\n    | extend Site_Url = tostring(parse_json(tostring(AdditionalProperties)).SiteUrl)\n    | where isnotempty(ObjectId)\n    | where ObjectId in (Reserved) or SourceFileName in (Reserved)\n    | where UserAgent !has \"Mac OS\"\n    | extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])\n    | extend UserIdUserFolderFormat = tolower(replace_regex(UserId, '@|\\\\.', '_'))\n    | extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true, false)\n    | summarize TimeGenerated = make_list(TimeGenerated, 100000), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Operations = make_list(Operation, 100000), UserAgents = make_list(UserAgent, 100000), ObjectIds = make_list(Id, 100000), SourceRelativeUrls = make_list(ObjectId, 100000), FileNames = make_list(SourceFileName, 100000)\n    by Workload, RecordType, UserType, UserKey, UserId, ClientIp, Site_Url, ObjectId, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n    | extend IP_0_Address = ClientIp\n    | extend Account_0_Name = AccountName\n    | extend Account_0_UPNSuffix = AccountUPNSuffix\n    | extend URL_0_Url = Site_Url;\n  // Combine both queries\n  OfficeActivityResults\n  | union EnrichedMicrosoft365Results\n  | order by StartTime desc;\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checks if Sonrai tickets have had their risk accepted. \nIt uses the action type to check if a ticket has had its risk accepted\n Topic: SonraiSecurity"}, {"role": "assistant", "content": "Sonrai_Tickets_CL\n| where action_d == 7\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Use this query to look for alerts related to JokerSpy activity, Known to use various back doors to deploy spyware on victims systems in order to perform reconnaissance and for command and control.\n Topic: Jamf Protect"}, {"role": "assistant", "content": "JamfProtect\n| where TargetProcessSHA256 in (\n  \"5fe1790667ee5085e73b054566d548eb4473c20cf962368dd53ba776e9642272\", \n  \"39bbc16028fd46bf4ddad49c21439504d3f6f42cccbd30945a2d2fdb4ce393a4\", \n  \"aa951c053baf011d08f3a60a10c1d09bbac32f332413db5b38b8737558a08dc1\", \n  \"d895075057e491b34b0f8c0392b44e43ade425d19eaaacea6ef8c5c9bd3487d8\", \n  \"951039bf66cdf436c240ef206ef7356b1f6c8fffc6cbe55286ec2792bf7fe16c\", \n  \"452c832a17436f61ad5f32ee1c97db05575160105ed1dcd0d3c6db9fb5a9aea1\", \n  \"6d3eff4e029db9d7b8dc076cfed5e2315fd54cb1ff9c6533954569f9e2397d4c\")\nor DnsQueryName contains \"git-hub.me\"\nor DnsQueryName contains \"app.influmarket.org\"\nor EventMatch contains \"jokerspy\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies users who have been made Owner of multiple Teams.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "// Adjust this value to change how many teams a user is made owner of before detecting\nlet max_owner_count = 3;\n// Change this value to adjust how larger timeframe the query is run over.\nlet high_owner_count = (OfficeActivity\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where Operation =~ \"MemberRoleChanged\"\n| extend Member = tostring(parse_json(Members)[0].UPN) \n| extend NewRole = toint(parse_json(Members)[0].Role) \n| where NewRole == 2\n| summarize dcount(TeamName) by Member\n| where dcount_TeamName > max_owner_count\n| project Member);\nOfficeActivity\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where Operation =~ \"MemberRoleChanged\"\n| extend Member = tostring(parse_json(Members)[0].UPN) \n| extend NewRole = toint(parse_json(Members)[0].Role) \n| where NewRole == 2\n| where Member in (high_owner_count)\n| extend AccountName = tostring(split(Member, \"@\")[0]), AccountUPNSuffix = tostring(split(Member, \"@\")[1])\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects a threat for an unsafe attachment in an email Topic: MimecastTTP"}, {"role": "assistant", "content": "MimecastTTPAttachment_CL| where result_s <> \"safe\";"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query shows user IP table statistics for login events.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where TimeGenerated > ago(24h)\n| where DvcAction =~ 'user_login'\n| summarize makeset(SrcIpAddr) by SrcUserName\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query hunts for command line activity linked to Dev-0322s compromise of ZOHO ManageEngine ADSelfService Plus software. It focuses on commands used in post-exploitation activity. Hosts with higher risk scores should be prioritized.\n Topic: Legacy IOC based Threat Protection"}, {"role": "assistant", "content": "// Look for command lines observed used by the threat actor\nlet cmd_lines = dynamic(['cmd.exe /c \"wmic /node:redacted process call create \"ntdsutil snapshot \\\\\"activate instance ntds\\\\\" create quit quit > c:\\\\windows\\\\temp\\\\nt.dat\";', 'regsvr32 /s c:\\\\windows\\\\temp\\\\user64.dll', 'process call  create \"cmd /c c:\\\\windows\\\\temp\\\\gac.exe -i c:\\\\windows\\temp\\\\ScriptModule.dll >c:\\\\windows\\\\temp\\\\tmp.dat\"']);\nimProcess\n// Look for static cmd lines and dynamic one using regex\n| where CommandLine  has_any (cmd_lines) or CommandLine matches regex \"save HKLM\\\\SYSTEM [^ ]*_System.HIV\" or CommandLine matches regex 'cmd.exe /c \"wmic /node:[^ ]* process call create \"ntdsutil snapshot \\\\\"activate instance ntds\\\\\" create quit quit > c:\\\\windows\\\\temp\\\\nt.dat\";'\n| summarize count(), FirstSeen=min(TimeGenerated), LastSeen = max(TimeGenerated) by DvcId, Dvc, CommandLine, User, Process\n// Base risk score on number of command lines seen for each host\n| extend RiskScore = count_\n// Increase risk score if host has recent security alerts\n| join kind=leftouter (SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| mv-expand todynamic(Entities)\n| extend DvcId = tostring(parse_json(Entities).MdatpDeviceId)\n| where isnotempty(DvcId)\n// Increase risk score further if alerts relate to malware assocaited with threat actor\n| extend AlertRiskScore = iif(ThreatName has_any (\"Zebracon\", \"Trojan:MSIL/Gacker.A!dha\", \"Backdoor:MSIL/Kokishell.A!dha\"), 1.0, 0.5)) on DvcId\n// Create aggregate risk score\n| extend AlertRiskScore = iif(isempty(AlertRiskScore), 0.0 , AlertRiskScore)\n| extend RiskScore = RiskScore + AlertRiskScore\n| project-reorder  FirstSeen, LastSeen, RiskScore, Dvc, DvcId, CommandLine, User\n| extend File = split(Process, \"\\\\\")[-1]\n| extend timestamp = FirstSeen\n| extend NTDomain = tostring(split(User,'\\\\',0)[0]), Name = tostring(split(User,'\\\\',1)[0])\n| extend HostName = tostring(split(Dvc, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Dvc, '.'), 1, -1), '.')), FileName = File\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n| extend File_0_Name = FileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies a match Network Sessions for which the source or destination IP address is a known IoC. This analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM NetworkSession schema\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet IP_TI = materialize (\n  ThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = coalesce(NetworkIP, NetworkDestinationIP, NetworkSourceIP,EmailSourceIpAddress,\"NO_IP\")\n  | where TI_ipEntity != \"NO_IP\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n);\nIP_TI\n  // using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique \n(\n  _Im_NetworkSession (starttime=ago(dt_lookBack))\n  | where isnotempty(SrcIpAddr)\n  | summarize imNWS_mintime=min(TimeGenerated), imNWS_maxtime=max(TimeGenerated) by SrcIpAddr, DstIpAddr, Dvc, EventProduct, EventVendor  \n  | lookup (IP_TI | project TI_ipEntity, Active) on $left.SrcIpAddr == $right.TI_ipEntity\n  | project-rename SrcMatch = Active\n  | lookup (IP_TI | project TI_ipEntity, Active) on $left.DstIpAddr == $right.TI_ipEntity\n  | project-rename DstMatch = Active\n  | where SrcMatch or DstMatch\n  | extend \n      IoCIP = iff(SrcMatch, SrcIpAddr, DstIpAddr),\n      IoCDirection = iff(SrcMatch, \"Source\", \"Destination\")\n)on $left.TI_ipEntity == $right.IoCIP\n| where imNWS_mintime < ExpirationDateTime\n| project imNWS_mintime, imNWS_maxtime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, SrcIpAddr, DstIpAddr, IoCDirection, IoCIP, Dvc, EventVendor, EventProduct\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "There is an normal amount of traffic that goes on a particular port in any organization. This hunting query identifies port usage higher than threshold defined in NetworkSession_Monitor_Configuration watchlist to determine high port usage.\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "let lookback = 10m; \nlet mapping = _GetWatchlist('NetworkSession_Monitor_Configuration')\n| where Type == \"Hunting\" and ThresholdType == \"Static\" and Severity != \"Disabled\"  \n| extend Ports = split(Ports,\",\"),\n        App = split(App,\",\"),\n        Protocol = split(Protocol,\",\"),\n        Direction = split(Direction,\",\"),\n        Action = split(Action,\",\")\n| project Ports, App, Protocol, Direction, Action, Type, ThresholdType, Threshold, Severity, Tactic, Name, Description\n| mv-expand Ports\n| mv-expand App\n| mv-expand Protocol\n| mv-expand Direction\n| mv-expand Action\n| extend Ports = tostring(Ports), App = tostring(App), Protocol = tostring(Protocol), Direction = tostring(Direction), Action = tostring(Action), Threshold = toint(Threshold)\n;\nlet nosummary = materialize(\n              union isfuzzy=true \n                (\n                    NetworkCustomAnalytics_protocol_CL \n                    | project v = int(2)\n                ),\n                (\n                    print int(1) \n                    | project v = print_0\n                )\n                | summarize maxv = max(v)\n                | extend nosum = (maxv > 1)\n              );\nlet allData = union isfuzzy=true \n    (\n        (datatable(exists:int, nosum:bool)[1,false] | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=bin(now(-10m),10m), endtime=bin(now(),10m))\n        | where TimeGenerated > bin(now(-10m),10m)\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        NetworkCustomAnalytics_protocol_CL\n        | where EventTime_t == toscalar(NetworkCustomAnalytics_protocol_CL | summarize max(EventTime_t))\n        | project-rename NetworkProtocol=NetworkProtocol_s, DstPortNumber=DstPortNumber_d, DstAppName=DstAppName_s, NetworkDirection=NetworkDirection_s, DvcAction=DvcAction_s, Count=count__d, EventTime=EventTime_t\n        | extend Count = toint(Count),DstPortNumber = toint(DstPortNumber)\n    )\n;\nallData\n      | where isnotempty(DstPortNumber)\n      | summarize Sum=sum(Count) by DstPortNumber, NetworkProtocol, NetworkDirection, DvcAction \n      | join kind=inner ['mapping'] where Ports has tostring(DstPortNumber)\n      | where Sum > Threshold         \n                and (Protocol == \"*\" or Protocol has NetworkProtocol)\n                and (Direction == \"*\" or Direction has NetworkDirection)\n                and (Action == \"*\" or Action has DvcAction)\n      | project Name, Description, NetworkProtocol, DstPortNumber, NetworkDirection, DvcAction, Severity, Tactic\n      | summarize NetworkProtocols=make_set_if(NetworkProtocol,isnotempty(NetworkProtocol),20), \n                  NetworkDirections=make_set_if(NetworkDirection,isnotempty(NetworkDirection),5), \n                  DvcActions=make_set_if(DvcAction,isnotempty(DvcAction),10) by Name, Severity, Tactic, DstPortNumber, Description"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alerts when end to end encryption is disabled for Zoom meetings.\n Topic: Detections"}, {"role": "assistant", "content": "ZoomLogs\n| where Event =~ \"account.settings_updated\"\n| extend NewE2ESetting = columnifexists(\"payload_object_settings_in_meeting_e2e_encryption_b\", \"\")\n| extend OldE2ESetting = columnifexists(\"payload_old_object_settings_in_meeting_e2e_encryption_b\", \"\")\n| where OldE2ESetting =~ 'false' and NewE2ESetting =~ 'true'\n| extend AccountName = tostring(split(User, \"@\")[0]), AccountUPNSuffix = tostring(split(User, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected usage of AttachUserPolicy/AttachGroupPolicy/AttachRolePolicy by CRUD Lambda policy. Attackers could use these operations for privilege escalation. Verify these actions with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName in (\"PutUserPolicy\",\"PutRolePolicy\",\"PutGroupPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and (Action contains \"lambda:Create\" and Action contains \"lambda:Get\" and Action contains \"lambda:Update\" and Action contains \"kms:Delete\") and Resource == \"*\" and Condition == \"\"\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, UserIdentityUserName\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a privileged role is assigned to a new user. Any account eligible for a role is now being given privileged access. If the assignment is unexpected or into a role that isnt the responsibility of the account holder, investigate.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "// Define the start and end times based on input values\nlet starttime = now()-1h;\nlet endtime = now();\n// Set a lookback period of 14 days\nlet lookback = starttime - 14d;\n// Define a reusable function to query audit logs\nlet awsFunc = (start:datetime, end:datetime) {\n  AuditLogs\n  | where TimeGenerated between (start..end)\n  | where Category =~ \"RoleManagement\"\n  | where AADOperationType in (\"Assign\", \"AssignEligibleRole\")\n  | where ActivityDisplayName has_any (\"Add eligible member to role\", \"Add member to role\")\n  | mv-apply TargetResource = TargetResources on\n    (\n      where TargetResource.type in~ (\"User\", \"ServicePrincipal\")\n      | extend Target = iff(TargetResource.type =~ \"ServicePrincipal\", tostring(TargetResource.displayName), tostring(TargetResource.userPrincipalName)),\n      props = TargetResource.modifiedProperties\n    )\n  | mv-apply Property = props on\n    (\n      where Property.displayName =~ \"Role.DisplayName\"\n      | extend RoleName = trim('\"', tostring(Property.newValue))\n    )\n  | where RoleName contains \"Admin\" and Result == \"success\"\n};\n// Query for audit events in the current day\nlet EventInfo_CurrentDay = awsFunc(starttime, endtime);\n// Query for audit events in the historical period (lookback)\nlet EventInfo_historical = awsFunc(lookback, starttime);\n// Find unseen events by performing a left anti-join\nlet EventInfo_Unseen = (EventInfo_CurrentDay\n  | join kind=leftanti(EventInfo_historical) on Target, RoleName, OperationName\n);\n// Extend and clean up the results\nEventInfo_Unseen\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend Initiator = iif(isnotempty(InitiatingAppName), InitiatingAppName, InitiatingUserPrincipalName)\n// You can uncomment the lines below to filter out PIM activations\n// | where Initiator != \"MS-PIM\"\n// | summarize StartTime=min(TimeGenerated), EndTime=min(TimeGenerated) by OperationName, RoleName, Target, Initiator, Result\n// Project specific columns and split them for further analysis\n| project TimeGenerated, OperationName, RoleName, Target, Initiator, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, Result\n| extend TargetName = tostring(split(Target,'@',0)[0]), TargetUPNSuffix = tostring(split(Target,'@',1)[0]), InitiatorName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatorUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is desinged to monitor Azure policies aligned with the Maturity Model for Event Log Management (M-21-31) standard. The alert triggers when EL3 policy compliance falls below 70% within a 1 week timeframe.\n Topic: MaturityModelForEventLogManagementM2131"}, {"role": "assistant", "content": "SecurityRecommendation\n| where RecommendationDisplayName <> \"\"\n| extend MaturityLevel=iff(RecommendationDisplayName has_any(\"agent\",\"extension\",\"retention\",\"logs encryption\",\"collect\",\"retained\",\"log profile\",\"CloudTrail\",\"metric\",\"AWS\",\"GCP\",\"DNS\",\"Auditing\",\"Flow\",\"logging\",\"usage\"), \"Event Logging (EL0)\",\niff(RecommendationDisplayName has_any(\"container registries\",\"logic apps\",\"Enhanced monitoring\",\"IoT Hub\",\"Event Hub\",\"App Service\", \"Kubernetes\",\"updates\",\"email\", \"automation\", \"adaptive\"), \"Advanced Event Logging (EL3)\",\niff(RecommendationDisplayName has_any(\"signatures\",\"CMK\",\"CMEK\",\"double encryption\",\"managed key\",\"KMS\",\"container\",\"Watcher\"), \"Intermediate Event Logging (EL2)\",\niff(RecommendationDisplayName has_any(\"Exploit Guard\",\"endpoint protection\",\"Antimalware\",\"health\",\"VPC\",\"Defender\",\"Vulnerabilities\",\"vulnerability\",\"diagnostic\",\"Key\",\"activity log alert\",\"\"), \"Basic Event Logging (EL1)\",\"Other\"))))\n| summarize arg_max(TimeGenerated, *) by RecommendationDisplayName, AssessedResourceId, MaturityLevel\n| summarize Failed = countif(RecommendationState == \"Unhealthy\"), Passed = countif(RecommendationState == \"Healthy\"), Total = countif(RecommendationState == \"Healthy\" or RecommendationState == \"Unhealthy\") by MaturityLevel\n| extend PassedControls = (Passed/todouble(Total))*100\n| extend RemediationLink = strcat('https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/22')\n| project MaturityLevel, Total, PassedControls, Passed, Failed, RemediationLink, LastObserved=now()\n| where MaturityLevel <> ''\n| where MaturityLevel == \"Advanced Event Logging (EL3)\"\n| where PassedControls < 70 \n//Adjust Either FailedRatePercentage or PasedRatePercentage Thresholds within   Organizational Needs\n| sort by PassedControls desc\n| extend URLCustomEntity = RemediationLink\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects attempts to add attacker devices as allowed IDs for active sync using the Set-CASMailbox command.\nThis technique was seen in relation to Solorigate attack but the results can indicate potential malicious activity used in different attacks.\n- Note that this query can be changed to use the KQL \"has_all\" operator, which hasnt yet been documented officially, but will be soon.\n  In short, \"has_all\" will only match when the referenced field has all strings in the list.\n- Refer to Set-CASMailbox syntax: https://docs.microsoft.com/powershell/module/exchange/set-casmailbox?view=exchange-ps  \n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = 1d;\nlet cmdList = dynamic([\"Set-CASMailbox\",\"ActiveSyncAllowedDeviceIDs\",\"add\"]);\n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4688\n| where CommandLine has_all (cmdList)\n| project Type, TimeGenerated, Computer, Account, SubjectDomainName, SubjectUserName, Process, ParentProcessName, CommandLine\n| extend timestamp = TimeGenerated, AccountEntity = Account, HostEntity = Computer\n),\n( WindowsEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4688\n| where EventData has_all (cmdList)\n| extend CommandLine = tostring(EventData.CommandLine) \n| where CommandLine has_all (cmdList)\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend SubjectUserName = tostring(EventData.SubjectUserName)\n| extend SubjectDomainName = tostring(EventData.SubjectDomainName)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1])\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| project Type, TimeGenerated, Computer, Account, SubjectDomainName, SubjectUserName, Process, ParentProcessName, CommandLine\n| extend timestamp = TimeGenerated, AccountEntity = Account, HostEntity = Computer\n),\n(\nDeviceProcessEvents\n| where TimeGenerated >= ago(timeframe)\n| where InitiatingProcessCommandLine has_all (cmdList)\n| project Type, TimeGenerated, DeviceName, AccountName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessFileName, InitiatingProcessParentFileName,  InitiatingProcessCommandLine\n| extend timestamp = TimeGenerated, AccountDomain = InitiatingProcessAccountDomain, AccountName = InitiatingProcessAccountName, HostEntity = DeviceName\n),\n(\nEvent\n| where TimeGenerated > ago(timeframe)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| where TimeGenerated >= ago(timeframe)\n| where CommandLine has_all (cmdList)\n| extend Type = strcat(Type, \": \", Source)\n| project Type, TimeGenerated, Computer, User, Process, ParentImage, CommandLine\n| extend timestamp = TimeGenerated, AccountEntity = User, HostEntity = Computer\n)\n)\n| extend HostName = tostring(split(HostEntity, \".\")[0]), DomainIndex = toint(indexof(HostEntity, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(HostEntity, DomainIndex + 1), HostEntity)\n| extend AccountName = tostring(split(AccountEntity, @'\\')[1]), AccountDomain = tostring(split(AccountEntity, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for user principal name (UPN) events. Look for accounts created and then deleted in under 24 hours. Attackers may create an account for their use, and then remove the account when no longer needed.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#short-lived-account\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let queryfrequency = 1h;\nlet queryperiod = 1d;\nAuditLogs\n| where TimeGenerated > ago(queryfrequency)\n| where OperationName =~ \"Delete user\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type == \"User\"\n      | extend TargetUserPrincipalName = extract(@'([a-f0-9]{32})?(.*)', 2, tostring(TargetResource.userPrincipalName))\n  )\n| extend DeletedByApp = tostring(InitiatedBy.app.displayName),\nDeletedByAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId),\nDeletedByUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName),\nDeletedByAadUserId = tostring(InitiatedBy.user.id),\nDeletedByIPAddress = tostring(InitiatedBy.user.ipAddress)\n| project Deletion_TimeGenerated = TimeGenerated, TargetUserPrincipalName, DeletedByApp, DeletedByAppServicePrincipalId, DeletedByUserPrincipalName, DeletedByAadUserId, DeletedByIPAddress, \nDeletion_AdditionalDetails = AdditionalDetails, Deletion_InitiatedBy = InitiatedBy, Deletion_TargetResources = TargetResources\n| join kind=inner (\n    AuditLogs\n    | where TimeGenerated > ago(queryperiod)\n    | where OperationName =~ \"Add user\"      \n    | mv-apply TargetResource = TargetResources on \n      (\n          where TargetResource.type == \"User\"\n          | extend TargetUserPrincipalName = trim(@'\"',tostring(TargetResource.userPrincipalName))\n      )\n    | project-rename Creation_TimeGenerated = TimeGenerated\n) on TargetUserPrincipalName\n| extend TimeDelta = Deletion_TimeGenerated - Creation_TimeGenerated\n| where  TimeDelta between (time(0s) .. queryperiod)\n| extend CreatedByApp = tostring(InitiatedBy.app.displayName),\nCreatedByAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId),\nCreatedByUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName),\nCreatedByAadUserId = tostring(InitiatedBy.user.id),\nCreatedByIPAddress = tostring(InitiatedBy.user.ipAddress)\n| project Creation_TimeGenerated, Deletion_TimeGenerated, TimeDelta, TargetUserPrincipalName, DeletedByApp, DeletedByAppServicePrincipalId, DeletedByUserPrincipalName, DeletedByAadUserId, DeletedByIPAddress, \nCreatedByApp, CreatedByAppServicePrincipalId, CreatedByUserPrincipalName, CreatedByAadUserId, CreatedByIPAddress, Creation_AdditionalDetails = AdditionalDetails, Creation_InitiatedBy = InitiatedBy, Creation_TargetResources = TargetResources, Deletion_AdditionalDetails, Deletion_InitiatedBy, Deletion_TargetResources\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n| extend CreatedByName = tostring(split(CreatedByUserPrincipalName,'@',0)[0]), CreatedByUPNSuffix = tostring(split(CreatedByUserPrincipalName,'@',1)[0])\n| extend DeletedByName = tostring(split(DeletedByUserPrincipalName,'@',0)[0]), DeletedByUPNSuffix = tostring(split(DeletedByUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected usage of AttachUserPolicy/AttachGroupPolicy/AttachRolePolicy on SSM Policy. Attackers could use these operations for privilege escalation. Verify these actions with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n  | where EventName in (\"PutUserPolicy\",\"PutRolePolicy\",\"PutGroupPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n  | extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n  | extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n  | mvexpand Statement\n  | extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n  | extend Action = tostring(Action)\n  | where Effect =~ \"Allow\" and (Action contains \"ssm:*\" or Action contains \"ssm:Create*\" or Action contains \"ssm:CreateAssociation\") and Resource == \"*\" and isempty(Condition)\n  | extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n  | extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n  | extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n  | extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n    AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n  | distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, UserIdentityUserName\n  | extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows agent properties.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'Agents.'\n| extend Properties = pack('IsActive', IsActive,'ActiveThreats',ActiveThreats,'FirewallEnabled',FirewallEnabled,'Infected',Infected,'IsUpToDate',IsUpToDate,'MitigationMode',MitigationMode,'MitigationModeSuspicious',MitigationModeSuspicious,'NetworkStatus',NetworkStatus)\n| summarize max(TimeGenerated) by ComputerName, tostring(Properties)\n| extend HostCustomEntity = ComputerName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query shows top users by downloads over time.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where TimeGenerated > ago(24h)\n| where Action =~ 'file_downloaded'\n| summarize filelist = makeset(EntityFileName) by SrcUserName\n| project filelist, fcount = array_length(filelist), SrcUserName\n| top 10 by fcount\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a source IP scanning multiple open ports on Global Secure Access Firewall. This can indicate malicious scanning of ports by an attacker, trying to reveal open ports in the organization that can be compromised for initial access.\n  Configurable Parameters:\n  - Port scan time - the time range to look for multiple ports scanned. Default is set to 30 seconds.\n  - Minimum different ports threshold - alert only if more than this number of ports scanned. Default is set to 100.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let port_scan_time = 30s;\nlet min_ports_threshold = 100;\nNetworkAccessTraffic\n| where TimeGenerated > ago(1d)\n| where Action == 'Allowed'\n| summarize PortsScanned = dcount(DestinationPort) by SourceIp, DestinationFqdn, bin(TimeGenerated, port_scan_time)\n| where PortsScanned > min_ports_threshold\n| project SourceIp, PortsScanned, TimeGenerated,DestinationFqdn\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects instances where an attacker has gained the ability to execute code on an ADFS Server through remote WMI Execution.\nIn order to use this query you need to be collecting Sysmon EventIDs 19, 20, and 21.\nIf you do not have Sysmon data in your workspace this query will raise an error stating:\n     Failed to resolve scalar expression named \"[@Name]\"\nFor more on how WMI was used in Solorigate see https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/.\nThe query contains some features from the following detections to look for potentially malicious ADFS activity. See them for more details.\n- ADFS Key Export (Sysmon): https://github.com/Azure/Azure-Sentinel/blob/master/Detections/SecurityEvent/ADFSKeyExportSysmon.yaml\n- ADFS DKM Master Key Export: https://github.com/Azure/Azure-Sentinel/blob/master/Detections/MultipleDataSources/ADFS-DKM-MasterKey-Export.yaml\n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = 1d;\n// Adjust for a longer timeframe for identifying ADFS Servers\nlet lookback = 6d;\n// Identify ADFS Servers\nlet ADFS_Servers = ( union isfuzzy=true\n( Event\n| where TimeGenerated > ago(timeframe+lookback)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| extend process = split(Image, '\\\\', -1)[-1]\n| where process =~ \"Microsoft.IdentityServer.ServiceHost.exe\"\n| distinct Computer\n),\n( SecurityEvent\n| where TimeGenerated > ago(timeframe+lookback)\n| where EventID == 4688 and SubjectLogonId != \"0x3e4\"\n| where ProcessName has \"Microsoft.IdentityServer.ServiceHost.exe\"\n| distinct Computer\n),\n(WindowsEvent\n| where TimeGenerated > ago(timeframe+lookback)\n| where EventID == 4688 and EventData has \"0x3e4\" and EventData has \"Microsoft.IdentityServer.ServiceHost.exe\"\n| extend SubjectLogonId  = tostring(EventData.SubjectLogonId)\n| where SubjectLogonId != \"0x3e4\"\n| extend ProcessName  = tostring(EventData.ProcessName)\n| where ProcessName has \"Microsoft.IdentityServer.ServiceHost.exe\"\n| distinct Computer\n)\n| distinct Computer);\n(union isfuzzy=true\n(\nSecurityEvent\n| where EventID == 4688\n| where TimeGenerated > ago(timeframe)\n| where Computer in~ (ADFS_Servers)\n| where ParentProcessName has 'wmiprvse.exe'\n// Looking for rundll32.exe is based on intel from the blog linked in the description\n// This can be commented out or altered to filter out known internal uses\n| where CommandLine has_any ('rundll32') \n| project TimeGenerated, TargetAccount, CommandLine, Computer, Account, TargetLogonId\n| extend timestamp = TimeGenerated\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, \"\\\\\")[0]), AccountNTDomain = tostring(split(Account, \"\\\\\")[1])\n// Search for recent logons to identify lateral movement\n| join kind= inner\n(SecurityEvent\n| where TimeGenerated > ago(timeframe)\n| where EventID == 4624 and LogonType == 3\n| where Account !endswith \"$\"\n| project TargetLogonId\n) on TargetLogonId\n),\n(\nWindowsEvent\n| where EventID == 4688\n| where TimeGenerated > ago(timeframe)\n| where Computer in~ (ADFS_Servers)\n| where EventData has 'wmiprvse.exe' and EventData has_any ('rundll32') \n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| where ParentProcessName has 'wmiprvse.exe'\n// Looking for rundll32.exe is based on intel from the blog linked in the description\n// This can be commented out or altered to filter out known internal uses\n| extend CommandLine = tostring(EventData.CommandLine)\n| where CommandLine has_any ('rundll32') \n| extend TargetAccount = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n| extend Account = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n| extend TargetLogonId = tostring(EventData.TargetLogonId)\n| project TimeGenerated, TargetAccount, CommandLine, Computer, Account, TargetLogonId\n| extend timestamp = TimeGenerated\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, \"\\\\\")[0]), AccountNTDomain = tostring(split(Account, \"\\\\\")[1])\n// Search for recent logons to identify lateral movement\n| join kind= inner\n(WindowsEvent\n| where TimeGenerated > ago(timeframe)\n| where EventID == 4624 \n| extend  LogonType = tostring(EventData.LogonType)\n| where LogonType == 3\n| extend Account = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n| where Account !endswith \"$\"\n| extend TargetLogonId = tostring(EventData.TargetLogonId)\n| project TargetLogonId\n) on TargetLogonId\n),\n(\nEvent\n| where TimeGenerated > ago(timeframe)\n| where Source == \"Microsoft-Windows-Sysmon\"\n// Check for WMI Events\n| where Computer in~ (ADFS_Servers) and EventID in (19, 20, 21)\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| project TimeGenerated, EventType, Image, Computer, UserName\n| extend timestamp = TimeGenerated\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(UserName, \"\\\\\")[0]), AccountNTDomain = tostring(split(UserName, \"\\\\\")[1])\n)\n)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a user was removed from group.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where EventMessage =~ 'User removed from group'\n| extend user = todynamic(AssociatedItems)[0]['name']\n| project EventCreationTime, ObjectItemName, user\n| extend AccountCustomEntity = user\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for authentication error reasons.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'authentication'\n| where EventResult in~ ('denied', 'failure')\n| summarize count() by EventResultDetails, DstUserName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when AgentHandler is down.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "McAfeeEPOEvent\n| where EventId == '16025'\n| extend IPCustomEntity = DvcIpAddr, HostCustomEntity = DvcHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match for a Scanner detection user agent based attack in the App Gateway WAF logs. The threshold value in the query can be changed as per your infrastructures requirements.\nReferences: https://owasp.org/www-community/Vulnerability_Scanning_Tools\n Topic: Azure Web Application Firewall (WAF)"}, {"role": "assistant", "content": "let Threshold = 3;\nAzureDiagnostics\n| where ResourceProvider == 'MICROSOFT.NETWORK' and Category == 'ApplicationGatewayFirewallLog'\n| where action_s == \"Matched\"\n| where Message contains \"Found User-Agent associated with security scanner\"\n| project transactionId_g, hostname_s, requestUri_s, TimeGenerated, clientIp_s, Message, details_message_s, details_data_s\n| join kind = inner(\nAzureDiagnostics\n| where ResourceProvider == 'MICROSOFT.NETWORK' and Category == 'ApplicationGatewayFirewallLog'\n| where action_s == \"Blocked\"\n) on transactionId_g\n| extend Uri = strcat(hostname_s,requestUri_s)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), TransactionID = make_set(transactionId_g), Message = make_set(Message), Detail_Message = make_set(details_message_s), Detail_Data = make_set(details_data_s), Total_TransactionId = dcount(transactionId_g) by clientIp_s, Uri, action_s\n| where Total_TransactionId >= Threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects frequent creation and deletion of IFEO registry keys in a short time, a technique used by adversaries for system persistence.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "(union isfuzzy=true\n(\nSecurityEvent\n| where EventID == 4657\n| where ObjectName has_all (\"\\\\REGISTRY\\\\MACHINE\", \"Image File Execution Options\")\n| where ObjectName !endswith \"Image File Execution Options\"\n| summarize Count=count() by Computer, Account, ObjectName\n| top 10 by Count desc \n| extend AccountCustomEntity = Account, HostCustomEntity = Computer\n),\n(\nWindowsEvent\n| where EventID == 4657 and EventData has_all (\"\\\\REGISTRY\\\\MACHINE\", \"Image File Execution Options\")\n| extend ObjectName = tostring(EventData.ObjectName)\n| where ObjectName has_all (\"\\\\REGISTRY\\\\MACHINE\", \"Image File Execution Options\")\n| where ObjectName !endswith \"Image File Execution Options\"\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| summarize Count=count() by Computer, Account, ObjectName\n| top 10 by Count desc \n| extend AccountCustomEntity = Account, HostCustomEntity = Computer\n),\n(\nEvent\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n| where EventID in (12, 13)\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| where TargetObject has_all (\"HKLM\", \"Image File Execution Options\")\n| summarize Count=count() by Computer, UserName, tostring(TargetObject)\n| top 10 by Count desc\n| extend AccountCustomEntity = UserName, HostCustomEntity = Computer\n),\n(\nimRegistry\n| where RegistryKey has_all (\"HKEY_LOCAL_MACHINE\", \"Image File Execution Options\")\n| summarize Count=count() by Dvc, Username, RegistryKey\n| top 10 by Count desc\n| extend AccountCustomEntity = Username, HostCustomEntity = Dvc\n)\n)\n| extend NTDomain = tostring(split(AccountCustomEntity, '\\\\', 0)[0]), Name = tostring(split(AccountCustomEntity, '\\\\', 1)[0])\n| extend HostName = tostring(split(HostCustomEntity, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(HostCustomEntity, '.'), 1, -1), '.'))\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects batches of distinct SQL queries that execute (or attempt to) commands that could indicate potential security issues - such as attempts to manipulate OLE objects (e.g. for running malicious commands).\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet hotwords = pack_array('sp_oamethod', 'sp_oacreate', 'sp_oasetproperty'); // List of monitored hot words.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | extend hasHotword = iff(Statement has_any (hotwords), 1, 0)\n    | summarize countEvents = count(), countStatements = dcount(Statement)\n        , countStatementsWithHotwords = dcountif(Statement, hasHotword == 1)\n        , countFailedStatementsWithHotwords = dcountif(Statement, (hasHotword == 1) and (Error > 0))\n        , countSuccessfulStatementsWithHotwords = dcountif(Statement, ((hasHotword == 1)) and (Error == 0))\n        , anyMonitoredStatement = anyif(Statement, (hasHotword == 1))\n        , anySuccessfulMonitoredStatement = anyif(Statement, (hasHotword == 1) and (Error == 0))\n        , anyInfo = anyif(AdditionalInfo, hasHotword == 1)\n        , hotWord = anyif(extract(strcat_array(hotwords, '|'), 0, tolower(Statement)), hasHotword == 1)\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId   \n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithHotwords = dcountif(timeSlice, countStatementsWithHotwords >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsHotwordAnomalyOnStatement = iff(((countStatementsWithHotwords >= monitoredStatementsThreshold) and (countSlicesWithHotwords <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithHotwords/monitoredStatementsThreshold, 0)\n| where IsHotwordAnomalyOnStatement == 'true'\n| sort by countSuccessfulStatementsWithHotwords desc,  anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])    \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0005 (Theom has observed data stores that are both unencrypted and publicly accessible. Review if the data store and the data within should be publicly accessible. Additionally, encrypt the data at rest to comply with these CIS requirements)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0005\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rare source IP addresses of requests\n Topic: PingFederate"}, {"role": "assistant", "content": "PingFederateEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(SrcIpAddr)\n| summarize count() by SrcIpAddr\n| top 10 by count_ asc\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection monitors for additions to projects or project collection administration groups in an Azure DevOps Organization.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "// Change to true to monitor for Project Administrator adds to *any* project\nlet MonitorAllProjects = false;\n// If MonitorAllProjects is false, trigger only on Project Administrator add for the following projects\nlet ProjectsToMonitor = dynamic(['<project_X>','<project_Y>']);\nAzureDevOpsAuditing\n| where Area == \"Group\" and OperationName == \"Group.UpdateGroupMembership.Add\"\n| where Details has 'Administrators'\n| where Details has \"was added as a member of group\" and (Details endswith '\\\\Project Administrators' or Details endswith '\\\\Project Collection Administrators')\n| parse Details with AddedIdentity ' was added as a member of group [' EntityName ']\\\\' GroupName\n| extend Level = iif(GroupName == 'Project Collection Administrators', 'Organization', 'Project'), AddedIdentityId = Data.MemberId\n| extend Severity = iif(Level == 'Organization', 'High', 'Medium'), AlertDetails = strcat('At ', TimeGenerated, ' UTC ', ActorUPN, '/', ActorDisplayName, ' added ', AddedIdentity, ' to the ', EntityName, ' ', Level)\n| where MonitorAllProjects == true or EntityName in (ProjectsToMonitor) or Level == 'Organization'\n| project TimeGenerated, Severity, Adder = ActorUPN, AddedIdentity, AddedIdentityId, AlertDetails, Level, EntityName, GroupName, ActorAuthType = AuthenticationMechanism,\n  ActorIpAddress = IpAddress, ActorUserAgent = UserAgent, RawDetails = Details\n| extend timestamp = TimeGenerated\n| extend AccountName = tostring(split(Adder, \"@\")[0]), AccountUPNSuffix = tostring(split(Adder, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query uses AUOMS security events to examine SCX Execute RunAs providers. These providers execute UNIX/Linux commands/scripts from /var/opt/microsoft/scx/tmp. SCXcore is used in various Microsoft products.\n Topic: Syslog"}, {"role": "assistant", "content": "let scx_execve=(){\nSyslog\n| where SyslogMessage has \"AUOMS_EXECVE\"\n| parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n| where EventType =~ \"AUOMS_EXECVE\" and EventData has '/var/opt/microsoft/scx/tmp'\n| project TimeGenerated, EventType, Computer, EventData\n| extend EventData = trim_end('containerid=',EventData)\n| parse kind=regex EventData with * \"success=\" success \" exit=\" * \"ppid=\" ppid \"pid=\" pid\n\"audit_user=\" * \"user=\" user \" uid=\" uid \" group=\" * \"comm=\\\"\" comm \"\\\" exe=\\\"\" exe \"\\\" subj=\" *\n\"cwd=\\\"\" cwd \"\\\" name=\\\"\" name \"\\\" (inode|nametype)=\" * \"(proctitle|cmdline)=\" cmdline\n  | extend cmdline = trim_end('redactors=.*',cmdline)\n  | where uid == '0'\n  | where cwd == '/var/opt/microsoft/scx/tmp'\n  | where success == 'yes'\n};\nscx_execve\n| where comm == 'sh' // ExecuteScript cmdline would trigger on /bin/sh /etc/opt/microsoft/scx/conf/tmpdir/scx_\n| join kind=leftouter ( scx_execve ) on $left.Computer == $right.Computer, $left.pid == $right.ppid\n| project-rename parentEventData=EventData,parentppid=ppid,parentpid=pid,parentcomm=comm,parentexe=exe,\n  parentname=name,parentcmdline=cmdline,childEventData=EventData1,childppid=ppid1,childpid=pid1,childcomm=comm1,\n  childexe=exe1,childname=name1,childcmdline=cmdline1\n| project TimeGenerated, Computer, user, parentEventData,parentppid,parentpid,parentcomm,parentexe,parentname,\n  parentcmdline,childEventData,childppid,childpid,childcomm,childexe,childname,childcmdline\n| extend Timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = user,\n  ExecuteType = iff(parentcmdline contains '/etc/opt/microsoft/scx/conf/tmpdir/scx',\"ExecuteScript\",\"ExecuteShellCommand\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Use this query to look for activity related to RustBucket activity, known to affect macOS devices via a MachO binary\n Topic: Jamf Protect"}, {"role": "assistant", "content": "JamfProtect\n| where TargetProcessSHA256 in (\"e74e8cdf887ae2de25590c55cb52dad66f0135ad4a1df224155f772554ea970c\", \"ac08406818bbf4fe24ea04bfd72f747c89174bdb\", \"72167ec09d62cdfb04698c3f96a6131dceb24a9c\", \"fd1cef5abe3e0c275671916a1f3a566f13489416\")\n    or DnsQueryName contains \"cloud.dnx.capital\"\n    or DnsQueryName contains \"deck.31ventures.info\"\n    or ((TargetBinarySigningAppID contains \"com.apple.pdfViewer\") and (TargetbinarySignerType != \"Apple\"))"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query looks for file paths/hashes related to observed activity by Dev-0228. The actor is known to use custom version of popular tool like PsExec, Procdump etc. to carry its activity.\n The risk score associated with each result is based on a number of factors, hosts with higher risk events should be investigated first.\n This query uses the Microsoft Sentinel Information Model - https://docs.microsoft.com/azure/sentinel/normalization\n Topic: Detections"}, {"role": "assistant", "content": "let files1 = dynamic([\"C:\\\\Windows\\\\TAPI\\\\lsa.exe\", \"C:\\\\Windows\\\\TAPI\\\\pa.exe\", \"C:\\\\Windows\\\\TAPI\\\\pc.exe\", \"C:\\\\Windows\\\\TAPI\\\\Rar.exe\"]);\nlet files2 = dynamic([\"svchost.exe\",\"wdmsvc.exe\"]);\nlet FileHash1 = dynamic([\"43109fbe8b752f7a9076eaafa417d9ae5c6e827cd5374b866672263fdebd5ec3\", \"ab50d8d707b97712178a92bbac74ccc2a5699eb41c17aa77f713ff3e568dcedb\", \"010e32be0f86545e116a8bc3381a8428933eb8789f32c261c81fd5e7857d4a77\",     \"56cd102b9fc7f3523dad01d632525ff673259dbc9a091be0feff333c931574f7\"]);\nlet FileHash2 = dynamic([\"2a1044e9e6e87a032f80c6d9ea6ae61bbbb053c0a21b186ecb3b812b49eb03b7\", \"9ab7e99ed84f94a7b6409b87e56dc6e1143b05034a5e4455e8c555dbbcd0d2dd\", \"18a072ccfab239e140d8f682e2874e8ff19d94311fc8bb9564043d3e0deda54b\"]);\nimProcessCreate\n| where ((Process has_any (files1)) and (ActingProcessSHA256 has_any (FileHash1))) or ((Process has_any (files2)) and (ActingProcessSHA256 has_any (FileHash2)))\n// Increase risk score if recent alerts for the host\n| join kind=leftouter (\n  SecurityAlert\n  | where ProviderName =~ \"MDATP\"\n  | extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n  | mv-expand todynamic(Entities)\n  | extend DvcId = tostring(parse_json(Entities).MdatpDeviceId)\n  | where isnotempty(DvcId)\n  // Higher risk score are for Defender alerts related to threat actor\n  | extend AlertRiskScore = iif(ThreatName has_any (\"Backdoor:MSIL/ShellClient.A\", \"Backdoor:MSIL/ShellClient.A!dll\", \"Trojan:MSIL/Mimikatz.BA!MTB\"), 1.0, 0.5)\n  | project DvcId, AlertRiskScore) \n  on DvcId\n| extend AlertRiskScore = iif(isempty(AlertRiskScore), 0.0, AlertRiskScore)\n| extend AccountName = tostring(split(ActorUsername, @'\\')[1]), AccountNTDomain = tostring(split(ActorUsername, @'\\')[0])\n| extend HostName = tostring(split(Dvc, \".\")[0]), DomainIndex = toint(indexof(Dvc, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Dvc, DomainIndex + 1), Dvc)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows new accounts that have logged onto a host for the first time - this may clearly be benign activity but an account\nlogging onto multiple hosts for the first time can also be used to look for evidence of that account being used to move\nlaterally across a network.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = totimespan((endtime-starttime)*7);\nlet LogonEvents=() {\nlet logonSuccess=SecurityEvent\n| where TimeGenerated between(ago(lookback)..endtime)\n| where EventID==4624\n| project TimeGenerated, ComputerName=Computer, AccountName=TargetUserName, AccountDomain=TargetDomainName, IpAddress, ActionType='Logon';\nlet logonFail=SecurityEvent\n| where TimeGenerated between(ago(lookback)..endtime)\n| where EventID==4625\n| project TimeGenerated, ComputerName=Computer, AccountName=TargetUserName, AccountDomain=TargetDomainName, IpAddress, ActionType='LogonFailure';\nlogonFail\n| union logonSuccess\n};\nLogonEvents\n| where TimeGenerated between(ago(lookback)..starttime)\n| where ActionType =~ 'Logon'\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by ComputerName, AccountName\n| join kind=leftanti (\nLogonEvents\n| where TimeGenerated between(starttime..endtime)\n| where ActionType =~ 'Logon'\n| summarize count() by ComputerName, AccountName\n) on ComputerName, AccountName\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), HostCount=dcount(ComputerName), HostSet=make_set(ComputerName, 10)  by AccountName, ComputerName\n| extend timestamp = StartTimeUtc, AccountCustomEntity = AccountName\n| extend HostName = tostring(split(ComputerName, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(ComputerName, '.'), 1, -1), '.'))\n| extend Account_0_Name = AccountName\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when users password was changed multiple times from different IP addresses.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where EventMessage =~ \"User's password changed\"\n| extend user = todynamic(AssociatedItems)[0]['name']\n| summarize ip_list = makeset(SrcIpAddr) by tostring(user), bin(TimeGenerated, 30m)\n| where array_length(ip_list) > 1\n| extend AccountCustomEntity = user, IPCustomEntity = ip_list\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects exfiltration to private email.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where NetworkApplicationProtocol =~ 'SMTP'\n| where isnotempty(inspected_document)\n| extend s_user = substring(SrcUserName, 0, indexof(SrcUserName, '@'))\n| extend d_user = substring(DstUserName, 0, indexof(DstUserName, '@'))\n| extend s_domain = extract(@'@(.*)', 1, SrcUserName)\n| extend d_domain = extract(@'@(.*)', 1, DstUserName)\n| where s_domain != d_domain\n| where s_user == d_user\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies beaconing patterns from Palo Alto Network traffic logs based on recurrent timedelta patterns.\nThe query leverages various KQL functions to calculate time deltas and then compares it with total events observed in a day to find percentage of beaconing.\nThis outbound beaconing pattern to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts.\nReference Blog:\nhttp://www.austintaylor.io/detect/beaconing/intrusion/detection/system/command/control/flare/elastic/stack/2017/06/10/detect-beaconing-with-flare-elasticsearch-and-intrusion-detection-systems/\nhttps://techcommunity.microsoft.com/t5/microsoft-sentinel-blog/detect-network-beaconing-via-intra-request-time-delta-patterns/ba-p/779586\n Topic: PaloAlto-PAN-OS"}, {"role": "assistant", "content": "let starttime = 2d;\nlet endtime = 1d;\nlet TimeDeltaThreshold = 25;\nlet TotalEventsThreshold = 30;\nlet MostFrequentTimeDeltaThreshold = 25;\nlet PercentBeaconThreshold = 80;\nCommonSecurityLog\n| where DeviceVendor == \"Palo Alto Networks\" and Activity == \"TRAFFIC\"\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where ipv4_is_private(DestinationIP)== false\n| project TimeGenerated, DeviceName, SourceUserID, SourceIP, SourcePort, DestinationIP, DestinationPort, ReceivedBytes, SentBytes\n| sort by SourceIP asc,TimeGenerated asc, DestinationIP asc, DestinationPort asc\n| serialize\n| extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceIP = next(SourceIP, 1)\n| extend TimeDeltainSeconds = datetime_diff('second',nextTimeGenerated,TimeGenerated)\n| where SourceIP == nextSourceIP\n//Whitelisting criteria/ threshold criteria\n| where TimeDeltainSeconds > TimeDeltaThreshold\n| summarize count(), sum(ReceivedBytes), sum(SentBytes)\nby TimeDeltainSeconds, bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort\n| summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds), TotalEvents=sum(count_), TotalSentBytes = sum(sum_SentBytes), TotalReceivedBytes = sum(sum_ReceivedBytes)\nby bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort\n| where TotalEvents > TotalEventsThreshold and MostFrequentTimeDeltaCount > MostFrequentTimeDeltaThreshold\n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent > PercentBeaconThreshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule is triggered when connection to known C2 is detected from host.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where EventMessage has 'Suspected botnet connection'\n| extend HostCustomEntity = DstHostname, MalwareCustomEntity = ThreatName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies new Microsoft Entra ID sign-in locations compared to historical data, potentially indicating password spraying or brute force attacks. It includes UEBA logs IdentityInfo and BehaviorAnalytics for context.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet countThreshold = 1;\nSigninLogs\n| where TimeGenerated between(starttime..endtime)\n| extend UserPrincipalName = tolower(UserPrincipalName)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), perIdentityAuthCount = count()\nby UserPrincipalName, locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\",\ntostring(LocationDetails[\"city\"]), \";\" , tostring(LocationDetails[\"geoCoordinates\"]))\n| summarize StartTime = min(StartTimeUtc), EndTime = max(EndTimeUtc), distinctAccountCount = count(), identityList=makeset(tolower(UserPrincipalName)) by locationString\n| extend identityList = iff(distinctAccountCount<10, identityList, \"multiple (>10)\")\n| join kind= anti (\nSigninLogs\n  | where TimeGenerated between(lookback..starttime)\n  | project locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\",\n  tostring(LocationDetails[\"city\"]), \";\" , tostring(LocationDetails[\"geoCoordinates\"]))\n  | summarize priorCount = count() by locationString\n)\non locationString\n// select threshold above which #new accounts from a new location is deemed suspicious\n| where distinctAccountCount > countThreshold\n| mv-expand todynamic(identityList)\n| extend timestamp = StartTime, Account_0_Name = tostring(identityList)\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n    | project-rename Account_0_Name = AccountUPN\n) on $left.Account_0_Name == $right.UserPrincipalName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for repetitive DNS resolution failures from single host.\n Topic: Corelight"}, {"role": "assistant", "content": "let threshold = 100;\ncorelight_dns\n| where TimeGenerated > ago(24h)\n| where rcode_name in~ ('NXDOMAIN', 'SERVFAIL')\n| summarize count() by id_orig_h, bin(TimeGenerated, 1h)\n| where count_ > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Often times after the initial compromise the attackers create inbox rules to delete emails that contain certain keywords.\n This is done so as to limit ability to warn compromised users that theyve been compromised. Below is a sample query that tries to detect this.\nReference: https://www.reddit.com/r/sysadmin/comments/7kyp0a/recent_phishing_attempts_my_experience_and_what/\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let Keywords = dynamic([\"helpdesk\", \" alert\", \" suspicious\", \"fake\", \"malicious\", \"phishing\", \"spam\", \"do not click\", \"do not open\", \"hijacked\", \"Fatal\"]);\nOfficeActivity\n| where OfficeWorkload =~ \"Exchange\" \n| where Operation =~ \"New-InboxRule\" and (ResultStatus =~ \"True\" or ResultStatus =~ \"Succeeded\")\n| where Parameters has \"Deleted Items\" or Parameters has \"Junk Email\"  or Parameters has \"DeleteMessage\"\n| extend Events=todynamic(Parameters)\n| parse Events  with * \"SubjectContainsWords\" SubjectContainsWords '}'*\n| parse Events  with * \"BodyContainsWords\" BodyContainsWords '}'*\n| parse Events  with * \"SubjectOrBodyContainsWords\" SubjectOrBodyContainsWords '}'*\n| where SubjectContainsWords has_any (Keywords)\n or BodyContainsWords has_any (Keywords)\n or SubjectOrBodyContainsWords has_any (Keywords)\n| extend ClientIPAddress = case( ClientIP has \".\", tostring(split(ClientIP,\":\")[0]), ClientIP has \"[\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))), ClientIP )\n| extend Keyword = iff(isnotempty(SubjectContainsWords), SubjectContainsWords, (iff(isnotempty(BodyContainsWords),BodyContainsWords,SubjectOrBodyContainsWords )))\n| extend RuleDetail = case(OfficeObjectId contains '/' , tostring(split(OfficeObjectId, '/')[-1]) , tostring(split(OfficeObjectId, '\\\\')[-1]))\n| summarize count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by  Operation, UserId, ClientIPAddress, ResultStatus, Keyword, OriginatingServer, OfficeObjectId, RuleDetail\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n| extend OriginatingServerName = tostring(split(OriginatingServer, \" \")[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows login activity (successful or failed) originated from botnet, Tor proxy or C2, with at least one True activity insight.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "BehaviorAnalytics\n| where ActivityType =~ 'LogOn' or ActivityType =~ 'FailedLogOn'\n| where DevicesInsights.ThreatIntelIndicatorType =~ 'Botnet' \n  or DevicesInsights.ThreatIntelIndicatorType =~ 'C2' \n  or DevicesInsights.ThreatIntelIndicatorType =~ 'Proxy'\n| where ActivityInsights contains 'True'\n| extend AadUserId = UsersInsights.AccountObjectID\n| extend Account_0_AadUserId = AadUserId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies new device being registered from a location where the user does not normally login from\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let Events = dynamic([\"device.enrollment.create\"]);\nlet DeviceRegistrations =  OktaSSO\n | where eventType_s in (Events)\n | where outcome_result_s == \"SUCCESS\"\n | extend oktaDeviceId_ = tostring(parse_json(tostring(parse_json(target_s)[0].detailEntry)).oktaDeviceId), NewDevice_osPlatform = tostring(parse_json(tostring(parse_json(target_s)[0].detailEntry)).osPlatform),  NewDevice_osVersion = tostring(parse_json(tostring(parse_json(target_s)[0].detailEntry)).osVersion), displayName_ = tostring(parse_json(target_s)[0].displayName)\n | extend Location = strcat(client_geographicalContext_city_s,  \" | \", client_geographicalContext_state_s,\" | \", client_geographicalContext_country_s)\n | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by actor_alternateId_s, actor_displayName_s, client_userAgent_os_s, client_ipAddress_s, displayMessage_s, outcome_result_s,\n outcome_reason_s, column_ifexists('debugContext_debugData_logOnlySecurityData_s', \"\"), column_ifexists('debugContext_debugData_threatSuspected_s',\"\"), client_userAgent_rawUserAgent_s,client_userAgent_browser_s, severity_s, NewDevice_osPlatform, NewDevice_osVersion, eventType_s, Location ;\nlet UserLogins =   OktaSSO\n | where TimeGenerated > ago(14d)\n | where eventType_s =~ \"user.session.start\"\n | where outcome_result_s =~ \"SUCCESS\"\n | extend Location = strcat(client_geographicalContext_city_s,  \" | \", client_geographicalContext_state_s,\" | \", client_geographicalContext_country_s)\n | project actor_alternateId_s, actor_displayName_s, Location;\nDeviceRegistrations\n | join kind=leftanti (\n    UserLogins\n )\non  Location, actor_alternateId_s\n | extend Account_0_Name = actor_displayName_s\n | extend IP_0_Address = client_ipAddress_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0001 (Developer secrets have been observed in unencrypted data stores. Encrypt data at rest to comply with this CIS requirement)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0001\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows suspicious activity attempts.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where TimeGenerated > ago(24h)\n| where EventSubType =~ 'SuspiciousActivityAttempt'\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies connections that occur outside of the defined operational hours. It helps in monitoring and flagging any unusual activity that may occur during non-business hours, indicating potential security concerns or policy violations.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet operational_start_hour = 8; // Start of operational hours (8 AM)\nlet operational_end_hour = 18; // End of operational hours (6 PM)\nNetworkAccessTraffic\n| where TimeGenerated between (starttime .. endtime)\n| extend HourOfDay = datetime_part('hour', TimeGenerated)\n| where HourOfDay < operational_start_hour or HourOfDay >= operational_end_hour\n| project TimeGenerated, UserPrincipalName, SourceIp, DestinationIp, DestinationPort, Action, DeviceId, DeviceOperatingSystem, ConnectionId\n| extend IPCustomEntity = SourceIp, AccountCustomEntity = UserPrincipalName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create an incident when a Host is suspected to be compromised. \nThe higher the severity level is, the more immediate attention it requires as Vectra AI engine is more confident that this is a real threat. \nLevel of severity are: Low, Medium, High, Critical). Recommended configuration is to trigger an alert for at least High and Critical.\n Topic: Vectra AI Detect"}, {"role": "assistant", "content": "// Edit this variable to only keep the Severity level where an incident needs to be created (Defaults are: \"High\", \"Critical\" ). Possible values are: \"Low\", \"Medium\", \"High\", \"Critical\"\nlet configured_level = dynamic([\"High\", \"Critical\"]);\nCommonSecurityLog\n| where DeviceVendor == \"Vectra Networks\"\n| where DeviceProduct == \"X Series\"\n| where DeviceEventClassID == \"hsc\"\n| project-rename threat_score = FlexNumber1\n| project-rename certainty_score = FlexNumber2\n| project-rename vectra_URL = DeviceCustomString4\n| project-rename detection_name = DeviceEventClassID\n| project-rename score_decreases = DeviceCustomString3\n| extend level = case( threat_score <  50 and certainty_score < 50, \"Low\",\n                      threat_score < 50 and certainty_score >= 50 , \"Medium\", \n                      threat_score >= 50 and certainty_score <= 50, \"High\", \n                      threat_score >= 50 and certainty_score >= 50, \"Critical\",\n                      \"UNKNOWN\")\n| extend Severity = case(level == \"Info\", \"Informational\",level == \"Critical\", \"High\", level)\n| where level in (configured_level) \n//keep only the event with the highest threat score per Host\n| summarize arg_max(TimeGenerated, *) by SourceHostName\n| sort by TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for DCShadow attacks.\n Topic: TenableAD"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.kql parser into the workspace\n// Retrieve the parser here: https://raw.githubusercontent.com/tenable/Azure-Sentinel/Tenable.ad-connector/Solutions/TenableAD/Parsers/afad_parser.kql\n// Then, create the Kusto Function with alias afad_parser\nafad_parser\n  | where MessageType == 2 and Codename == \"DCShadow\"\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Typical domain name lengths are short, whereas domain name queries used for data exfiltration or tunneling can often be very large in size. The hunting query looks for DNS queries that are more than 150 characters long.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "// Setting URI length threshold count, shorter URI's may cause noise, change as needed\nlet lookback=1day;\nlet uriThreshold = 150;\nlet ExcludeDomains=dynamic([\"cnr.io\", \"kr0.io\", \"arcticwolf.net\", \"webcfs00.com\", \"barracudabrts.com\", \"trendmicro.com\", \"sophosxl.net\", \n\"spotify.com\", \"e5.sk\", \"mcafee.com\", \"opendns.com\", \"spameatingmonkey.net\", \"_ldap\", \"_kerberos\", \"modsecurity.org\", \n\"fdmarc.net\", \"ipass.com\", \"wpad\"]);\n_Im_Dns(starttime=ago(lookback),endtime=now())\n| summarize count() by SrcIpAddr, DnsQuery\n| where not(DnsQuery has_any (ExcludeDomains))\n| extend Urilength = strlen(DnsQuery)\n| where Urilength >= uriThreshold\n| order by Urilength\n| extend IP_0_Address = SrcIpAddr\n| extend DNS_0_DomainName = DnsQuery\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches failed TLS outgoing connections.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where TimeGenerated > ago(24h)\n| where tostring(AdditionalFields) has 'ESATLSOutConnStatus'\n| extend tls_status = extract(@'ESATLSOutConnStatus\":\"(Success|Failure)\"', 1, tostring(AdditionalFields))\n| where tls_status =~ 'Failure'\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A Security Group acts as a virtual firewall of an instance to control inbound and outbound traffic.\n Hence, ingress and egress settings changes to AWS Security Group should be monitored as these can expose the enviornment to new attack vectors.\nMore information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255. \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([ \"AuthorizeSecurityGroupEgress\", \"AuthorizeSecurityGroupIngress\", \"RevokeSecurityGroupEgress\", \"RevokeSecurityGroupIngress\"]);\nAWSCloudTrail\n| where EventName in~ (EventNameList)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| summarize EventCount=count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated)\nby EventSource, EventName, UserIdentityType, RecipientAccountId, AccountName, AccountUPNSuffix, SourceIpAddress, UserAgent, SessionMfaAuthenticated, AWSRegion,\nAdditionalEventData, UserIdentityAccountId, UserIdentityPrincipalid, ResponseElements\n| extend timestamp = StartTimeUtc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query looks for process command line activity related to activity observed by Dev-0056.The command lines this query hunts for are used as part of the threat actors post exploitation activity.\n Topic: Legacy IOC based Threat Protection"}, {"role": "assistant", "content": "(union isfuzzy=true\n(DeviceProcessEvents  \n| where ProcessCommandLine has_any(\"/q /c color f7&\", \"Net.We$()bClient\", \"$b,15,$b.Length-15\") or (ProcessCommandLine has \"FromBase64String\" and ProcessCommandLine has_all(\"-nop\", \"iex\", \"(iex\")) \n| join kind=leftouter (SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| mv-expand todynamic(Entities)\n| extend DeviceId = tostring(parse_json(Entities).MdatpDeviceId)\n| where isnotempty(DeviceId)\n// Increase risk score further if alerts relate to malware assocaited with threat actor\n| extend AlertRiskScore =iif(ThreatName has_any (\"Backdoor:MSIL/ShellClient.A\", \"Backdoor:MSIL/ShellClient.A!dll\", \"Trojan:MSIL/Mimikatz.BA!MTB\"), 1.0, 0.5)) on DeviceId\n| extend AlertRiskScore = iif(isempty(AlertRiskScore), 0.0 , AlertRiskScore)\n| project-reorder  TimeGenerated, DeviceName, DeviceId, ProcessCommandLine, AccountName\n| extend timestamp = TimeGenerated, AccountCustomEntity = AccountName, HostCustomEntity = DeviceName,  ProcessCustomEntity = InitiatingProcessFileName\n),\n(SecurityEvent\n| where EventID == '4688'\n| where ( CommandLine has_any(\"/q /c color f7&\", \"Net.We$()bClient\", \"$b,15,$b.Length-15\")) or (CommandLine has \"FromBase64String\" and CommandLine has_all(\"-nop\", \"iex\", \"(iex\"))\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type, CommandLine\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName\n),\n(WindowsEvent\n| where EventID == '4688' and (EventData has_any(\"/q /c color f7&\", \"Net.We$()bClient\", \"$b,15,$b.Length-15\") or (EventData has \"FromBase64String\" and EventData has_all(\"-nop\", \"iex\", \"(iex\")) )\n| extend CommandLine = tostring(EventData.CommandLine) \n| where ( CommandLine has_any(\"/q /c color f7&\", \"Net.We$()bClient\", \"$b,15,$b.Length-15\")) or (CommandLine has \"FromBase64String\" and CommandLine has_all(\"-nop\", \"iex\", \"(iex\"))\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| extend Account = iff((isempty(EventData.SubjectDomainName) or EventData.SubjectDomainName == \"-\"),\"\", strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName)))\n| extend NewProcessId = tostring(EventData.NewProcessId)\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type, CommandLine\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName\n)\n)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Account created in the last 7 days that is added to administrators group\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "let adminGroup = 'Administrators';\nIdentityInfo\n| where AccountCreationTime >= ago(7d)\n| where GroupMembership contains adminGroup\n| extend Account_0_AadUserId = AccountObjectId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Attack.\n Topic: TenableAD"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.kql parser into the workspace\n// Retrieve the parser here: https://raw.githubusercontent.com/tenable/Azure-Sentinel/Tenable.ad-connector/Solutions/TenableAD/Parsers/afad_parser.kql\n// Then, create the Kusto Function with alias afad_parser\nlet SeverityTable=datatable(Severity:string,Level:int) [\n  \"low\", 1,\n  \"medium\", 2,\n  \"high\", 3,\n  \"critical\", 4\n  ];\n  afad_parser\n  | where MessageType == 2\n  | lookup kind=leftouter SeverityTable on Severity\n  | order by Level\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The policy detects IAM users across your AWS accounts, a practice that should be kept only for a small number of accounts. This is a default definition by Authomize and can be updated using the edit modal. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"Detect AWS IAM Users\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for your services by regulating the access of third-party integrated apps. \nOnly allow access to necessary apps that support robust security controls.\n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'AzureSecureScoreIntegratedApps'"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query pulls in all the high severity Pensuite AI pentest findings into one location\n Topic: Prancer PenSuiteAI Integration"}, {"role": "assistant", "content": "prancer_CL\n| where act_s == 'message' and (severity_s == 'High' or severity_s == 'Critical')\n| project\n    Alert = name_s,\n    Tenant = companyName_s,\n    Collection = data_data_applicationName_s,\n    MITRE = data_alert_cvss_mitreId_s,\n    URL = data_alert_url_s,\n    Resource = data_data_resourceID_s,\n    Description = data_alert_description_s,\n    Solution = data_alert_solution_s,\n    Evidence = data_alert_evidence_s,\n    Request_Header = data_data_requestHeader_s,\n    Request_Body = data_data_requestBody_s,\n    Response_Header = data_data_responseHeader_s,\n    Response_Body = data_data_responseBody_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects the default service name created by KrbRelayUp. KrbRelayUp is Local Privilege Escalation tool that combine features of Rubeus and KrbRelay.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let MaliciousService = dynamic ([\"KrbSCM\"]);\nEvent\n| where Source == \"Service Control Manager\" and EventID == 7045\n| parse EventData with * 'ServiceName\">' ServiceName \"<\" * 'ImagePath\">' ImagePath \"<\" *\n| where ServiceName has_any (MaliciousService) or ImagePath has_any (MaliciousService)\n| parse EventData with * 'AccountName\">' AccountName \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, ServiceName, ImagePath, AccountName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows connection close reasons.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "let User_set = \nZPAEvent\n| where DvcAction has \"close\"\n| summarize Users = make_set(DstUserName)by EventResult;\nZPAEvent\n| where DvcAction has \"close\"\n| summarize EventCount = count()by EventResult\n| join (User_set) on EventResult\n| project-away EventResult1\n| top 20 by EventCount desc \n| extend AccountCustomEntity = Users\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule detects and alerts when large amount of deletion operations generated by the CTERA Edge Filer Topic: CTERA"}, {"role": "assistant", "content": "Syslog\n| where ProcessName == 'gw-audit'\n| extend\n    TenantName = extract(\"\\\"vportal\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage),\n    UserName = extract(\"user=([^|]*)\", 1, SyslogMessage),\n    Permission = extract(\"op=([^|]*)\", 1, SyslogMessage),\n    EdgeFiler = extract(\"\\\"client\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage),\n    RootPath = extract(\"rootPath=([^|]*)\", 1, SyslogMessage),\n    Share = extract(\"share=([^|]*)\", 1, SyslogMessage),\n    LocalPath = extract(\"path=([^|]*)\", 1, SyslogMessage),\n    Timestamp = todatetime(extract(\"\\\"@timestamp\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage))\n| where Permission == 'delete'\n| summarize Count = count() by UserName, bin(Timestamp, 5m)\n| where Count > 5000\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule helps to detect empty and unusual user agent indicating web browsing activity by an unusual process other than a web browser.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "Cisco_Umbrella\n| where EventType == \"proxylogs\"\n| where HttpUserAgentOriginal == ''\n| extend Message = \"Empty User Agent\"\n| project TimeGenerated, Message, SrcIpAddr, DstIpAddr, UrlOriginal \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a user is added to any of the Privileged Groups.\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\nFor Administrator role permissions in Microsoft Entra ID please see https://docs.microsoft.com/azure/active-directory/users-groups-roles/directory-assign-admin-roles\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let OperationList = dynamic([\"Add member to role\",\"Add member to role in PIM requested (permanent)\"]);\nlet PrivilegedGroups = dynamic([\"UserAccountAdmins\",\"PrivilegedRoleAdmins\",\"TenantAdmins\"]);\nAuditLogs\n//| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"RoleManagement\"\n| where OperationName in~ (OperationList)\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend TargetUserPrincipalName = tostring(TargetResource.userPrincipalName),\n               modProps = TargetResource.modifiedProperties\n  )\n| mv-apply Property = modProps on \n  (\n      where Property.displayName =~ \"Role.WellKnownObjectName\"\n      | extend DisplayName = trim('\"',tostring(Property.displayName)),\n               GroupName = trim('\"',tostring(Property.newValue))\n  )\n| extend InitiatingAppId = InitiatedBy.app.appId\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingAppServicePrincipalName = tostring(InitiatedBy.app.servicePrincipalName)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend InitiatingUserRoles = InitiatedBy.user.roles\n| where GroupName in~ (PrivilegedGroups)\n// If you don't want to alert for operations from PIM, remove below filtering for MS-PIM.\n//| where InitiatingAppName != \"MS-PIM\"\n| project TimeGenerated, AADOperationType, Category, OperationName, AADTenantId, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppId, InitiatingAppName, InitiatingAppServicePrincipalName, InitiatingAppServicePrincipalId, InitiatingIpAddress, DisplayName, GroupName, InitiatingUserRoles, TargetUserPrincipalName\n| extend AccountName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), AccountUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule is looking for new attacker behaviors observed by the Vectra Platform. This rule is focused on accounts detections.\n Topic: Vectra AI Detect"}, {"role": "assistant", "content": "CommonSecurityLog\n| where DeviceVendor == \"Vectra Networks\"\n| where DeviceProduct == \"X Series\"\n| where DeviceEventClassID != \"campaigns\"\n    and DeviceEventClassID != \"hsc\"\n    and DeviceEventClassID != \"audit\"\n    and DeviceEventClassID != \"health\"\n    and DeviceEventClassID != \"asc\"\n| extend Category = coalesce(\n    column_ifexists(\"DeviceEventCategory\", \"\"), \n    extract(\"cat=(.+?)(;|$)\", 1, AdditionalExtensions), \n    \"\"\n    )\n| project-rename threat_score = FlexNumber1\n| project-rename certainty_score = FlexNumber2\n| project-rename vectra_URL = DeviceCustomString4\n| project-rename detection_name = DeviceEventClassID\n| project-rename triaged = DeviceCustomString5\n| where triaged != \"True\" and AdditionalExtensions contains \"account\"\n| extend account = extract(\"account=(.+?);\", 1, AdditionalExtensions)\n| extend upn = iff(account matches regex \":\", tostring(split(account, \":\")[1]), tostring(split(account, \":\")[0]))\n| extend name = tostring(split(upn, \"@\")[0])\n| extend upn_suffix = tostring(split(upn, \"@\")[1])\n| extend source_entity = case(isnotempty(upn), upn,\n    isnotempty(SourceHostName), SourceHostName,\n    \"UNKNWON\")\n| extend level = case(threat_score == 0 and certainty_score == 0, \"Info\",\n    threat_score < 50 and certainty_score < 50, \"Low\",\n    threat_score < 50 and certainty_score >= 50, \"Medium\", \n    threat_score >= 50 and certainty_score <= 50, \"High\", \n    threat_score >= 50 and certainty_score >= 50, \"Critical\",\n    \"UNKNOWN\")\n| extend Severity = case(level == \"Info\", \"Informational\",level == \"Critical\", \"High\", level)\n| summarize arg_max(threat_score, *) by source_entity, Activity\n| sort by TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect application & infrastructure problems in your environment\n Topic: Dynatrace"}, {"role": "assistant", "content": "DynatraceProblems\n| summarize  arg_max(StartTime, *) by ProblemId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies a web request with a user agent header known to belong to a crypto miner. This indicates a crypto miner may have infected the client machine.<br>You can add custom crypto mining indicating User-Agent headers using a watchlist, for more information refer to the [UnusualUserAgents Watchlist](https://aka.ms/ASimUnusualUserAgentsWatchlist).<br><br>   This analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM WebSession schema (ASIM WebSession Schema)\n Topic: Detections"}, {"role": "assistant", "content": "let threatCategory=\"Cryptominer\";\nlet knownUserAgentsIndicators = materialize(externaldata(UserAgent:string, Category:string)\n    [ @\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/UnusualUserAgents.csv\"] \n        with(format=\"csv\", ignoreFirstRecord=True));\nlet knownUserAgents=toscalar(knownUserAgentsIndicators | where Category==threatCategory | where isnotempty(UserAgent) | summarize make_list(UserAgent));\nlet customUserAgents=toscalar(_GetWatchlist(\"UnusualUserAgents\") | where SearchKey==threatCategory | extend UserAgent=column_ifexists(\"UserAgent\",\"\") | where isnotempty(UserAgent) | summarize make_list(UserAgent));\nlet fullUAList = array_concat(knownUserAgents,customUserAgents);\n_Im_WebSession(httpuseragent_has_any=fullUAList)\n| summarize N_Events=count() by  SrcIpAddr, Url, TimeGenerated, HttpUserAgent, SrcUsername\n| extend AccountName = tostring(split(SrcUsername, \"@\")[0]), AccountUPNSuffix = tostring(split(SrcUsername, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Attackers who are trying to guess your users passwords or use brute-force methods to get in. If your organization is using SSO with Microsoft Entra ID, authentication logs to GitHub.com will be generated. Using the following query can help you identify a sudden increase in failed logon attempt of users.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let LearningPeriod = 7d;\nlet BinTime = 1h;\nlet RunTime = 1h;\nlet StartTime = 1h;  \nlet sensitivity = 2.5;\nlet EndRunTime = StartTime - RunTime;\nlet EndLearningTime = StartTime + LearningPeriod;\nlet aadFunc = (tableName:string){\ntable(tableName)  \n| where TimeGenerated between (ago(EndLearningTime) .. ago(EndRunTime))\n| where AppDisplayName =~ \"GitHub.com\"\n| where ResultType != 0\n| make-series FailedLogins = count() on TimeGenerated from ago(LearningPeriod) to ago(EndRunTime) step BinTime by UserPrincipalName, Type\n| extend (Anomalies, Score, Baseline) = series_decompose_anomalies(FailedLogins, sensitivity, -1, 'linefit')\n| mv-expand FailedLogins to typeof(double), TimeGenerated to typeof(datetime), Anomalies to typeof(double), Score to typeof(double), Baseline to typeof(long)  \n| where TimeGenerated >= ago(RunTime)\n| where Anomalies > 0 and Baseline > 0\n| join kind=inner (\n          table(tableName)  \n          | where TimeGenerated between (ago(StartTime) .. ago(EndRunTime))\n          | where AppDisplayName =~ \"GitHub.com\"\n          | where ResultType != 0\n          | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), IPAddresses = make_set(IPAddress,100), Locations = make_set(LocationDetails,20), Devices = make_set(DeviceDetail,20) by UserPrincipalName, UserId, AppDisplayName\n      ) on UserPrincipalName\n| project-away UserPrincipalName1\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n| extend IPAddressFirst = tostring(IPAddresses[0])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert creates an incident when an malware record is detected in the SpyCloud watchlist data\n Topic: SpyCloud Enterprise Protection"}, {"role": "assistant", "content": "SpyCloudBreachDataWatchlist_CL\n| where Severity_s == '25'\n| project TimeGenerated, Document_Id_g, Source_Id_s, SpyCloud_Publish_Date_t, Email_s, Domain_s, Password_s, Password_Plaintext_s, Username_s, Infected_Machine_Id_g, Infected_Path_s, Infected_Time_t, Target_Domain_s, Target_SubDomain_s, User_Hostname_s, User_OS_s, Target_URL_s,IP_Address_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "It detects authentication attempts performed with WMI. Adversaries may abuse WMI to execute malicious commands and payloads.\nRef: https://www.mandiant.com/resources/bypassing-network-restrictions-through-rdp-tunneling\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "SecurityEvent\n   | where EventID in (4624,4625) and ProcessName endswith_cs \"WmiPrvSE.exe\"\n   | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, TargetUserName, TargetLogonId, LogonTypeName, IpAddress, ProcessName\n   | extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n   | extend UserName = tostring(split(TargetUserName, '@', 0)[0]), UPNSuffix = tostring(split(TargetUserName, '@', 1)[0])\n   | extend Host_0_HostName = HostName\n   | extend Host_0_DnsDomain = DnsDomain\n   | extend Account_0_Name = UserName\n   | extend Account_0_UPNSuffix = UPNSuffix\n   | extend IP_0_Address = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies use of PowerShell Empires cmdlets within the command line data of the PowerShell process, indicating potential use of the post-exploitation tool.\n Topic: Attacker Tools Threat Protection Essentials"}, {"role": "assistant", "content": "let regexEmpire = tostring(toscalar(externaldata(cmdlets:string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/EmpireCommandString.txt\"] with (format=\"txt\")));\n(union isfuzzy=true\n (SecurityEvent\n| where EventID == 4688\n//consider filtering on filename if perf issues occur\n//where FileName in~ (\"powershell.exe\",\"powershell_ise.exe\",\"pwsh.exe\")\n| where not(ParentProcessName has_any ('gc_worker.exe', 'gc_service.exe'))\n| where CommandLine has \"-encodedCommand\"\n| parse kind=regex flags=i CommandLine with * \"-EncodedCommand \" encodedCommand\n| extend encodedCommand = iff(encodedCommand has \" \", tostring(split(encodedCommand, \" \")[0]), encodedCommand)\n// Note: currently the base64_decode_tostring function is limited to supporting UTF8\n| extend decodedCommand = translate('\\0','', base64_decode_tostring(substring(encodedCommand, 0, strlen(encodedCommand) -  (strlen(encodedCommand) %8)))), encodedCommand, CommandLine , strlen(encodedCommand)\n| extend EfectiveCommand = iff(isnotempty(encodedCommand), decodedCommand, CommandLine)\n| where EfectiveCommand matches regex regexEmpire\n| project timestamp = TimeGenerated, Computer, SubjectUserName, SubjectDomainName, FileName = Process, EfectiveCommand, decodedCommand, encodedCommand, CommandLine, ParentProcessName\n| extend HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n),\n(WindowsEvent\n| where EventID == 4688\n| where EventData has_any (\"-encodedCommand\", \"powershell.exe\",\"powershell_ise.exe\",\"pwsh.exe\")\n| where not(EventData has_any ('gc_worker.exe', 'gc_service.exe'))\n//consider filtering on filename if perf issues occur\n//extend NewProcessName = tostring(EventData.NewProcessName)\n//extend Process=tostring(split(NewProcessName, '\\\\')[-1])\n//FileName = Process\n//where FileName in~ (\"powershell.exe\",\"powershell_ise.exe\",\"pwsh.exe\")\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| where not(ParentProcessName has_any ('gc_worker.exe', 'gc_service.exe'))\n| extend CommandLine = tostring(EventData.CommandLine)\n| where CommandLine has \"-encodedCommand\"\n| parse kind=regex flags=i CommandLine with * \"-EncodedCommand \" encodedCommand\n| extend encodedCommand = iff(encodedCommand has \" \", tostring(split(encodedCommand, \" \")[0]), encodedCommand)\n// Note: currently the base64_decode_tostring function is limited to supporting UTF8\n| extend decodedCommand = translate('\\0','', base64_decode_tostring(substring(encodedCommand, 0, strlen(encodedCommand) -  (strlen(encodedCommand) %8)))), encodedCommand, CommandLine , strlen(encodedCommand)\n| extend EfectiveCommand = iff(isnotempty(encodedCommand), decodedCommand, CommandLine)\n| where EfectiveCommand matches regex regexEmpire\n| extend SubjectUserName = tostring(EventData.SubjectUserName)\n| extend SubjectDomainName = tostring(EventData.SubjectDomainName)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1])\n| project timestamp = TimeGenerated, Computer, SubjectUserName, SubjectDomainName, FileName = Process, EfectiveCommand, decodedCommand, encodedCommand, CommandLine, ParentProcessName\n| extend HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a single source is connecting to many different SMB or file shares.\n Topic: Corelight"}, {"role": "assistant", "content": "let threshold = 50;\ncorelight_smb_mapping\n| where TimeGenerated > ago(24h)\n| where isnotempty(path)\n| summarize sh_cnt = dcount(path) by id_orig_h, bin(TimeGenerated, 1m)\n| where sh_cnt > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection will go over the heartbeats received from the agents of Domain Controllers over the last hour, and will create alerts if the last heartbeats were received an hour ago.\n Topic: Detections"}, {"role": "assistant", "content": "let query_frequency = 15m;\nlet missing_period = 1h;\n//Enter a reference list of hostnames for your DC servers\nlet DCServersList = dynamic ([\"DC01.simulandlabs.com\",\"DC02.simulandlabs.com\"]);\n//Alternatively, a Watchlist can be used\n//let DCServersList = _GetWatchlist('HostName-DomainControllers') | project HostName;\nHeartbeat\n| summarize arg_max(TimeGenerated, *) by Computer\n| where Computer in (DCServersList)\n//You may specify the OS type of your Domain Controllers\n//| where OSType == 'Windows'\n| where TimeGenerated between (ago(query_frequency + missing_period) .. ago(missing_period))\n| project TimeGenerated, Computer, OSType, Version, ComputerEnvironment, Type, Solutions\n| sort by TimeGenerated asc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "DEV-0270 heavily uses powershell to achieve their objective at various stages of their attack. To locate powershell related activity tied to the actor, Microsoft Sentinel customers can run the following query.\n Topic: Dev 0270 Detection and Hunting"}, {"role": "assistant", "content": "(union isfuzzy=true\n(SecurityEvent\n| where EventID==4688\n| extend FileName=tostring(split(NewProcessName, @'\\')[(-1)]),  ProcessCommandLine = CommandLine, InitiatingProcessFileName=ParentProcessName\n| where (FileName =~ \"powershell.exe\" and ProcessCommandLine has_all(\"try\", \"Add-MpPreference\", \"-ExclusionPath\", \"ProgramData\", \"catch\")) or (FileName =~ 'powershell.exe' and ProcessCommandLine has_all('Add-PSSnapin', 'Get-Recipient', '-ExpandProperty', 'EmailAddresses', 'SmtpAddress', '-hidetableheaders') )\n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName, ProcessNameFullPath = NewProcessName, InitiatingProcessFileName, EventID, Activity, CommandLine, EventSourceName, Type\n),\n(DeviceProcessEvents \n| where (FileName =~ \"powershell.exe\" and ((ProcessCommandLine has_all(\"try\", \"Add-MpPreference\", \"-ExclusionPath\", \"ProgramData\", \"catch\"))  or (ProcessCommandLine has_all('Add-PSSnapin', 'Get-Recipient', '-ExpandProperty', 'EmailAddresses', 'SmtpAddress', '-hidetableheaders'))))\nor ( InitiatingProcessFileName =~ 'powershell.exe' and (((InitiatingProcessCommandLine has_all('$file=', 'dllhost.exe', 'Invoke-WebRequest', '-OutFile')) or ((InitiatingProcessCommandLine has_all('$admins=', 'System.Security.Principal.SecurityIdentifier', 'Translate', '-split', 'localgroup', '/add', '$rdp='))))))\n| extend Account = strcat(InitiatingProcessAccountDomain, @'\\', InitiatingProcessAccountName),  Computer = DeviceName\n)\n)\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountNTDomain = tostring(split(Account, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies clients with a high NXDomain count which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live). Alert is generated when a new IP address is seen (based on not being seen associated with \nNXDomain records in prior 10-day baseline period).\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM DNS schema\n Topic: Detections"}, {"role": "assistant", "content": "let referencestarttime = 10d;\nlet referenceendtime = 1d;\nlet threshold = 100;\nlet nxDomainDnsEvents = (stime:datetime, etime:datetime) \n  {_Im_Dns(responsecodename='NXDOMAIN', starttime=stime, endtime=etime)\n  | where DnsQueryTypeName in (\"A\", \"AAAA\")\n  | where ipv4_is_match(\"127.0.0.1\", SrcIpAddr) == False\n  | where DnsQuery !contains \"/\" and  DnsQuery contains \".\"};\nnxDomainDnsEvents (stime=ago(referenceendtime) ,etime=now())\n  | extend sld = tostring(split(DnsQuery, \".\")[-2])\n  | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), dcount(sld) by SrcIpAddr\n  | where dcount_sld > threshold\n  // Filter out previously seen IPs\n  | join kind=leftanti (nxDomainDnsEvents (stime=ago(referencestarttime), etime=ago(referenceendtime))\n    | extend sld = tostring(split(DnsQuery, \".\")[-2])\n    | summarize dcount(sld) by SrcIpAddr\n    | where dcount_sld > threshold ) on SrcIpAddr\n// Pull out sample NXDomain responses for those remaining potentially infected IPs\n| join kind = inner (nxDomainDnsEvents (stime=ago(referencestarttime), etime=now()) | summarize by DnsQuery, SrcIpAddr) on SrcIpAddr\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), sampleNXDomainList=make_list(DnsQuery, 100)  by SrcIpAddr, dcount_sld\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query detects Windows binaries that can be used for executing malware and have been hidden in the recycle bin.\nThe list of these binaries is sourced from https://lolbas-project.github.io/\nReferences: https://azure.microsoft.com/blog/how-azure-security-center-helps-reveal-a-cyberattack/.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "let procList = externaldata(Process:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Microsoft_Lolbas_Execution_Binaries.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet recycle_bin_paths = dynamic([@\":\\RECYCLER\", @\":\\$RECYCLE.BIN\"]);\nlet ProcessCreationEvents=(union isfuzzy=true\n(SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, NewProcessName,\nFileName = Process, CommandLine,  ParentProcessName\n),\n(WindowsEvent\n| where EventID==4688 and EventData has_any (procList) and EventData has_any (recycle_bin_paths)\n| extend CommandLine = tostring(EventData.CommandLine)\n| where isnotempty(CommandLine)\n| extend SubjectUserName = tostring(EventData.SubjectUserName)\n| extend SubjectDomainName = tostring(EventData.SubjectDomainName) \n| extend NewProcessName = tostring(EventData.NewProcessName)  \n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1])\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, NewProcessName,\nFileName = Process, CommandLine,  ParentProcessName\n));\nProcessCreationEvents \n| where FileName in~ (procList)\n| where CommandLine has_any (recycle_bin_paths)\n| project StartTimeUtc = TimeGenerated, Computer, Account, NewProcessName, FileName, CommandLine, ParentProcessName\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects medium severity alerts from ZeroFox\n Topic: ZeroFox"}, {"role": "assistant", "content": "ZeroFoxAlertPoller_CL\n| where Severity in (4)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection builds an allow list of historic PR policy bypasses and compares to recent history, flagging pull request bypasses that are not manually in the allow list and not historically included in the allow list.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "let starttime = 14d;\nlet endtime = 3h;\n// Add full UPN (user@domain.com) to Authorized Bypassers to ignore policy bypasses by certain authorized users\nlet AuthorizedBypassers = dynamic(['foo@baz.com', 'test@foo.com']);\nlet historicBypassers = AzureDevOpsAuditing\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where OperationName == 'Git.RefUpdatePoliciesBypassed'\n| distinct ActorUPN;\nAzureDevOpsAuditing\n| where TimeGenerated >= ago(endtime)\n| where OperationName == 'Git.RefUpdatePoliciesBypassed'\n| where ActorUPN !in (historicBypassers) and ActorUPN !in (AuthorizedBypassers)\n| parse ScopeDisplayName with OrganizationName '(Organization)'\n| project TimeGenerated, ActorUPN, IpAddress, UserAgent, OrganizationName, ProjectName, RepoName = Data.RepoName, AlertDetails = Details, Branch = Data.Name,\n  BypassReason = Data.BypassReason, PRLink = strcat('https://dev.azure.com/', OrganizationName, '/', ProjectName, '/_git/', Data.RepoName, '/pullrequest/', Data.PullRequestId)\n| extend timestamp = TimeGenerated\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detections of risky role names could indicate that a malicious framework was executed in your environment.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let PacuRoleNames = (\nexternaldata (RoleName:string)\n[h@'https://raw.githubusercontent.com/RhinoSecurityLabs/pacu/master/pacu/modules/iam__enum_roles/default-word-list.txt']\n);\nAWSCloudTrail\n| where EventName == \"CreateRole\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend roleName = parse_json(tostring((parse_json(RequestParameters)))).roleName\n| where roleName in (PacuRoleNames)\n| distinct TimeGenerated, EventName, SourceIpAddress, UserIdentityArn, UserIdentityUserName, tostring(roleName), UserIdentityAccountId, AWSRegion\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| summarize EventCount = count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), EventNameList=make_set(EventName), IPList=make_set(SourceIpAddress) by UserIdentityAccountId, AWSRegion, UserIdentityUserName, TimeGenerated, SourceIpAddress\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible outbreak activity.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where NetworkDirection =~ 'Incoming'\n| where tostring(AdditionalFields) has 'ESAOFVerdict'\n| extend of_verdict = extract(@'ESAOFVerdict\":\"(NOT_EVALUATED|POSITIVE|NEGATIVE)\"', 1, tostring(AdditionalFields))\n| where of_verdict =~ 'POSITIVE'\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "View Cybersixgill Actionable alerts for last 30 days\n Topic: Cybersixgill-Actionable-Alerts"}, {"role": "assistant", "content": "CyberSixgill_Alerts_CL\n| where TimeGenerated > ago(30d)"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Attackers often use LOLBINs that are renamed to avoid detection rules that are based on filenames.\nThis rule detects renamed LOLBINs by first searching for all the known SHA1 hashes of the LOLBINs in your DeviceProcessEvents. This list is then used as reference to find other files executed which have a name that doesnt match the original filename. \nThis query is really heavy on resources. Use it with care.\n Topic: FalconFriday"}, {"role": "assistant", "content": "// Removed update.exe as LOLBIN. It's a way too generic name and causes a lot of noise. \nlet lolbin = dynamic([\"At.exe\", \"Atbroker.exe\", \"Bash.exe\", \"Bitsadmin.exe\", \"CertReq.exe\", \"Certutil.exe\", \"Cmd.exe\", \"Cmdkey.exe\", \"Cmstp.exe\", \"Control.exe\", \"Csc.exe\", \"Cscript.exe\", \"Desktopimgdownldr.exe\", \"Dfsvc.exe\", \"Diantz.exe\", \"Diskshadow.exe\", \"Dnscmd.exe\", \"Esentutl.exe\", \"Eventvwr.exe\", \"Expand.exe\", \"Extexport.exe\", \"Extrac32.exe\", \"Findstr.exe\", \"Forfiles.exe\", \"Ftp.exe\", \"GfxDownloadWrapper.exe\", \"Gpscript.exe\", \"Hh.exe\", \"Ie4uinit.exe\", \"Ieexec.exe\", \"Ilasm.exe\", \"Infdefaultinstall.exe\", \"Installutil.exe\", \"Jsc.exe\", \"Makecab.exe\", \"Mavinject.exe\", \"Microsoft.Workflow.Compiler.exe\", \"Mmc.exe\", \"MpCmdRun.exe\", \"Msbuild.exe\", \"Msconfig.exe\", \"Msdt.exe\", \"Mshta.exe\", \"Msiexec.exe\", \"Netsh.exe\", \"Odbcconf.exe\", \"Pcalua.exe\", \"Pcwrun.exe\", \"Pktmon.exe\", \"Presentationhost.exe\", \"Print.exe\", \"Psr.exe\", \"Rasautou.exe\", \"Reg.exe\", \"Regasm.exe\", \"Regedit.exe\", \"Regini.exe\", \"Register-cimprovider.exe\", \"Regsvcs.exe\", \"Regsvr32.exe\", \"Replace.exe\", \"Rpcping.exe\", \"Rundll32.exe\", \"Runonce.exe\", \"Runscripthelper.exe\", \"Sc.exe\", \"Schtasks.exe\", \"Scriptrunner.exe\", \"SyncAppvPublishingServer.exe\", \"Ttdinject.exe\", \"Tttracer.exe\", \"vbc.exe\", \"Verclsid.exe\", \"Wab.exe\", \"Wmic.exe\", \"Wscript.exe\", \"Wsreset.exe\", \"Xwizard.exe\", \"AgentExecutor.exe\", \"Appvlp.exe\", \"Bginfo.exe\", \"Cdb.exe\", \"csi.exe\", \"Devtoolslauncher.exe\", \"dnx.exe\", \"Dotnet.exe\", \"Dxcap.exe\", \"Excel.exe\", \"Mftrace.exe\", \"Msdeploy.exe\", \"msxsl.exe\", \"ntdsutil.exe\", \"Powerpnt.exe\", \"rcsi.exe\", \"Sqldumper.exe\", \"Sqlps.exe\", \"SQLToolsPS.exe\", \"Squirrel.exe\", \"te.exe\", \"Tracker.exe\", \"vsjitdebugger.exe\", \"Winword.exe\", \"Wsl.exe\"]); \nlet allHashesLolbin = materialize(\nDeviceProcessEvents\n| where FileName in~ (lolbin) and not(isempty(SHA1))\n| extend OriginalFilename = tolower(FileName)\n| summarize by SHA1, OriginalFilename);\nallHashesLolbin\n| join kind=inner hint.strategy = broadcast DeviceProcessEvents on SHA1\n| where FileName !~ OriginalFilename\n| where not(OriginalFilename =~ \"bash.exe\" and FileName =~ \"sh.exe\")\n| extend message=strcat(\"Usage of \", OriginalFilename, \". Renamed as \", FileName)\n| project-reorder message\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Privileged Identity Management (PIM) generates alerts when there is suspicious or unsafe activity in Microsoft Entra ID (Azure AD) organization. \nThis query will help detect attackers attempts to disable in product PIM alerts which are associated with Azure MFA requirements and could indicate activation of privileged access\n Topic: Detections"}, {"role": "assistant", "content": "AuditLogs\n| where LoggedByService =~ \"PIM\"\n| where Category =~ \"RoleManagement\"\n| where ActivityDisplayName has \"Disable PIM Alert\"\n| extend IpAddress = case(\n  isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)) and tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) != 'null', tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), \n  isnotempty(tostring(parse_json(tostring(InitiatedBy.app)).ipAddress)) and tostring(parse_json(tostring(InitiatedBy.app)).ipAddress) != 'null', tostring(parse_json(tostring(InitiatedBy.app)).ipAddress),\n  'Not Available')\n| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \n  tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName)), UserRoles = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| project InitiatedBy, ActivityDateTime, ActivityDisplayName, IpAddress, AADOperationType, AADTenantId, ResourceId, CorrelationId, Identity\n| extend AccountName = tostring(split(InitiatedBy, \"@\")[0]), AccountUPNSuffix = tostring(split(InitiatedBy, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identity and Access Management (IAM) securely manages access to AWS services and resources.\nThis query looks for when an API call is made to change an IAM, particularly those related to new objects being created or deleted. If these turn out to be noisy, filter out the most common for your environment.  \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n | where  EventName in~ (\"DeleteUser\", \"DeleteGroup\", \"CreateUser\") and isempty(ErrorMessage) and isempty(ErrorCode)\n | project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \n   UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements\n | extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityAccountId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of files with error requests.\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "NGINXHTTPServer\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 400 and HttpStatusCode <= 599 \n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| summarize TotalFile = count() by File\n| top 20 by TotalFile desc\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "External Fabric Module XFM1 is unhealthy Topic: Pure Storage"}, {"role": "assistant", "content": "Syslog\n| where SyslogMessage has \"purity.alert\"\n| extend Message = replace_string(SyslogMessage, \"#012\", \"\\n\")\n| extend UTCTime = extract(@\"UTC Time:\\s*(\\d{4}\\s\\w{3}\\s\\d{1,2}\\s\\d{2}:\\d{2}:\\d{2})\\sUTC\", 1, SyslogMessage)\n| extend PureAlertID = extract(@\"Alert ID: ([\\w-]+)\", 1, SyslogMessage)\n| extend PureMessage = extract(@\"\\(Alert ID: [\\w-]+\\)\\s(.*?)\\s\\[\\d+\\]\", 1, SyslogMessage)\n| extend PureSeverity = extract(@\"\\s(\\w+)\\s\", 1, SyslogMessage)\n| extend PureAlertState = extract(@\"purity\\.alert:\\s\\w+\\s(\\w+)\", 1, SyslogMessage)\n| extend PureObjectName = extract(@\"\\s(\\S+):\", 1, SyslogMessage)\n| extend PureProcessID = extract(@\"\\[(\\d+)\\]\", 1, SyslogMessage)\n| extend PureAction = extract(@\"Suggested Action:\\s*(.*?)(?:\\s*Knowledge Base Article:|$)\", 1, SyslogMessage)\n| extend PureUrl = extract(@\"Knowledge Base Article:\\s*(.*)\", 1, SyslogMessage)\n| project  PureMessage, TimeGenerated, PureProcessID, HostIP, Computer, PureObjectName, PureSeverity, PureAlertID, PureAlertState, PureAction, PureUrl\n| where PureMessage matches regex @\"(External Fabric Module XFM1 is unhealthy)\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert will detect creation of an SPN, permissions granted, credentials created, activity and deletion of the SPN in a time frame (default 10 minutes)\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let queryfrequency = 1h;\nlet wait_for_deletion = 10m;\nlet account_created =\n  AuditLogs \n  | where ActivityDisplayName == \"Add service principal\"\n  | where Result == \"success\"\n  | extend AppID = tostring(AdditionalDetails[1].value)\n  | extend creationTime = ActivityDateTime\n  | extend CreatorUserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | extend CreatorIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress);\nlet account_activity =\n  AADServicePrincipalSignInLogs\n  | extend Activities = pack(\"ActivityTime\", TimeGenerated ,\"IpAddress\", IPAddress, \"ResourceDisplayName\", ResourceDisplayName)\n  | extend AppID = AppId\n  | summarize make_list(Activities) by AppID;\nlet account_deleted =\n  AuditLogs \n  | where OperationName == \"Remove service principal\"\n  | where Result == \"success\"\n  | extend AppID = tostring(AdditionalDetails[1].value)\n  | extend deletionTime = ActivityDateTime\n  | extend DeleterUserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | extend DeleterIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress);\nlet account_credentials =\n  AuditLogs\n  | where OperationName has_all (\"Update application\", \"Certificates and secrets management\")\n  | where Result == \"success\"\n  | extend AppID = tostring(AdditionalDetails[1].value)\n  | extend credentialCreationTime = ActivityDateTime;\nlet roles_assigned =\n  AuditLogs\n  | where ActivityDisplayName == \"Add app role assignment to service principal\"\n  | extend AppID = tostring(TargetResources[1].displayName)\n  | extend AssignedRole =  iff(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].displayName)==\"AppRole.Value\", tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue))),\"\")\n  | extend AssignedRoles = pack(\"Role\", AssignedRole)\n  | summarize make_list(AssignedRoles) by AppID;\naccount_created\n| where TimeGenerated between (ago(wait_for_deletion+queryfrequency)..ago(wait_for_deletion))\n| join kind= inner (account_activity) on AppID\n| join kind= inner (account_deleted) on AppID\n| join kind= inner (account_credentials) on AppID\n| join kind= inner (roles_assigned) on AppID\n| where deletionTime - creationTime between (time(0s)..wait_for_deletion)\n| extend AliveTime = deletionTime - creationTime\n| project AADTenantId, AppID, creationTime, deletionTime, CreatorUserPrincipalName, DeleterUserPrincipalName, CreatorIPAddress, DeleterIPAddress, list_Activities, list_AssignedRoles, AliveTime\n| extend CreatorName = tostring(split(CreatorUserPrincipalName, \"@\")[0]), CreatorUPNSuffix = tostring(split(CreatorUserPrincipalName, \"@\")[1])\n| extend DeleterName = tostring(split(DeleterUserPrincipalName, \"@\")[0]), DeleterSuffix = tostring(split(DeleterUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will help you discover any new admin account activity which was seen and were not seen historically.\nAny new accounts seen in the results can be validated and investigated for any suspicious activities.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet historicalActivity =\n  EnrichedMicrosoft365AuditLogs\n  | where TimeGenerated between (lookback .. starttime)\n  | where RecordType == \"ExchangeAdmin\" and UserType in (\"Admin\", \"DcAdmin\")\n  | summarize historicalCount = count() by UserId;\nlet recentActivity = EnrichedMicrosoft365AuditLogs\n  | where TimeGenerated between (starttime .. endtime)\n  | where UserType in (\"Admin\", \"DcAdmin\")\n  | summarize recentCount = count() by UserId;\nrecentActivity\n| join kind=leftanti (historicalActivity) on UserId\n| project UserId, recentCount\n| join kind=rightsemi (\n    EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated between (starttime .. endtime)\n    | where RecordType == \"ExchangeAdmin\" \n    | where UserType in (\"Admin\", \"DcAdmin\")\n  ) on UserId\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by RecordType, Operation, UserType, UserId, ResultStatus\n| extend AccountName = iff(UserId contains '@', tostring(split(UserId, '@')[0]), UserId)\n| extend AccountUPNSuffix = iff(UserId contains '@', tostring(split(UserId, '@')[1]), '')\n| extend AccountName = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[1]), AccountName)\n| extend AccountNTDomain = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[0]), '')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies exploitation attempts using Pulse Connect Secure(PCS) vulnerability (CVE-2021-22893) to the VPN server\n Topic: Detections"}, {"role": "assistant", "content": "let threshold = 3;\nPulseConnectSecure\n| where Messages contains \"Unauthenticated request url /dana-na/\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by Source_IP\n| where count_ > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Valence Security Alerts\n Topic: Valence Security"}, {"role": "assistant", "content": "ValenceAlert_CL\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Microsoft Sentinel incidents for high risk Theom alerts.\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n | where priority_s == \"P2\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Syslog URL match found in your Infoblox TIDE Threat Intelligence. Customize query count, scheduling, responses and more. Modify data sources, types and threat properties as desired.\n Topic: Infoblox Cloud Data Connector"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet TI = ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()  \n| where Description has_cs \"Infoblox - URL\"\n| where isnotempty(DomainName)\n;\nlet Data = Syslog\n| extend HitTime = TimeGenerated\n| where TimeGenerated >= ago(dt_lookBack)\n//Extract URL patterns from syslog message\n| extend Url = extract(\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\", 1,SyslogMessage)\n| where isnotempty(Url)\n;\nTI | join kind=innerunique Data on $left.DomainName == $right.Url\n| where HitTime >= TimeGenerated and HitTime < ExpirationDateTime\n| project LatestIndicatorTime, HitTime, SyslogMessage, Computer, ProcessName, Url, HostIP, \nAdditionalInformation, Description, ThreatType, TrafficLightProtocolLevel, Type, ConfidenceScore, ExpirationDateTime, SourceSystem, Action, IndicatorId, ExternalIndicatorId, Tags\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This content is employed to correlate with Microsoft Defender XDR phishing-related alerts. It focuses on instances where a user successfully connects to a phishing URL from a non-Microsoft network device and subsequently makes successful sign-in attempts from the phishing IP address.\n Topic: Detections"}, {"role": "assistant", "content": "let Alert_List= dynamic([\n\"Phishing link click observed in Network Traffic\",\n\"Phish delivered due to an IP allow policy\",\n\"A potentially malicious URL click was detected\",\n\"High Risk Sign-in Observed in Network Traffic\",\n\"A user clicked through to a potentially malicious URL\",\n\"Suspicious network connection to AitM phishing site\",\n\"Messages containing malicious entity not removed after delivery\",\n\"Email messages containing malicious URL removed after delivery\",\n\"Email reported by user as malware or phish\",\n\"Phish delivered due to an ETR override\",\n\"Phish not zapped because ZAP is disabled\"]);\nSecurityAlert\n| where AlertName in~ (Alert_List)\n//Findling Alerts which has the URL\n| where Entities has \"url\"\n//extracting Entities\n| extend Entities = parse_json(Entities)\n| mv-apply Entity = Entities on\n    (\n    where Entity.Type == 'url'\n    | extend EntityUrl = tostring(Entity.Url)\n    )\n| summarize\n    Url=tostring(tolower(take_any(EntityUrl))),\n    AlertTime= min(TimeGenerated),\n    make_set(SystemAlertId, 100)\n    by ProductName, AlertName\n// matching with 3rd party network logs and 3p Alerts\n| join kind= inner (CommonSecurityLog\n    | where DeviceVendor has_any  (\"Palo Alto Networks\", \"Fortinet\", \"Check Point\", \"Zscaler\")\n    | where DeviceProduct startswith \"FortiGate\" or DeviceProduct startswith  \"PAN\" or DeviceProduct startswith  \"VPN\" or DeviceProduct startswith \"FireWall\" or DeviceProduct startswith  \"NSSWeblog\" or DeviceProduct startswith \"URL\"\n    | where DeviceAction != \"Block\"\n    | where isnotempty(RequestURL)\n    | project\n        3plogTime=TimeGenerated,\n        DeviceVendor,\n        DeviceProduct,\n        Activity,\n        DestinationHostName,\n        DestinationIP,\n        RequestURL=tostring(tolower(RequestURL)),\n        MaliciousIP,\n        SourceUserName=tostring(tolower(SourceUserName)),\n        IndicatorThreatType,\n        ThreatSeverity,\n        ThreatConfidence,\n        SourceUserID,\n        SourceHostName)\n    on $left.Url == $right.RequestURL\n// matching successful Login from suspicious IP\n| join kind=inner (SigninLogs\n    //filtering the Successful Login\n    | where ResultType == 0\n    | project\n        IPAddress,\n        SourceSystem,\n        SigniningTime= TimeGenerated,\n        OperationName,\n        ResultType,\n        ResultDescription,\n        AlternateSignInName,\n        AppDisplayName,\n        AuthenticationRequirement,\n        ClientAppUsed,\n        RiskState,\n        RiskLevelDuringSignIn,\n        UserPrincipalName=tostring(tolower(UserPrincipalName)),\n        Name = tostring(split(UserPrincipalName, \"@\")[0]),\n        UPNSuffix =tostring(split(UserPrincipalName, \"@\")[1]))\n    on $left.DestinationIP == $right.IPAddress and $left.SourceUserName == $right.UserPrincipalName\n| where SigniningTime between ((AlertTime - 6h) .. (AlertTime + 6h)) and 3plogTime between ((AlertTime - 6h) .. (AlertTime + 6h))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query correlates Threat Intelligence data from Microsoft Sentinel with GitLab NGINX Access Logs (available in GitLab CE as well) to identify access from potentially TI-flagged IPs.\n Topic: GitLab"}, {"role": "assistant", "content": "ThreatIntelligenceIndicator\n| where Action == true\n// Picking up only IOCs that contain the entities we want\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n// Taking the first non-empty value based on potential IOC match availability\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n//Exclude local addresses using ipv4_is_private operator\n|where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n| join (GitLabAccess) on $left.TI_ipEntity == $right.IPAddress\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, TimeGenerated = EventTime, TI_ipEntity, IPAddress, URI\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create Microsoft Sentinel Incident When Ven Goes Into Offline state\n Topic: IllumioSaaS"}, {"role": "assistant", "content": "Illumio_Auditable_Events_CL\n| union IllumioSyslogAuditEvents    \n| where event_type has 'agent_offline_check'\n| mv-expand resource_changes\n| extend hostname = resource_changes['resource']['workload']['hostname'],\n    workload_href = resource_changes['resource']['workload']['href'],\n    workload_labels = resource_changes['resource']['workload']['labels']\n| project-away resource_changes, version, notifications, action, severity, status // action field will have filtered ip addr, so no point of using IP entity\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query displays user edits to scheduled tasks via crontab, bucketed into 10-min intervals. It collects all actions by a user over seven days.\n Topic: Syslog"}, {"role": "assistant", "content": "\n// Pull messages from Syslog-cron logs where the process is crontab and the severity level is \"info\". Extract the User and Action information from the SyslogMessage\nSyslog \n| where Facility =~ \"cron\" \n| where ProcessName =~ \"crontab\" \n| where SeverityLevel =~ \"info\" \n| project TimeGenerated, Computer, SeverityLevel, ProcessName, SyslogMessage\n| parse SyslogMessage with * \"(\" user  \") \" Action \" (\" *\n// Only look for messages that contain edit or replace\n| where Action contains \"EDIT\" or Action contains \"REPLACE\"\n//| summarize all the actions into a single set based on 10 minute time intervals\n| summarize ListOfActions = makeset(Action) by EventTime10MinInterval = bin(TimeGenerated, 10m), Computer, user   \n| order by Computer asc nulls last, EventTime10MinInterval asc\n| extend timestamp = EventTime10MinInterval, AccountCustomEntity = user, HostCustomEntity = Computer\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects attempts by malware to hide the scheduled task by deleting the SD (Security Descriptor) value. Removal of SD value results in the scheduled task disappearing from schtasks /query and Task Scheduler.\n The query requires auditing to be turned on for HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree registry hive as well as audit policy for registry auditing to be turned on.\n Reference: https://www.microsoft.com/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/\n Reference: https://4sysops.com/archives/audit-changes-in-the-windows-registry/\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID == 4657\n| extend EventData = parse_xml(EventData).EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, TargetAccount, Computer, EventSourceName, Channel, Task, Level, EventID, Activity, TargetLogonId, SourceComputerId, EventOriginId, Type, _ResourceId, TenantId, SourceSystem, ManagementGroupName, IpAddress, Account)\n| extend ObjectName = column_ifexists('ObjectName', \"\"), OperationType = column_ifexists('OperationType', \"\"), ObjectValueName = column_ifexists('ObjectValueName', \"\")\n| where ObjectName has 'Schedule\\\\TaskCache\\\\Tree' and ObjectValueName == \"SD\" and OperationType == \"%%1906\"  // %%1906 - Registry value deleted\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(TargetAccount, @'\\')[1]), AccountNTDomain = tostring(split(TargetAccount, @'\\')[0])\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query helps identify bots added to multiple Teams in a short space of time.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let threshold = 2;  // Adjust this threshold based on your environment\nlet time_threshold = timespan(5m);  // Adjust the time delta threshold\n// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n    | where OfficeWorkload =~ \"MicrosoftTeams\"\n    | where Operation =~ \"BotAddedToTeam\"\n    | summarize Start = max(TimeGenerated), End = min(TimeGenerated), Teams = make_set(TeamName, 10000) by UserId\n    | extend CountOfTeams = array_length(Teams)\n    | extend TimeDelta = End - Start\n    | where CountOfTeams > threshold\n    | where TimeDelta >= time_threshold\n    | project Start, End, Teams, CountOfTeams, UserId\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n    | extend Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix;\n// EnrichedMicrosoft365AuditLogs Query\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where Workload == \"MicrosoftTeams\"\n    | where Operation == \"BotAddedToTeam\"\n    | extend TeamName = tostring(parse_json(tostring(AdditionalProperties)).TeamName)\n    | summarize Start = max(TimeGenerated), End = min(TimeGenerated), Teams = make_set(TeamName, 10000) by UserId\n    | extend CountOfTeams = array_length(Teams)\n    | extend TimeDelta = End - Start\n    | where CountOfTeams > threshold\n    | where TimeDelta <= time_threshold\n    | project Start, End, Teams, CountOfTeams, UserId\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n    | extend Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix;\n// Combine Office and Enriched Logs\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize arg_min(Start, *) by UserId;\n// Final Output\nCombinedEvents\n    | project Start, End, Teams, CountOfTeams, UserId, AccountName, AccountUPNSuffix\n    | order by Start desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for files which where seen in logs over period of time.\n Topic: Corelight"}, {"role": "assistant", "content": "corelight_files\n| mv-expand todynamic(conn_uids)\n| extend uid=tostring(conn_uids)\n| join kind=leftouter corelight_conn on uid\n| summarize makeset(filename) by id_orig_h\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects a match in Workday activity from any IP Indicator of Compromise (IOC) provided by Threat Intelligence (TI).\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dtLookBack = 1h; // Define the lookback period for audit events\nlet ioc_lookBack = 14d; // Define the lookback period for threat intelligence indicators\nThreatIntelligenceIndicator \n| where TimeGenerated >= ago(ioc_lookBack) // Filter threat intelligence indicators within the lookback period\n| where isnotempty(NetworkIP)\n      or isnotempty(EmailSourceIpAddress)\n      or isnotempty(NetworkDestinationIP)\n      or isnotempty(NetworkSourceIP) // Filter for indicators with relevant IP fields\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId // Get the latest indicator time for each IndicatorId\n  | extend TI_ipEntity = coalesce(NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress) // Combine IP fields into a single entity\n  | where Active == true and ExpirationDateTime > now() // Filter for active indicators that have not expired\n  | join kind=inner (\n      ASimAuditEventLogs\n      | where EventVendor == \"Workday\" // Filter for Workday events\n      | where TimeGenerated >= ago(dtLookBack) // Filter events within the lookback period\n      | where isnotempty(DvcIpAddr) // Filter for events with a device IP address\n      | extend WD_TimeGenerated = EventStartTime // Rename the event start time column\n      | project WD_TimeGenerated, ActorUsername, DvcIpAddr, Operation, Object // Select relevant columns\n      )\n      on $left.TI_ipEntity == $right.DvcIpAddr // Join on the IP entity\n  | project\n      LatestIndicatorTime,\n      Description,\n      ActivityGroupNames,\n      IndicatorId,\n      ThreatType,\n      Url,\n      ExpirationDateTime,\n      ConfidenceScore,\n      WD_TimeGenerated,\n      ActorUsername,\n      DvcIpAddr,\n      Operation,\n      Object // Select relevant columns after the join\n  | extend\n      timestamp = WD_TimeGenerated,\n      Name = tostring(split(ActorUsername, '@', 0)),\n      UPNSuffix = tostring(split(ActorUsername, '@', 1)) // Add additional fields for timestamp, name, and UPN suffix    \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects sensitive data transfer over insecure channel.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where isnotempty(MatchedPolicies)\n| where isnotempty(inspected_document)\n| where NetworkApplicationProtocol =~ 'HTTP'\n| extend AccountCustomEntity = SrcUserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when SMB traffic crosses Production and Non-Production Realms. Possible network share discovery or lateral tool transfer across realms\n Topic: vArmour Application Controller"}, {"role": "assistant", "content": "CommonSecurityLog\n| where DeviceVendor == \"vArmour\"\n| where DeviceProduct == \"AC\"\n| where Activity == \"POLICY_VIOLATION\"\n| extend PolicyName = extract(\"(SMB_REALM_TRAVERSAL\\\\w+{.*})\", 1, DeviceCustomString1)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checking for a threefold increase or more in Full Name lookups per client IP for today vs. the daily average for the previous week.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let starttime = now();\nlet endtime = now();\nlet lookback = ago(7d);\n//example of excluding Saturday and Sunday in Average as those are potentially low volume and decrease the average, feel free to change\nlet excludedDays = dynamic([\"Saturday\", \"Sunday\"]);\n// average is across 5 days as we are dropping weekends, change as needed\nlet numDays = 5;\n// limit to over 1000 lookups somewhat random but helps focus in on higher lookups, change as needed\nlet avglookupThreshold = 3;\nlet lookupThreshold = 1000;\n//Setting to startofday so we get 7 days prior to today\n_Im_Dns(starttime=startofday(lookback),endtime=startofday(starttime))\n//getting the associated number of the day of the week so we can map to a given day for later parsing if needed\n| extend DayNumberofWeek = tostring(dayofweek(TimeGenerated))\n//Setting the Day of the week value so that certain days could be excluded if needed\n| extend DayofWeek = iff(DayNumberofWeek == \"00:00:00\", \"Sunday\",\n(iff(DayNumberofWeek == \"1.00:00:00\", \"Monday\",\n(iff(DayNumberofWeek == \"2.00:00:00\", \"Tuesday\",\n(iff(DayNumberofWeek == \"3.00:00:00\", \"Wednesday\",\n(iff(DayNumberofWeek == \"4.00:00:00\", \"Thursday\",\n(iff(DayNumberofWeek == \"5.00:00:00\", \"Friday\",\n(iff(DayNumberofWeek == \"6.00:00:00\", \"Saturday\", DayNumberofWeek)))))))))))))\n| where DayofWeek !in~ (excludedDays)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by SrcIpAddr, DnsQuery\n| project StartTime, EndTime, SrcIpAddr, FullNameLookup = DnsQuery, DailyAvgLookupCountOverLastWeek = count_/numDays\n| join ( _Im_Dns\n| where TimeGenerated between(startofday(starttime)..endofday(endtime))\n| summarize count() by SrcIpAddr, FullNameLookup = DnsQuery\n| project SrcIpAddr, LookupCountToday = count_, FullNameLookup\n)\non SrcIpAddr, FullNameLookup\n| where LookupCountToday > (DailyAvgLookupCountOverLastWeek * avglookupThreshold) and LookupCountToday >= lookupThreshold\n| project StartTime, EndTime, SrcIpAddr, LookupCountToday, DailyAvgLookupCountOverLastWeek, FullNameLookup\n| order by LookupCountToday desc nulls last\n| extend timestamp = StartTime\n| extend IP_0_Address = SrcIpAddr\n| extend DNS_0_DomainName = FullNameLookup\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert leverages Defender for IoT to detect IoT/OT malware found on the network indicating possible attempts to compromise production systems.\n Topic: IoTOTThreatMonitoringwithDefenderforIoT"}, {"role": "assistant", "content": "let alertList = dynamic([\"Malware\", \"Suspicion of Malicious Activity\", \"Invalid SMB Message (DoublePulsar Backdoor Implant)\", \"Connection Attempt to Known Malicious IP\", \"Malicious Domain Name Request\", \"Suspicion of Remote Code Execution with PsExec\", \"Suspicion of Remote Windows Service Management\", \"Suspicious Executable File Detected on Endpoint\", \"Suspicious Traffic Detected\"]);\nSecurityAlert\n| where ProviderName == \"IoTSecurity\"\n| where AlertName has_any (alertList) \n| extend ExtendedProperties = parse_json(ExtendedProperties)\n| where tostring(ExtendedProperties.isNew) == \"True\"\n| extend DeviceId = tostring(ExtendedProperties.DeviceId), \n         SourceDeviceAddress = tostring(ExtendedProperties.SourceDeviceAddress), \n         DestDeviceAddress = tostring(ExtendedProperties.DestinationDeviceAddress), \n         RemediationSteps = tostring(parse_json(RemediationSteps)[0]), \n         Protocol = tostring(ExtendedProperties.Protocol), \n         AlertManagementUri = tostring(ExtendedProperties.AlertManagementUri)\n| project\n  TimeGenerated,\n  DeviceId,\n  ProductName,\n  ProductComponentName,\n  AlertSeverity,\n  AlertName,\n  Description,\n  Protocol,\n  SourceDeviceAddress,\n  DestDeviceAddress,\n  RemediationSteps,\n  Tactics,\n  Entities,\n  VendorOriginalId,\n  AlertLink,\n  AlertManagementUri,\n  Techniques\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection flags the occurrences of deleting multiple teams within a day.\nThis data is a part of Office 365 Connector in Microsoft Sentinel.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "// Set the maximum number of deleted teams to flag suspicious activity\nlet max_delete_count = 3;\n// EnrichedMicrosoft365AuditLogs Query\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where Workload =~ \"MicrosoftTeams\"\n    | where Operation =~ \"TeamDeleted\"\n    | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DeletedTeams = make_set(tostring(AdditionalProperties.TeamName), 1000) by UserId\n    | where array_length(DeletedTeams) > max_delete_count\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n    | where OfficeWorkload =~ \"MicrosoftTeams\"\n    | where Operation =~ \"TeamDeleted\"\n    | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DeletedTeams = make_set(TeamName, 1000) by UserId\n    | where array_length(DeletedTeams) > max_delete_count\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n// Combine and Deduplicate Office and Enriched Logs\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize arg_min(StartTime, *) by UserId;\n// Final Output\nCombinedEvents\n    | project StartTime, EndTime, DeletedTeams, UserId, AccountName, AccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies unusual bulk sharing, based on a predefined threshold in the query, of Power Apps to newly created Microsoft Entra guest users. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "////////////\n// threshold = If the number of unique accounts that a power app is shared with is greater than\n// threshold than it'll trigger an alert. A threshold of 5 is good to start with.\n// However, if this is giving too many false positives, please adjust the threshold.\n////////////\nlet threshold = 5;\n////////////\n// Please replace the allowed_domains with a list of domains of your partners/sibling orgs\n// with whom you generally share power apps with. This will allow us to filter\n// legitimate bulk sharing attempts. Avoid using domains such as gmail, outlook, etc.\n///////////\nlet allowed_domains = pack_array(\"contoso.com\");\nlet query_frequency = 1h;\nlet query_lookback = 14d;\nPowerPlatformAdminActivity\n| where TimeGenerated >= ago(query_frequency)\n| where EventOriginalType == \"PowerAppPermissionEdited\"\n| extend Properties = tostring(PropertyCollection)\n| extend AppId = extract(@'\"powerplatform.analytics.resource.power_app.id\",\"Value\":\"([^\"]+)\"', 1, Properties)\n| extend AppId = tolower(replace_string(AppId, '/providers/Microsoft.PowerApps/apps/', ''))\n| extend TargetPrincipalId = extract(@'\"targetuser.id\",\"Value\":\"([^\"]+)\"', 1, Properties)\n| join kind=leftouter (\n    AuditLogs\n    | where ActivityDateTime >= ago(query_lookback)\n    | where SourceSystem =~ \"Azure AD\" and OperationName == \"Invite external user\"\n    | where Result =~ \"success\"\n    | extend InvitedOrgEmail = tostring(parse_json(AdditionalDetails[5])['value'])\n    | extend InvitedOrgDomain = tostring(split(InvitedOrgEmail, \"@\")[1])\n    | where not(InvitedOrgDomain has_any(allowed_domains))\n    | extend\n        InvitedById = tostring(parse_json(InitiatedBy)['user']['id']),\n        InvitedByUPN = tostring(parse_json(InitiatedBy)['user']['userPrincipalName']),\n        InvitedEmail = tostring(parse_json(TargetResources[0])['userPrincipalName']),\n        InvitedId = tostring(parse_json(TargetResources[0])['id'])\n    | summarize by InvitedById, InvitedByUPN, InvitedEmail, InvitedId, InvitedOrgDomain)\n    on $left.TargetPrincipalId == $right.InvitedId\n| where isnotempty(InvitedId)\n| summarize\n    StartTime = min(TimeGenerated),\n    EndTime = max(TimeGenerated),\n    TargetedUsersCount=dcount(TargetPrincipalId),\n    TargetedObjectIds = make_set(TargetPrincipalId, 1000),\n    InvitedDomains = make_set(InvitedOrgDomain, 1000),\n    InvitedEmailAddresses = make_set(InvitedEmail, 1000)\n    by AppId, InvitedById, InvitedByUPN\n| extend\n    PowerAppsEntityId = 27593,\n    AccountName = tostring(split(InvitedByUPN, '@')[0]),\n    UPNSuffix = tostring(split(InvitedByUPN, '@')[1])\n| project\n    StartTime,\n    EndTime,\n    InvitedByUPN,\n    InvitedById,\n    InvitedDomains,\n    InvitedEmailAddresses,\n    TargetedUsersCount,\n    TargetedObjectIds,\n    AppId,\n    PowerAppsEntityId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "PIM provides a key mechanism for assigning privileges to accounts, this query detects changes to PIM role settings.\n  Monitor these changes to ensure they are being made legitimately and dont confer more privileges than expected or reduce the security of a PIM elevation.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#changes-to-privileged-accounts\n Topic: Detections"}, {"role": "assistant", "content": "AuditLogs\n  | where Category =~ \"RoleManagement\"\n  | where OperationName =~ \"Update role setting in PIM\"\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n  | extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n  | project-reorder TimeGenerated, OperationName, ResultReason, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIPAddress, InitiatingAccountName, InitiatingAccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when logging errors on agent.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "McAfeeEPOEvent\n| where EventId in ('1040', '1076', '3032', '3033', '3034', '3036', '3038')\n| extend EventMessage = case(EventId == '1040', 'Activity Log error',\n                              EventId == '1076', 'Error logging information',\n                              EventId == '3032', 'Error while trying to open/create activity log file',\n                              EventId == '3033', 'Activity log file maximum size reached',\n                              EventId == '3034', 'Unable to write the activity log file',\n                              EventId == '3036', 'Error during initialization of the activity log file',\n                              'Error writing to log')\n| project DvcIpAddr, EventId, EventMessage\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies Dataverse sign-in activity from IPv4 addresses which are on a predefined block list. Blocked network ranges are maintained in the NetworkAddresses watchlist template. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// Use static IP address or CIDR list specified in the\n// NetworkAddresses watchlist (from watchlist template)\n// with tag \"BlockDataverse\"\nlet query_frequency = 1h;\nlet blocked_networks = MSBizAppsNetworkAddresses()\n    | where Tags has \"BlockDataverse\"\n    | summarize by IPSubnet;\nlet watchlist_entries_count = toscalar (blocked_networks\n    | summarize count());\nDataverseActivity\n| where watchlist_entries_count > 0\n| where TimeGenerated >= ago(query_frequency)\n| where Message == \"UserSignIn\" and isnotempty(ClientIp)\n| summarize FirstEvent = arg_min(TimeGenerated, *) by UserId, ClientIp, InstanceUrl\n| evaluate ipv4_lookup(blocked_networks, ClientIp, IPSubnet)\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    FirstEvent,\n    UserId,\n    ClientIp,\n    Message,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for service accounts with top failed actions count.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where TimeGenerated > ago(24h)\n| extend result = parse_json(todynamic(PayloadAuthorizationinfo))[0]['granted']\n| where result =~ 'false'\n| summarize count() by ResourceLabelsProjectId\n| top 10 by count_\n| extend AccountCustomEntity = ResourceLabelsProjectId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Summarizes uses of uncommon & undocumented commandline switches to create user accounts. User accounts may be created to achieve persistence on a machine.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID==4688\n| project TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName, \n    AccountDomain=SubjectDomainName, FileName=tostring(split(NewProcessName, '\\\\')[-1]), \n    ProcessCommandLine = CommandLine, \n    FolderPath = \"\", InitiatingProcessFileName=ParentProcessName,\n    InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\"\n| where FileName in~ (\"net.exe\", \"net1.exe\")\n| parse kind=regex flags=iU ProcessCommandLine with * \"user \" CreatedUser \" \" * \"/ad\"\n| where not(FileName =~ \"net1.exe\" and InitiatingProcessFileName =~ \"net.exe\" and replace(\"net\", \"net1\", InitiatingProcessCommandLine) =~ ProcessCommandLine)\n| extend CreatedOnLocalMachine=(ProcessCommandLine !contains \"/do\")\n| where ProcessCommandLine contains \"/add\" or (CreatedOnLocalMachine == 0 and ProcessCommandLine !contains \"/domain\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), MachineCount=dcount(ComputerName) by CreatedUser, CreatedOnLocalMachine, InitiatingProcessFileName, FileName, ProcessCommandLine, InitiatingProcessCommandLine\n| extend timestamp = StartTimeUtc, AccountCustomEntity = CreatedUser\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for fraud authentication events.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'authentication'\n| where EventResult =~ 'fraud'\n| project TimeGenerated, DstUserName, SrcIpAddr\n| extend AccountCustomEntity = DstUserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for downloaded obfuscated binary file names.\n Topic: Corelight"}, {"role": "assistant", "content": "corelight_http\n| where TimeGenerated > ago(24h)\n| where resp_mime_types has_any ('application/java-archive', 'application/mshelp', 'application/chrome-ext', 'application/x-object', 'application/x-executable', 'application/x-dosexec', 'application/x-msdownload', 'application/vnd.microsoft.portable-executable ')\n| where uri !hassuffix '.exe' or uri !hassuffix '.dll' or uri !hassuffix '.msi'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for diagnostic settings that are removed from a resource.\nThis could indicate an attacker or malicious internal trying to evade detection before malicious act is performed.\nIf the diagnostic settings are being deleted as part of a parent resource deletion, the event is ignores.\n Topic: Detections"}, {"role": "assistant", "content": "AzureActivity\n| where OperationNameValue =~ \"MICROSOFT.INSIGHTS/DIAGNOSTICSETTINGS/DELETE\"\n| summarize\n    TimeGenerated = arg_max(TimeGenerated, Properties),\n    ActivityStatusValue = make_set(ActivityStatusValue, 5),\n    take_any(Caller, CallerIpAddress, OperationName, ResourceGroup, Resource)\n    by CorrelationId, _ResourceId, OperationNameValue\n| extend ResourceHierarchy = split(_ResourceId, \"/\")\n| extend MonitoredResourcePath = strcat_array(array_slice(ResourceHierarchy, 0, array_length(ResourceHierarchy)-5), \"/\")\n| join kind=leftanti (\n    AzureActivity\n    | where OperationNameValue !~ \"MICROSOFT.INSIGHTS/DIAGNOSTICSETTINGS/DELETE\" and OperationNameValue endswith \"/DELETE\" and ActivityStatusValue has_any (\"Success\", \"Succeeded\")\n    | project _ResourceId\n) on $left.MonitoredResourcePath == $right._ResourceId\n| extend\n    Name = iif(Caller has \"@\", tostring(split(Caller, \"@\")[0]), \"\"),\n    UPNSuffix = iif(Caller has \"@\", tostring(split(Caller, \"@\")[1]), \"\"),\n    AadUserId = iif(Caller has \"@\", \"\", Caller)\n| project TimeGenerated, Caller, CallerIpAddress, OperationNameValue, OperationName, ActivityStatusValue, ResourceGroup, MonitoredResourcePath, Resource, Properties, Name, UPNSuffix, AadUserId, _ResourceId, CorrelationId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query looks for users conducting Dataverse/Dynamics 365 activity shortly after a number of failed logons. Use this to look for potential post brute force activity. Adjust the threshold figure based on false positive rate. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let threshold = 10;\nSigninLogs\n| where ResultType in (\"50125\", \"50140\", \"70043\", \"70044\")\n| summarize FailedSignInCount = count() by IPAddress\n| where FailedSignInCount >= threshold\n| join kind=inner (\n    DataverseActivity\n    | extend IPAddress = tostring(split(ClientIp, \":\")[0]))\n    on IPAddress\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "User.session.impersonation, usually triggered by Okta Support, are rare. This query checks for impersonation events used in LAPSUS$ breach.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let Events = dynamic([\"user.session.impersonation.initiate\", \"user.session.impersonation.grant\", \"user.session.impersonation.extend\", \"user.session.impersonation.end\", \"user.session.impersonation.revoke\"]);\nOktaSSO\n| where eventType_s in (Events)\n| where outcome_result_s =~ \"SUCCESS\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for sources with several different threats.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "let lbtime = 24h;\nlet threshold = 1;\nMcAfeeEPOEvent\n| where TimeGenerated > ago(lbtime)\n| where isnotempty(ThreatName)\n| where ThreatName != '_'\n| summarize ThreatList = makeset(ThreatName) by DvcIpAddr\n| where array_length(ThreatList) > threshold\n| project DvcIpAddr, ThreatList\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Comparing succesful and nonsuccessful logon attempts can be used to identify attempts to move laterally within the \nenvironment with the intention of discovering credentials and sensitive data.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "\nSecurityEvent\n| where EventID in (4624, 4625)\n| where AccountType == 'User' \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Amount = count() by LogonTypeName\n| extend timestamp = StartTimeUtc"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses Normalized Process Events to detect System Shutdown/Reboot (MITRE Technique: T1529).\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "_ASim_ProcessEvent_Create\n| where Process has \"shutdown.exe\" \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for users who have connected to databases during non-operational hours.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let lbtime = 24h;\nOracleDatabaseAuditEvent\n| where TimeGenerated > ago(lbtime)\n| where DbAction =~ 'CONNECT'\n| where isnotempty(DstUserName)\n| extend day_of_week = dayofweek(TimeGenerated)\n| extend hour_of_day = hourofday(TimeGenerated)\n| where tostring(day_of_week) in~ ('0.00:00:00', '6.00:00:00') or hour_of_day between (8 .. 18)\n| project TimeGenerated, DstUserName, SrcIpAddr\n| extend AccountCustomEntity = DstUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects bulk exfiltration to external domain.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "let threshold = 10;\nlet corp_domain = dynamic(['example.com']);\nDigitalGuardianDLPEvent\n| where NetworkApplicationProtocol =~ 'SMTP'\n| where isnotempty(inspected_document)\n| extend s_domain = extract(@'@(.*)', 1, SrcUserName)\n| extend d_domain = extract(@'@(.*)', 1, DstUserName)\n| where s_domain in~ (corp_domain)\n| where d_domain !in (corp_domain)\n| summarize f = dcount(inspected_document) by SrcUserName, DstUserName, bin(TimeGenerated, 30m)\n| where  f >= threshold\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps any GreyNoise IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in SigninLogs.\n Topic: GreyNoiseThreatIntelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet aadFunc = (tableName:string){\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where SourceSystem == 'GreyNoise'\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\n// Taking the first non-empty value based on potential IOC match availability\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n    table(tableName) | where TimeGenerated >= ago(dt_lookBack)\n    | extend Status = todynamic(Status), LocationDetails = todynamic(LocationDetails)\n    | extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails), StatusReason = tostring(Status.failureReason)\n    | extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city), Region = tostring(LocationDetails.countryOrRegion)\n    // renaming time column so it is clear the log this came from\n    | extend SigninLogs_TimeGenerated = TimeGenerated, Type = Type\n)\non $left.TI_ipEntity == $right.IPAddress\n| where SigninLogs_TimeGenerated < ExpirationDateTime\n| summarize SigninLogs_TimeGenerated = arg_max(SigninLogs_TimeGenerated, *) by IndicatorId, IPAddress\n| project SigninLogs_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nTI_ipEntity, IPAddress, UserPrincipalName, AppDisplayName, StatusCode, StatusDetails, StatusReason, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n| extend timestamp = SigninLogs_TimeGenerated, Name = tostring(split(UserPrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(UserPrincipalName, '@', 1)[0])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects events where an actor is stopping or starting HealthService to disable telemetry collection/detection from the agent.\n The query requires a SACL to audit for access request to the service.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID == 4656\n| extend EventData = parse_xml(EventData).EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, TargetAccount, Computer, EventSourceName, Channel, Task, Level, EventID, Activity, TargetLogonId, SourceComputerId, EventOriginId, Type, _ResourceId, TenantId, SourceSystem, ManagementGroupName, IpAddress, Account)\n| extend ObjectServer = column_ifexists('ObjectServer', \"\"), ObjectType = column_ifexists('ObjectType', \"\"), ObjectName = column_ifexists('ObjectName', \"\")\n| where isnotempty(ObjectServer) and isnotempty(ObjectType) and isnotempty(ObjectName)\n| where ObjectServer =~ \"SC Manager\" and ObjectType =~ \"SERVICE OBJECT\" and ObjectName =~ \"HealthService\"\n// Comment out the join below if the SACL only audits users that are part of the Network logon users, i.e. with user/group target pointing to \"NU.\"\n| join kind=leftouter (\n  SecurityEvent\n  | where EventID == 4624\n) on TargetLogonId\n| project TimeGenerated, Computer, Account, TargetAccount, IpAddress,TargetLogonId, ObjectServer, ObjectType, ObjectName\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(TargetAccount, @'\\')[1]), AccountNTDomain = tostring(split(TargetAccount, @'\\')[0])\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for any suspicious manipulation of firewall often performed by attackers after exploiting remote code execution vulnerability in Log4j component of Apache for C2 communications or exfiltration.\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "Syslog\n| where Facility == 'user'\n| where SyslogMessage has \"AUOMS_EXECVE\"\n| parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n| where EventType =~ \"AUOMS_EXECVE\"\n| parse EventData with * \"syscall=\" syscall \" syscall_r=\" * \" success=\" success \" exit=\" exit \" a0\" * \" ppid=\" ppid \" pid=\" pid \" audit_user=\" audit_user \" auid=\" auid \" user=\" user \" uid=\" uid \" group=\" group \" gid=\" gid \"effective_user=\" effective_user \" euid=\" euid \" set_user=\" set_user \" suid=\" suid \" filesystem_user=\" filesystem_user \" fsuid=\" fsuid \" effective_group=\" effective_group \" egid=\" egid \" set_group=\" set_group \" sgid=\" sgid \" filesystem_group=\" filesystem_group \" fsgid=\" fsgid \" tty=\" tty \" ses=\" ses \" comm=\\\"\" comm \"\\\" exe=\\\"\" exe \"\\\"\" * \"cwd=\\\"\" cwd \"\\\"\" * \"name=\\\"\" name \"\\\"\" * \"cmdline=\" cmdline\n| extend cmdline = trim_end('redactors=.*',cmdline) \n| where cmdline has_any (\"SuSEfirewall2 stop\",\"reSuSEfirewall2 stop\",\"ufw stop\",\"ufw disable\")\n| project TimeGenerated, Computer, audit_user, user, cmdline\n| extend timestamp = TimeGenerated\n| extend Account_0_Name = user\n| extend Host_0_HostName = Computer\n| sort by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Finds non-owner mailbox access by admin/delegate permissions. Whitelist valid users and check others for unauthorized access.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "OfficeActivity\n| where OfficeWorkload == \"Exchange\"\n| where Operation == \"MailboxLogin\" and Logon_Type != \"Owner\" \n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by Operation, OrganizationName, UserType, UserId, MailboxOwnerUPN, Logon_Type, ClientIP\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n| extend IP_0_Address = ClientIP\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for sign-in activity from NordVPN providers using the public feed leveraging the NordVPN API. Investigation of any unknown sign-in attempts from VPN providers such as Nord VPN unless it is commonly seen from users in the organization\n Topic: SecurityThreatEssentialSolution"}, {"role": "assistant", "content": "let nord_vpn_feed = (externaldata(id:int,ip_address: string,search_keywords: dynamic,categories:dynamic,name: string,domain:string,price:int,flag:string,country:string,location:dynamic ,load: int ,features:dynamic)\n  [@\"https://raw.githubusercontent.com/microsoft/mstic/master/nordvpn-servers.csv\"] with (format=\"csv\", ignoreFirstRecord=True));\nSigninLogs\n  | where ResultType == 0 \n  | summarize TotalEvents = count(), AppList = make_set(AppDisplayName,100),  StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by IPAddress, UserPrincipalName, ClientAppUsed, ConditionalAccessStatus, AuthenticationRequirement, RiskDetail \n  | join kind= inner nord_vpn_feed on $left.IPAddress == $right.ip_address\n  | project StartTime , EndTime, IPAddress, UserPrincipalName, AppList, ClientAppUsed, ConditionalAccessStatus, AuthenticationRequirement, RiskDetail, categories, domain, country\n  | extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n  | extend Account_0_Name = Name\n  | extend Account_0_UPNSuffix = UPNSuffix\n  | extend IP_0_Address = IPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches requests by country and helps to identify requests coming from unexpected countries.\n Topic: Cloudflare"}, {"role": "assistant", "content": "Cloudflare\n| where TimeGenerated > ago(24h)\n| summarize count() by SrcGeoCountry, SrcIpAddr\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query uses Windows Event ID 5136 in order to detect potential webshell deployment by exploitation of CVE-2021-27065.\nThis query looks for changes to the InternalHostName or ExternalHostName properties of Exchange OAB Virtual Directory objects in AD Directory Services where the new objects contain potential webshell objects.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n// Look for specific Directory Service Changes and parse data\n| where EventID == 5136\n| extend EventData = parse_xml(EventData).EventData.Data\n| mv-expand bagexpansion = array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value),TimeGenerated, EventID, Computer, Account, AccountType, EventSourceName, Activity, SubjectAccount)\n// Where changes relate to Exchange OAB\n| extend ObjectClass = column_ifexists(\"ObjectClass\", \"\")\n| where ObjectClass =~ \"msExchOABVirtualDirectory\"\n// Look for InternalHostName or ExternalHostName properties being changed\n| extend AttributeLDAPDisplayName = column_ifexists(\"AttributeLDAPDisplayName\", \"\")\n| where AttributeLDAPDisplayName in~ (\"msExchExternalHostName\", \"msExchInternalHostName\")\n// Look for suspected webshell activity\n| extend AttributeValue = column_ifexists(\"AttributeValue\", \"\")\n| where AttributeValue has \"script\"\n| project-rename LastSeen = TimeGenerated\n| extend ObjectDN = column_ifexists(\"ObjectDN\", \"\")\n| project-reorder LastSeen, Computer, Account, ObjectDN, AttributeLDAPDisplayName, AttributeValue\n| extend timestamp = LastSeen\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountNTDomain = tostring(split(Account, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Credentials used in the build process may be stored as Azure DevOps variables. To secure these variables they should be stored in KeyVault or marked as Secrets. \nThis detection looks for new variables added with names that suggest they are credentials but where they are not set as Secrets or stored in KeyVault.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "let keywords = dynamic([\"secret\", \"secrets\", \"password\", \"PAT\", \"passwd\", \"pswd\", \"pwd\", \"cred\", \"creds\", \"credentials\", \"credential\", \"key\"]);\nAzureDevOpsAuditing\n| where OperationName =~ \"Library.VariableGroupModified\"\n| extend Type = tostring(Data.Type)\n| extend VariableGroupId = tostring(Data.VariableGroupId)\n| extend VariableGroupName = tostring(Data.VariableGroupName)\n| mv-expand Data.Variables\n| where VariableGroupName has_any (keywords) or Data_Variables has_any (keywords)\n| where Type != \"AzureKeyVault\"\n| where Data_Variables !has \"IsSecret\"\n| extend timestamp = TimeGenerated\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for user permissions changes events.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where TimeGenerated > ago(24h)\n| where DvcAction in~ ('user_added_to_usergroup', 'user_removed_from_usergroup')\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The rule detects AWS policies that are not attached to any identities, meaning they can be deleted. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"IaaS policy not attached to any identity\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create an incident for each new malicious behavior detected by Vectra Detect for a specific Category. \nBy default, it looks through all tactics. This can be modified to create incident only for a subset of tactics.\n Topic: Vectra AI Detect"}, {"role": "assistant", "content": "// Edit this variable to only keep the tactics where an incident needs to be created (Defaults are: \"COMMAND & CONTROL\", \"BOTNET ACTIVITY\", \"EXFILTRATION\", \"LATERAL MOVEMENT\", \"RECONNAISSANCE\")   \nlet configured_tactics = dynamic([\"COMMAND & CONTROL\", \"BOTNET ACTIVITY\", \"EXFILTRATION\", \"LATERAL MOVEMENT\", \"RECONNAISSANCE\"]);\nCommonSecurityLog\n| where DeviceVendor == \"Vectra Networks\"\n| where DeviceProduct == \"X Series\"\n| where DeviceEventClassID != \"campaigns\" and DeviceEventClassID != \"hsc\" and DeviceEventClassID != \"audit\" and DeviceEventClassID != \"health\" and DeviceEventClassID != \"asc\" \n| extend Category = coalesce(\n                          column_ifexists(\"DeviceEventCategory\", \"\"), \n                          extract(\"cat=(.+?)(;|$)\", 1, AdditionalExtensions), \n                          \"\"\n                      )\n| project-rename threat_score = FlexNumber1\n| project-rename certainty_score = FlexNumber2\n| project-rename triaged = DeviceCustomString5\n| where triaged != \"True\"\n| project-rename vectra_URL = DeviceCustomString4\n| project-rename detection_name = DeviceEventClassID\n| extend Tactic = case( Category == \"COMMAND & CONTROL\", \"CommandAndControl\",\n                        Category == \"BOTNET ACTIVITY\" , \"Impact\",\n                        Category == \"EXFILTRATION\", \"Exfiltration\",\n                        Category == \"LATERAL MOVEMENT\", \"LateralMovement\",\n                        Category == \"RECONNAISSANCE\", \"Discovery\",\n                        \"UNKNOWN\")\n| extend level = case( threat_score <  50 and certainty_score < 50, \"Low\",\n                       threat_score < 50 and certainty_score >= 50 , \"Medium\", \n                       threat_score >= 50 and certainty_score <= 50, \"High\", \n                       threat_score >= 50 and certainty_score >= 50, \"Critical\",\n                       \"UNKNOWN\")\n| extend Severity = case(level == \"Info\", \"Informational\",level == \"Critical\", \"High\", level)\n| extend account = extract(\"account=(.+?);\", 1, AdditionalExtensions)\n| extend upn = iff(account matches regex \":\", tostring(split(account,\":\")[1]) ,tostring(split(account,\":\")[0]))\n| extend name = tostring(split(upn, \"@\")[0])\n| extend upn_suffix = tostring(split(upn, \"@\")[1])\n| extend source_entity = case(level == \"Info\", \"Informational\",level == \"Critical\", \"High\", level)\n| where Category in (configured_tactics) \n| summarize arg_max(threat_score, *) by source_entity , Activity\n| sort by TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects mailbox login from Exchange PowerShell. All accounts can use it by default, but admins can change it. Whitelist benign activities.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "OfficeActivity\n| where OfficeWorkload == \"Exchange\" and Operation == \"MailboxLogin\"\n| where ClientInfoString == \"Client=Microsoft.Exchange.Powershell; Microsoft WinRM Client\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by Operation, OrganizationName, UserType, UserId, MailboxOwnerUPN, Logon_Type, ClientInfoString\n| extend AccountName = iff(UserId contains '@', tostring(split(UserId, '@')[0]), UserId)\n| extend AccountUPNSuffix = iff(UserId contains '@', tostring(split(UserId, '@')[1]), '')\n| extend AccountName = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[1]), AccountName)\n| extend AccountNTDomain = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[0]), '')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for Failed login attempts via SSH CLI users.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "CiscoISEEvent\n| where TimeGenerated > ago(24h)\n| where EventId in ('60081', '60082')\n| summarize TotalEvents = count() by DstUserName\n| sort by TotalEvents"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query uses series decompose anomaly to identify periods of time where a given user account and application combination is used to send an anomalous number of parameters or SQL query tokens to the server. This query is designed to be run against application and username combinations that are used by SQL applications, such as content management systems (Wordpress, Joomla, TYPO3, etc.).\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let timeRange = 30d;\n//How frequently the query averages data for an average execution time\nlet timeSliceSize = 1h;\n//Anomaly decompose threshold, 10 by default\nlet scoreThreshold = 10;\n//Time range to use for grouping events to detect anomalies\nlet resolution = 1d;\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated > ago(timeRange)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n    ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n    IsSuccess = succeeded_s, DurationMs = duration_milliseconds_d, AffectedRows = affected_rows_d,\n    ResponseRows = response_rows_d, Statement = statement_s,\n    Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                      , 0),\n    State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                      , 0),\n    AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize));\nprocessedData\n//Splitting on \"=\" provides a good estimate to the number of parameters in the query\n| extend parameters = countof(Statement, \"=\")\n//Splitting on space provides a good estimate to the tokens in the query\n| extend tokens = array_length(split(Statement, \" \"))\n//Bin the data into 1 day windows, taking the average of tokens and parameters for that user and application during the period\n| summarize round(avg(tokens), 2), round(avg(parameters),2), min(TimeGenerated), max(TimeGenerated) by PrincipalName, ApplicationName, bin(TimeGenerated, resolution)\n//Summarise by user and application and create lists ready for anomaly detection\n| summarize make_list(avg_tokens, 10000), make_list(avg_parameters, 10000), make_list(min_TimeGenerated, 10000), make_list(max_TimeGenerated, 10000) by PrincipalName, ApplicationName\n| extend series_decompose_anomalies(list_avg_tokens, scoreThreshold, -1, 'linefit'), series_decompose_anomalies(list_avg_parameters, scoreThreshold, -1, 'linefit')\n| mv-expand TokenAnomaly=series_decompose_anomalies_list_avg_tokens_ad_flag, ParameterAnomaly=series_decompose_anomalies_list_avg_parameters_ad_flag, WindowStart=list_min_TimeGenerated, WindowEnd=list_max_TimeGenerated\n| project WindowStart, WindowEnd, PrincipalName, ApplicationName, TokenAnomaly, ParameterAnomaly\n//Enable to detect SQL statement token anomalies\n| where TokenAnomaly == 1 or TokenAnomaly == -1\n//Enable to detect SQL statement parameter anomalies\n//| where ParameterAnomaly == 1 or ParameterAnomaly == -1\n//Split the query here to see raw anomaly results\n//The next section will re-join back to the SQL diagnostics data to\n//display the queries executed within the anomalous windows identified\n| extend joinKey = strcat(PrincipalName, ApplicationName)\n| join kind=leftouter (\n    processedData\n    | project ApplicationName, PrincipalName, Statement, TimeGenerated\n    | extend joinKey = strcat(PrincipalName, ApplicationName)\n) on joinKey\n| where TimeGenerated between (todatetime(WindowStart) .. todatetime(WindowEnd))\n| extend Parameters = countof(Statement, \"=\")\n| extend Tokens = array_length(split(Statement, \" \"))\n| project TimeGenerated, ParameterAnomaly, Parameters, TokenAnomaly, Tokens, WindowStart, WindowEnd, PrincipalName, ApplicationName, Statement\n| order by Tokens desc, Parameters desc\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend CloudApplication_0_Name = ApplicationName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects shared ZPA session.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "let open_sessions =\nZPAEvent\n| where DvcAction == 'open'\n| summarize timestampstart = min(TimeGenerated) by DstUserName, SrcIpAddr, NetworkSessionId\n| sort by timestampstart asc;\nlet closed_sessions =\nZPAEvent\n| where TimeGenerated > ago(1h)\n| where DvcAction == 'close'\n| summarize timestampend = max(TimeGenerated) by DstUserName, SrcIpAddr, NetworkSessionId\n| sort by timestampend asc;\nopen_sessions\n| join (closed_sessions) on DstUserName\n| sort by DstUserName, timestampstart\n| extend prev_session_closetime = prev(timestampend,1)\n| extend prev_session_starttime = prev(timestampstart,1)\n| extend PreviousSrcIpAddr = prev(SrcIpAddr, 1)\n| extend prev_sessionuser = prev(DstUserName, 1) \n| where DstUserName == prev_sessionuser\n| where SrcIpAddr != PreviousSrcIpAddr\n| where prev_session_closetime > timestampstart\n| project DstUserName, SrcIpAddr, PreviousSrcIpAddr\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "TLS Certificate Using Weak Cipher\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"medium\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"TLS Certificate Using Weak Cipher\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match for a Path Traversal based attack in the App Gateway WAF logs. The threshold value in the query can be changed as per your infrastructures requirements.\nReferences: https://owasp.org/www-community/attacks/Path_Traversal\n Topic: Azure Web Application Firewall (WAF)"}, {"role": "assistant", "content": "let Threshold = 3;  \nAzureDiagnostics\n| where ResourceProvider == 'MICROSOFT.NETWORK' and Category == 'ApplicationGatewayFirewallLog'\n| where action_s == \"Matched\"\n| where Message has \"Path Traversal Attack\"\n| project transactionId_g, hostname_s, requestUri_s, TimeGenerated, clientIp_s, Message, details_message_s, details_data_s\n| join kind = inner(\nAzureDiagnostics\n| where ResourceProvider == 'MICROSOFT.NETWORK' and Category == 'ApplicationGatewayFirewallLog'\n| where action_s == \"Blocked\") on transactionId_g\n| extend Uri = strcat(hostname_s,requestUri_s)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), TransactionID = make_set(transactionId_g,100), Message = make_set(Message,100), Detail_Message = make_set(details_message_s,100), Detail_Data = make_set(details_data_s,100), Total_TransactionId = dcount(transactionId_g) by clientIp_s, Uri, action_s\n| where Total_TransactionId >= Threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert creates an incident when Image classification AI Model extraction high suspicious, high severity vulnerability detected from the AIShield.\n Topic: AIShield AI Security Monitoring"}, {"role": "assistant", "content": "AIShield\n| where Message has 'Image Classification AI Model Extraction Attack Identified'\n| where Severity =~ 'High'\n| where SuspiciousLevel =~ 'high suspicious attack'\n| extend NTDomain = tostring(split(Computer, '\\\\')[0]), HostName = tostring(split(Computer, '.')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert creates an incident when Tabular classification AI Model extraction high suspicious, high severity vulnerability detected from the AIShield.\n Topic: AIShield AI Security Monitoring"}, {"role": "assistant", "content": "AIShield\n| where Message has 'Tabular Classification AI Model Extraction Attack Identified'\n| where Severity =~ 'High'\n| where SuspiciousLevel =~ 'high suspicious attack'\n| extend NTDomain = tostring(split(Computer, '\\\\')[0]), HostName = tostring(split(Computer, '.')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a privileged role being assigned to a user outside of PIM\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#things-to-monitor-1\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where Category =~ \"RoleManagement\"\n| where OperationName has \"Add member to role outside of PIM\"\n        or (LoggedByService =~ \"Core Directory\" and OperationName =~ \"Add member to role\" and Identity != \"MS-PIM\" and Identity != \"MS-PIM-Fairfax\")\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend TargetUserPrincipalName = tostring(TargetResource.userPrincipalName)\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n| extend InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies the first time a source IP communicates with a destination using a specific port based on learning period activity. \nConfigurable Parameters: - Learning period time - learning period for threshold calculation in days. Default is set to 7.\n Topic: Azure Firewall"}, {"role": "assistant", "content": "let LearningPeriod = 7d;\nlet RunTime = 1h;\nlet StartLearningPeriod = LearningPeriod + RunTime;\nlet EndRunTime = RunTime - 1d;\nlet TrafficLogs = (union isfuzzy=true\n(AzureDiagnostics\n  | where OperationName == \"AzureFirewallApplicationRuleLog\" or OperationName == \"AzureFirewallNetworkRuleLog\"\n  | parse msg_s with * \"from \" SourceIp \":\" SourcePort:int \" to \" Fqdn \":\" DestinationPort:int \".\" *\n  | where isnotempty(Fqdn) and isnotempty(SourceIp)),\n(AZFWApplicationRule),\n(AZFWNetworkRule\n| extend Fqdn = DestinationIp));\nlet LearningSrcIpToDstIpPort = (TrafficLogs\n| where TimeGenerated between (ago(StartLearningPeriod) .. ago(RunTime))\n| summarize LearningSrcToDsts = make_set(Fqdn,10000) by SourceIp, DestinationPort);\nlet AlertTimeSrcIpToDstIpPort = (TrafficLogs\n| where TimeGenerated between (ago(RunTime) .. ago(EndRunTime))\n| extend AlertTimeDst = Fqdn\n| distinct AlertTimeDst ,SourceIp, DestinationPort);\nAlertTimeSrcIpToDstIpPort\n| join kind=leftouter (LearningSrcIpToDstIpPort) on SourceIp, DestinationPort\n| mv-expand LearningSrcToDsts\n| where AlertTimeDst != LearningSrcToDsts\n| summarize LearningSrcToDsts = make_set(LearningSrcToDsts,10000) by SourceIp, AlertTimeDst, DestinationPort\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects when there is a spike in Microsoft Entra ID Seamless SSO errors. They may not be caused by a Password Spray attack, but the cause of the errors might need to be investigated.\nMicrosoft Entra ID only logs the requests that matched existing accounts, thus there might have been unlogged requests for non-existing accounts.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let account_threshold = 5;\nAADNonInteractiveUserSignInLogs\n//| where ResultType == \"81016\"\n| where ResultType startswith \"81\"\n| summarize DistinctAccounts = dcount(UserPrincipalName), DistinctAddresses = make_set(IPAddress,100) by ResultType\n| where DistinctAccounts > account_threshold\n| mv-expand IPAddress = DistinctAddresses\n| extend IPAddress = tostring(IPAddress)\n| join kind=leftouter (union isfuzzy=true SigninLogs, AADNonInteractiveUserSignInLogs) on IPAddress\n| summarize\n    StartTime = min(TimeGenerated),\n    EndTime = max(TimeGenerated),\n    UserPrincipalName = make_set(UserPrincipalName,100),\n    UserAgent = make_set(UserAgent,100),\n    ResultDescription = take_any(ResultDescription),\n    ResultSignature = take_any(ResultSignature)\n    by IPAddress, Type, ResultType\n| project Type, StartTime, EndTime, IPAddress, ResultType, ResultDescription, ResultSignature, UserPrincipalName, UserAgent = iff(array_length(UserAgent) == 1, UserAgent[0], UserAgent)\n| extend Name = tostring(split(UserPrincipalName[0],'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName[0],'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses AzureActivity logs (Administrative category) to identify the creation or update of a server instance in an Microsoft Entra ID Hybrid Health AD FS service.\nA threat actor can create a new AD Health ADFS service and create a fake server instance to spoof AD FS signing logs. There is no need to compromise an on-premises AD FS server.\nThis can be done programmatically via HTTP requests to Azure. More information in this blog: https://o365blog.com/post/hybridhealthagent/\n Topic: Azure Activity"}, {"role": "assistant", "content": "AzureActivity\n| where CategoryValue =~ 'Administrative'\n| where ResourceProviderValue =~ 'Microsoft.ADHybridHealthService'\n| where _ResourceId has 'AdFederationService'\n| where OperationNameValue =~ 'Microsoft.ADHybridHealthService/services/servicemembers/action'\n| extend claimsJson = parse_json(Claims)\n| extend AppId = tostring(claimsJson.appid), AccountName = tostring(claimsJson.name), Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| project-away claimsJson\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies callouts to Discord CDN addresses for risky file extensions. This detection will trigger when a callout for a risky file is made to a discord server that has only been seen once in your environment. \n Unique discord servers are identified using the server ID that is included in the request URL (DiscordServerId in query). Discord CDN has been used in multiple campaigns to download additional payloads.\n This analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM WebSession schema (ASIM WebSession Schema)\n Topic: Detections"}, {"role": "assistant", "content": "let discord=dynamic([\"cdn.discordapp.com\", \"media.discordapp.com\"]);\n  _Im_WebSession(url_has_any=discord, eventresult='Success')\n  | where Url has \"attachments\"\n  | extend DiscordServerId = extract(@\"\\/attachments\\/([0-9]+)\\/\", 1, Url)\n  | summarize dcount(Url), make_set(SrcUsername), make_set(SrcIpAddr), make_set(Url), min(TimeGenerated), max(TimeGenerated), make_set(EventResult) by DiscordServerId\n  | mv-expand set_SrcUsername to typeof(string), set_Url to typeof(string), set_EventResult to typeof(string), set_SrcIpAddr to typeof(string)\n  | summarize by DiscordServerId, dcount_Url, set_SrcUsername, min_TimeGenerated, max_TimeGenerated, set_EventResult, set_SrcIpAddr, set_Url\n  | project StartTime=min_TimeGenerated, EndTime=max_TimeGenerated, Result=set_EventResult, SourceUser=set_SrcUsername, SourceIP=set_SrcIpAddr, RequestURL=set_Url\n  | where RequestURL has_any (\".bin\",\".exe\",\".dll\",\".bin\",\".msi\")\n  | extend AccountName = tostring(split(SourceUser, \"@\")[0]), AccountUPNSuffix = tostring(split(SourceUser, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies Power Apps activity from countries in a predefined list of unauthorized countries. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let unauthorized_country_codes = dynamic([\n    // Specify the disallowed two letter country codes\n    // example: disallowed_country_codes = dynamic([\"RU\", \"KP\", \"IR\"])\n    ]);\nlet query_frequency = 1h;\nlet query_lookback = 14d;\nlet powerapps_events = dynamic([\"LaunchPowerApp\", \"AppDlpEvaluationResultChange\", \"UpdatePowerApp\", \"PublishPowerApp\", \"RecordScopesConsent\", \"CreatePowerApp\", \"PowerAppPermissionEdited\", \"PowerAppPermissionDeleted\", \"ImportExistingCanvasApp\", \"DeletePowerApp\", \"ImportNewCanvasApp\", \"PromotePowerAppVersion\", \"RemoveHeroApp\", \"DeletePowerAppVersion\", \"PublishSolutionCanvasAppVersion\", \"AdminModifyAppPermissions\", \"AdminModifyAppOwner\", \"AdminQuarantineApp\", \"AdminDeleteApp\", \"AdminSetAppBypassConsent\", \"PatchPowerApp\"]);\nPowerPlatformAdminActivity\n| where TimeGenerated >= ago(query_frequency)\n| where EventOriginalType in (powerapps_events)\n| extend Properties = tostring(PropertyCollection)\n| extend SrcIpAddr = extract(@'\"enduser.ip_address\",\"Value\":\"([^\"]+)\"', 1, Properties)\n| extend SrcIpAddr = iif(SrcIpAddr startswith '::ffff:', replace_string(SrcIpAddr, '::ffff:', ''), SrcIpAddr)\n| extend AppId = extract(@'\"powerplatform.analytics.resource.power_app.id\",\"Value\":\"([^\"]+)\"', 1, Properties)\n| extend AppId = tolower(replace_string(AppId, '/providers/Microsoft.PowerApps/apps/', ''))\n| extend\n    AppName = extract(@'\"powerplatform.analytics.resource.power_app.display_name\",\"Value\":\"([^\"]+)\"', 1, Properties),\n    EnvironmentId = extract(@'\"powerplatform.analytics.resource.environment.id\",\"Value\":\"([^\"]+)\"', 1, Properties),\n    EnvironmentName = extract(@'\"powerplatform.analytics.resource.environment.name\",\"Value\":\"([^\"]+)\"', 1, Properties)\n| summarize FirstEvent = min(TimeGenerated) by ActorName, SrcIpAddr, AppName, AppId, EnvironmentId, EnvironmentName\n| join kind=inner (\n    SigninLogs\n    | where TimeGenerated >= ago(query_lookback)\n    | where Location in (unauthorized_country_codes)\n    | summarize by IPAddress, Location)\n    on $left.SrcIpAddr == $right.IPAddress\n| extend\n    PowerAppsEntityId = 27593,\n    DataverseId = 32780,\n    AccountName = tostring(split(ActorName, '@')[0]),\n    UPNSuffix = tostring(split(ActorName, '@')[1])\n| project\n    FirstEvent,\n    ActorName,\n    SrcIpAddr,\n    Location,\n    AppName,\n    AppId,\n    EnvironmentId,\n    EnvironmentName,\n    PowerAppsEntityId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies modification a specific registry key and then launching wsreset.exe that resets the Windows Store settings.\n Topic: FalconFriday"}, {"role": "assistant", "content": "DeviceProcessEvents\n| where InitiatingProcessFileName =~ \"wsreset.exe\"\n| where ProcessIntegrityLevel == \"High\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for the Sdelete process being run recursively after being deployed to a host via GPO. Attackers could use this technique to deploy Sdelete to multiple host and delete data on them.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n  | where EventID == 4688\n  | where Process =~ \"svchost.exe\"\n  | where CommandLine has \"-k GPSvcGroup\" or CommandLine has \"-s gpsvc\"\n  | extend timekey = bin(TimeGenerated, 1m)\n  | project timekey, NewProcessId, Computer\n  | join kind=inner (SecurityEvent\n  | where EventID == 4688\n  | where Process =~ \"sdelete.exe\" or CommandLine has \"sdelete\"\n  | where ParentProcessName endswith \"svchost.exe\"\n  | where CommandLine has_all (\"-s\", \"-r\")\n  | extend newProcess = Process\n  | extend timekey = bin(TimeGenerated, 1m)\n  ) on $left.NewProcessId == $right.ProcessId, timekey, Computer\n  | extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n  | extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n  | extend AccountName = tostring(split(TargetAccount, @'\\')[1]), AccountNTDomain = tostring(split(TargetAccount, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare user agent strings with client errors\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "OracleWebLogicServerEvent\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 400 and HttpStatusCode <= 499\n| where isnotempty(HttpUserAgentOriginal)\n| summarize Total_UA_Count = count() by tostring(HttpUserAgentOriginal)\n| top 20 by Total_UA_Count desc\n| extend UrlCustomEntity = HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect threat for mail attachment under the targeted threat protection Topic: MimecastSEG"}, {"role": "assistant", "content": "MimecastSIEM_CL| where mimecastEventId_s==\"mail_ttp_attachment\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for client related errors.\n Topic: Cloudflare"}, {"role": "assistant", "content": "Cloudflare\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode between(400..499)\n| extend IPCustomEntity = SrcIpAddr\n| extend UrlCustomEntity = ClientRequestURI\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Amazon Virtual Private Cloud (Amazon VPC) lets you provision a logically isolated section of the AWS Cloud where you can launch AWS resources in a virtual network that you define.\nThis identifies changes to Amazon VPC (Virtual Private Cloud) settings such as new ACL entries,routes, routetable or Gateways.\nMore information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255 \nand AWS VPC API Docs: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/OperationList-query-vpc.html\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"CreateNetworkAclEntry\",\"CreateRoute\",\"CreateRouteTable\",\"CreateInternetGateway\",\"CreateNatGateway\"]);\nAWSCloudTrail\n| where EventName in~ (EventNameList)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent,\nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements\n| extend timestamp = StartTimeUtc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches calendar invites used to deliver spam. This query shows results when user reports a calander invite as spam.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where TimeGenerated > ago(24h)\n| where EventResponseStatus has \"spam\"\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for new incidents.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(IncidentStatus)\n| extend inc_act = split(IncidentStatus, ',')\n| where inc_act has 'New'\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match for an XSS attack in the App Gateway WAF logs. The threshold value in the query can be changed as per your infrastructures requirements.\n References: https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\n Topic: Azure Web Application Firewall (WAF)"}, {"role": "assistant", "content": "let Threshold = 3;  \nAzureDiagnostics\n| where Category == \"ApplicationGatewayFirewallLog\"\n| where action_s == \"Matched\"\n| where Message has \"XSS\"\n| extend transactionId_g = tostring(parse_json(AdditionalFields).transactionId_g)\n| extend hostname_s = tostring(parse_json(AdditionalFields).hostname_s)\n| project transactionId_g, hostname_s, requestUri_s, TimeGenerated, clientIp_s, Message\n| join kind = inner(\nAzureDiagnostics\n| where Category == \"ApplicationGatewayFirewallLog\"\n| where action_s == \"Blocked\"\n| extend transactionId_g = tostring(parse_json(AdditionalFields).transactionId_g)) on transactionId_g\n| extend Uri = strcat(hostname_s,requestUri_s)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), TransactionID = make_set(transactionId_g,100), Message = make_set(Message,100), Total_TransactionId = dcount(transactionId_g) by clientIp_s, Uri, action_s\n| where Total_TransactionId >= Threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect threat for virus from mail receipt virus event Topic: MimecastSEG"}, {"role": "assistant", "content": "MimecastSIEM_CL| where mimecastEventId_s==\"mail_receipt_virus\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This is a recommended update to IAM policy on AWS. Review the policy and apply it according to change control process. Authomize will have a recommended policy to be downloaded. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"Refactor AWS policy based on activities in the last 60 days.\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects suspicious user agent strings used by known hack tools\n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = 15m;\nlet user_agents=dynamic([\n                          '(hydra)',\n                          ' arachni/',\n                          ' BFAC ',\n                          ' brutus ',\n                          ' cgichk ',\n                          'core-project/1.0',\n                          ' crimscanner/',\n                          'datacha0s',\n                          'dirbuster',\n                          'domino hunter',\n                          'dotdotpwn',\n                          'FHScan Core',\n                          'floodgate',\n                          'get-minimal',\n                          'gootkit auto-rooter scanner',\n                          'grendel-scan',\n                          ' inspath ',\n                          'internet ninja',\n                          'jaascois',\n                          ' zmeu ',\n                          'masscan',\n                          ' metis ',\n                          'morfeus fucking scanner',\n                          'n-stealth',\n                          'nsauditor',\n                          'pmafind',\n                          'security scan',\n                          'springenwerk',\n                          'teh forest lobster',\n                          'toata dragostea',\n                          ' vega/',\n                          'voideye',\n                          'webshag',\n                          'webvulnscan',\n                          ' whcc/',\n                          ' Havij',\n                          'absinthe',\n                          'bsqlbf',\n                          'mysqloit',\n                          'pangolin',\n                          'sql power injector',\n                          'sqlmap',\n                          'sqlninja',\n                          'uil2pn',\n                          'ruler',\n                          'Mozilla/5.0 (Windows; U; Windows NT 5.1; pt-PT; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2 (.NET CLR 3.5.30729)'\n                          ]);\nCisco_Umbrella\n| where EventType == \"proxylogs\"\n| where TimeGenerated > ago(timeframe)\n| where HttpUserAgentOriginal has_any (user_agents)\n| extend Message = \"Hack Tool User Agent\"\n| project Message, SrcIpAddr, DstIpAddr, UrlOriginal, TimeGenerated, HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible service account enumeration.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "let threshold = 5;\nGCP_IAM\n| where PayloadMethodname =~ 'google.iam.admin.v1.ListServiceAccounts'\n| summarize count() by PayloadAuthenticationinfoPrincipalemail, bin(TimeGenerated, 1h)\n| where count_ > threshold\n| extend AccountCustomEntity = PayloadAuthenticationinfoPrincipalemail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query checks for the IIS worker process dropping files that resemble web shells and other artifacts seen in known attacks. Reference: https://msrc-blog.microsoft.com/2021/03/02/multiple-security-updates-released-for-exchange-server\n Topic: Web Shells Threat Protection"}, {"role": "assistant", "content": "DeviceFileEvents\n| where InitiatingProcessFileName == 'w3wp.exe' | where InitiatingProcessCommandLine contains \"MSExchange\"\n| where FolderPath has_any (\"\\\\wwwroot\\\\\", \"HttpProxy\\\\owa\\\\\",\"\\\\Temporary ASP.NET Files\\\\\")\n| where not(FolderPath has_any(\"\\\\tmp\\\\\",\"\\\\dl3\\\\\"))\n| where FolderPath !endswith \".log\" | where FolderPath !endswith \".json\"\n| where FolderPath !endswith \".ini\"\n| where FolderPath !endswith \".vb\"\n| where FolderPath !endswith '.tmp'\n| where FolderPath !endswith '.xml'\n| where FolderPath !endswith '.js'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Service accounts normally are supposed to perform a limited set of tasks in a stable environment.\nThe query collects a list of service account and then joins them with rare processes in an environment to detect anomalous behaviours.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\n// Configure common/frequent processes for exclusion \nlet excludeList = dynamic ( [\"NT AUTHORITY\",\"Local System\", \"Local Service\", \"Network Service\"] );\n// Provide a list of service account/ built-in accounts in an environment.\nlet List1 = datatable(AccountName:string)[\"MSSQLSERVER\", \"ReportServer\", \"MSDTSServer100\", \"IUSR\"];\n// Self generating a list of Service account using event Id :4624\nlet List2 = SecurityEvent\n| where TimeGenerated between(starttime..endtime)\n| where EventID == 4624\n| where LogonType == \"5\"\n| where not(Account has_any (excludeList))\n| extend AccountName = Account\n| distinct AccountName;\nlet Accounts = List1 | union (List2 | distinct AccountName);\nlet ProcessCreationEvents=() {\n    let processEvents=SecurityEvent\n\t  | where TimeGenerated between(starttime..endtime)\n    | where EventID==4688\n    // filter out common randomly named files related to MSI installers and browsers\n    | where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{3}\\.tmp\")\n    | where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{4}\\.tmp\")\n    | where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{3}\\.tmp\")\n    | where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{4}\\.tmp\")\n    | project TimeGenerated,\n      ComputerName=Computer,\n      AccountName=Account,\n      AccountDomain=SubjectDomainName,\n      FileName=tostring(split(NewProcessName, '\\\\')[-1]),\n      ProcessCommandLine = CommandLine,\n      InitiatingProcessFileName=ParentProcessName,\n      InitiatingProcessCommandLine=\"\",\n      InitiatingProcessParentFileName=\"\";\n    processEvents;\n    };\n    let normalizedProcesses = ProcessCreationEvents\n       // normalize guids\n       | project TimeGenerated, AccountName, FileName = replace(\"[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}\", \"<guid>\", FileName)\n       // normalize digits away\n       | project TimeGenerated, AccountName, FileName=replace(@'\\d', 'n', FileName);\nlet freqs = normalizedProcesses\n    | summarize frequency = count() by FileName\n    | join kind= leftouter (\n       normalizedProcesses\n       | summarize Since=min(TimeGenerated), LastSeen=max(TimeGenerated)  by FileName, AccountName\n    ) on FileName;\n   let Finalfreqs = freqs\n    | where frequency <= toscalar( freqs | serialize | project frequency | summarize percentiles(frequency, 10))\n    | order by frequency asc\n    | project FileName, frequency, Since, LastSeen , AccountName\n    // restrict results to unusual processes seen in last day\n    | where LastSeen between(starttime..endtime);\nAccounts\n    | join kind= inner (\n        Finalfreqs\n) on AccountName\n| where frequency < 10\n| project-away AccountName1\n| extend NTDomain = split(AccountName, '\\\\', 0)[0], Name = split(AccountName, '\\\\', 1)[0]\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query for searching active database user accounts.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "OracleDatabaseAuditEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(Action) and isnotempty(DstUserName) and isnotempty(SrcIpAddr)\n| summarize count() by DstUserName\n| order by count_\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may disable security tools to avoid possible detection of their tools and activities. DarkComet, for example, can disable Security Center functions like anti-virus. The query below generates an output of all users performing a \"delete\" operation regarding a security policy where one or more features of the activity deviate from the user, his peers, or the tenant profile.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "let operations = dynamic(['Remove database vulnerability assessment rule baseline']);\nBehaviorAnalytics\n| where ActionType in~ (operations)\n| where ActivityInsights has \"True\"\n| project TimeGenerated, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights\n| extend Name=split(UserPrincipalName, \"@\")[0], UPNSuffix=split(UserPrincipalName, \"@\")[1]\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SourceIPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An attacker could modify route-table attributes in order to access resources he couldnt access before.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where  EventName in (\"CreateRoute\",\"DeleteRoute\",\"ReplaceRoute\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \nUserIdentityUserName, SessionMfaAuthenticated,UserIdentityArn, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Use this query to look for activity related to KandyKorn activity, known to affect macOS devices via a MachO binary\n Topic: Jamf Protect"}, {"role": "assistant", "content": "JamfProtect\n| where TargetProcessSHA256 in (\n  \"2360a69e5fd7217e977123c81d3dbb60bf4763a9dae6949bc1900234f7762df1\",\n  \"51dd4efcf714e64b4ad472ea556bf1a017f40a193a647b9e28bf356979651077\")\n    or DnsQueryName contains \"tp-globa.xyz\"\n    or DstIpAddr in (\"192.119.64.43\", \"23.254.226.90\")"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An overly permissive key policy was created, resulting in KMS keys where the kms:Encrypt action is accessible to everyone (even outside of the organization). This could mean that your account is compromised and that the attacker is using the encryption key to compromise other organizations.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let kmsActions = dynamic([\"kms:Encrypt\", \"kms:*\"]); //Add other overly permissive APIs to this list.\nAWSCloudTrail\n| where EventName in (\"CreateKey\",\"PutKeyPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policy))).Statement\n| mvexpand Statement\n| extend Action = tostring(parse_json(Statement).Action), Effect = tostring(parse_json(Statement).Effect), Principal = iff(isnotempty(tostring(parse_json(Statement).Principal.AWS)),tostring(parse_json(Statement).Principal.AWS), tostring(parse_json(Statement).Principal))\n| where Effect =~ \"Allow\" and Action has_any (kmsActions) and Principal == \"*\" \n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects known malicious user agents\n Topic: Tomcat"}, {"role": "assistant", "content": "let malicious_ua = dynamic(['Nikto', 'hydra', '.nasl', 'absinthe', 'advanced email extractor', 'arachni', 'autogetcontent', 'bilbo', 'BFAC', 'brutus', 'brutus/aet', 'bsqlbf', 'cgichk', 'cisco-torch', 'commix', 'core-project', 'crimscanner', 'datacha0s', 'dirbuster', 'domino hunter', 'dotdotpwn', 'email extractor', 'fhscan core', 'floodgate', 'get-minimal', 'gootkit auto-rooter scanner', 'grabber', 'grendel-scan', 'havij', 'inspath', 'internet ninja', 'jaascois', 'zmeu', 'masscan', 'metis', 'morfeus', 'mysqloit', 'n-stealth', 'nessus', 'netsparker', 'nmap nse', 'nmap scripting engine', 'nmap-nse', 'nsauditor', 'openvas', 'pangolin', 'paros', 'pmafind', 'prog.customcrawler', 'qualys was', 's.t.a.l.k.e.r.', 'security scan', 'springenwerk', 'sql power injector', 'sqlmap', 'sqlninja', 'teh forest lobster', 'this is an exploit', 'toata dragostea', 'toata dragostea mea pentru diavola', 'uil2pn', 'vega', 'voideye', 'w3af.sf.net', 'w3af.sourceforge.net', 'w3af.org', 'webbandit', 'webinspect', 'webshag', 'webtrends security analyzer', 'webvulnscan', 'whatweb', 'whcc', 'wordpress hash grabber', 'xmlrpc exploit', 'WPScan', 'XSpider', 'SF/', 'FooBar/42', 'ScanAlert', 'Webscanner', 'Webster', 'fantomCrew', 'fantomBrowser', 'visvo', 'magereport', 'ltx71', 'websiteprotection', 'BigCliqueBOT', 'BOT for JCE']);\nTomcatEvent\n| where HttpUserAgentOriginal has_any (malicious_ua)\n| extend MalwareCustomEntity = HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "MFA prevents credential compromise. This query checks for rare MFA operations like deactivation, update, reset, and bypass attempts often used by adversaries to compromise networks/accounts.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let Events = dynamic([\"user.mfa.factor.update\", \"system.mfa.factor.deactivate\", \"user.mfa.attempt_bypass\", \"user.mfa.factor.reset_all\"]);\nOktaSSO\n| where eventType_s in (Events)\n| where outcome_result_s =~ \"SUCCESS\"\n| extend Target=parsejson(target_s)\n| mvexpand bagexpansion=array (Target)\n| evaluate bag_unpack(Target)\n| extend Target_Id = tostring(column_ifexists('id', \"\")), Target_type = tostring(column_ifexists('type', \"\")), Target_user = tostring(column_ifexists('displayName', \"\")), Target_alternateId = tostring(column_ifexists('alternateId', \"\"))\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by actor_id_s, actor_type_s, actor_alternateId_s, actor_displayName_s, Target_alternateId, Target_Id, Target_type, Target_user,debugContext_debugData_requestUri_s,\n  debugContext_debugData_requestId_s, domain_s, authenticationContext_externalSessionId_s, eventType_s, displayMessage_s, transaction_id_s, uuid_g, client_userAgent_rawUserAgent_s, client_userAgent_os_s, client_userAgent_browser_s, \n  client_ipAddress_s, column_ifexists('client_geographicalContext_city_s', \"\"), column_ifexists('client_geographicalContext_state_s', \"\"), column_ifexists('client_geographicalContext_country_s', \"\"), column_ifexists('securityContext_isp_s', \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for potential webshell creation by the threat actor Mercury after the sucessful exploitation of SysAid server. \nReference:  https://www.microsoft.com/security/blog/2022/08/25/mercury-leveraging-log4j-2-vulnerabilities-in-unpatched-systems-to-target-israeli-organizations/\n Topic: Web Shells Threat Protection"}, {"role": "assistant", "content": "let timeframe = 1d;\nlet time_window = 5m;\n(union isfuzzy=true\n(SecurityEvent\n| where TimeGenerated > ago(timeframe)\n| where EventID == 4688\n| where Process has_any (\"java.exe\", \"javaw.exe\") and CommandLine has \"SysAidServer\" \n| summarize by ParentProcessName,Process, Account, Computer, CommandLine, timekey= bin(TimeGenerated, time_window), TimeGenerated, SubjectLogonId\n| join kind=inner(\nSecurityEvent\n| where TimeGenerated > ago(timeframe)\n| where EventID == 4663\n| where Process has_any (\"java.exe\", \"javaw.exe\")\n| where AccessMask in ('0x2','0x100', '0x10', '0x4')\n| where ObjectName endswith \".jsp\" \n| summarize by ParentProcessName, Account, Computer, ObjectName, ProcessName, timekey= bin(TimeGenerated, time_window), TimeGenerated, SubjectLogonId)\n on timekey, Computer, SubjectLogonId\n),\n(DeviceFileEvents \n| where InitiatingProcessFileName has_any (\"java.exe\", \"javaw.exe\")  \n| where InitiatingProcessCommandLine has \"SysAidServer\"  \n| where FileName endswith \".jsp\" \n| extend Account = strcat(InitiatingProcessAccountDomain, @'\\', InitiatingProcessAccountName), Computer = DeviceName\n),\n(imFileEvent\n| where TimeGenerated > ago(timeframe)\n| where EventType == \"FileCreated\"\n| where ActingProcessName has_any (\"java.exe\", \"javaw.exe\") \n| where ActingProcessCommandLine has \"SysAidServer\"  \n| where FilePath endswith \".jsp\" \n| extend Account = ActorUsername, Computer = DvcHostname\n)\n)\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountNTDomain = tostring(split(Account, @'\\')[0])\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects when newly created Global admin removes multiple existing global admins which can be an attempt by adversaries to lock down organization and retain sole access. \n Investigate reasoning and intention of multiple membership removal by new Global admins and take necessary actions accordingly.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let lookback = 7d; \nlet timeframe = 1h; \nlet GlobalAdminsRemoved = AuditLogs \n| where TimeGenerated > ago(timeframe) \n| where Category =~ \"RoleManagement\" \n| where AADOperationType in (\"Unassign\", \"RemoveEligibleRole\") \n| where ActivityDisplayName has_any (\"Remove member from role\", \"Remove eligible member from role\") \n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend Target = tostring(TargetResource.userPrincipalName),\n               props = TargetResource.modifiedProperties\n  )\n| mv-apply Property = props on \n      (\n          where Property.displayName =~ \"Role.DisplayName\"\n          | extend RoleName = trim('\"',tostring(Property.oldValue))\n      )\n| where RoleName =~ \"Global Administrator\" // Add other Privileged role if applicable\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend Initiator = iif(isnotempty(InitiatingAppName), InitiatingAppName, InitiatingUserPrincipalName) \n| where Initiator != \"MS-PIM\"  // Filtering PIM events  \n| summarize RemovedGlobalAdminTime = max(TimeGenerated), TargetAdmins = make_set(Target,100) by OperationName, RoleName, Initiator, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIpAddress, Result; \nlet GlobalAdminsAdded = AuditLogs \n| where TimeGenerated > ago(lookback) \n| where Category =~ \"RoleManagement\" \n| where AADOperationType in (\"Assign\", \"AssignEligibleRole\") \n| where ActivityDisplayName has_any (\"Add eligible member to role\", \"Add member to role\") and Result == \"success\" \n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend Target = tostring(TargetResource.userPrincipalName),\n               props = TargetResource.modifiedProperties\n  )\n| mv-apply Property = props on \n      (\n          where Property.displayName =~ \"Role.DisplayName\"\n          | extend RoleName = trim('\"',tostring(Property.newValue))\n      )\n| where RoleName =~ \"Global Administrator\" // Add other Privileged role if applicable\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend Initiator = iif(isnotempty(InitiatingAppName), InitiatingAppName, tostring(InitiatedBy.user.userPrincipalName)) \n| where Initiator != \"MS-PIM\"  // Filtering PIM events \n| summarize AddedGlobalAdminTime = max(TimeGenerated) by OperationName, RoleName, Target, Initiator, Result;\nGlobalAdminsAdded \n| join kind= inner GlobalAdminsRemoved on $left.Target == $right.Initiator \n| where AddedGlobalAdminTime < RemovedGlobalAdminTime \n| extend NoofAdminsRemoved = array_length(TargetAdmins) \n| where NoofAdminsRemoved > 1\n| project AddedGlobalAdminTime, Initiator, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIpAddress, Target, RemovedGlobalAdminTime, TargetAdmins, NoofAdminsRemoved\n| extend TargetName = tostring(split(Target,'@',0)[0]), TargetUPNSuffix = tostring(split(Target,'@',1)[0])\n| extend InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows URLs list with server errors.\n Topic: Tomcat"}, {"role": "assistant", "content": "TomcatEvent\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 500 and HttpStatusCode <= 599\n| summarize TopUrls = count() by tostring(UrlOriginal)\n| top 20 by TopUrls desc\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query will check how many activity there is in LastPass from IPs that are not seen before in the Sign-in Logs\n Topic: LastPass"}, {"role": "assistant", "content": "let IPs = SigninLogs\n  | project IPAddress;\nLastPassNativePoller_CL\n| where Action_s != \"Reporting\"\n| where IP_Address_s !in (IPs)\n| summarize by IP_Address_s, Username_s, bin(todatetime(Time_s), 1d)\n| extend AccountCustomEntity = Username_s, IPCustomEntity = IP_Address_s, TimestampCustomEntity = Time_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for VMs with high resource consumption.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "let threshold = 50;\nVMwareESXi\n| where TimeGenerated > ago(24h)\n| where SyslogMessage has_any ('Virtual machine CPU usage', 'Virtual machine memory usage')\n| where SyslogMessage has_all ('AlarmStatusChangedEvent', 'Red')\n| extend DstHostname = extract(@\"usage'\\son\\s(.*?)\\schanged\", 1, SyslogMessage)\n| summarize count() by DstHostname, bin(TimeGenerated, 1h)\n| where count_ >= threshold\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for mails with DKIM failure status.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where TimeGenerated > ago(24h)\n| where tostring(AdditionalFields) has 'ESADKIMVerdict'\n| extend dkim_status = extract(@'ESADKIMVerdict\":\"(Pass|Neutral|TempError|PermError|HardFail|None)\"', 1, tostring(AdditionalFields))\n| where dkim_status in~ ('PermError', 'HardFail', 'None')\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when agent was uninstalled from multiple hosts.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where ActivityType == 51\n| summarize count() by DataComputerName, bin(TimeGenerated, 30m)\n| where count_ > 1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows device access permissions was changed.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "let threshold = 1;\nTMApexOneEvent\n| where EventMessage has \"Device access\"\n| extend DeviceCustomNumber3 = coalesce(\n                                  column_ifexists(\"FieldDeviceCustomNumber3\", long(null)),\n                                  DeviceCustomNumber3,\n                                  long(null)\n                              )\n| extend Permission = case(\n                            DeviceCustomNumber3 == \"0\", \"Modify\", \n                            DeviceCustomNumber3 == \"1\", \"Read and execute\",\n                            DeviceCustomNumber3 == \"2\", \"Read\",\n                            DeviceCustomNumber3 == \"3\", \"List device content only\", \n                            DeviceCustomNumber3 == \"4\", \"Block\",\n                            \"unknown\"\n                      )\n| summarize Permissions = make_set(Permission) by DstUserName\n| extend PermissionCount = array_length(Permissions)\n| where PermissionCount > threshold\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for Microsoft Defender AV detections related to Tarrask malware. In Microsoft Sentinel, the SecurityAlerts table includes only the Device Name of the affected device, this query joins the DeviceInfo table to clearly connect other information such as Device group, ip, logged-on users etc. \n This would allow the Microsoft Sentinel analyst to have more context related to the alert, if available.\n Reference: https://www.microsoft.com/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/\n Topic: Microsoft Defender XDR"}, {"role": "assistant", "content": "let Tarrask_threats = dynamic([\"HackTool:Win64/Tarrask!MS\", \"HackTool:Win64/Ligolo!MSR\", \"Behavior:Win32/ScheduledTaskHide.A\", \"Tarrask\"]);\nDeviceInfo\n| extend DeviceName = tolower(DeviceName)\n| join kind=rightouter ( SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| extend ThreatFamilyName = tostring(parse_json(ExtendedProperties).ThreatFamilyName)\n| where ThreatName in~ (Tarrask_threats) or ThreatFamilyName in~ (Tarrask_threats)\n| extend CompromisedEntity = tolower(CompromisedEntity)\n) on $left.DeviceName == $right.CompromisedEntity\n| summarize by DisplayName, ThreatName, ThreatFamilyName, PublicIP, AlertSeverity, Description, tostring(LoggedOnUsers), DeviceId, TenantId , bin(TimeGenerated, 1d), CompromisedEntity, tostring(LoggedOnUsers), ProductName, Entities\n| extend HostName = tostring(split(CompromisedEntity, \".\")[0]), DomainIndex = toint(indexof(CompromisedEntity, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(CompromisedEntity, DomainIndex + 1), CompromisedEntity)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches Azure Web Application Firewall data for potential Webshell usage related to the SpringShell RCE vulnerability (CVE-2022-22965). For more information refer to Microsofts security blog.\n Topic: Web Shells Threat Protection"}, {"role": "assistant", "content": "let spring4shellstring = dynamic([\".jsp?pwd=\", \".jsp?cmd=\"]);\nAzureDiagnostics\n| where Category in (\"FrontdoorWebApplicationFirewallLog\", \"FrontdoorAccessLog\", \"ApplicationGatewayFirewallLog\", \"ApplicationGatewayAccessLog\")\n| extend originalRequestUriWithArgs_s = column_ifexists(\"originalRequestUriWithArgs_s\", \"\"), \n   userAgent_s = column_ifexists(\"userAgent_s\", \"\"), \n   clientIP_s = column_ifexists(\"clientIP_s\", \"\"),  \n   clientPort_d = column_ifexists(\"originalRequestUriWithArgs_s\", \"\"),\n   host_s = column_ifexists(\"host_s\", \"\"),\n   requestUri_s = column_ifexists(\"requestUri_s\", \"\"),\n   httpStatus_d = column_ifexists(\"httpStatus_d\",\"\"),\n   listenerName_s = column_ifexists(\"listenerName_s\", \"\"),\n   httpMethod_s = column_ifexists(\"httpMethod_s\", \"\")\n| where httpMethod_s =~ 'GET'\n| where originalRequestUriWithArgs_s has_any (spring4shellstring) or requestUri_s has_any (spring4shellstring)\n| summarize Total = count() by originalRequestUriWithArgs_s, userAgent_s, clientIP_s,clientPort_d, TimeGenerated, host_s, requestUri_s, httpStatus_d,listenerName_s, httpMethod_s, Category\n| extend IPCustomEntity = clientIP_s, timestamp = TimeGenerated, UrlCustomEntity = requestUri_s, HostCustomEntity = host_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible discovery activity.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "let threshold = 20;\nOCILogs\n| where data_eventName_s startswith 'List' or data_eventName_s startswith 'Get'\n| summarize count() by data_definedTags_Oracle_Tags_CreatedBy_s, bin(TimeGenerated, 10m)\n| where count_ > threshold\n| extend AccountCustomEntity = data_definedTags_Oracle_Tags_CreatedBy_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule creates Microsoft Sentinel Alerts based on Darktrace system status alerts for health monitoring, fetched every 5 minutes.\n Topic: Darktrace"}, {"role": "assistant", "content": "darktrace_model_alerts_CL //anything starting with 'Dt' is not an ASIM mapping \n| where dtProduct_s ==\"System Alert\"\n| extend EventVendor=\"Darktrace\", EventProduct=\"Darktrace DETECT\"\n| project-rename ThreatCategory=dtProduct_s, EventStartTime=time_s, NetworkRuleName=friendlyName_s, SrcIpAddr=deviceIP_s, SrcHostname=hostname_s, ThreatRiskLevel=priority_code_d, ThreatRiskCategory=priority_s, DtSeverity=Severity, DtName=name_s, DtStatus=status_s, DtMessage=Message, DtURL=url_s, DtUUID=uuid_g\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which highly sensitive legal information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let highRisk = 3;\nlet legal = 'Legal Information';\nCognniIncidents_CL \n| where Severity == highRisk\n| where informationType_s == legal\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies someone that performs a read operation of they CA key from the file.\n Topic: FalconFriday"}, {"role": "assistant", "content": "SecurityEvent\n// Fill in the machine name of your CA.\n| where EventID == 5058 and Computer contains \"<YOUR CA MACHINE NAME>\"\n| where EventData contains \"%%2499\" // Machine key.\n| extend EventData=parse_xml(EventData)\n| mv-apply d=EventData.EventData.Data on\n(\n    where d[\"@Name\"]==\"KeyName\"\n    | project KeyName=tostring(d[\"#text\"])\n)\n| mv-apply d=EventData.EventData.Data on\n(\n    where d[\"@Name\"]==\"SubjectUserName\"\n    | project SubjectUserName=tostring(d[\"#text\"])\n)\n| mv-apply d=EventData.EventData.Data on\n(\n    where d[\"@Name\"]==\"Operation\"\n    | project Operation=tostring(d[\"#text\"])\n)\n| extend Operation=iff(Operation == \"%%2458\", \"Read persisted key from file\", Operation)\n// This one is a guess and very poorly documented :(\n| extend Operation=iff(Operation == \"%%2459\", \"Write persisted key to file\", Operation)\n// Fill in the keyname of the CA key.\n| where KeyName == \"<INSERT ISSUING CA KEY HERE>\" // Or any other key you want to monitor.\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects attempts to remove a part of the AWS Config Service.The Threat Actor may manipulate the Config services decrease the visibility into the security posture of an account and / or its workload instances.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"UpdateTrail\",\"DeleteTrail\",\"StopLogging\",\"DeleteFlowLogs\",\"DeleteEventBus\"]);\nAWSCloudTrail\n| where EventName in~ (EventNameList)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent,\nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource\n| extend timestamp = StartTimeUtc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query helps to detect attempts to create proxies on compromised systems using the \n built-in netsh portproxy command. VoltTyphoon has been seen creating these proxies on compromised hosts to manage command and control communications.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "(union isfuzzy=true \n(SecurityEvent\n| where EventID == 4688\n| where CommandLine has_all (\"portproxy\", \"netsh\", \"wmic\", \"process call create\", \"v4tov4\", \"listenport=50100\")\n| project TimeGenerated, Computer, Account, Process, ProcessId, NewProcessName, NewProcessId, CommandLine, ParentProcessName, _ResourceId, SourceComputerId, SubjectLogonId, SubjectUserSid\n),\n(WindowsEvent\n| where EventID == 4688 \n| extend CommandLine = tostring(EventData.CommandLine)\n| where CommandLine has_all (\"portproxy\", \"netsh\", \"wmic\", \"process call create\", \"v4tov4\", \"listenport=50100\")\n| extend NewProcessName = tostring(EventData.NewProcessName), NewProcessId = tostring(EventData.NewProcessId)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1]),  ProcessId = tostring(EventData.ProcessId)\n| extend Account =  strcat(EventData.SubjectDomainName,\"\\\\\", EventData.SubjectUserName)\n| extend ParentProcessName = tostring(EventData.ParentProcessName) \n| extend SubjectUserName = tostring(EventData.SubjectUserName), SubjectDomainName = tostring(EventData.SubjectDomainName), SubjectLogonId = tostring(EventData.SubjectLogonId)\n| project TimeGenerated, Computer, Account, Process, ProcessId, NewProcessName, NewProcessId, CommandLine, ParentProcessName, _ResourceId, SubjectUserName, SubjectDomainName, SubjectLogonId\n) \n)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches admin failure authentication events.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where TimeGenerated > ago(24h)\n| where DvcAction =~ \"admin_login_error\"\n| project TimeGenerated, SrcIpAddr, DstUserName\n| extend AccountCustomEntity = DstUserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when the Exchange audit logging has been disabled, which may indicate an adversary attempt to evade detection or bypass other defenses.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n    | where OfficeWorkload =~ \"Exchange\" \n    | where UserType in~ (\"Admin\", \"DcAdmin\")\n    // Only admin or global-admin can disable audit logging\n    | where Operation =~ \"Set-AdminAuditLogConfig\"\n    | extend ParsedParameters = parse_json(Parameters)\n    | extend AdminAuditLogEnabledValue = tostring(ParsedParameters[3].Value)\n    | where AdminAuditLogEnabledValue =~ \"False\"\n    | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() \n        by Operation, UserType, UserId, ClientIP, ResultStatus, Parameters, AdminAuditLogEnabledValue\n    | extend AccountName = iff(UserId contains '@', tostring(split(UserId, '@')[0]), \n                        iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[1]), UserId))\n    | extend AccountUPNSuffix = iff(UserId contains '@', tostring(split(UserId, '@')[1]), '')\n    | extend AccountNTDomain = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[0]), '');\n// EnrichedMicrosoft365AuditLogs Query\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where Workload =~ \"Exchange\"\n    | where UserType in~ (\"Admin\", \"DcAdmin\")\n    | where Operation =~ \"Set-AdminAuditLogConfig\"\n    | extend ParsedParameters = parse_json(AdditionalProperties.Parameters)\n    | extend AdminAuditLogEnabledValue = tostring(ParsedParameters[3].Value)\n    | where AdminAuditLogEnabledValue =~ \"False\"\n    | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() \n        by Operation, UserType, UserId, ClientIP = SourceIp, ResultStatus, Parameters = tostring(AdditionalProperties.Parameters), AdminAuditLogEnabledValue\n    | extend AccountName = iff(UserId contains '@', tostring(split(UserId, '@')[0]), \n                        iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[1]), UserId))\n    | extend AccountUPNSuffix = iff(UserId contains '@', tostring(split(UserId, '@')[1]), '')\n    | extend AccountNTDomain = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[0]), '');\n// Combine Office and Enriched Events and Deduplicate\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize arg_min(StartTimeUtc, *) by Operation, UserId, ClientIP;\n// Project Final Output\nCombinedEvents\n    | project StartTimeUtc, EndTimeUtc, Operation, UserType, UserId, ClientIP, ResultStatus, Parameters, AdminAuditLogEnabledValue, AccountName, AccountUPNSuffix, AccountNTDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies the additional files uploaded by the same IP address which triggered a malware alert for malicious content upload on Azure Blob or File Storage Container.\n Topic: Microsoft Defender for Cloud Apps"}, {"role": "assistant", "content": "//Collect the alert events\nlet alertData = SecurityAlert\n| where DisplayName has \"Potential malware uploaded to\"\n| extend Entities = parse_json(Entities)\n| mv-expand Entities;\n//Parse the IP address data\nlet ipData = alertData\n| where Entities['Type'] =~ \"ip\"\n| extend AttackerIP = tostring(Entities['Address']), AttackerCountry = tostring(Entities['Location']['CountryName']);\n//Parse the file data\nlet FileData = alertData\n| where Entities['Type'] =~ \"file\"\n| extend MaliciousFileDirectory = tostring(Entities['Directory']), MaliciousFileName = tostring(Entities['Name']), MaliciousFileHashes = tostring(Entities['FileHashes']);\n//Combine the File and IP data together\nipData\n| join (FileData) on VendorOriginalId\n| summarize by TimeGenerated, AttackerIP, AttackerCountry, DisplayName, ResourceId, AlertType, MaliciousFileDirectory, MaliciousFileName, MaliciousFileHashes\n//Create a type column so we can track if it was a File storage or blobl storage upload\n| extend type = iff(DisplayName has \"file\", \"File\", \"Blob\")\n| join (\n  union\n  StorageFileLogs,\n  StorageBlobLogs\n  //File upload operations\n  | where OperationName =~ \"PutBlob\" or OperationName =~ \"PutRange\"\n  //Parse out the uploader IP\n  | extend ClientIP = tostring(split(CallerIpAddress, \":\", 0)[0])\n  //Extract the filename from the Uri\n  | extend FileName = extract(@\"\\/([\\w\\-. ]+)\\?\", 1, Uri)\n  //Base64 decode the MD5 filehash, we will encounter non-ascii hex so string operations don't work\n  //We can work around this by making it an array then converting it to hex from an int\n  | extend base64Char = base64_decode_toarray(ResponseMd5)\n  | mv-expand base64Char\n  | extend hexChar = tohex(toint(base64Char))\n  | extend hexChar = iff(strlen(hexChar) < 2, strcat(\"0\", hexChar), hexChar)\n  | extend SourceTable = iff(OperationName has \"range\", \"StorageFileLogs\", \"StorageBlobLogs\")\n  | summarize make_list(hexChar, 1000) by CorrelationId, ResponseMd5, FileName, AccountName, TimeGenerated, RequestBodySize, ClientIP, SourceTable\n  | extend Md5Hash = strcat_array(list_hexChar, \"\")\n  //Pack the file information the summarise into a ClientIP row\n  | extend p = pack(\"FileName\", FileName, \"FileSize\", RequestBodySize, \"Md5Hash\", Md5Hash, \"Time\", TimeGenerated, \"SourceTable\", SourceTable)\n  | summarize UploadedFileInfo=make_list(p, 10000), FilesUploaded=count() by ClientIP\n      | join kind=leftouter (\n        union\n        StorageFileLogs,\n        StorageBlobLogs\n        | where OperationName =~ \"DeleteFile\" or OperationName =~ \"DeleteBlob\"\n        | extend ClientIP = tostring(split(CallerIpAddress, \":\", 0)[0])\n        | extend FileName = extract(@\"\\/([\\w\\-. ]+)\\?\", 1, Uri)\n        | extend SourceTable = iff(OperationName has \"range\", \"StorageFileLogs\", \"StorageBlobLogs\")\n        | extend p = pack(\"FileName\", FileName, \"Time\", TimeGenerated, \"SourceTable\", SourceTable)\n        | summarize DeletedFileInfo=make_list(p, 10000), FilesDeleted=count() by ClientIP\n        ) on ClientIP\n  ) on $left.AttackerIP == $right.ClientIP\n| mvexpand UploadedFileInfo\n| extend LinkedMaliciousFileName = tostring(UploadedFileInfo.FileName)\n| extend LinkedMaliciousFileHash = tostring(UploadedFileInfo.Md5Hash)\n| extend HashAlgorithm = \"MD5\"\n| project AlertTimeGenerated = TimeGenerated, LinkedMaliciousFileName, LinkedMaliciousFileHash, HashAlgorithm, AlertType, AttackerIP, AttackerCountry, MaliciousFileDirectory, MaliciousFileName, FilesUploaded, UploadedFileInfo\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which highly sensitive HR information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let highRisk = 3;\nlet hr = 'HR Information';\nCognniIncidents_CL \n| where Severity == highRisk\n| where informationType_s == hr\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies malware uploaded via Dynamics 365 document management or directly in SharePoint impacting Dataverse associated SharePoint sites. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_frequency = 15m;\n  let malware_events = OfficeActivity\n      | where OfficeWorkload == \"SharePoint\" and Operation == \"FileMalwareDetected\"\n      | summarize by MalwareUserId = UserId, SourceFileName, Site_Url\n      | join kind=inner (DataverseSharePointSites) on $left.Site_Url == $right.SharePointUrl;\n  let file_upload_events = OfficeActivity\n      | where OfficeWorkload == \"SharePoint\" and Operation == \"FileUploaded\"\n      | project TimeGenerated, UserId, Site_Url, SourceFileName, ApplicationId, ClientIP;\n  let d365_upload_events = DataverseActivity\n      | where TimeGenerated >= ago(query_frequency)\n      | where Message == \"UploadDocument\"\n      | summarize by UserId, D365ClientIp = ClientIp;\n  malware_events\n  | join kind=inner (file_upload_events) on SourceFileName, Site_Url\n  | lookup (d365_upload_events) on UserId\n  | extend ClientIp = iif(ApplicationId == \"00000007-0000-0000-c000-000000000000\", D365ClientIp, ClientIP)\n  | extend\n      CloudAppId = int(32780),\n      SharePointId = int(20892),\n      AccountName = tostring(split(UserId, '@')[0]),\n      UPNSuffix = tostring(split(UserId, '@')[1])\n  | project\n      TimeGenerated,\n      UserId,\n      ClientIp,\n      InstanceUrl,\n      SharePointUrl,\n      SourceFileName,\n      CloudAppId,\n      SharePointId,\n      AccountName,\n      UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures related to user accounts issues.\n Topic: TenableAD"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.kql parser into the workspace\n// Retrieve the parser here: https://raw.githubusercontent.com/tenable/Azure-Sentinel/Tenable.ad-connector/Solutions/TenableAD/Parsers/afad_parser.kql\n// Then, create the Kusto Function with alias afad_parser\nlet SeverityTable=datatable(Severity:string,Level:int) [\n\"low\", 1,\n\"medium\", 2,\n\"high\", 3,\n\"critical\", 4\n];\nlet codeNameList = datatable(Codename:string)[\"C-ACCOUNTS-DANG-SID-HISTORY\", \"C-PRE-WIN2000-ACCESS-MEMBERS\", \"C-PASSWORD-DONT-EXPIRE\", \"C-SLEEPING-ACCOUNTS\", \"C-DANG-PRIMGROUPID\", \"C-PASSWORD-NOT-REQUIRED\", \"C-USER-PASSWORD\"];\nafad_parser\n| where MessageType == 0 and Codename in~ (codeNameList)\n| lookup kind=leftouter SeverityTable on Severity\n| order by Level\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query joins Microsoft Sentinel Entity Insights with Microsoft Purview Insider Risk Management Alerts. There is also an option for configuration of correlations against watchlists. For more information, see https://docs.microsoft.com/azure/sentinel/watchlists\n Topic: MicrosoftPurviewInsiderRiskManagement"}, {"role": "assistant", "content": "let InsiderRiskManagementAlerts = SecurityAlert\n| where ProductName == \"Microsoft 365 Insider Risk Management\"\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UserPrincipalName = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UserPrincipalName <> \"\"\n| summarize PreviousSecurityAlertLinks=make_set(AlertLink) by UserPrincipalName, AlertLink;\nBehaviorAnalytics\n| where UserPrincipalName <> \"\"\n| where ActivityInsights contains \"True\"\n| extend EntityAnomalies = strcat(ActivityInsights)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserPrincipalName, EntityAnomalies\n| join kind=innerunique (InsiderRiskManagementAlerts) on UserPrincipalName\n| project UserPrincipalName, EntityAnomalies, StartTime, EndTime, AlertLink, PreviousSecurityAlertLinks\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UserPrincipalName == $right.SearchKey\n| extend AccountCustomEntity = UserPrincipalName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may access data objects from cloud storage. The query below generates an output of all users performing a \"read\" operation regarding data or files, where one or more features of the activity deviate from the user, his peers, or the tenant profile.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "let operations = dynamic(['Export an existing database']);\nBehaviorAnalytics\n| where ActionType in~ (operations)\n| where ActivityInsights has \"True\"\n| project TimeGenerated, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights\n| extend Name=split(UserPrincipalName, \"@\")[0], UPNSuffix=split(UserPrincipalName, \"@\")[1]\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SourceIPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows dormant accounts (not active in the last 180 days) that connect from a country for the first time and the country is uncommon in the tenant or is the first time the ISP is used.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "BehaviorAnalytics\n| where UsersInsights.IsDormantAccount == True\n| where ActivityInsights.FirstTimeUserConnectedFromCountry == True\n| where ActivityInsights.CountryUncommonlyConnectedFromInTenant == True \n  or ActivityInsights.FirstTimeConnectionViaISPInTenant == True\n| extend AadUserId = UsersInsights.AccountObjectID\n| extend Account_0_AadUserId = AadUserId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies whether an Active Directory user object was assigned a service principal name which could indicate that an adversary is preparing for performing Kerberoasting. \nThis query checks for event id 5136, that the Object Class field is \"user\" and the LDAP Display Name is \"servicePrincipalName\".\nRef: https://thevivi.net/assets/docs/2019/theVIVI-AD-Security-Workshop_AfricaHackon2019.pdf\n Topic: Detections"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID == 5136 \n| parse EventData with * 'AttributeLDAPDisplayName\">' AttributeLDAPDisplayName \"<\" *\n| parse EventData with * 'ObjectClass\">' ObjectClass \"<\" *\n| where AttributeLDAPDisplayName == \"servicePrincipalName\" and  ObjectClass == \"user\"\n| parse EventData with * 'ObjectDN\">' ObjectDN \"<\" *\n| parse EventData with * 'AttributeValue\">' AttributeValue \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by Computer, SubjectAccount, ObjectDN, AttributeValue, SubjectUserName, SubjectDomainName, SubjectUserSid\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected deletion of a S3 bucket. An attacker could delete S3 objects for impact and Denail of service purposes.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where  EventName == \"DeleteBucket\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \nUserIdentityUserName, UserIdentityArn, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements, BucketName=tostring(parse_json(RequestParameters).bucketName)\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = BucketName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies GitHub activites where a repo was changed from private to public that may be a sign of compromise.\n Topic: GitHub"}, {"role": "assistant", "content": "\nGitHubAuditData\n| where Action == \"repo.access\"\n| where Visibility == \"public\" and PreviousVisibility in (\"internal\", \"private\")\n| project TimeGenerated, Action, Actor, Country, Repository, Visibility\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when uncommon windows proccess is started from System folder.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "let lb_period = 14d;\nlet q_time = 1h;\nlet sys_proc = CyberArkEPM\n| where TimeGenerated between (ago(lb_period) .. ago(q_time))\n| where EventSubType != 'AttackAttempt'\n| where ActingProcessName has @'\\'\n| where ActingProcessName has_any ('System32', 'SysWOW64')\n| summarize makeset(ActingProcessFileInternalName);\nCyberArkEPM\n| where TimeGenerated > ago(q_time)\n| where EventSubType != 'AttackAttempt'\n| where ActingProcessName has @'\\'\n| where ActingProcessName has_any ('System32', 'SysWOW64')\n| where ActingProcessFileInternalName !in (sys_proc)\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query will check for data that is shared in the LastPass environment.\n Topic: LastPass"}, {"role": "assistant", "content": "LastPassNativePoller_CL\n| where Action_s == \"Move to Shared Folder\"\n| extend AccountCustomEntity = Username_s, IPCustomEntity = IP_Address_s, URLCustomEntity = Data_s, TimestampCustomEntity = todatetime(Time_s)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This creates an incident in the event that an excessive amount of DHCPREQUEST have been recieved by a DHCP Server and could potentially be an indication of a DHCP Starvation Attack.\n Topic: Infoblox NIOS"}, {"role": "assistant", "content": "let threshold = 1000;\nInfoblox\n| where ProcessName =~ \"dhcpd\" and Log_Type =~ \"DHCPREQUEST\"\n| summarize count() by SrcIpAddr, bin(TimeGenerated,5m)\n| where count_ > threshold\n| join kind=inner (Infoblox\n    | where ProcessName =~ \"dhcpd\" and Log_Type =~ \"DHCPREQUEST\"\n    ) on SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when shared or stolen root account.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "VMwareESXi\n| where SyslogMessage has_all ('UserLoginSessionEvent', 'root', 'logged in')\n| extend SrcIpAddr = extract(@'root@(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, SyslogMessage)\n| summarize count() by SrcIpAddr, bin(TimeGenerated, 15m)\n| where count_ > 1\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple deny or terminate actions on single IP.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "let threshold = 5;\nTMApexOneEvent\n| where EventMessage has \"Behavior Monitoring\"\n| where DvcAction == 2 or DvcAction == 3\n| summarize count() by SrcIpAddr, bin(TimeGenerated, 10m)\n| where count_ > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection  identifies potential suspicious activity across multi-cloud environments by combining AWS GuardDuty findings with GCP Audit Logs. It focuses on AWS activities related to unauthorized access, credential abuse, and unusual behaviors, as well as GCP instances creation with non-Google service account users. The query aims to provide a comprehensive view of cross-cloud security incidents for proactive threat detection and response.\n Topic: Multi Cloud Attack Coverage Essentials - Resource Abuse"}, {"role": "assistant", "content": "// Materialize AWS GuardDuty findings\nlet AwsAlert = materialize (\n    AWSGuardDuty\n    // Filter for specific activity types in AWS GuardDuty\n    | where ActivityType has_any (\n        \"Backdoor:EC2/DenialOfService.UnusualProtocol\",\n        \"CredentialAccess:Kubernetes/MaliciousIPCaller\",\n        \"CredentialAccess:Kubernetes/SuccessfulAnonymousAccess\",\n        \"CredentialAccess:Kubernetes/TorIPCaller\",\n        \"CredentialAccess:RDS/AnomalousBehavior.SuccessfulBruteForce\",\n        \"CredentialAccess:RDS/TorIPCaller.FailedLogin\",\n        \"CredentialAccess:RDS/TorIPCaller.SuccessfulLogin\",\n        \"Discovery:Kubernetes/MaliciousIPCaller\",\n        \"Recon:IAMUser/MaliciousIPCaller.Custom\",\n        \"UnauthorizedAccess:EC2/TorClient\",\n        \"UnauthorizedAccess:IAMUser/TorIPCaller\",\n        \"UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom\",\n        \"UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS\",\n        \"UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.InsideAWS\",\n        \"UnauthorizedAccess:IAMUser/ConsoleLoginSuccess.B\"\n        )\n    // Extract and transform AWS GuardDuty attributes\n    | extend\n        AWSAlertId = Id, \n        AWSAlertTitle = Title,\n        AWSAlertDescription = Description,\n        AWSresourceType = tostring(parse_json(ResourceDetails).resourceType),\n        AWSNetworkEntity = tostring(parse_json(ServiceDetails).action.awsApiCallAction.remoteIpDetails.ipAddressV4),\n        AWSAlertUserNameEntity = tostring(parse_json(ResourceDetails).accessKeyDetails.userName),\n        InstanceType = tostring(parse_json(ResourceDetails).instanceDetails.instanceType),\n        AWSTargetingService = parse_json(ServiceDetails).additionalInfo.apiCalls,\n        AWSAlertTime = TimeCreated,\n        AWSAlertLink= tostring(strcat('https://us-east-1.console.aws.amazon.com/guardduty/home?region=us-east-1#/findings?macros=current&fId=', Id)),\n        Severity = \n        case (\n    Severity >= 7.0,\n    \"High\",\n    Severity between (4.0 .. 6.9),\n    \"Medium\",\n    Severity between (1.0 .. 3.9),\n    \"Low\",\n    \"Unknown\"\n)\n    // Extract API call details and count\n    | mv-apply AIPCall = AWSTargetingService on \n        ( \n        where AIPCall has \"name\"    \n        | extend APICallName = tostring(AIPCall.name), APICallCount = tostring(AIPCall[\"count\"])\n        ) \n    // Select distinct attributes for further analysis\n    | distinct\n        AWSAlertTime,\n        ActivityType,\n        Severity,\n        AWSAlertId,\n        AWSAlertTitle,\n        AWSAlertDescription,\n        AWSAlertLink,\n        Arn,\n        AWSresourceType,\n        AWSNetworkEntity,\n        AWSAlertUserNameEntity,\n        InstanceType,\n        APICallName,\n        APICallCount      \n    );\n// Materialize GCP Audit Logs related to VM instance creation\nlet GCPVMActivity= materialize(\n    GCPAuditLogs \n    // Filter for Compute Engine instances insertions\n    | where ServiceName == \"compute.googleapis.com\" and MethodName endswith \"instances.insert\"\n    // Extract and transform relevant GCP Audit Log attributes\n    | extend\n        GCPUserUPN= tostring(parse_json(AuthenticationInfo).principalEmail),\n        GCPUserIp = tostring(parse_json(RequestMetadata).callerIp),\n        GCPUserUA= tostring(parse_json(RequestMetadata).callerSuppliedUserAgent),\n        VMDetails= parse_json(AuthorizationInfo),\n        VMStatus =  tostring(parse_json(Response).status),\n        VMOperation=tostring(parse_json(Response).operationType),\n        VMName= tostring(parse_json(Request).name),\n        VMDescription= tostring(parse_json(Request).description),\n        VMType = tostring(split(parse_json(Request).machineType, \"/\")[-1]),\n        Tags= tostring(parse_json(Request).tags),\n        RequestJS = parse_json(Request)\n    // Filter out service account-related activities and private IP addresses\n    | where GCPUserUPN !has \"gserviceaccount.com\"\n    | extend Name = tostring(split(GCPUserUPN, \"@\")[0]), UPNSuffix = tostring(split(GCPUserUPN, \"@\")[1])\n    | where VMOperation == \"insert\" and isnotempty(GCPUserIp) and GCPUserIp != \"private\"\n    // Select relevant attributes for further analysis\n    | project\n        GCPOperationTime=TimeGenerated,\n        VMName,\n        VMStatus,\n        MethodName,\n        GCPUserUPN,\n        ProjectId,\n        GCPUserIp,\n        GCPUserUA,\n        VMOperation,\n        VMType,\n        Name,\n        UPNSuffix\n    );\n// Join AWS and GCP activities based on matching IP addresses\nAwsAlert\n| join kind= inner (GCPVMActivity)\n    on\n    $left.AWSNetworkEntity == $right.GCPUserIp\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checks if Sonrai tickets have been reopened. \nIt uses the action type to check if a ticket has been reopened\n Topic: SonraiSecurity"}, {"role": "assistant", "content": "Sonrai_Tickets_CL\n| where action_d == 3\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches requests by country and helps to identify requests coming from unexpected countries.\n Topic: Fortinet FortiWeb Cloud WAF-as-a-Service connector for Microsoft Sentinel"}, {"role": "assistant", "content": "let blocked_country = dynamic(['countryname1', 'countryname2']);\nFortiweb\n| where srcCountry in (blocked_country)\n| where DvcAction !has 'Block'\n| summarize count() by SrcIpAddr\n| extend IP_0_Address = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection rule detects port usage above the configured threshold. The rule utilize [ASIM](https://aka.ms/AboutASIM) normalization, and is applied to any source which supports the ASIM Network Session schema. To tune the rule to your environment configure it using the NetworkSession_Monitor_Configuration watchlist. Note that to enhance performance, the rule uses summarized data generated from the summarization logic app.\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "let lookback = 10m; \nlet mapping = _GetWatchlist('NetworkSession_Monitor_Configuration')\n| where Type == \"Detection\" and ThresholdType == \"Static\" and Severity != \"Disabled\"  \n| extend Ports = split(Ports,\",\"),\n        App = split(App,\",\"),\n        Protocol = split(Protocol,\",\"),\n        Direction = split(Direction,\",\"),\n        Action = split(Action,\",\")\n| project Ports, App, Protocol, Direction, Action, Type, ThresholdType, Threshold, Severity, Tactic, Name, Description\n| mv-expand Ports\n| mv-expand App\n| mv-expand Protocol\n| mv-expand Direction\n| mv-expand Action\n| extend Ports = tostring(Ports), App = tostring(App), Protocol = tostring(Protocol), Direction = tostring(Direction), Action = tostring(Action), Threshold = toint(Threshold)\n;\nlet nosummary = materialize(\n              union isfuzzy=true \n                (\n                    NetworkCustomAnalytics_protocol_CL \n                    | project v = int(2)\n                ),\n                (\n                    print int(1) \n                    | project v = print_0\n                )\n                | summarize maxv = max(v)\n                | extend nosum = (maxv > 1)\n              );\nlet allData = union isfuzzy=true \n    (\n        (datatable(exists:int, nosum:bool)[1,false] | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=bin(now(-10m),10m), endtime=bin(now(),10m))\n        | where TimeGenerated > bin(now(-10m),10m)\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        NetworkCustomAnalytics_protocol_CL\n        | where EventTime_t == toscalar(NetworkCustomAnalytics_protocol_CL | summarize max(EventTime_t))\n        | project-rename NetworkProtocol=NetworkProtocol_s, DstPortNumber=DstPortNumber_d, DstAppName=DstAppName_s, NetworkDirection=NetworkDirection_s, DvcAction=DvcAction_s, Count=count__d, EventTime=EventTime_t\n        | extend Count = toint(Count),DstPortNumber = toint(DstPortNumber)\n    )\n;\nallData\n      | where isnotempty(DstPortNumber)\n      | summarize Sum=sum(Count) by DstPortNumber, NetworkProtocol, NetworkDirection, DvcAction \n      | join kind=inner ['mapping'] where Ports has tostring(DstPortNumber)\n      | where Sum > Threshold         \n                and (Protocol == \"*\" or Protocol has NetworkProtocol)\n                and (Direction == \"*\" or Direction has NetworkDirection)\n                and (Action == \"*\" or Action has DvcAction)\n      | project Name, Description, NetworkProtocol, DstPortNumber, NetworkDirection, DvcAction, Severity, Tactic\n      | summarize NetworkProtocols=make_set_if(NetworkProtocol,isnotempty(NetworkProtocol),20), \n                  NetworkDirections=make_set_if(NetworkDirection,isnotempty(NetworkDirection),5), \n                  DvcActions=make_set_if(DvcAction,isnotempty(DvcAction),10) by Name, Severity, Tactic, DstPortNumber, Description\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for queries which consume abnormal amount of credits.\n Topic: Snowflake"}, {"role": "assistant", "content": "let acceptable_credits = 0.00001;\nSnowflake\n| where TimeGenerated > ago(24h)\n| where CREDITS_USED_CLOUD_SERVICES_d > acceptable_credits\n| summarize by QUERY_TEXT_s, CREDITS_USED_CLOUD_SERVICES_d, TargetUsername\n| order by CREDITS_USED_CLOUD_SERVICES_d\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Goal: To detect anomalous data exfiltration. This query detects SQL queries that accessed a large number of rows, which is significantly higher than normal for this database.\n The calculation is made inside recent time window (defined by detectionWindow parameter), and the anomaly is calculated based on previous training window (defined by trainingWindow parameter). The user can set the minimal threshold for anomaly by changing the threshold parameters volThresholdZ and volThresholdQ (higher thresholds will detect only more severe anomalies).\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let volumeThresholdZ = 3.0;                     // Minimal threshold for the Zscore to trigger anomaly (number of standard deviations above mean). If set higher, only very significant alerts will fire.\nlet volumeThresholdQ = volumeThresholdZ;        // Minimal threshold for the Qscore to trigger anomaly (number of Inter-Percentile Ranges above high percentile). If set higher, only very significant alerts will fire.\nlet volumeThresholdHardcoded = 500;             // Minimal value for the volume metric to trigger anomaly.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet monitoredColumn = 'ResponseRows';           // The name of the column for volumetric anomalies.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s\n    | extend QuantityColumn = column_ifexists(monitoredColumn, 0)\n    | extend WindowType = case( TimeGenerated >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= TimeGenerated and TimeGenerated < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize AvgVal = round(avg(QuantityColumn), 2), StdVal = round(stdev(QuantityColumn), 2), N = count(),\n                P99Val = round(percentile(QuantityColumn, 99), 2), P50Val = round(percentile(QuantityColumn, 50), 2)\n      by Database;\nprocessedData\n| where WindowType == 'detection'\n| join kind = inner (trainingSet) on Database\n| extend ZScoreVal = iff(N >= 20, round(todouble(QuantityColumn - AvgVal) / todouble(StdVal + 1), 2), 0.00),\n         QScoreVal = iff(N >= 20, round(todouble(QuantityColumn - P99Val) / todouble(P99Val - P50Val + 1), 2), 0.00)\n| extend IsVolumeAnomalyOnVal = iff((ZScoreVal > volumeThresholdZ and QScoreVal > volumeThresholdQ and QuantityColumn > volumeThresholdHardcoded), true, false), AnomalyScore = round((ZScoreVal + QScoreVal)/2, 0)\n| project TimeGenerated, Database, PrincipalName, ClientIp, HostName, ApplicationName, ActionName, Statement,\n          IsSuccess, ResponseRows, AffectedRows, IsVolumeAnomalyOnVal, AnomalyScore, ResourceId\n| where IsVolumeAnomalyOnVal == 'true'\n| sort by AnomalyScore desc, TimeGenerated desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "It is reccomended that these Categories shoud be blocked by policies because they provide harmful/malicious content..\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "Cisco_Umbrella\n| where EventType == 'proxylogs'\n| where DvcAction =~ 'Allowed'\n| where UrlCategory contains 'Adult Themes' or\n      UrlCategory contains 'Adware' or\n      UrlCategory contains 'Alcohol' or\n      UrlCategory contains 'Illegal Downloads' or\n      UrlCategory contains 'Drugs' or\n      UrlCategory contains 'Child Abuse Content' or\n      UrlCategory contains 'Hate/Discrimination' or\n      UrlCategory contains 'Nudity' or\n      UrlCategory contains 'Pornography' or\n      UrlCategory contains 'Proxy/Anonymizer' or\n      UrlCategory contains 'Sexuality' or\n      UrlCategory contains 'Tasteless' or\n      UrlCategory contains 'Terrorism' or\n      UrlCategory contains 'Web Spam' or\n      UrlCategory contains 'German Youth Protection' or\n      UrlCategory contains 'Illegal Activities' or\n      UrlCategory contains 'Lingerie/Bikini' or\n      UrlCategory contains 'Weapons'\n| project TimeGenerated, SrcIpAddr, DstIpAddr, UrlOriginal, Identities\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The alert shows users that join a Zoom meeting from a time zone other than the one the meeting was created in.\nYou can also whitelist known good time zones in the tz_whitelist value using the tz database name format https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n Topic: Detections"}, {"role": "assistant", "content": "let schedule_lookback = 14d;\nlet join_lookback = 1d;\n// If you want to whitelist specific timezones include them in a list here\nlet tz_whitelist = dynamic([]);\nlet meetings = (\nZoomLogs\n| where TimeGenerated >= ago(schedule_lookback)\n| where Event =~ \"meeting.created\"\n| extend MeetingId = tostring(parse_json(MeetingEvents).MeetingId)\n| extend SchedTimezone = tostring(parse_json(MeetingEvents).Timezone));\nZoomLogs\n| where TimeGenerated >= ago(join_lookback)\n| where Event =~ \"meeting.participant_joined\"\n| extend JoinedTimeZone = tostring(parse_json(MeetingEvents).Timezone)\n| extend MeetingName = tostring(parse_json(MeetingEvents).MeetingName)\n| extend MeetingId = tostring(parse_json(MeetingEvents).MeetingId)\n| where JoinedTimeZone !in (tz_whitelist)\n| join (meetings) on MeetingId\n| where SchedTimezone != JoinedTimeZone\n| project TimeGenerated, MeetingName, JoiningUser=payload_object_participant_user_name_s, JoinedTimeZone, SchedTimezone, MeetingScheduler=User1\n| extend AccountName = tostring(split(JoiningUser, \"@\")[0]), AccountUPNSuffix = tostring(split(JoiningUser, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for alerts with high risk score value.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where TimeGenerated > ago(24h)\n| where Reason =~ 'NEW_ALERT'\n| where Status =~ 'open'\n| extend r_score = 0.85 * toint(RiskDetailRiskScoreMaxScore)\n| extend i_RiskDetailRiskScoreScore = toint(RiskDetailRiskScoreScore)\n| where i_RiskDetailRiskScoreScore > r_score\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Header: X-Frame-Options Missing\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"medium\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"Header: X-Frame-Options Missing\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule is looking for new attacker behaviors observed by the Vectra Platform. The intent is to create entries in the SecurityAlert table for every new detection attached to an entity monitored by the Vectra Platform Topic: Vectra XDR"}, {"role": "assistant", "content": "VectraDetections\n| where Type == \"host\"\n| extend\n    entity_uid = ['Entity UID'],\n    entity_id = ['Entity ID'],\n    entity_type = ['Entity Type'],\n    detection_id = ['Detection ID'],\n    detection = ['Detection Name'],\n    category = ['Detection Category'],\n    detection_url = ['Vectra Pivot'],\n    mitre = Mitre,\n    tags = Tags\n| summarize arg_max(TimeGenerated, *) by ['Detection ID'], entity_uid\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects the exploitation pattern of the CVE-2020-1350 (SIGRED) vulnerability. This query utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let threshold = 15;\n_Im_Dns(starttime=ago(1d),endtime=now())\n| where DnsQueryTypeName in~ ('SIG', 'RRSIG')\n| where NetworkProtocol =~ 'TCP'\n| summarize Count=count() by SrcIpAddr, bin(TimeGenerated, 1m)\n| where Count > threshold\n| extend IP_0_Address = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when user asigned admin privileges.\n Topic: Snowflake"}, {"role": "assistant", "content": "let adm_roles = dynamic(['SECURITYADMIN', 'SYSADMIN', 'ACCOUNTADMIN']);\nSnowflake\n| where QUERY_TYPE_s =~ 'GRANT'\n| where QUERY_TEXT_s startswith 'GRANT ROLE'\n| extend granted_role = extract(@'GRANT ROLE\\s(\\S+)\\sto\\suser', 1, QUERY_TEXT_s)\n| where granted_role in~ (adm_roles)\n| extend usr = extract(@'GRANT ROLE\\s(\\S+)\\sto\\suser(\\S+)', 2, QUERY_TEXT_s)\n| extend AccountCustomEntity = usr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for operations with Write and Execute accesses.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(CategoryAccess)\n| where CategoryAccess != 'Read'\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Personal Access Tokens (PATs) are used as an alternate password to authenticate into Azure DevOps. PATs are intended for programmatic access use in code or applications. \nThis can be prone to attacker theft if not adequately secured. This query looks for the use of a PAT in authentication but from a User Agent indicating a browser. \nThis should not be normal activity and could be an indicator of an attacker using a stolen PAT.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where AuthenticationMechanism startswith \"PAT\"\n// Look for useragents that include a redenring engine\n| where UserAgent has_any (\"Gecko\", \"WebKit\", \"Presto\", \"Trident\", \"EdgeHTML\", \"Blink\")\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies user removed from the SecurityAdmin group of SQL Server. It relies on the SQLEvent KQL Parser function.\n Topic: Microsoft Windows SQL Server Database Audit"}, {"role": "assistant", "content": "// SQLEvent is not the table name, it is the function name that should already be imported into your workspace.\n// The underlying table where the data exists is the Event table.\n// This query checks for user removed from SecurityAdmin Role\nSQLEvent\n| where Statement has_all (\"Alter Server role\", \"drop member\")\n| parse Statement with * \"DROP MEMBER [\" TargetUser:string \"]\" *\n| where ObjectName has \"securityadmin\"\n| project TimeGenerated, Computer, Action, ClientIP, CurrentUser, DatabaseName, TargetUser, ObjectName, Statement \n| extend Name = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 0)[0]), CurrentUser)\n| extend UPNSuffix = iff(CurrentUser contains '@', tostring(split(CurrentUser, '@', 1)[0]), '')\n| extend Name = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 1)[0]), Name)\n| extend NTDomain = iff(CurrentUser contains '\\\\', tostring(split(CurrentUser, '\\\\', 0)[0]), '')\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend IP_0_Address = ClientIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects when newly created Global admin removes multiple existing global admins which can be an attempt by adversaries to lock down organization and retain sole access. \n Investigate reasoning and intention of multiple membership removal by new Global admins and take necessary actions accordingly.\n Topic: SecurityThreatEssentialSolution"}, {"role": "assistant", "content": "let lookback = 7d; \nlet timeframe = 1h; \nlet GlobalAdminsRemoved = AuditLogs \n| where TimeGenerated > ago(timeframe) \n| where Category =~ \"RoleManagement\" \n| where AADOperationType in~ (\"Unassign\", \"RemoveEligibleRole\") \n| where ActivityDisplayName has_any (\"Remove member from role\", \"Remove eligible member from role\") \n| mv-expand TargetResources \n| mv-expand TargetResources.modifiedProperties \n| extend displayName_ = tostring(TargetResources_modifiedProperties.displayName) \n| where displayName_ =~ \"Role.DisplayName\" \n| extend RoleName = tostring(parse_json(tostring(TargetResources_modifiedProperties.oldValue))) \n| where RoleName =~ \"Global Administrator\" // Add other Privileged role if applicable \n| extend InitiatingApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName) \n| extend Initiator = iif(isnotempty(InitiatingApp), InitiatingApp, tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)) \n| where Initiator != \"MS-PIM\"  // Filtering PIM events \n| extend Target = tostring(TargetResources.userPrincipalName) \n| summarize RemovedGlobalAdminTime = max(TimeGenerated), TargetAdmins = make_set(Target) by OperationName,  RoleName, Initiator, Result; \nlet GlobalAdminsAdded = AuditLogs \n| where TimeGenerated > ago(lookback) \n| where Category =~ \"RoleManagement\" \n| where AADOperationType in~ (\"Assign\", \"AssignEligibleRole\") \n| where ActivityDisplayName has_any (\"Add eligible member to role\", \"Add member to role\") and Result =~ \"success\" \n| mv-expand TargetResources \n| mv-expand TargetResources.modifiedProperties \n| extend displayName_ = tostring(TargetResources_modifiedProperties.displayName) \n| where displayName_ =~ \"Role.DisplayName\" \n| extend RoleName = tostring(parse_json(tostring(TargetResources_modifiedProperties.newValue))) \n| where RoleName =~ \"Global Administrator\" // Add other Privileged role if applicable \n| extend InitiatingApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName) \n| extend Initiator = iif(isnotempty(InitiatingApp), InitiatingApp, tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)) \n| where Initiator != \"MS-PIM\"  // Filtering PIM events \n| extend Target = tostring(TargetResources.userPrincipalName) \n| summarize AddedGlobalAdminTime = max(TimeGenerated) by OperationName,  RoleName, Target, Initiator, Result; \nGlobalAdminsAdded \n| join kind= inner GlobalAdminsRemoved on $left.Target == $right.Initiator \n| where AddedGlobalAdminTime < RemovedGlobalAdminTime \n| extend NoofAdminsRemoved = array_length(TargetAdmins) \n| where NoofAdminsRemoved > 1\n| project AddedGlobalAdminTime, Initiator, Target, RemovedGlobalAdminTime, TargetAdmins, NoofAdminsRemoved\n| extend Name=split(Target, \"@\")[0], UPNSuffix=split(Target, \"@\")[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule looks for a service principal being granted the Microsoft Graph RoleManagement.ReadWrite.Directory (application) permission before being used to add an Microsoft Entra ID object or user account to an Admin directory role (i.e. Global Administrators).\nThis is a known attack path that is usually abused when a service principal already has the AppRoleAssignment.ReadWrite.All permission granted. This permission allows an app to manage permission grants for application permissions to any API.\nA service principal can promote itself or other service principals to admin roles (i.e. Global Administrators). This would be considered a privilege escalation technique.\nRef : https://docs.microsoft.com/graph/permissions-reference#role-management-permissions, https://docs.microsoft.com/graph/api/directoryrole-post-members?view=graph-rest-1.0&tabs=http\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let query_frequency = 1h;\nlet query_period = 2h;\nAuditLogs\n| where TimeGenerated > ago(query_period)\n| where Category =~ \"ApplicationManagement\" and LoggedByService =~ \"Core Directory\"\n| where OperationName =~ \"Add app role assignment to service principal\"\n| mv-expand TargetResource = TargetResources\n| mv-expand modifiedProperty = TargetResource[\"modifiedProperties\"]\n| where tostring(modifiedProperty[\"displayName\"]) == \"AppRole.Value\"\n| extend PermissionGrant = tostring(modifiedProperty[\"newValue\"])\n| where PermissionGrant has \"RoleManagement.ReadWrite.Directory\"\n| mv-apply modifiedProperty = TargetResource[\"modifiedProperties\"] on (\n    summarize modifiedProperties = make_bag(\n        bag_pack(tostring(modifiedProperty[\"displayName\"]),\n            bag_pack(\"oldValue\", trim(@'[\\\"\\s]+', tostring(modifiedProperty[\"oldValue\"])),\n                \"newValue\", trim(@'[\\\"\\s]+', tostring(modifiedProperty[\"newValue\"])))), 100)\n)\n| project\n    PermissionGrant_TimeGenerated = TimeGenerated,\n    PermissionGrant_OperationName = OperationName,\n    PermissionGrant_Result = Result,\n    PermissionGrant,\n    AppDisplayName = tostring(modifiedProperties[\"ServicePrincipal.DisplayName\"][\"newValue\"]),\n    AppServicePrincipalId = tostring(modifiedProperties[\"ServicePrincipal.ObjectID\"][\"newValue\"]),\n    PermissionGrant_InitiatedBy = InitiatedBy,\n    PermissionGrant_TargetResources = TargetResources,\n    PermissionGrant_AdditionalDetails = AdditionalDetails,\n    PermissionGrant_CorrelationId = CorrelationId\n| join kind=inner (\n    AuditLogs\n    | where TimeGenerated > ago(query_frequency)\n    | where Category =~ \"RoleManagement\" and LoggedByService =~ \"Core Directory\" and AADOperationType =~ \"Assign\"\n    | where isnotempty(InitiatedBy[\"app\"])\n    | mv-expand TargetResource = TargetResources\n    | mv-expand modifiedProperty = TargetResource[\"modifiedProperties\"]\n    | where tostring(modifiedProperty[\"displayName\"]) in (\"Role.DisplayName\", \"RoleDefinition.DisplayName\")\n    | extend RoleAssignment = tostring(modifiedProperty[\"newValue\"])\n    | where RoleAssignment contains \"Admin\"\n    | project\n        RoleAssignment_TimeGenerated = TimeGenerated,\n        RoleAssignment_OperationName = OperationName,\n        RoleAssignment_Result = Result,\n        RoleAssignment,\n        TargetType = tostring(TargetResources[0][\"type\"]),\n        Target = iff(isnotempty(TargetResources[0][\"displayName\"]), tostring(TargetResources[0][\"displayName\"]), tolower(TargetResources[0][\"userPrincipalName\"])),\n        TargetId = tostring(TargetResources[0][\"id\"]),\n        RoleAssignment_InitiatedBy = InitiatedBy,\n        RoleAssignment_TargetResources = TargetResources,\n        RoleAssignment_AdditionalDetails = AdditionalDetails,\n        RoleAssignment_CorrelationId = CorrelationId,\n        AppServicePrincipalId = tostring(InitiatedBy[\"app\"][\"servicePrincipalId\"])\n    ) on AppServicePrincipalId\n| where PermissionGrant_TimeGenerated < RoleAssignment_TimeGenerated\n| extend\n    TargetName = tostring(split(Target, \"@\")[0]),\n    TargetUPNSuffix = tostring(split(Target, \"@\")[1])\n| project PermissionGrant_TimeGenerated, PermissionGrant_OperationName, PermissionGrant_Result, PermissionGrant, AppDisplayName, AppServicePrincipalId, PermissionGrant_InitiatedBy, PermissionGrant_TargetResources, PermissionGrant_AdditionalDetails, PermissionGrant_CorrelationId, \nRoleAssignment_TimeGenerated, RoleAssignment_OperationName, RoleAssignment_Result, RoleAssignment, TargetType, Target, TargetName, TargetUPNSuffix, TargetId, RoleAssignment_InitiatedBy, RoleAssignment_TargetResources, RoleAssignment_AdditionalDetails, RoleAssignment_CorrelationId\n| extend PermissionGrant_InitiatingUserPrincipalName = tostring(PermissionGrant_InitiatedBy.user.userPrincipalName)\n| extend PermissionGrant_InitiatingAadUserId = tostring(PermissionGrant_InitiatedBy.user.id)\n| extend PermissionGrant_InitiatingIpAddress = tostring(iff(isnotempty(PermissionGrant_InitiatedBy.user.ipAddress), PermissionGrant_InitiatedBy.user.ipAddress, PermissionGrant_InitiatedBy.app.ipAddress))\n| extend PermissionGrant_InitiatingAccountName = tostring(split(PermissionGrant_InitiatingUserPrincipalName, \"@\")[0]), PermissionGrant_InitiatingAccountUPNSuffix = tostring(split(PermissionGrant_InitiatingUserPrincipalName, \"@\")[1])\n| extend RoleAssignment_InitiatingUserPrincipalName = tostring(RoleAssignment_InitiatedBy.user.userPrincipalName)\n| extend RoleAssignment_InitiatingAadUserId = tostring(RoleAssignment_InitiatedBy.user.id)\n| extend RoleAssignment_InitiatingIpAddress = tostring(iff(isnotempty(RoleAssignment_InitiatedBy.user.ipAddress), RoleAssignment_InitiatedBy.user.ipAddress, RoleAssignment_InitiatedBy.app.ipAddress))\n| extend RoleAssignment_InitiatingAccountName = tostring(split(RoleAssignment_InitiatingUserPrincipalName, \"@\")[0]),  RoleAssignment_InitiatingAccountUPNSuffix = tostring(split(RoleAssignment_InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows file permission with PUT or POST request\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "PaloAltoCDLEvent\n| where TimeGenerated > ago(24h)\n| where HttpRequestMethod contains \"PUT\" or HttpRequestMethod contains \"POST\"\n| where isnotempty(FilePermission)\n| summarize Permissions = count() by FilePermission, DstUsername\n| extend AccountCustomEntity = DstUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects where an emails contain non ascii characters within the Subject.\n Topic: Corelight"}, {"role": "assistant", "content": "corelight_smtp\n| where subject hasprefix  @'\\=?utf-16'\n| summarize recipients = dcount(_to)\n| extend k = 1\n| join (corelight_smtp\n        | where subject hasprefix  @'\\=?utf-16'\n        | summarize by _to\n        | extend k = 1) on k\n| where recipients > 1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows server error by user.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "ZPAEvent\n| where EventResult has \"AST_MT_SETUP_ERR_OPEN_SERVER_ERROR\"\n| summarize ips = count()by DstUserName\n| top 20 by ips desc \n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects mails with suspicious links.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "let u_cat = dynamic(['Unclassified']);\nCiscoSEGEvent\n| where NetworkDirection =~ 'Incoming'\n| where tostring(AdditionalFields) has 'ESAURLDetails'\n| extend link_cat = extract(@\"'Category': '(.*?)'\", 1, tostring(AdditionalFields))\n| where link_cat in~ (u_cat)\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": " Identifies spike in failed sign-ins from user accounts due to conditional access policied.\nSpike is determined based on Time series anomaly which will look at historical baseline values.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-failed-unusual-sign-ins\nThis query has also been updated to include UEBA logs IdentityInfo and BehaviorAnalytics for contextual information around the results.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let riskScoreCutoff = 20; //Adjust this based on volume of results\nlet starttime = 14d;\nlet timeframe = 1d;\nlet scorethreshold = 3;\nlet baselinethreshold = 50;\nlet aadFunc = (tableName:string){\n  // Failed Signins attempts with reasoning related to conditional access policies.\n  table(tableName)\n  | where TimeGenerated between (startofday(ago(starttime))..startofday(now()))\n  | where ResultDescription has_any (\"conditional access\", \"CA\") or ResultType in (50005, 50131, 53000, 53001, 53002, 52003, 70044)\n  | extend UserPrincipalName = tolower(UserPrincipalName)\n  | extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nlet allSignins = union isfuzzy=true aadSignin, aadNonInt;\nlet TimeSeriesAlerts = \nallSignins\n| make-series DailyCount=count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step 1d by UserPrincipalName\n| extend (anomalies, score, baseline) = series_decompose_anomalies(DailyCount, scorethreshold, -1, 'linefit')\n| mv-expand DailyCount to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\n// Filtering low count events per baselinethreshold\n| where anomalies > 0 and baseline > baselinethreshold\n| extend AnomalyHour = TimeGenerated\n| project UserPrincipalName, AnomalyHour, TimeGenerated, DailyCount, baseline, anomalies, score;\n// Filter the alerts for specified timeframe\nTimeSeriesAlerts\n| where TimeGenerated > startofday(ago(timeframe))\n| join kind=inner ( \n  allSignins\n  | where TimeGenerated > startofday(ago(timeframe))\n  // create a new column and round to hour\n  | extend DateHour = bin(TimeGenerated, 1h)\n  | summarize PartialFailedSignins = count(), LatestAnomalyTime = arg_max(TimeGenerated, *) by bin(TimeGenerated, 1h), OperationName, Category, ResultType, ResultDescription, UserPrincipalName, UserDisplayName, AppDisplayName, ClientAppUsed, IPAddress, ResourceDisplayName\n) on UserPrincipalName, $left.AnomalyHour == $right.DateHour\n| project LatestAnomalyTime, OperationName, Category, UserPrincipalName, UserDisplayName, ResultType, ResultDescription, AppDisplayName, ClientAppUsed, UserAgent, IPAddress, Location, AuthenticationRequirement, ConditionalAccessStatus, ResourceDisplayName, PartialFailedSignins, TotalFailedSignins = DailyCount, baseline, anomalies, score\n| extend timestamp = LatestAnomalyTime, Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n| extend UserPrincipalName = tolower(UserPrincipalName)\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n) on UserPrincipalName\n| join kind=leftouter (\n    BehaviorAnalytics\n    | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n    | where isnotempty(SourceIPAddress)\n    | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress\n    | project-rename IPAddress = SourceIPAddress\n    | summarize\n        UsersInsights = make_set(UsersInsights, 1000),\n        DevicesInsights = make_set(DevicesInsights, 1000),\n        IPInvestigationPriority = sum(InvestigationPriority)\n    by IPAddress)\non IPAddress\n| extend UEBARiskScore = IPInvestigationPriority\n| where UEBARiskScore > riskScoreCutoff\n| sort by UEBARiskScore desc \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule is designed to flag web requests that contain a user agent header that is recognized as malicious. It relies on a predefined list of known user agents, which is referenced from a specific CSV file\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let lookback = 5m;\nlet knownUserAgentsIndicators = materialize(externaldata(UserAgent: string, UserAgentCategory: string)\n  [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/UnusualUserAgents.csv\"] \n  with(format=\"csv\", ignoreFirstRecord=True)\n  | extend joiner = 1);\nlet CustomUserAgentIndicators = (_ASIM_GetWatchlistRaw(\"UnusualUserAgents\") // Create new Watchlist and add your custom indicators(Optional)\n  | extend\n      UserAgent = tostring(WatchlistItem[\"UserAgent\"]),\n      UserAgentCategory = tostring(WatchlistItem[\"UserAgentCategory\"])\n  | project UserAgent, UserAgentCategory, joiner = 1\n  | where isnotempty(UserAgent) and isnotempty(UserAgentCategory));\nlet CombinedUAList = union knownUserAgentsIndicators, CustomUserAgentIndicators;\nlet knownUserAgents=toscalar(CombinedUAList\n  | where isnotempty(UserAgent)\n  | summarize make_list(UserAgent, 1000));\n_Im_WebSession (starttime=ago(lookback), httpuseragent_has_any=knownUserAgents)\n| project SrcIpAddr, SrcUsername, SrcHostname, HttpUserAgent, Url, DstIpAddr, DstPortNumber, TimeGenerated\n| extend joiner = 1\n| join kind=inner CombinedUAList on joiner\n| where HttpUserAgent has UserAgent\n| summarize\n  EventCount=count(),\n  EventStartTime = min(TimeGenerated),\n  EventEndTime=max(TimeGenerated)\n  by SrcIpAddr, SrcUsername, SrcHostname, Url, HttpUserAgent, DstIpAddr, DstPortNumber, UserAgentCategory\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible attack without response.\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "PaloAltoCDLEvent\n| where EventResourceId =~ 'THREAT'\n| where DvcAction !has \"block\" or DvcAction !has \"override\" or DvcAction !has \"deny\"\n| extend AccountCustomEntity = DstUsername, IPCustomEntity = SrcIpAddr, UrlCustomEntity = Url\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in SecurityAlert table from any Email IOC from TI which will extend coverage to datatypes such as MCAS, StorageThreatProtection and many others\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$';\nThreatIntelligenceIndicator\n//Filtering the table for Email related IOCs\n| where isnotempty(EmailSenderAddress)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n    SecurityAlert\n    | where TimeGenerated >= ago(dt_lookBack)\n    | extend MSTI = case(AlertName has \"TI map\" and VendorName == \"Microsoft\" and ProductName == 'Azure Sentinel', true, false)\n    | where MSTI == false\n    // Converting Entities into dynamic data type and use mv-expand to unpack the array\n    | extend EntitiesDynamicArray = parse_json(Entities) | mv-expand EntitiesDynamicArray\n    // Parsing relevant entity column to filter type account and creating new column by combining account and UPNSuffix\n    | extend Entitytype = tostring(parse_json(EntitiesDynamicArray).Type), EntityName = tostring(parse_json(EntitiesDynamicArray).Name),\n    EntityUPNSuffix = tostring(parse_json(EntitiesDynamicArray).UPNSuffix)\n    | where Entitytype =~ \"account\"\n    | extend EntityEmail = tolower(strcat(EntityName, \"@\", EntityUPNSuffix))\n    | where EntityEmail matches regex emailregex\n    | extend Alert_TimeGenerated = TimeGenerated\n)\non $left.EmailSenderAddress == $right.EntityEmail\n| where Alert_TimeGenerated < ExpirationDateTime\n| summarize Alert_TimeGenerated = arg_max(Alert_TimeGenerated, *) by IndicatorId, AlertName\n| project Alert_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nEmailSenderName, EmailRecipient, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, EntityEmail, AlertName, AlertType,\nAlertSeverity, Entities, ProviderName, VendorName\n| extend Name = tostring(split(EntityEmail, '@', 0)[0]), UPNSuffix = tostring(split(EntityEmail, '@', 1)[0])\n| extend timestamp = Alert_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query hunts for command line activity linked to Dev-0322s compromise of ZOHO ManageEngine ADSelfService Plus software. It focuses on commands used in post-exploitation activity. Hosts with higher risk scores should be prioritized.\n Topic: Legacy IOC based Threat Protection"}, {"role": "assistant", "content": "// Look for command lines observed used by the threat actor\nlet cmd_lines = dynamic(['regsvr32 /s c:\\\\windows\\\\temp\\\\user64.dll', 'process call  create \"cmd /c c:\\\\windows\\\\temp\\\\gac.exe -i c:\\\\windows\\temp\\\\ScriptModule.dll >c:\\\\windows\\\\temp\\\\tmp.dat\"']);\nDeviceProcessEvents\n// Look for static cmd lines and dynamic one using regex\n| where ProcessCommandLine has_any (cmd_lines) or ProcessCommandLine matches regex \"save HKLM\\\\SYSTEM [^ ]*_System.HIV\" or ProcessCommandLine matches regex 'cmd.exe /c \"wmic /node:[^ ]* process call create \"ntdsutil snapshot \\\\\"activate instance ntds\\\\\" create quit quit > c:\\\\windows\\\\temp\\\\nt.dat\";'  or InitiatingProcessCommandLine has_any (cmd_lines) or InitiatingProcessCommandLine  matches regex \"save HKLM\\\\SYSTEM [^ ]*_System.HIV\" or InitiatingProcessCommandLine  matches regex \"save HKLM\\\\SYSTEM [^ ]*_System.HIV\" or ProcessCommandLine matches regex 'cmd.exe /c \"wmic /node:[^ ]* process call create \"ntdsutil snapshot \\\\\"activate instance ntds\\\\\" create quit quit > c:\\\\windows\\\\temp\\\\nt.dat\";'\n| summarize count(), FirstSeen=min(TimeGenerated), LastSeen = max(TimeGenerated) by DeviceId, DeviceName, ProcessCommandLine, AccountName, FileName, InitiatingProcessCommandLine, InitiatingProcessFileName, InitiatingProcessAccountName, InitiatingProcessAccountSid, SHA256\n// Base risk score on number of command lines seen for each host\n| extend RiskScore = count_\n// Increase risk score if host has recent security alerts\n| join kind=leftouter (SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| mv-expand todynamic(Entities)\n| extend DeviceId = tostring(parse_json(Entities).MdatpDeviceId)\n| where isnotempty(DeviceId)\n// Increase risk score further if alerts relate to malware assocaited with threat actor\n| extend AlertRiskScore = iif(ThreatName has_any (\"Zebracon\", \"Trojan:MSIL/Gacker.A!dha\", \"Backdoor:MSIL/Kokishell.A!dha\"), 1.0, 0.5)) on DeviceId\n| extend AlertRiskScore = iif(isempty(AlertRiskScore), 0.0 , AlertRiskScore)\n// Create aggregate risk score\n| extend RiskScore = RiskScore + AlertRiskScore\n| project-reorder  FirstSeen, LastSeen, RiskScore, DeviceName, DeviceId, ProcessCommandLine, AccountName\n| extend timestamp = FirstSeen, AccountCustomEntity = AccountName, HostCustomEntity = DeviceName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures related to password issues.\n Topic: Tenable App"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.yaml parser into the workspace\n// Retrieve the parser here: https://aka.ms/sentinel-TenableApp-afad-parser\n// Then, create the Kusto Function with alias afad_parser\nlet SeverityTable=datatable(Severity:string,Level:int) [\n\"low\", 1,\n\"medium\", 2,\n\"high\", 3,\n\"critical\", 4\n];\nlet codeNameList = datatable(Codename:string)[\"C-CLEARTEXT-PASSWORD\", \"C-PASSWORD-DONT-EXPIRE\", \"C-USER-REVER-PWDS\", \"C-PASSWORD-POLICY\", \"C-USER-PASSWORD\", \"C-KRBTGT-PASSWORD\", \"C-AAD-SSO-PASSWORD\", \"C-REVER-PWD-GPO\"];\nafad_parser\n| where MessageType == 0 and Codename in~ (codeNameList)\n| lookup kind=leftouter SeverityTable on Severity\n| order by Level\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for having found that when periodic password resets are enforced,\n passwords become less secure. Users tend to pick a weaker password and vary it slightly for each reset.\n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'AzureSecureScorePWAgePolicyNew'"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when multiple emails with large size where sent to the same recipient.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let lbtime = 30m;\nlet msgthreshold = 3;\nlet msgszthreshold = 3000000;\nProofpointPOD\n| where TimeGenerated > ago(lbtime)\n| where EventType == 'message'\n| where NetworkDirection == 'outbound'\n| where NetworkBytes > msgszthreshold\n| summarize count() by SrcUserUpn, DstUserUpn\n| where count_ > msgthreshold\n| extend AccountCustomEntity = SrcUserUpn\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Correlates blocked URLs hosting [malicious] executables with host endpoint data to identify potential instances of executables of the same name having been recently run.\n Topic: Network Threat Protection Essentials"}, {"role": "assistant", "content": "let endpointData = \n(union isfuzzy=true\n(SecurityEvent\n  | where EventID == 4688\n  | extend shortFileName = tolower(tostring(split(NewProcessName, '\\\\')[-1]))\n  ),\n  (WindowsEvent\n  | where EventID == 4688\n  | extend  NewProcessName = tostring(EventData.NewProcessName)\n  | extend shortFileName = tolower(tostring(split(NewProcessName, '\\\\')[-1]))\n  | extend TargetUserName = tostring(EventData.TargetUserName)\n  ));\n// Correlate suspect executables seen in TrendMicro rule updates with similar activity on endpoints\nCommonSecurityLog\n| where DeviceVendor =~ \"Trend Micro\"\n| where Activity =~ \"Deny List updated\" \n| where RequestURL endswith \".exe\"\n| project TimeGenerated, Activity , RequestURL , SourceIP, DestinationIP\n| extend suspectExeName = tolower(tostring(split(RequestURL, '/')[-1]))\n| join kind=innerunique (endpointData) on $left.suspectExeName == $right.shortFileName \n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule makes use of the series decompose anomaly method to detect clients with a high NXDomain response count, which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live). An alert is generated when new IP address DNS activity is identified as an outlier when compared to the baseline, indicating a recurring pattern. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "let threshold = 2.5;\nlet min_t = ago(14d);\nlet max_t = now();\nlet timeframe = 1d;\n// calculate avg. eps(events per second)\nlet eps = materialize (_Im_Dns\n  | project TimeGenerated\n  | where TimeGenerated > ago(5m)\n  | count\n  | extend Count = Count / 300);\nlet maxSummarizedTime = toscalar (\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL \n      | where EventTime_t >= min_t\n      | summarize max_TimeGenerated=max(EventTime_t)\n      | extend max_TimeGenerated = datetime_add('hour', 1, max_TimeGenerated)\n      ),\n      (\n      print(min_t)\n      | project max_TimeGenerated = print_0\n      )\n  | summarize maxTimeGenerated = max(max_TimeGenerated) \n  );\nlet summarizationexist = materialize(\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > ago(1d) \n      | project v = int(2)\n      ),\n      (\n      print int(1) \n      | project v = print_0\n      )\n  | summarize maxv = max(v)\n  | extend sumexist = (maxv > 1)\n  );\nlet allData = union isfuzzy=true\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) > 1000\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(responsecodename='NXDOMAIN', starttime=todatetime(ago(2d)), endtime=now())\n          | where TimeGenerated > maxSummarizedTime\n          | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) between (501 .. 1000)\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(responsecodename='NXDOMAIN', starttime=todatetime(ago(3d)), endtime=now())\n          | where TimeGenerated > maxSummarizedTime\n          | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) <= 500\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(responsecodename='NXDOMAIN', starttime=todatetime(ago(4d)), endtime=now())\n          | where TimeGenerated > maxSummarizedTime\n          | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > min_t and EventResultDetails_s == 'NXDOMAIN'\n      | project-rename\n          SrcIpAddr=SrcIpAddr_s,\n          DnsQuery=DnsQuery_s,\n          Count=count__d,\n          EventTime=EventTime_t\n      | extend Count = toint(Count)\n      );\nallData\n| make-series QueryCount=dcount(DnsQuery) on EventTime from min_t to max_t step timeframe by SrcIpAddr\n// include calculated Anomalies, Score and Baseline\n| extend (anomalies, score, baseline) = series_decompose_anomalies(QueryCount, threshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, EventTime, QueryCount\n| extend\n  anomalies = toint(anomalies),\n  score = toint(score),\n  baseline = toint(baseline),\n  EventTime = todatetime(EventTime),\n  Total = tolong(QueryCount)\n| where EventTime >= ago(timeframe)\n| where score >= threshold * 2\n// Join allData to include DnsQuery details\n| join kind=inner(allData\n  | where TimeGenerated >= ago(timeframe)\n  | summarize DNSQueries = make_set(DnsQuery, 1000) by SrcIpAddr)\n  on SrcIpAddr\n| project-away SrcIpAddr1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Created to detect failed events of particular type from SailPointIDN_Events.\n Topic: SailPointIdentityNow"}, {"role": "assistant", "content": "declare query_parameters(lbperiod:timespan = 14d, type:string = \"ACCESS_ITEM\");\nSailPointIDN_Events_CL\n| where TimeGenerated > ago(lbperiod)\n| where type_s == type\n| where status_s == \"FAILED\"\n| sort by created_t\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query will detect SQL queries where suspicious stored procedures are called. Suspicious procedures included in the query are based on data seen by the MSTIC Deception honeypot.\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let abusedProcedures = dynamic([\"xp_cmdshell\", \"xp_regwrite\", \"xp_regdeletekey\", \"xp_regdeletevalue\", \"xp_dirtree\", \"xp_fileexist\", \"xp_msver\", \"xp_makecab\", \"xp_sqlshell\", \"xp_fixeddrivesd\", \"xp_regread\", \"sp_configure\", \"sp_oacreate\", \"sp_password\", \"sp_OACreate\", \"sp_addextendedproc\", \"sp_dropextendedproc\", \"sp_makewebtask\", \"sp_delete\", \"SP_OAcreate\", \"sp_OADestroy\"]);\nAzureDiagnostics\n| where Category =~ \"SQLSecurityAuditEvents\"\n| where statement_s has_any (abusedProcedures)\n| project TimeGenerated, SubscriptionId, ResourceId, ClientIp=client_ip_s, PrincipalName=session_server_principal_name_s, statement_s, action_id_s, HostName=host_name_s, ApplicationName=application_name_s\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = ClientIp\n| extend Host_0_Hostname = HostName\n| extend CloudApplication_0_Name = ApplicationName\n| extend AzureResource_0_ResourceId = ResourceId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for stored on cloud fileshare services.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where TimeGenerated > ago(24h)\n| where EventCategoryType in~ ('sharepoint', 'onedrive', 'dropbox', 'box', 'googledrive')\n| where isnotempty(SrcFileName)\n| project DetectionTime, DstUserName, SrcFileName, EventOriginalResultDetails, SecurityRiskName, VirusName\n| extend FileCustomEntity = SrcFileName, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies where multiple Teams have been deleted by a single user in a short timeframe.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let max_delete = 3;  // Adjust this value to change how many Teams should be deleted before being included\n// EnrichedMicrosoft365AuditLogs - Users who deleted more than 'max_delete' Teams\nlet deleting_users_enriched = (\n    EnrichedMicrosoft365AuditLogs\n    | where Workload == \"MicrosoftTeams\"\n    | where Operation == \"TeamDeleted\"\n    | summarize count_ = count() by UserId\n    | where count_ > max_delete\n    | project UserId\n);\n// EnrichedMicrosoft365AuditLogs Query\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where Workload == \"MicrosoftTeams\"\n    | where Operation == \"TeamDeleted\"\n    | where UserId in (deleting_users_enriched)\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n    | extend Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix\n    | project TimeGenerated, UserId, Account_0_Name, Account_0_UPNSuffix;\n// OfficeActivity - Users who deleted more than 'max_delete' Teams\nlet deleting_users_office = (\n    OfficeActivity\n    | where OfficeWorkload =~ \"MicrosoftTeams\"\n    | where Operation =~ \"TeamDeleted\"\n    | summarize count_ = count() by UserId\n    | where count_ > max_delete\n    | project UserId\n);\n// OfficeActivity Query\nlet OfficeEvents = OfficeActivity\n    | where OfficeWorkload =~ \"MicrosoftTeams\"\n    | where Operation =~ \"TeamDeleted\"\n    | where UserId in (deleting_users_office)\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n    | extend Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix\n    | project TimeGenerated, UserId, Account_0_Name, Account_0_UPNSuffix;\n// Combine Office and Enriched Logs\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize arg_min(TimeGenerated, *) by UserId;\n// Final Output\nCombinedEvents\n| project TimeGenerated, UserId, Account_0_Name, Account_0_UPNSuffix\n| order by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when there is a login attempt from a country that has not seen a successful login in the previous 14 days.\nThreat actors may attempt to authenticate with credentials from compromised accounts - monitoring attempts from anomalous locations may help identify these attempts.\nAuthentication attempts should be investigated to ensure the activity was legitimate and if there is other similar activity.\nRef: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-failed-unusual-sign-ins\n Topic: Detections"}, {"role": "assistant", "content": "let CombinedSignInLogs = union isfuzzy=True AADNonInteractiveUserSignInLogs, SigninLogs;\n  // Combine AADNonInteractiveUserSignInLogs and SigninLogs into a single table\n  // Fetch Azure IP address ranges data from a JSON file hosted on GitHub\n  let AzureRanges = externaldata(changeNumber: string, cloud: string, values: dynamic)\n  [\"https://raw.githubusercontent.com/microsoft/mstic/master/PublicFeeds/MSFTIPRanges/ServiceTags_Public.json\"] with(format='multijson')\n  // Load Azure IP address ranges from the JSON file hosted on GitHub\n  | mv-expand values\n  // Expand the values column into separate rows\n  | extend Name = values.name, AddressPrefixes = tostring(values.properties.addressPrefixes);\n  // Create additional columns for the name and address prefixes\n  // Identify known locations to be excluded from analysis\n  let ExcludedKnownLocations = CombinedSignInLogs\n  // Filter the combined logs based on the specified time range\n  | where TimeGenerated between (ago(14d)..ago(1d))\n  // Filter by specific ResultType\n  | where ResultType == 0\n  // Summarize the logs by location\n  | summarize by Location;\n  // Find sign-in locations matching specific criteria\n  let MatchedLocations = materialize(CombinedSignInLogs\n  // Filter the combined logs based on the specified time range\n  | where TimeGenerated > ago(1d)\n  // Exclude specific ResultTypes\n  | where ResultType !in (50126, 50053, 50074, 70044)\n  // Exclude known locations\n  | where Location !in (ExcludedKnownLocations));\n  // Match IP addresses of matched locations with Azure IP address ranges\n  let MatchedIPs = MatchedLocations\n  // Use the 'ipv4_lookup' function to match IP addresses with Azure IP address ranges\n  | evaluate ipv4_lookup(AzureRanges, IPAddress, AddressPrefixes)\n  // Project only the IPAddress column\n  | project IPAddress;\n  // Exclude IP addresses that are already matched with Azure IP address ranges\n  let MaxSetSize = 5; // Set the maximum size limit for make_set\n  let ExcludedIPs = MatchedLocations\n  // Filter out IP addresses that are already matched\n  | where not (IPAddress in (MatchedIPs))\n  // Exclude empty or null Location values\n  | where isnotempty(Location)\n  // Handle dynamic and string column values for LocationDetails and DeviceDetail\n  | extend LocationDetails_dynamic = column_ifexists(\"LocationDetails_dynamic\", \"\")\n  | extend DeviceDetail_dynamic = column_ifexists(\"DeviceDetail_dynamic\", \"\")\n  | extend LocationDetails = iif(isnotempty(LocationDetails_dynamic), LocationDetails_dynamic, parse_json(LocationDetails_string))\n  | extend DeviceDetail = iif(isnotempty(DeviceDetail_dynamic), DeviceDetail_dynamic, parse_json(DeviceDetail_string))\n  // Extract location details (city and state)\n  | extend City = tostring(LocationDetails.city)\n  | extend State = tostring(LocationDetails.state)\n  | extend Place = strcat(City, \" - \", State)\n  | extend DeviceId = tostring(DeviceDetail.deviceId)\n  | extend Result = strcat(tostring(ResultType), \" - \", ResultDescription)\n  // Summarize the data based on UserPrincipalName, Location, and Category\n  | summarize FirstSeen=min(TimeGenerated), LastSeen=max(TimeGenerated),\n  make_set(Result, MaxSetSize), make_set(IPAddress, MaxSetSize),\n  make_set(UserAgent, MaxSetSize), make_set(Place, MaxSetSize),\n  make_set(DeviceId, MaxSetSize) by UserPrincipalName, Location, Category\n  // Extract the username prefix and suffix from UserPrincipalName\n  | extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0]);\n  ExcludedIPs // Output the final result set\n  | extend IP = set_IPAddress[0]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects a URL being added to an application where the domain is not one that is associated with the tenant.\n  The query uses domains seen in sign in logs to determine if the domain is associated with the tenant.\n  Applications associated with URLs not controlled by the organization can pose a security risk.\n  Ref: https://learn.microsoft.com/en-gb/entra/architecture/security-operations-applications#application-configuration-changes\n Topic: Detections"}, {"role": "assistant", "content": "let domains =\n  SigninLogs\n  | where ResultType == 0\n  | extend domain = split(UserPrincipalName, \"@\")[1]\n  | extend domain = tostring(split(UserPrincipalName, \"@\")[1])\n  | summarize by tolower(tostring(domain));\n  AuditLogs\n  | where Category =~ \"ApplicationManagement\"\n  | where Result =~ \"success\"\n  | where OperationName =~ 'Update Application'\n  | mv-expand TargetResources\n  | mv-expand TargetResources.modifiedProperties\n  | where TargetResources_modifiedProperties.displayName =~ \"AppAddress\"\n  | extend Key = tostring(TargetResources_modifiedProperties.displayName)\n  | extend NewValue = TargetResources_modifiedProperties.newValue\n  | extend OldValue = TargetResources_modifiedProperties.oldValue\n  | where isnotempty(Key) and isnotempty(NewValue)\n  | project-reorder Key, NewValue, OldValue\n  | extend NewUrls = extract_all('\"Address\":([^,]*)', tostring(NewValue))\n  | extend OldUrls = extract_all('\"Address\":([^,]*)', tostring(OldValue))\n  | extend AddedUrls = set_difference(NewUrls, OldUrls)\n  | where array_length(AddedUrls) > 0\n  | extend UserAgent = iif(tostring(AdditionalDetails[0].key) == \"User-Agent\", tostring(AdditionalDetails[0].value), \"\")\n  | extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n  | extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n  | extend InitiatedBy = tostring(iff(isnotempty(InitiatingUserPrincipalName),InitiatingUserPrincipalName, InitiatingAppName))\n  | extend AppDisplayName = tostring(TargetResources.displayName)\n  | where isnotempty(AddedUrls)\n  | mv-expand AddedUrls\n  | extend AddedUrls = trim(@'\"', tostring(AddedUrls))\n  | extend Domain = extract(\"^(?:https?:\\\\/\\\\/)?(?:[^@\\\\/\\\\n]+@)?(?:www\\\\.)?([^:\\\\/?\\\\n]+)/\", 1, replace_string(tolower(AddedUrls), '\"', \"\"))\n  | where isnotempty(Domain)\n  | extend Domain = strcat(split(Domain, \".\")[-2], \".\", split(Domain, \".\")[-1])\n  | where Domain !in (domains)\n  | project-reorder TimeGenerated, AppDisplayName, AddedUrls, InitiatedBy, UserAgent, InitiatingIPAddress\n  | extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An instance profile is a container for an IAM role that you can use to pass role information to an EC2 instance when the instance start.\nIdentifies when existing role is removed and new/existing high privileged role is added to instance profile. \nAny instance with this instance profile attached is able to perform privileged operations.\nAWS Instance Profile: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html \nand CloudGoat - IAM PrivilegeEscalation by Attachment: https://github.com/RhinoSecurityLabs/cloudgoat/tree/master/scenarios/iam_privesc_by_attachment \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "\n// Creating separate table for RemoveRoleToInstanceProfile\nlet RemoveRole=AWSCloudTrail\n| where  EventName in~ (\"RemoveRoleFromInstanceProfile\") and isempty(ErrorMessage)\n| extend RoleRemoved = tostring(parse_json(RequestParameters).roleName), InstanceProfileName = tostring(parse_json(RequestParameters).instanceProfileName), TimeRemoved=TimeGenerated\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| summarize RoleRemovedCount= dcount(TimeRemoved) by TimeRemoved, EventName, EventTypeName, UserIdentityArn, UserIdentityUserName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \nSourceIpAddress, AWSRegion, EventSource, RoleRemoved, InstanceProfileName;\n// Creating separate table for AddRoleToInstanceProfile\nlet AddRole=AWSCloudTrail\n| where  EventName in~ (\"AddRoleToInstanceProfile\") and isempty(ErrorMessage)\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend RoleAdded = tostring(parse_json(RequestParameters).roleName), InstanceProfileName = tostring(parse_json(RequestParameters).instanceProfileName), TimeAdded=TimeGenerated\n| summarize RoleAddedCount= dcount(TimeAdded) by TimeAdded, EventName, EventTypeName, UserIdentityArn, UserIdentityUserName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \nSourceIpAddress, AWSRegion, EventSource, RoleAdded, InstanceProfileName;\n//Joining both operations from the same source IP, user and instance profile name\nRemoveRole\n| join kind= inner (\n   AddRole \n) on AWSRegion,SourceIpAddress, InstanceProfileName, UserIdentityUserName\n| where TimeAdded  > TimeRemoved // Checking if RoleAdd operation was performed after removal\n| summarize TotalCount=count() by TimeAdded, TimeRemoved, RoleAdded, RoleRemoved, UserIdentityUserName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent,\nSourceIpAddress, AWSRegion, EventSource, RoleRemovedCount, RoleAddedCount\n| extend timestamp = iff(TimeAdded > TimeRemoved,TimeAdded, TimeRemoved), IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for new service accounts created for the last 24 hours.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where TimeGenerated > ago(24h)\n| where PayloadMethodname =~ 'google.iam.admin.v1.CreateServiceAccount'\n| extend result = parse_json(todynamic(PayloadAuthorizationinfo))[0]['granted']\n| where result =~ 'true'\n| project-away result\n| extend timestamp = TimeGenerated, AccountCustomEntity = PayloadRequestAccountId, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows processes run as admin.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where TimeGenerated > ago(24h)\n| where UserIsAdmin == true\n| summarize count() by ActingProcessName, ActingProcessCommandLine, ActorUsername\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects Windows executable with unexpected extension.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where EventSubType != 'AttackAttempt'\n| where ActingProcessName has @'\\'\n| where ActingProcessName !endswith '.exe'\n| project EventEndTime, EventMessage, ActorUsername, ActingProcessFileInternalName\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows abnormal request size.\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "let Average_Body_Bytes = NGINXHTTPServer\n| where TimeGenerated > ago(30d)\n| summarize Avg_Size = avg(tolong(HttpResponseBodyBytes))\n| extend K = 1;\nNGINXHTTPServer\n| where TimeGenerated > ago(24h)\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| extend K = 1\n| join kind=inner Average_Body_Bytes on K\n| where tolong(HttpResponseBodyBytes) > Avg_Size\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query identifies credential abuse across hosts, using Security Event 4648 to detect multiple account connections to various machines, indicative of Solorigate-like patterns.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let WellKnownLocalSIDs = \"S-1-5-[0-9][0-9]$\";\nlet protocols = dynamic(['cifs', 'ldap', 'RPCSS', 'host' , 'HTTP', 'RestrictedKrbHost', 'TERMSRV', 'msomsdksvc', 'mssqlsvc']);\nSecurityEvent\n| where EventID == 4648\n| where SubjectUserSid != 'S-1-0-0' // this is the Nobody SID which really means No security principal was included.\n| where not(SubjectUserSid matches regex WellKnownLocalSIDs) //excluding system account/service account as this is generally normal\n| where TargetInfo has '/' //looking for only items that indicate an interesting protocol is included\n| where Computer !has tostring(split(TargetServerName,'$', 0)[0])\n| where TargetAccount !~ tostring(split(SubjectAccount,'$', 0)[0])\n| extend TargetInfoProtocol = tolower(split(TargetInfo, '/', 0)[0]), TargetInfoMachine = toupper(split(TargetInfo, '/', 1)[0])\n| extend TargetAccount = tolower(TargetAccount), SubjectAccount = tolower(SubjectAccount)\n| extend UncommonProtocol = case(not(TargetInfoProtocol has_any (protocols)), TargetInfoProtocol, 'NotApplicable')\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), AccountsUsedCount = dcount(TargetAccount), AccountsUsed = make_set(TargetAccount, 100), TargetMachineCount = dcount(TargetInfoMachine), \nTargetMachines = make_set(TargetInfoMachine, 100), TargetProtocols = dcount(TargetInfoProtocol), Protocols = make_set(TargetInfoProtocol, 100), Processes = make_set(Process, 100) by Computer, SubjectAccount, UncommonProtocol\n| where TargetMachineCount > 1 or UncommonProtocol != 'NotApplicable'\n| extend ProtocolCount = array_length(Protocols)\n| extend ProtocolScore = case(\n  Protocols has 'rpcss' and Protocols has 'host' and Protocols has 'cifs', 10, //observed in Solorigate and depending on which are used together the higher the score\n  Protocols has 'rpcss' and Protocols has 'host', 5,\n  Protocols has 'rpcss' and Protocols has 'cifs', 5,\n  Protocols has 'host' and Protocols has 'cifs', 5,\n  Protocols has 'ldap' or Protocols has 'rpcss' or Protocols has 'host' or Protocols has 'cifs', 1, //ldap is more commonly seen in general, this was also seen with Solorigate but not usually to the same machines as the others above\n  UncommonProtocol != 'NotApplicable', 3,\n  0 //other protocols may be of interest, but in relation to observations for enumeration/execution in Solorigate they receive 0\n)\n| extend Score = ProtocolScore + ProtocolCount + AccountsUsedCount\n| where Score >= 9 or (UncommonProtocol != 'NotApplicable' and Score >= 4) // Score must be 9 or better as this will include 5 points for atleast 2 of the interesting protocols + the count of protocols (min 2) + the number of accounts used for execution (min 2) = min of 9 OR score must be 4 or greater for an uncommon protocol\n| extend TimePeriod = EndTime - StartTime //This identifies the time between start and finish for the use of the explicit credentials, shorter time period may indicate scripted executions\n| project-away UncommonProtocol\n| extend timestamp = StartTime, NTDomain = split(SubjectAccount, '\\\\', 0)[0], Name = split(SubjectAccount, '\\\\', 1)[0], HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n| order by Score desc\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain   \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies failed login attempts in the Microsoft Entra ID SigninLogs to the Azure Portal.  Many failed logon attempts or some failed logon attempts from multiple IPs could indicate a potential brute force attack.\nThe following are excluded due to success and non-failure results:\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n0 - successful logon\n50125 - Sign-in was interrupted due to a password reset or password registration entry.\n50140 - This error occurred due to Keep me signed in interrupt when the user was signing-in.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let timeRange = 1d;\nlet lookBack = 7d;\nlet threshold_Failed = 5;\nlet threshold_FailedwithSingleIP = 20;\nlet threshold_IPAddressCount = 2;\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet aadFunc = (tableName:string){\nlet azPortalSignins = materialize(table(tableName)\n| where TimeGenerated >= ago(lookBack)\n// Azure Portal only\n| where AppDisplayName =~ \"Azure Portal\")\n;\nlet successPortalSignins = azPortalSignins\n| where TimeGenerated >= ago(timeRange)\n// Azure Portal only and exclude non-failure Result Types\n| where ResultType in (\"0\", \"50125\", \"50140\")\n// Tagging identities not resolved to friendly names\n//| extend Unresolved = iff(Identity matches regex isGUID, true, false)\n| distinct TimeGenerated, UserPrincipalName\n;\nlet failPortalSignins = azPortalSignins\n| where TimeGenerated >= ago(timeRange)\n// Azure Portal only and exclude non-failure Result Types\n| where ResultType !in (\"0\", \"50125\", \"50140\", \"70044\", \"70043\")\n// Tagging identities not resolved to friendly names\n| extend Unresolved = iff(Identity matches regex isGUID, true, false)\n;\n// Verify there is no success for the same connection attempt after the fail\nlet failnoSuccess = failPortalSignins | join kind= leftouter (\n   successPortalSignins\n) on UserPrincipalName\n| where TimeGenerated > TimeGenerated1 or isempty(TimeGenerated1)\n| project-away TimeGenerated1, UserPrincipalName1\n;\n// Lookup up resolved identities from last 7 days\nlet identityLookup = azPortalSignins\n| where TimeGenerated >= ago(lookBack)\n| where not(Identity matches regex isGUID)\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;\n// Join resolved names to unresolved list from portal signins\nlet unresolvedNames = failnoSuccess | where Unresolved == true | join kind= inner (\n   identityLookup\n) on UserId\n| extend UserDisplayName = lu_UserDisplayName, UserPrincipalName = lu_UserPrincipalName\n| project-away lu_UserDisplayName, lu_UserPrincipalName;\n// Join Signins that had resolved names with list of unresolved that now have a resolved name\nlet u_azPortalSignins = failnoSuccess | where Unresolved == false | union unresolvedNames;\nu_azPortalSignins\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n| extend Status = strcat(ResultType, \": \", ResultDescription), OS = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city), Region = tostring(LocationDetails.countryOrRegion)\n| extend FullLocation = strcat(Region,'|', State, '|', City)  \n| summarize TimeGenerated = make_list(TimeGenerated,100), Status = make_list(Status,100), IPAddresses = make_list(IPAddress,100), IPAddressCount = dcount(IPAddress), FailedLogonCount = count()\nby UserPrincipalName, UserId, UserDisplayName, AppDisplayName, Browser, OS, FullLocation, Type\n| mvexpand TimeGenerated, IPAddresses, Status\n| extend TimeGenerated = todatetime(tostring(TimeGenerated)), IPAddress = tostring(IPAddresses), Status = tostring(Status)\n| project-away IPAddresses\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserPrincipalName, UserId, UserDisplayName, Status, FailedLogonCount, IPAddress, IPAddressCount, AppDisplayName, Browser, OS, FullLocation, Type\n| where (IPAddressCount >= threshold_IPAddressCount and FailedLogonCount >= threshold_Failed) or FailedLogonCount >= threshold_FailedwithSingleIP\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies suspicious child processes of SolarWinds.Orion.Core.BusinessLayer.dll that may be evidence of the SUNBURST backdoor\nReferences:\n- https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html\n- https://gist.github.com/olafhartong/71ffdd4cab4b6acd5cbcd1a0691ff82f\n Topic: Detections"}, {"role": "assistant", "content": "let excludeProcs = dynamic([@\"\\SolarWinds\\Orion\\APM\\APMServiceControl.exe\", @\"\\SolarWinds\\Orion\\ExportToPDFCmd.Exe\", @\"\\SolarWinds.Credentials\\SolarWinds.Credentials.Orion.WebApi.exe\", @\"\\SolarWinds\\Orion\\Topology\\SolarWinds.Orion.Topology.Calculator.exe\", @\"\\SolarWinds\\Orion\\Database-Maint.exe\", @\"\\SolarWinds.Orion.ApiPoller.Service\\SolarWinds.Orion.ApiPoller.Service.exe\", @\"\\Windows\\SysWOW64\\WerFault.exe\"]);\nDeviceProcessEvents\n| where InitiatingProcessFileName =~ \"solarwinds.businesslayerhost.exe\"\n| where not(FolderPath has_any (excludeProcs))\n| extend\n    timestamp = TimeGenerated,\n    InitiatingProcessAccountUPNSuffix = tostring(split(InitiatingProcessAccountUpn, \"@\")[1]),\n    Algorithm = \"MD5\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows error DNS requests.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "Cisco_Umbrella\n| where TimeGenerated > ago(24h)\n| where EventType == 'dnslogs'\n| where DnsResponseCodeName != 'NOERROR'\n| extend URLCustomEntity = UrlOriginal\n| extend AccountCustomEntity = Identities\n| extend IPCustomEntity = SrcIpAddr"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This creates an incident when a new high severity vulnerability is detected across multilple hosts\n Topic: QualysVM"}, {"role": "assistant", "content": "let threshold = 10;\nQualysHostDetectionV2_CL\n| extend Status = tostring(Status_s), Vulnerability = tostring(QID_s), Severity = tostring(Severity_s)\n| where Status =~ \"New\" and Severity == \"5\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), dcount(NetBios_s) by tostring(QID_s)\n| where dcount_NetBios_s >= threshold\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query uses various log sources having user agent data to look for log4j CVE-2021-44228 exploitation attempt based on user agent pattern.\nLog4j is an open-source Apache logging library that is used in many Java-based applications. The regex and the string matching look for the most common attacks. This might not be comprehensive to detect every possible user agent variation.\n Reference: https://msrc-blog.microsoft.com/2021/12/11/microsofts-response-to-cve-2021-44228-apache-log4j2/\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "let UserAgentString = dynamic ([\"${jndi:ldap:/\", \"${jndi:rmi:/\", \"${jndi:ldaps:/\", \"${jndi:dns:/\", \"${jndi:iiop:/\",\"${jndi:\",\"${jndi:nds:/\",\"${jndi:corba/\"]);\nlet UARegexMinimalString=dynamic(['{','%7b', '%7B']);\nlet UARegex = @'(\\\\$|%24)(\\\\{|%7B)([^jJ]*[jJ])([^nN]*[nN])([^dD]*[dD])([^iI]*[iI])(:|%3A|\\\\$|%24|}|%7D)';\n(union isfuzzy=true\n(OfficeActivity\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = ClientIP, Account = UserId, Type, Operation\n),\n(AzureDiagnostics\n| where Category in (\"FrontdoorWebApplicationFirewallLog\", \"FrontdoorAccessLog\", \"ApplicationGatewayFirewallLog\", \"ApplicationGatewayAccessLog\")\n| where userAgent_s has_any (UserAgentString) or userAgent_s matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = userAgent_s, SourceIP = column_ifexists(\"clientIp_s\",clientIP_s), Type, column_ifexists(\"originalHost_s\",host_s), Url = requestUri_s, HttpStatus = column_ifexists(\"httpStatusDetails_s\",httpStatus_d), column_ifexists(\"trackingReference_s\",transactionId_g), ruleName_s, ResourceType, ResourceId\n),\n(\nW3CIISLog\n| where csUserAgent has_any (UserAgentString) or csUserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = csUserAgent, SourceIP = cIP, Account = csUserName, Type, sSiteName, csMethod, Url = csUriStem\n),\n(\nAWSCloudTrail\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = SourceIpAddress, Account = UserIdentityUserName, Type, EventName\n),\n(SigninLogs\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, Operation = OperationName, tostring(LocationDetails), tostring(DeviceDetail),    AppDisplayName, ClientAppUsed\n),\n(AADNonInteractiveUserSignInLogs \n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, Operation = OperationName, tostring(LocationDetails), tostring(DeviceDetail), AppDisplayName, ClientAppUsed\n),\n(_Im_WebSession (httpuseragent_has_any=array_concat(UserAgentString,UARegexMinimalString))\n| where HttpUserAgent has_any (UserAgentString) or HttpUserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by HttpUserAgent, SourceIP = SrcIpAddr, DstIpAddr, Account = SrcUsername, Url, Type\n)\n)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected usage of AttachUserPolicy/AttachGroupPolicy/AttachRolePolicy on EC2 policy. Attackers could use these operations for privilege escalation. Verify these actions with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n  | where EventName in (\"PutUserPolicy\",\"PutRolePolicy\",\"PutGroupPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n  | extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n  | extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n  | mvexpand Statement\n  | extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n  | extend Action = tostring(Action)\n  | where Effect =~ \"Allow\" and ((((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"ec2:*\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"ec2:RunInstances\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"ec2:Run*\")) or (Action contains \"ec2:*\") or (Action contains \"ec2:ListInstances\" and Action contains \"ec2:StartInstance\" and Action contains \"ec2:ModifyInstanceAttribute\") or (Action contains \"ec2:List*\" and Action contains \"ec2:Start*\" and Action contains \"ec2:Modify*\")) and Resource == \"*\" and Condition == \"\"\n  | extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n  | extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n  | extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n  | extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n    AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n  | distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn, UserIdentityUserName, RecipientAccountId, AccountName, AccountUPNSuffix\n  | extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This Query creates an incident based on Trend Vision One Workbench Alerts and maps the impacted entities for Microsoft Sentinel usage.\n Topic: Trend Micro Vision One"}, {"role": "assistant", "content": "TrendMicro_XDR_WORKBENCH_CL\n| extend Severity = case(severity_s == \"low\", \"Informational\",\n                        severity_s == \"medium\", \"Low\",\n                        severity_s == \"high\", \"Medium\",\n                        \"High\"\n                        )\n| extend \n    UserAccountName_s = todynamic(column_ifexists(\"UserAccountName_s\", \"[]\")),\n    UserAccountNTDomain_s = todynamic(column_ifexists(\"UserAccountNTDomain_s\", \"[]\")),\n    FileName_s = todynamic(column_ifexists(\"FileName_s\", \"[]\")),\n    FileDirectory_s = todynamic(column_ifexists(\"FileDirectory_s\", \"[]\")),\n    ProcessCommandLine_s = todynamic(column_ifexists(\"ProcessCommandLine_s\", \"[]\")),\n    RegistryKey_s = todynamic(column_ifexists(\"RegistryKey_s\", \"[]\")),\n    RegistryValue_s = todynamic(column_ifexists(\"RegistryValue_s\", \"[]\")),\n    RegistryValueName_s = todynamic(column_ifexists(\"RegistryValueName_s\", \"[]\"))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when root impersonation occurs.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "VMwareESXi\n| where SyslogMessage has_all ('ImpersonateUser', 'VcIntegrity', 'root')\n| extend user = 'root'\n| extend AccountCustomEntity = user\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses Sysmon telemetry to hunt Signed Binary Proxy Execution: Rundll32 activities.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "Event\n//This query uses sysmon data depending on table name used this may need updataing\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend RenderedDescription = tostring(split(RenderedDescription, \":\")[0])\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| extend RuleName = column_ifexists(\"RuleName\", \"\"), TechniqueId = column_ifexists(\"TechniqueId\", \"\"),  TechniqueName = column_ifexists(\"TechniqueName\", \"\")\n| parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName\n| extend Image = column_ifexists(\"Image\", \"\")\n| where Image has \"rundll32.exe\"\n// Uncomment the next line and add your commandLine Whitelisted/ignore terms.For example \"payload.dll\"\n// | where CommandLine !contains (\"payload.dll\") \n| extend NTDomain = tostring(split(UserName, '\\\\', 0)[0]), Name = tostring(split(UserName, '\\\\', 1)[0])\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when multiple instances were launched.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "let threshold = 5;\nOCILogs\n| where data_eventName_s =~ 'LaunchInstance'\n| summarize count() by SrcIpAddr, bin(TimeGenerated, 10m)\n| where count_ >= threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Web shells are scripts that allow remote administration when uploaded to a web server. This query can detect web shells using GET requests by searching for keywords in URL strings.\n Topic: Web Shells Threat Protection"}, {"role": "assistant", "content": "\nlet command = \"(?i)net(1)?(.exe)?(%20){1,}user|cmd(.exe)?(%20){1,}/c(%20){1,}\";\nW3CIISLog\n| where csMethod == \"GET\" \n| where ( csUriQuery has \"whoami\" or csUriQuery matches regex command ) or \n        ( csUriStem has \"whoami\" or csUriStem matches regex command ) or\n        ( csReferer has \"whoami\" or csReferer matches regex command )\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), ConnectionCount = count() \nby Computer, sSiteName, sIP, cIP, csUserName, csUriQuery, csMethod, scStatus, scSubStatus, scWin32Status\n| extend timestamp = StartTime, IPCustomEntity = cIP, HostCustomEntity = Computer, AccountCustomEntity = csUserName \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a user connects to database from new IP address.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let lbtime_d = 14d;\nlet lbtime_24h = 24h;\nOracleDatabaseAuditEvent\n| where TimeGenerated between (ago(lbtime_d) .. ago(lbtime_24h))\n| where isnotempty(SrcIpAddr)\n| where isnotempty(DstUserName)\n| summarize knownIPs = make_set(SrcIpAddr) by DstUserName\n| join (OracleDatabaseAuditEvent\n      | where isnotempty(SrcIpAddr)\n      | where isnotempty(DstUserName)\n      | where DbAction =~ 'connect'\n      ) on DstUserName\n| where knownIPs !contains SrcIpAddr\n| project DstUserName, SrcIpAddr\n| extend AccountCustomEntity = DstUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Large number of FQDNs for domain may be indicator of suspicious domain.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "Cisco_Umbrella\n| where TimeGenerated > ago(24h)\n| where EventType == 'dnslogs'\n| extend replaced = replace(@'\\.$', @'', DnsQueryName)\n| extend Domain = extract(@'.*\\.(.*\\.[a-z]+)', 1, replaced)\n| extend fqdn = extract(@'(.*)\\..*\\.[a-z]+', 1, replaced)\n| summarize FQDNs = dcount(fqdn) by Domain\n| sort by FQDNs\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries often manipulate accounts for access. This query checks for admin attempts to reset user passwords in Okta logs.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let Events = dynamic([\"user.account.reset_password\"]);\nOktaSSO\n| where eventType_s in (Events)\n| where outcome_result_s =~ \"SUCCESS\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when connection to database is from external IP source.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "OracleDatabaseAuditEvent\n| where isnotempty(SrcIpAddr)\n| where isnotempty(Action)\n| where DbAction =~ 'connect'\n| where ipv4_is_private(SrcIpAddr) == 'false'\n| extend AccountCustomEntity = DstUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for high confidence threats stopped by MailGuard 365.\n Topic: MailGuard 365"}, {"role": "assistant", "content": "MailGuard365_Threats_CL\n| where Score_d > 20\n| extend MailMessage_0_NetworkMessageId = MessageId_s\n| extend MailMessage_0_Recipient = Email_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible data destruction.\n Topic: Snowflake"}, {"role": "assistant", "content": "let threshold = 10;\nSnowflake\n| where QUERY_TYPE_s =~ 'DROP'\n| where EXECUTION_STATUS_s =~ 'SUCCESS'\n| summarize count() by TargetUsername, bin(TimeGenerated, 5m)\n| where count_ > threshold\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies allowed inbound SSH, Telnet, and RDP connections. This analytic rule leverages the SonicWall Firewall ASIM Network Session parser (ASimNetworkSessionSonicWallFirewall).\n Topic: SonicWall Firewall"}, {"role": "assistant", "content": "ASimNetworkSessionSonicWallFirewall(false)\n| where NetworkDirection == \"Inbound\" and EventResult in (\"NA\", \"Success\")\n| where EventOriginalType != 1370\n| where SrcAppName contains \"Windows Remote Desktop Services\"\n    or SrcAppName contains \"Telnet\"\n    or (SrcAppName contains \"SSH Protocol\" and ThreatId != 446) // Filters out SSH server responses.\n    or SrcAppName contains \"Bitvise SSH\"\n    or DstPortNumber in (22, 23, 3389)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies if any tampering is done to either auditlog, ATP Safelink, SafeAttachment, AntiPhish or Dlp policy. \nAn adversary may use this technique to evade detection or avoid other policy based defenses.\nReferences: https://docs.microsoft.com/powershell/module/exchange/advanced-threat-protection/remove-antiphishrule?view=exchange-ps.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let opList = OfficeActivity \n| summarize by Operation\n//| where Operation startswith \"Remove-\" or Operation startswith \"Disable-\"\n| where Operation has_any (\"Remove\", \"Disable\")\n| where Operation contains \"AntiPhish\" or Operation contains \"SafeAttachment\" or Operation contains \"SafeLinks\" or Operation contains \"Dlp\" or Operation contains \"Audit\"\n| summarize make_set(Operation, 500);\nOfficeActivity\n// Only admin or global-admin can disable/remove policy\n| where RecordType =~ \"ExchangeAdmin\"\n| where UserType in~ (\"Admin\",\"DcAdmin\")\n// Pass in interesting Operation list\n| where Operation in~ (opList)\n| extend ClientIPOnly = case( \nClientIP has \".\", tostring(split(ClientIP,\":\")[0]), \nClientIP has \"[\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))),\nClientIP\n)  \n| extend Port = case(\nClientIP has \".\", (split(ClientIP,\":\")[1]),\nClientIP has \"[\", tostring(split(ClientIP,\"]:\")[1]),\nClientIP\n)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() by Operation, UserType, UserId, ClientIP = ClientIPOnly, Port, ResultStatus, Parameters\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies Dataverse TDS (Tabular Data Stream) protocol based queries where the source user or IP address has recent security alerts and the TDS protocol has not been used previously in the target environment. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_frequency = 1h;\nlet query_lookback = 14d;\nDataverseActivity\n| where TimeGenerated >= ago(query_frequency)\n| where Message == 'ExecutePowerBISql'\n| summarize FirstEvent = min(TimeGenerated) by UserId, ClientIp, InstanceUrl\n| join kind=inner(\n    DataverseActivity\n    | where TimeGenerated >= ago(query_lookback)\n    | where Message == 'ExecutePowerBISql'\n    | summarize UniqueUsers = dcount(UserId, 4) by InstanceUrl)\n    on InstanceUrl\n| where UniqueUsers == 1\n| join kind=inner (\n    SecurityAlert\n    | where Entities has ('\"Type\":\"ip\"')\n    | project AlertName, SystemAlertId, Entities\n    | mv-expand todynamic(Entities)\n    | where Entities.Type == \"ip\"\n    | extend IPAddress = tostring(Entities.Address)\n    | summarize SystemAlerts = make_set(SystemAlertId, 100), Alerts = make_set(AlertName, 100) by IPAddress)\n    on $left.ClientIp == $right.IPAddress\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| join kind = inner (\n    SecurityAlert\n    | where Entities has ('Type\":\"account\"')\n    | project AlertName, SystemAlertId, Entities\n    | mv-expand todynamic(Entities)\n    | where Entities.Type == \"account\"\n    | extend\n        UPNSuffix = tostring(Entities.UPNSuffix),\n        AccountName = tostring(Entities.Name)\n    | summarize SystemAlerts = make_set(SystemAlertId, 100), Alerts = make_set(AlertName, 100) by AccountName, UPNSuffix\n    | where isnotempty(AccountName) and isnotempty(UPNSuffix))\n    on AccountName, UPNSuffix\n| summarize SystemAlerts = make_set(SystemAlerts, 100), Alerts = make_set(Alerts, 100) by FirstEvent, UserId, ClientIp, InstanceUrl, AccountName, UPNSuffix\n| extend CloudAppId = int(32780)\n| project\n    FirstEvent,\n    UserId,\n    ClientIp,\n    InstanceUrl,\n    Alerts,\n    SystemAlerts,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for users incidents.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(IncidentStatus)\n| where IncidentStatus has 'New'\n| summarize makeset(IncidentsUrl) by SrcUserName\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies cleartext protocols like telnet, POP3, IMAP, and non-anonymous FTP that could leak sensitive information. These protocols may use SSL, but usually on different ports.\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "// Filter events from last 1 day and not failed\n_Im_NetworkSession(starttime=ago(1d))\n// Filter for private source IP and public destination IP\n| where EventResult != \"Failure\" and ipv4_is_private(SrcIpAddr) and not(ipv4_is_private(DstIpAddr))\n// Filter for specific destination ports or non-anonymous FTP\n| where tostring(DstPortNumber) has_any (\"23\", \"143\", \"110\") or (tostring(DstPortNumber) == \"21\" and SrcUsername != \"anonymous\")\n// Summarize data by session parameters\n| summarize Starttime= min(TimeGenerated),EndTime= max(TimeGenerated),Eventscount=sum(EventCount), EventVendors=make_set(EventVendor,10) by SrcIpAddr,DstIpAddr,DstPortNumber,NetworkProtocol,EventResult\n| extend PortUsage = case(\n    DstPortNumber == 23, \"Telnet\",\n    DstPortNumber == 143, \"IMAP\",\n    DstPortNumber == 110, \"POP3\",\n    DstPortNumber == 21, \"FTP\",\n    \"Other\"\n)\n| extend IP_0_Address = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "SPF Not Configured\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"low\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"SPF Not Configured\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects inbound SSH connection.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where EventType contains 'vcn.flowlogs'\n| where data_action_s =~ 'ACCEPT'\n| where ipv4_is_private(DstIpAddr)\n| where ipv4_is_private(SrcIpAddr) == False\n| where DstPortNumber == 22\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert creates an incident when Natural language processing AI Model extraction high suspicious, high severity vulnerability detected from the AIShield.\n Topic: AIShield AI Security Monitoring"}, {"role": "assistant", "content": "AIShield\n| where Message has 'Natural Language Processing AI Model Extraction Attack Identified'\n| where Severity =~ 'High'\n| where SuspiciousLevel =~ 'high suspicious attack'\n| extend NTDomain = tostring(split(Computer, '\\\\')[0]), HostName = tostring(split(Computer, '.')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for risky users.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'access'\n| where EventResultDetails has_all ('Added', 'Risky Users')\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An attacker could use UpdateLoginProfile permissions for privilege escalation by changing the victim user password. More about this API at https://docs.aws.amazon.com/IAM/latest/APIReference/API_UpdateLoginProfile.html \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where  EventName == \"UpdateLoginProfile\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource,UserIdentityArn, AdditionalEventData, ResponseElements, RequestParameters\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for mails with DMARK failure status.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where TimeGenerated > ago(24h)\n| where tostring(AdditionalFields) has 'ESADMARCVerdict'\n| extend dmark_status = extract(@'ESADMARCVerdict\":\"(PermFailure|TempFailure|Reject|Success)\"', 1, tostring(AdditionalFields))\n| where dmark_status in~ ('PermFailure', 'TempFailure', 'Reject')\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a successful vault export has occurred within the last 14 days prior to an account being suspended or deleted from 1Password.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "let ruleFrequency = 1h;\nlet lookback = 14d;\nlet onePasswordVaultExportCheck =\n    OnePasswordEventLogs_CL\n    | where TimeGenerated between (ago(lookback) .. ago(now() - ago(ruleFrequency)))\n    | where action == \"export\" and object_type == \"vault\"\n;\nOnePasswordEventLogs_CL\n| where (action == \"suspend\" and object_type == \"user\") or (action == \"delete\" and object_type == \"user\")\n| extend\n    userUuid = tostring(object_details.uuid)\n    , auditevents = bag_pack(\"action\", action, \"object_type\", object_type)\n| join (\n    onePasswordVaultExportCheck\n    | extend userUuid = tostring(actor_details.uuid)\n    )\n    on $left.userUuid == $right.userUuid\n| extend\n    TargetUsername = actor_details1.email\n    , SrcIpAddr = session1.ip_address\n| project\n    TimeGenerated\n    , auditevents\n    , actor_details\n    , location_details = location\n    , session_details = session\n    , exported_vault = object_details\n    , TargetUsername\n    , SrcIpAddr"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies instances of malware detected using SAP internal malware agent within Business Application Studio dev spaces. Topic: SAP BTP"}, {"role": "assistant", "content": "SAPBTPAuditLog_CL\n| where Message has \"malware\"\n| extend MessageData = parse_json(tostring(Message.data))\n| extend\n    ClusterID = tostring(MessageData.clusterID),\n    WorkspaceID = tostring(MessageData.wsID),\n    Message = tostring(MessageData.message)\n| parse Message with * 'user: ' User '.The following issues were detected: ' Malware ',' *\n| extend\n    AccountName = tostring(split(User, '@')[0]),\n    UPNSuffix = tostring(split(User, '@')[1])\n| project\n    UpdatedOn,\n    ClusterID,\n    WorkspaceID,\n    Message,\n    User,\n    Malware,\n    Tenant,\n    SpaceId,\n    Category,\n    CloudApp = \"SAP BTP\",\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for dynamic authorization failed events.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "let threshold = 10;\nCiscoISEEvent\n| where TimeGenerated > ago(24h)\n| where EventId == '5417'\n| summarize TotalEvents = count() by SrcIpAddr\n| where TotalEvents > threshold"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests with different user agents from one source in short timeframe.\n Topic: Cloudflare"}, {"role": "assistant", "content": "let threshold = 10;\nCloudflare\n| where isnotempty(HttpUserAgentOriginal)\n| summarize d_ua = dcount(HttpUserAgentOriginal) by SrcIpAddr, bin(TimeGenerated, 3m)\n| where d_ua > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects user login from new geo location.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where EventType =~ 'access'\n| where EventMessage =~ 'Login'\n| summarize g_loc = makeset(SrcGeoLocation) by User\n| join (Bitglass\n        | where EventType =~ 'access'\n        | where EventMessage =~ 'Login') on User\n| where g_loc !contains SrcGeoLocation\n| extend AccountCustomEntity = User, FileCustomEntity = SrcFileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection rule detects scenarios when a particular port is being scanned by multiple external sources. The rule utilize [ASIM](https://aka.ms/AboutASIM) normalization, and is applied to any source which supports the ASIM Network Session schema.\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "let lookback = 1h;\nlet threshold = 20;\n_Im_NetworkSession(starttime=ago(lookback),endtime=now())\n| where NetworkDirection == \"Inbound\"\n| summarize make_set(DstIpAddr,100) by DstPortNumber\n| where array_length(set_DstIpAddr) > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies Azure DevOps activities where organization Guest Access policy is enabled by the admin\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where OperationName ==\"OrganizationPolicy.PolicyValueUpdated\"\n| where Data.PolicyName == \"Policy.DisallowAadGuestUserAccess\"\n| where Data.PolicyValue == \"OFF\"\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when multiple users were deleted.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where DvcAction =~ \"user_delete\"\n| summarize count() by DstUserName, bin(TimeGenerated, 10m)\n| where count_ > 1\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Data exfiltration attack detected by Infoblox Threat Insight. Customize query count, scheduling, responses and more. This rule depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC**](https://aka.ms/sentinel-InfobloxCloudDataConnector-parser).\n Topic: Infoblox Cloud Data Connector"}, {"role": "assistant", "content": "let threshold = 1;\nInfobloxCDC\n| where DeviceEventClassID has_cs \"RPZ\"\n| where InfobloxB1FeedName == \"Threat Insight - Data Exfiltration\"\n| summarize count() by SourceIP\n| where count_ > threshold\n| join kind=innerunique (InfobloxCDC\n  | where DeviceEventClassID has_cs \"RPZ\"\n  | where InfobloxB1FeedName == \"Threat Insight - Data Exfiltration\"\n  ) on SourceIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for terminated instances.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where TimeGenerated > ago(24h)\n| where data_eventName_s =~ 'TerminateInstance'\n| extend AccountCustomEntity = data_definedTags_Oracle_Tags_CreatedBy_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies Progress MOVEIt File Transfers above certain threshold in a 15min time period.\n Please note that entity mapping for arrays is not supported, so when there is a single value in an array, we will pull that value from the array as a single string to populate the entity to support entity mapping features within Sentinel. Additionally, if the array is multivalued, we will input a string to indicate this with a unique hash so that matching will not occur.\n Topic: Windows Forwarded Events"}, {"role": "assistant", "content": "let threshold = 500;\nEvent\n| where EventID == 0 and Source == \"MOVEit DMZ Audit\" and EventLog == \"Application\"\n| where RenderedDescription has_any (\"Downloaded\", \"Uploaded\")\n| parse RenderedDescription with * \"User '\" userdisplayname \"' (\" *\n| parse RenderedDescription with * \"IPAddress: \" ipaddress \" FileID:\" * \" FileName: \" filename \" FolderID: \" folderid \" FolderPath: \" folderpath \" Username: \" username \" AgentBrand: \" *\n| summarize count_=count(), fileslist=make_set(filename) by Computer,userdisplayname,ipaddress,bin(TimeGenerated, 1d)\n| where count_ >= threshold\n| extend FileSample = iff(array_length(fileslist) == 1, tostring(fileslist[0]), strcat(\"SeeFilesListField\",\"_\", tostring(hash(tostring(fileslist)))))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "LFI vulnerabilities allow an attacker to read (and sometimes execute) files on the victim machine. This can be very dangerous because if the web server is misconfigured and running with high privileges, the attacker may gain access to sensitive information\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let lookback = 5m;\nlet LFI_Indicators = materialize(externaldata(Indicators: string)\n    [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/LocalFileInclusionIndicators.csv\"] \n    with(format=\"csv\", ignoreFirstRecord=True));\nlet CustomLocalFileInclusionIndicators = (_ASIM_GetWatchlistRaw(\"Web_LocalFileInclusionIndicators\") // Create new Watchlist and add your custom indicators(Optional)\n    | extend\n        Indicators = tostring(WatchlistItem[\"Indicators\"])\n    | project Indicators\n    | where isnotempty(Indicators));\nlet CombinedLFIList = union LFI_Indicators, CustomLocalFileInclusionIndicators;\nlet knownLFIIndicators=toscalar(CombinedLFIList\n    | where isnotempty(Indicators)\n    | summarize make_set(Indicators, 1000));\n_Im_WebSession(starttime=ago(lookback), url_has_any=knownLFIIndicators, eventresult='Success')\n| where isnotempty(Url)\n| project Url, SrcIpAddr, SrcUsername, SrcHostname, TimeGenerated\n| extend Decoded_url = url_decode(Url)\n| where Decoded_url has_any (knownLFIIndicators)\n| summarize\n    EventCount=count(),\n    EventStartTime=min(TimeGenerated),\n    EventEndTime=max(TimeGenerated)\n    by SrcIpAddr, SrcUsername, SrcHostname, Url, Decoded_url\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n| order by EventCount desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies evidence of brute force activity against a user based on multiple authentication failures and at least one successful authentication within a given time window.\nNote that the query does not enforce any sequence, and does not require the successful authentication to occur last.\nThe default failure threshold is 10, success threshold is 1, and the default time window is 20 minutes.\nTo use this analytics rule, make sure you have deployed the [ASIM normalization parsers](https://aka.ms/ASimAuthentication)\n Topic: Detections"}, {"role": "assistant", "content": "let failureCountThreshold = 10;\nlet successCountThreshold = 1;\n// let authenticationWindow = 20m; // Implicit in the analytic rule query period \nimAuthentication\n| where TargetUserType != \"NonInteractive\"\n| summarize \n      StartTime = min(TimeGenerated), \n      EndTime = max(TimeGenerated), \n      IpAddresses = make_set (SrcDvcIpAddr, 100),\n      ReportedBy = make_set (strcat (EventVendor, \"/\", EventProduct), 100),\n      FailureCount = countif(EventResult=='Failure'),\n      SuccessCount = countif(EventResult=='Success')\n  by \n      TargetUserId, TargetUsername, TargetUserType \n| where FailureCount >= failureCountThreshold and SuccessCount >= successCountThreshold\n| extend\n      IpAddresses = strcat_array(IpAddresses, \", \"), \n      ReportedBy = strcat_array(ReportedBy, \", \")\n| extend\n  Name = iif(\n      TargetUsername contains \"@\"\n          , tostring(split(TargetUsername, '@', 0)[0])\n          , TargetUsername\n      ),\n  UPNSuffix = iif(\n      TargetUsername contains \"@\"\n      , tostring(split(TargetUsername, '@', 1)[0])\n      , \"\"\n  )\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies if any tampering is done to either audit log, ATP Safelink, SafeAttachment, AntiPhish, or Dlp policy. \nAn adversary may use this technique to evade detection or avoid other policy-based defenses.\nReferences: https://docs.microsoft.com/powershell/module/exchange/advanced-threat-protection/remove-antiphishrule?view=exchange-ps.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "// Query for EnrichedMicrosoft365AuditLogs\nlet enrichedOpList = EnrichedMicrosoft365AuditLogs \n    | summarize by Operation\n    | where Operation has_any (\"Remove\", \"Disable\")\n    | where Operation contains \"AntiPhish\" \n        or Operation contains \"SafeAttachment\" \n        or Operation contains \"SafeLinks\" \n        or Operation contains \"Dlp\" \n        or Operation contains \"Audit\"\n    | summarize make_set(Operation, 500);\n\nlet enrichedLogs = EnrichedMicrosoft365AuditLogs\n    | where RecordType == \"ExchangeAdmin\"\n    | where UserType in~ (\"Admin\", \"DcAdmin\")\n    | where Operation in~ (enrichedOpList)\n    | extend ClientIPOnly = case( \n        ClientIp has \".\", tostring(split(ClientIp, \":\")[0]), \n        ClientIp has \"[\", tostring(trim_start(@'[[]', tostring(split(ClientIp, \"]\")[0]))),\n        ClientIp\n      )  \n    | extend Port = case(\n        ClientIp has \".\", tostring(split(ClientIp, \":\")[1]),\n        ClientIp has \"[\", tostring(split(ClientIp, \"]:\")[1]),\n        \"\"\n      )\n    | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() \n        by Operation, UserType, UserId, ClientIP = ClientIPOnly, Port, ResultStatus, Parameters = tostring(AdditionalProperties.Parameters)\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n\n// Query for OfficeActivity\nlet officeOpList = OfficeActivity \n    | summarize by Operation\n    | where Operation has_any (\"Remove\", \"Disable\")\n    | where Operation contains \"AntiPhish\" \n        or Operation contains \"SafeAttachment\" \n        or Operation contains \"SafeLinks\" \n        or Operation contains \"Dlp\" \n        or Operation contains \"Audit\"\n    | summarize make_set(Operation, 500);\n\nlet officeLogs = OfficeActivity\n    | where RecordType =~ \"ExchangeAdmin\"\n    | where UserType in~ (\"Admin\",\"DcAdmin\")\n    | where Operation in~ (officeOpList)\n    | extend ClientIPOnly = case( \n        ClientIP has \".\", tostring(split(ClientIP,\":\")[0]), \n        ClientIP has \"[\", tostring(trim_start(@'[[]', tostring(split(ClientIP,\"]\")[0]))),\n        ClientIP\n      )  \n    | extend Port = case(\n        ClientIP has \".\", tostring(split(ClientIP,\":\")[1]),\n        ClientIP has \"[\", tostring(split(ClientIP, \"]:\")[1]),\n        \"\"\n      )\n    | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() \n        by Operation, UserType, UserId, ClientIP = ClientIPOnly, Port, ResultStatus, Parameters\n    | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1]);\n\n// Combine Enriched Logs and Office Activity Logs\nunion isfuzzy=true enrichedLogs, officeLogs\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), TotalOperationCount = sum(OperationCount) \n    by Operation, UserType, UserId, ClientIP, Port, ResultStatus, Parameters, AccountName, AccountUPNSuffix\n| order by StartTimeUtc desc;\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for rare useragent values.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "let dt_lookBackPeriod = 30d;\nlet dt_lookBackTime = 24h;\nlet knownUserAgents =\nCiscoISEEvent \n| where TimeGenerated between (ago(dt_lookBackPeriod) .. ago(dt_lookBackTime))\n| where HttpUserAgentOriginal != ''\n| summarize makelist(HttpUserAgentOriginal)\n;\nCiscoISEEvent\n| where TimeGenerated > ago(dt_lookBackTime)\n| where HttpUserAgentOriginal !in (knownUserAgents)\n| summarize EventCount = count() by HttpUserAgentOriginal\n| project-away EventCount"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Checks for event id 1102 which indicates the security event log was cleared.\nIt uses Event Source Name \"Microsoft-Windows-Eventlog\" to avoid generating false positives from other sources, like AD FS servers for instance.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "(union isfuzzy=true\n(\nSecurityEvent\n| where EventID == 1102 and EventSourceName =~ \"Microsoft-Windows-Eventlog\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), EventCount = count() by Computer, Account, EventID, Activity\n),\n(\nWindowsEvent\n| where EventID == 1102 and Provider =~ \"Microsoft-Windows-Eventlog\"\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend Activity= \"1102 - The audit log was cleared.\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), EventCount = count() by Computer, Account, EventID, Activity\n)\n)\n| extend Name=tostring(split(Account, \"@\")[0]), UPNSuffix=tostring(split(Account, \"@\")[1])\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when new VM was started.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "let a_vm = \nVMwareESXi\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| summarize vm_l = makeset(DstHostname)\n| extend k=1;\nVMwareESXi\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| extend k = 1\n| join (a_vm) on k\n| where vm_l !has DstHostname\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches destination IP addresses requests to which were blocked by the service.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "ImpervaWAFCloud\n| where TimeGenerated > ago(24h)\n| where DvcAction startswith 'REQ_BLOCKED'\n| summarize count() by DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Recorded Future Threat Hunting domain correlation for all actors.\n Topic: Recorded Future"}, {"role": "assistant", "content": "imDns\n| where isnotempty(Domain)\n| join kind=inner (\nThreatIntelligenceIndicator\n// Only look for IOCs\n| where isnotempty(DomainName)\n// Only look at Recorded Future Threat Hunt Indicators.\n| where Description startswith \"Recorded Future - Threat Hunt\"\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n) on $left.Domain == $right.DomainName\n| project Domain, DstIpAddr\n| extend IP_0_Address = DstIpAddr\n| extend DNS_0_DomainName = Domain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies VBScript proxy execution through a registry key in \\Microsoft\\Windows\\CurrentVersion.\n Topic: Cyborg Security HUNTER"}, {"role": "assistant", "content": "SecurityEvent\n| where Process  has_any (\"cmd.exe\", \"powershell.exe\", \"rundll32.exe\", \"AppData\") \nand CommandLine contains \"\\\\Microsoft\\\\Windows\\\\CurrentVersion\"\nand CommandLine has_all (\"Execute\",\"CreateObject\", \"RegRead\")\nor CommandLine has_all (\"vbscript\" ,\"\\\\..\\\\mshtml\" , \"RunHTMLApplication\")\n| project TimeGenerated, Computer, tostring(EventID), ParentProcessName, NewProcessName, CommandLine, SubjectUserName, SourceComputerId, processID=tolong(NewProcessId), parentProcessID=tolong(ProcessId), EventData| order by TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rare user agents.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "let known_UAs = \nGCP_IAM\n| where TimeGenerated between (ago(30d) .. (1d))\n| where isnotempty(HttpUserAgentOriginal)\n| summarize makeset(HttpUserAgentOriginal);\nGCP_IAM\n| where TimeGenerated > ago(24h)\n| where isnotempty(HttpUserAgentOriginal)\n| where HttpUserAgentOriginal !in~ (known_UAs)\n| extend timestamp = TimeGenerated, AccountCustomEntity = PayloadRequestAccountId, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query finds matches in Syslog Event data for known FileName Indicators of Compromise from Threat Intelligence sources. FileName matches may produce false positives, so use this for hunting rather than real-time detection.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true\n| where isnotempty(FileName)\n| extend TI_ProcessEntity = tostring(split(FileName, \".\")[-2])\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n  Syslog\n  | where TimeGenerated between(starttime..endtime)\n  | where isnotempty(ProcessName)\n  | extend Syslog_TimeGenerated = TimeGenerated\n)\non $left.TI_ProcessEntity == $right.ProcessName\n| where Syslog_TimeGenerated < ExpirationDateTime\n| summarize Syslog_TimeGenerated = arg_max(Syslog_TimeGenerated, *) by IndicatorId, ProcessName\n| project Syslog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nFileName, Computer, HostIP, SyslogMessage\n| extend timestamp = Syslog_TimeGenerated, HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n| extend IP_0_Address = HostIP\n| extend URL_0_Url = Url\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "TLSv1.1 in Use\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"low\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"TLSv1.1 in Use\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query helps to detect who trying to connect to the Slack Workspace with unknown User Agent.\n Topic: SlackAudit"}, {"role": "assistant", "content": "let lbperiod = 14d;\nlet known_UAs = SlackAudit\n| where TimeGenerated > ago(lbperiod)\n| where isnotempty(UserAgentOriginal)\n| summarize makeset(UserAgentOriginal);\nSlackAudit\n| where UserAgentOriginal !in (known_UAs)\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible discovery activity.\n Topic: Snowflake"}, {"role": "assistant", "content": "let threshold = 20;\nSnowflake\n| where QUERY_TYPE_s =~ 'SHOW'\n| where EXECUTION_STATUS_s =~ 'SUCCESS'\n| summarize count() by TargetUsername, bin(TimeGenerated, 5m)\n| where count_ > threshold\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows inactive admin accounts (admin users which last login time is more than 30 days).\n Topic: Box"}, {"role": "assistant", "content": "let active_admins = BoxEvents\n| where TimeGenerated between (ago(7d) .. ago(1d))\n| where EventType =~ 'ADMIN_LOGIN'\n| summarize makeset(SourceLogin);\nlet inactive_admins = BoxEvents\n| where TimeGenerated between (ago(30d) .. ago(7d))\n| where EventType =~ 'ADMIN_LOGIN'\n| where SourceLogin !in (active_admins)\n| summarize makeset(SourceLogin);\nBoxEvents\n| where TimeGenerated > ago(7d)\n| where EventType =~ 'ADMIN_LOGIN'\n| where SourceLogin !in (active_admins)\n| where SourceLogin in (inactive_admins)\n| summarize LastLoginTime = max(TimeGenerated) by SourceLogin\n| project LastLoginTime, SourceLogin\n| extend AccountCustomEntity = SourceLogin\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The combination of an Unfamiliar sign-in properties alert and an Atypical travel alert about the same user within a +10m or -10m window is considered a high severity incident.\n Topic: Microsoft Entra ID Protection"}, {"role": "assistant", "content": "// We can use this configuration TimeDeltaInMinutes if you want to chnage the time window that we try to match the alerts\nlet TimeDeltaInMinutes = 10;\nlet Alert_UnfamiliarSignInProps = \nSecurityAlert\n| where TimeGenerated > ago(1d)\n| where ProductName =~ \"Azure Active Directory Identity Protection\"\n| where AlertName =~ \"Unfamiliar sign-in properties\"\n| mv-expand Entity = todynamic(Entities)\n| where Entity.Type =~ \"account\"\n| extend AadTenantId = tostring(Entity.AadTenantId)\n| extend AadUserId = tostring(Entity.AadUserId)\n| join kind=inner (\nIdentityInfo\n| distinct AccountTenantId, AccountObjectId, AccountUPN, AccountDisplayName\n| extend UserName = AccountDisplayName\n| extend UserAccount = AccountUPN\n| where isnotempty(AccountDisplayName) and isnotempty(UserAccount)\n| project AccountTenantId, AccountObjectId, UserAccount, UserName\n)\non\n$left.AadTenantId == $right.AccountTenantId,\n$left.AadUserId == $right.AccountObjectId\n| extend CompromisedEntity = iff(CompromisedEntity == \"N/A\" or isempty(CompromisedEntity), UserAccount, CompromisedEntity)\n| extend Alert_UnfamiliarSignInProps_Time = TimeGenerated\n| extend Alert_UnfamiliarSignInProps_Name = AlertName\n| extend Alert_UnfamiliarSignInProps_Severity = AlertSeverity\n| project AadTenantId, AadUserId, AccountTenantId, AccountObjectId, Alert_UnfamiliarSignInProps_Name, Alert_UnfamiliarSignInProps_Severity, Alert_UnfamiliarSignInProps_Time, UserAccount, UserName\n;\nlet Alert_AtypicalTravels = \nSecurityAlert\n| where TimeGenerated > ago(1d)\n| where ProductName =~ \"Azure Active Directory Identity Protection\"\n| where AlertName =~ \"Atypical travel\"\n| mv-expand Entity = todynamic(Entities)\n| where Entity.Type =~ \"account\"\n| extend AadTenantId = tostring(Entity.AadTenantId)\n| extend AadUserId = tostring(Entity.AadUserId)\n| join kind=inner (\nIdentityInfo\n| distinct AccountTenantId, AccountObjectId, AccountUPN, AccountDisplayName\n| extend UserName = AccountDisplayName\n| extend UserAccount = AccountUPN\n| where isnotempty(AccountDisplayName) and isnotempty(UserAccount)\n| project AccountTenantId, AccountObjectId, UserAccount, UserName\n)\non\n$left.AadTenantId == $right.AccountTenantId,\n$left.AadUserId == $right.AccountObjectId\n| extend CompromisedEntity = iff(CompromisedEntity == \"N/A\" or isempty(CompromisedEntity), UserAccount, CompromisedEntity)\n| extend Alert_AtypicalTravels_Time = TimeGenerated\n| extend Alert_AtypicalTravels_Name = AlertName\n| extend Alert_AtypicalTravels_Severity = AlertSeverity\n| extend ExtendedProperties_json= parse_json(ExtendedProperties)\n| extend CurrentLocation = tostring(ExtendedProperties_json.[\"Current Location\"])\n| extend PreviousLocation = tostring(ExtendedProperties_json.[\"Previous Location\"])\n| extend CurrentIPAddress = tostring(ExtendedProperties_json.[\"Current IP Address\"])\n| extend PreviousIPAddress = tostring(ExtendedProperties_json.[\"Previous IP Address\"])\n| project AadTenantId, AadUserId, AccountTenantId, AccountObjectId, Alert_AtypicalTravels_Name, Alert_AtypicalTravels_Severity, Alert_AtypicalTravels_Time, CurrentIPAddress, PreviousIPAddress, CurrentLocation, PreviousLocation, UserAccount, UserName, CompromisedEntity\n;\nAlert_UnfamiliarSignInProps\n| join kind=inner Alert_AtypicalTravels on UserAccount\n| where abs(datetime_diff('minute', Alert_UnfamiliarSignInProps_Time, Alert_AtypicalTravels_Time)) <= TimeDeltaInMinutes\n| extend TimeDelta = Alert_UnfamiliarSignInProps_Time - Alert_AtypicalTravels_Time\n| project UserAccount, AadUserId, Alert_UnfamiliarSignInProps_Name, Alert_UnfamiliarSignInProps_Severity, Alert_UnfamiliarSignInProps_Time, Alert_AtypicalTravels_Name, Alert_AtypicalTravels_Severity, Alert_AtypicalTravels_Time, TimeDelta, CurrentLocation, PreviousLocation, CurrentIPAddress, PreviousIPAddress, UserName\n| extend UserEmailName = split(UserAccount,'@')[0], UPNSuffix = split(UserAccount,'@')[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Look for evidence of the LSASS process being dumped either using Procdump or comsvcs.dll. Often used by attackers to access credentials stored on a system.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent \n| where EventID == 4688\n| where CommandLine has_all (\"procdump\", \"lsass\") or CommandLine has_all (\"rundll32\", \"comsvcs\", \"MiniDump\")\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows users by alert count.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where TimeGenerated > ago(24h)\n| where ActivityType == 3608\n| extend DstHostname = extract(@'detected on\\s(\\S+)\\.', 1, EventOriginalMessage)\n| join (SentinelOne \n      | where EventType =~ 'Agents.'\n      | where isnotempty(LastLoggedInUserName)\n      | project DstHostname=ComputerName, LastLoggedInUserName) on DstHostname\n| summarize count() by LastLoggedInUserName\n| extend AccountCustomEntity = LastLoggedInUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Defend has detected a user has a suspicious file type from a suspicious sender in their mailbox.\n Topic: Egress Defend"}, {"role": "assistant", "content": "DefendAuditData\n| where ThreatLevel == \"suspicious\" or ThreatLevel == \"dangerous\"\n| mv-expand todynamic(Attachments)\n| where Attachments.name matches regex @\"(?i)^.*\\.(doc|docx|docm|pdf|xls|xlsx|xlsm|html|zip)$(?-i)\"\n| summarize attachmentCount=count() by TimeGenerated, tostring(Attachments.name), Subject, From, Account_0_FullName = trim(@\"[^@.\\w]+\",Recipients), timesClicked = LinksClicked, SenderIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert leverages Defender for IoT to detect PLC stop commands which could indicate improper configuration or malicious activity on the network such as a threat manipulating PLC programming to affect the function of the network.\n Topic: IoTOTThreatMonitoringwithDefenderforIoT"}, {"role": "assistant", "content": "let alertList = dynamic([\"Controller Reset\", \"An S7 Stop PLC Command was Sent\", \"Controller Stop\", \"Excessive Restart Rate of an Outstation\", \"GE SRTP Stop PLC Command was Sent\", \"Outstation Restarted\", \"Outstation Restarts Frequently\", \"Profinet Device Factory Reset\", \"Slave Device Unrecoverable Failure\", \"Suspicion of Hardware Problems in Outstation\"]);\nSecurityAlert\n| where ProviderName == \"IoTSecurity\"\n| where AlertName has_any (alertList) \n| extend ExtendedProperties = parse_json(ExtendedProperties)\n| where tostring(ExtendedProperties.isNew) == \"True\"\n| extend DeviceId = tostring(ExtendedProperties.DeviceId), \n         SourceDeviceAddress = tostring(ExtendedProperties.SourceDeviceAddress), \n         DestDeviceAddress = tostring(ExtendedProperties.DestinationDeviceAddress), \n         RemediationSteps = tostring(parse_json(RemediationSteps)[0]), \n         Protocol = tostring(ExtendedProperties.Protocol), \n         AlertManagementUri = tostring(ExtendedProperties.AlertManagementUri)\n| project\n  TimeGenerated,\n  DeviceId,\n  ProductName,\n  ProductComponentName,\n  AlertSeverity,\n  AlertName,\n  Description,\n  Protocol,\n  SourceDeviceAddress,\n  DestDeviceAddress,\n  RemediationSteps,\n  Tactics,\n  Entities,\n  VendorOriginalId,\n  AlertLink,\n  AlertManagementUri,\n  Techniques\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for devices with vulnerable OS.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "let os_latest = 'x.x.xxx'; //put the latest version of OS here before running the query\nCiscoDuo\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'authentication'\n| where AccessDvcOsVersion != os_latest\n| project TimeGenerated, SrcIpAddr, DstUserName\n| extend AccountCustomEntity = DstUserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies beaconing patterns from Network traffic logs based on recurrent frequency patterns. \nSuch potential outbound beaconing patterns to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts as discussed in this [Blog](https://medium.com/@HuntOperator/detect-beaconing-with-flare-elastic-stack-and-intrusion-detection-systems-110dc74e0c56).\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM NetworkSession schema\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "let querystarttime = 2d;\nlet queryendtime = 1d;\nlet TimeDeltaThreshold = 10;\nlet TotalEventsThreshold = 15;\nlet PercentBeaconThreshold = 80;\nlet LocalNetworks=dynamic([\"169.254.0.0/16\",\"127.0.0.0/8\"]);\n_Im_NetworkSession(starttime=ago(querystarttime), endtime=ago(queryendtime))\n| where not(ipv4_is_private(DstIpAddr))\n| where not (ipv4_is_in_any_range(DstIpAddr, LocalNetworks))\n| project \n    TimeGenerated\n    , SrcIpAddr\n    , SrcPortNumber\n    , DstIpAddr\n    , DstPortNumber\n    , DstBytes\n    , SrcBytes\n| sort by \n    SrcIpAddr asc\n    , TimeGenerated asc\n    , DstIpAddr asc\n    , DstPortNumber asc\n| serialize\n| extend \n    nextTimeGenerated = next(TimeGenerated, 1)\n    , nextSrcIpAddr = next(SrcIpAddr, 1)\n| extend \n    TimeDeltainSeconds = datetime_diff('second', nextTimeGenerated, TimeGenerated)\n| where SrcIpAddr == nextSrcIpAddr\n//Whitelisting criteria/ threshold criteria\n| where TimeDeltainSeconds > TimeDeltaThreshold \n| project\n    TimeGenerated\n    , TimeDeltainSeconds\n    , SrcIpAddr\n    , SrcPortNumber\n    , DstIpAddr\n    , DstPortNumber\n    , DstBytes\n    , SrcBytes\n| summarize\n    count()\n    , sum(DstBytes)\n    , sum(SrcBytes)\n    , make_list(TimeDeltainSeconds) \n    by TimeDeltainSeconds\n        , bin(TimeGenerated, 1h)\n        , SrcIpAddr\n        , DstIpAddr\n        , DstPortNumber\n| summarize\n    (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds)\n    , TotalEvents=sum(count_)\n    , TotalSrcBytes = sum(sum_SrcBytes)\n    , TotalDstBytes = sum(sum_DstBytes)\n    by bin(TimeGenerated, 1h)\n        , SrcIpAddr\n        , DstIpAddr\n        , DstPortNumber\n| where TotalEvents > TotalEventsThreshold \n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent > PercentBeaconThreshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies mass secret retrieval from Azure Key Vault observed by a single user. \nMass secret retrival crossing a certain threshold is an indication of credential dump operations or mis-configured applications. \nYou can tweak the EventCountThreshold based on average count seen in your environment and also filter any known sources (IP/Account) and useragent combinations based on historical analysis to further reduce noise\n Topic: Azure Key Vault"}, {"role": "assistant", "content": "let DistinctSecretsThreshold = 10;\nlet EventCountThreshold = 50;\n// To avoid any False Positives, filtering using AppId is recommended.\n// The AppId 509e4652-da8d-478d-a730-e9d4a1996ca4 has been added in the query as it corresponds to Azure Resource Graph performing VaultGet operations for indexing and syncing all tracked resources across Azure.\n// The AppId 8cae6e77-e04e-42ce-b5cb-50d82bce26b1 has been added as it correspond to Microsoft Policy Insights Provider Data Plane performing VaultGet operations for policies checks.\nlet AllowedAppId = dynamic([\"509e4652-da8d-478d-a730-e9d4a1996ca4\",\"8cae6e77-e04e-42ce-b5cb-50d82bce26b1\"]);\nlet OperationList = dynamic([\"SecretGet\", \"KeyGet\", \"VaultGet\"]);\nAzureDiagnostics\n| where OperationName in (OperationList) and ResourceType =~ \"VAULTS\"\n| where not(identity_claim_appid_g in (AllowedAppId) and OperationName == 'VaultGet')\n| extend\n    ResourceId,\n    ResultType = column_ifexists(\"ResultType\", \"\"),\n    identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = column_ifexists(\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\", \"\"),\n    identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s = column_ifexists(\"identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s\", \"\"),\n    identity_claim_oid_g = column_ifexists(\"identity_claim_oid_g\", \"\"),\n    identity_claim_upn_s = column_ifexists(\"identity_claim_upn_s\", \"\")\n| extend\n    CallerObjectId = iff(isempty(identity_claim_oid_g), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, identity_claim_oid_g),\n    CallerObjectUPN = iff(isempty(identity_claim_upn_s), identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s, identity_claim_upn_s)\n| as _Retrievals\n| where CallerObjectId in (toscalar(\n    _Retrievals\n    | where ResultType == \"Success\"\n    | summarize Count = dcount(requestUri_s) by OperationName, CallerObjectId\n    | where Count > DistinctSecretsThreshold\n    | summarize make_set(CallerObjectId,10000)\n))\n| extend\n    requestUri_s = column_ifexists(\"requestUri_s\", \"\"),\n    id_s = column_ifexists(\"id_s\", \"\"),\n    CallerIPAddress = column_ifexists(\"CallerIPAddress\", \"\"),\n    clientInfo_s = column_ifexists(\"clientInfo_s\", \"\")\n| summarize\n    EventCount = count(),\n    StartTime = min(TimeGenerated),\n    EndTime = max(TimeGenerated),\n    ResourceList = make_set(Resource, 50),\n    OperationNameList = make_set(OperationName, 50),\n    RequestURLList = make_set(requestUri_s, 50),\n    ResourceId = max(ResourceId),\n    CallerIPList = make_set(CallerIPAddress, 50),\n    clientInfo_sList = make_set(clientInfo_s, 50),\n    CallerIPMax = max(CallerIPAddress)\n    by ResourceType, ResultType, identity_claim_appid_g, CallerObjectId, CallerObjectUPN\n    | where EventCount > EventCountThreshold\n| project-reorder StartTime, EndTime, EventCount, ResourceId,ResourceType,identity_claim_appid_g, CallerObjectId, CallerObjectUPN, ResultType, ResourceList, OperationNameList, RequestURLList, CallerIPList, clientInfo_sList\n| extend timestamp = EndTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match across various data feeds for domains, hashes and IP IOC related to Mercury\n Reference:  https://www.microsoft.com/security/blog/2022/08/25/mercury-leveraging-log4j-2-vulnerabilities-in-unpatched-systems-to-target-israeli-organizations/\n Topic: Detections"}, {"role": "assistant", "content": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Mercury_August2022.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet sha256Hashes = (iocs | where Type =~ \"sha256\" | project IoC);\nlet IPList = (iocs | where Type =~ \"ip\"| project IoC);\nlet domains = (iocs | where Type =~ \"domainname\"| project IoC);\nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\n(union isfuzzy=true\n(CommonSecurityLog\n| where SourceIP in (IPList) or DestinationIP in (IPList) or DestinationHostName has_any (domains) or RequestURL has_any (domains) or Message has_any (IPList)\n| parse Message with * '(' DNSName ')' * \n| project TimeGenerated, SourceIP, DestinationIP, Message, SourceUserID, RequestURL, DNSName, Type\n| extend MessageIP = extract(IPRegex, 0, Message), RequestIP = extract(IPRegex, 0, RequestURL)\n| extend IPMatch = case(SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", MessageIP in (IPList), \"Message\", RequestURL has_any (domains), \"RequestUrl\", \"NoMatch\")\n| extend IPAddress = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, IPMatch == \"Message\", MessageIP, \"NoMatch\")\n| extend AccountName = tostring(split(SourceUserID, \"@\")[0]), AccountUPNSuffix = tostring(split(SourceUserID, \"@\")[1])\n),\n(DnsEvents\n| where IPAddresses in (IPList) or Name in~ (domains)\n| project TimeGenerated, Computer, IPAddresses, Name, ClientIP, Type\n| extend IPAddress = IPAddresses, DNSName = Name, Computer\n),\n(VMConnection\n| where SourceIp in (IPList) or DestinationIp in (IPList) or RemoteDnsCanonicalNames has_any (domains)\n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| project TimeGenerated, Computer, Direction, ProcessName, SourceIp, DestinationIp, DestinationPort, RemoteDnsQuestions, DNSName,BytesSent, BytesReceived, RemoteCountry, Type\n| extend IPMatch = case( SourceIp in (IPList), \"SourceIP\", DestinationIp in (IPList), \"DestinationIP\", \"None\") \n| extend IPAddress = case(IPMatch == \"SourceIP\", SourceIp, IPMatch == \"DestinationIP\", DestinationIp, \"NoMatch\"), File = ProcessName\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 3\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = tostring(EventDetail.[9].[\"#text\"]), DestinationIP = tostring(EventDetail.[14].[\"#text\"]), Image = tostring(EventDetail.[4].[\"#text\"])\n| where SourceIP in (IPList) or DestinationIP in (IPList)\n| project TimeGenerated, SourceIP, DestinationIP, Image, UserName, Computer, Type\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\")\n| extend AccountNT = UserName, File = tostring(split(Image, '\\\\', -1)[-1]), IPAddress = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n), \n(OfficeActivity\n| where ClientIP in (IPList) \n| project TimeGenerated, UserAgent, Operation, RecordType, UserId, ClientIP, Type\n| extend IPAddress = ClientIP, AccountUPN = UserId, AccountUPNName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n),\n(DeviceNetworkEvents\n| where RemoteUrl has_any (domains) or RemoteIP in (IPList) or InitiatingProcessSHA256 in (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, Computer = DeviceName, InitiatingProcessSHA256, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, RemotePort, LocalIP, Type\n| extend IPAddress = RemoteIP, FileHash = InitiatingProcessSHA256\n| extend AccountUPN = InitiatingProcessAccountName, AccountUPNName = tostring(split(InitiatingProcessAccountName, \"@\")[0]), AccountUPNSuffix = tostring(split(InitiatingProcessAccountName, \"@\")[1])\n),\n(WindowsFirewall\n| where SourceIP in (IPList) or DestinationIP in (IPList) \n| project TimeGenerated, Computer, CommunicationDirection, SourceIP, DestinationIP, SourcePort, DestinationPort, Type\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\")\n| extend IPAddress = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n),\n(AzureDiagnostics \n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (IPList) or DestinationHost has_any (domains) \n| extend DNSName = DestinationHost, IPAddress = SourceHost\n),\n(AzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallNetworkRule\"\n| where msg_s has_any (IPList)\n| parse msg_s with Protocol \" request from \" SourceIP \":\" SourcePortInt:int \" to \" TargetIP \":\" TargetPortInt:int *\n| parse kind=regex flags=U msg_s with * \". Action\\\\: \" Action1a \"\\\\.\"\n| parse msg_s with * \". Policy: \" Policy \". Rule Collection Group: \" RuleCollectionGroup \".\" *\n| parse msg_s with * \" Rule Collection: \"  RuleCollection \". Rule: \" Rule \n| extend IPAddress = SourceIP\n),\n(AzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallDnsProxy\"\n| where msg_s has_any (domains)\n| parse msg_s with \"DNS Request: \" SourceIP \":\" SourcePortInt:int \" - \" QueryID:int \" \" RequestType \" \" RequestClass \" \" hostname \". \" protocol \" \" details\n| extend\n    ResponseDuration = extract(\"[0-9]*.?[0-9]+s$\", 0, msg_s),\n    SourcePort = tostring(SourcePortInt),\n    QueryID = tostring(QueryID)\n| project TimeGenerated,SourceIP,hostname,RequestType,ResponseDuration,details,msg_s\n| extend IPAddress = SourceIP\n),\n(AZFWApplicationRule\n| where Fqdn has_any (domains) or Fqdn has_any (IPList)\n| extend IPAddress = SourceIp\n),\n(AZFWDnsQuery\n| where isnotempty(QueryName)\n| where QueryName has_any (domains)\n| extend DNSName = QueryName, IPAddress = SourceIp\n),\n(AZFWNetworkRule\n| where DestinationIp has_any (IPList)\n| extend IPAddress = SourceIp\n),\n(CommonSecurityLog\n| where FileHash in (sha256Hashes)\n| project TimeGenerated, Message, SourceUserID, FileHash, Type\n| extend Algorithm = \"SHA256\", FileHash = tostring(FileHash), AccountUPN = SourceUserID, AccountUPNName = tostring(split(SourceUserID, \"@\")[0]), AccountUPNSuffix = tostring(split(SourceUserID, \"@\")[1])\n),\n(imFileEvent\n| where TargetFileSHA256 has_any (sha256Hashes)\n| extend AccountNT = ActorUsername, Computer = DvcHostname, IPAddress = SrcIpAddr, CommandLine = ActingProcessCommandLine, FileHash = TargetFileSHA256\n| project Type, TimeGenerated, Computer, AccountNT, IPAddress, CommandLine, FileHash, Algorithm = \"SHA256\"\n),\n(DeviceFileEvents\n| where SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, Computer = DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend Algorithm = \"SHA256\", FileHash = tostring(InitiatingProcessSHA256), CommandLine = InitiatingProcessCommandLine,Image = InitiatingProcessFolderPath\n| extend AccountUPN = InitiatingProcessAccountName, AccountUPNName = tostring(split(InitiatingProcessAccountName, \"@\")[0]), AccountUPNSuffix = tostring(split(InitiatingProcessAccountName, \"@\")[1])\n),\n(DeviceImageLoadEvents\n| where SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, Computer = DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend Algorithm = \"SHA256\", FileHash = tostring(InitiatingProcessSHA256), CommandLine = InitiatingProcessCommandLine,Image = InitiatingProcessFolderPath\n| extend AccountUPN = InitiatingProcessAccountName, AccountUPNName = tostring(split(InitiatingProcessAccountName, \"@\")[0]), AccountUPNSuffix = tostring(split(InitiatingProcessAccountName, \"@\")[1])\n),\n(Event\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend Image = EventDetail.[4].[\"#text\"], CommandLine = EventDetail.[10].[\"#text\"], Hashes = tostring(EventDetail.[17].[\"#text\"])\n| extend Hashes = extract_all(@\"(?P<key>\\w+)=(?P<value>[a-zA-Z0-9]+)\", dynamic([\"key\",\"value\"]), Hashes)\n| extend Hashes = column_ifexists(\"Hashes\", dynamic([\"\", \"\"])), CommandLine = column_ifexists(\"CommandLine\", \"\")\n| mv-expand Hashes\n| where Hashes[0] =~ \"SHA256\" and Hashes[1] has_any (sha256Hashes) \n| project TimeGenerated, EventDetail, AccountNT = UserName, Computer, Type, Source, Hashes, CommandLine, Image\n| extend Type = strcat(Type, \": \", Source), FileHash = tostring(Hashes[1]), Algorithm = tostring(Hashes[0])\n)\n)\n| extend AccountNTName = tostring(split(AccountNT, \"\\\\\")[1]), AccountNTDomain = tostring(split(AccountNT, \"\\\\\")[0])\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in Syslog table from any Domain IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;  // Define the time range to look back for syslog data (1 hour)\nlet ioc_lookBack = 14d;  // Define the time range to look back for threat intelligence indicators (14 days)\n// Create a list of top-level domains (TLDs) from the threat feed for later validation\nlet list_tlds = ThreatIntelligenceIndicator\n  | where isnotempty(DomainName)\n  | where TimeGenerated > ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | extend parts = split(DomainName, '.')\n  | extend tld = parts[(array_length(parts)-1)]\n  | summarize count() by tostring(tld)\n  | summarize make_list(tld);\n// Fetch the latest active domain indicators from the threat intelligence data within the specified time range\nlet Domain_Indicators = ThreatIntelligenceIndicator\n  | where isnotempty(DomainName)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | extend TI_DomainEntity = DomainName;\n// Join the threat intelligence indicators with syslog data on matching domain entities\nDomain_Indicators\n  | join kind=innerunique (\n    Syslog\n    | where TimeGenerated > ago(dt_lookBack)\n    // Extract domain patterns from syslog messages\n    | extend domain = extract(\"(([a-z0-9]+(-[a-z0-9]+)*\\\\.)+[a-z]{2,})\",1, tolower(SyslogMessage))\n    | where isnotempty(domain)\n    | extend parts = split(domain, '.')\n    // Split out the top-level domain (TLD)\n    | extend tld = parts[(array_length(parts)-1)]\n    // Validate parsed domain by checking if the TLD is in the list of TLDs in our threat feed\n    | where tld in~ (list_tlds)\n    | extend Syslog_TimeGenerated = TimeGenerated\n  ) on $left.TI_DomainEntity==$right.domain\n  | where Syslog_TimeGenerated < ExpirationDateTime\n  // Retrieve the latest syslog timestamp for each indicator and domain combination\n  | summarize Syslog_TimeGenerated = arg_max(Syslog_TimeGenerated, *) by IndicatorId, domain\n  // Select the desired columns for the final result set\n  | project Syslog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, SyslogMessage, Computer, ProcessName, domain, HostIP, Url, Type, TI_DomainEntity\n  // Extract the hostname from the Computer field\n  | extend HostName = tostring(split(Computer, '.', 0)[0])\n  // Extract the DNS domain from the Computer field\n  | extend DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n  // Assign the Syslog_TimeGenerated value to the timestamp field\n  | extend timestamp = Syslog_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in DNS events from any Domain IOC from TI\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM DNS schema\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let HAS_ANY_MAX = 10000;\nlet dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet DomainTIs= ThreatIntelligenceIndicator\n  // Picking up only IOC's that contain the entities we want\n  | where isnotempty(DomainName)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\nlet Domains = DomainTIs | where isnotempty(DomainName) |summarize NDomains=dcount(DomainName), DomainsList=make_set(DomainName) \n  | project DomainList = iff(NDomains > HAS_ANY_MAX, dynamic([]), DomainsList) ;\nDomainTIs\n  | join (\n      _Im_Dns(starttime=ago(dt_lookBack), domain_has_any=toscalar(Domains))\n      | extend DNS_TimeGenerated = TimeGenerated\n) on $left.DomainName==$right.DnsQuery\n| where DNS_TimeGenerated < ExpirationDateTime\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, DNS_TimeGenerated, Dvc, SrcIpAddr, Domain, DnsQuery, DnsQueryType\n| extend HostName = tostring(split(Dvc, \".\")[0]), DomainIndex = toint(indexof(Dvc, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Dvc, DomainIndex + 1), Dvc)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows behavior monitoring operations by users.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where TimeGenerated > ago(24h)\n| where EventMessage has \"Behavior Monitoring\"\n| extend DeviceCustomNumber3 = coalesce(\n                                  column_ifexists(\"FieldDeviceCustomNumber3\", long(null)),\n                                  DeviceCustomNumber3,\n                                  long(null)\n                              )\n| where isnotempty(DeviceCustomNumber3)\n| extend Translatedoperation = case(\nDeviceCustomNumber3 == \"101\", \"Create Process\", \nDeviceCustomNumber3 == \"102\", \"Open\",\nDeviceCustomNumber3 == \"103\", \"Terminate\",\nDeviceCustomNumber3 == \"104\", \"Terminate\", \nDeviceCustomNumber3 == \"301\", \"Delete\",\nDeviceCustomNumber3 == \"302\", \"Write\",\nDeviceCustomNumber3 == \"303\", \"Access\", \nDeviceCustomNumber3 == \"401\", \"Create File\",\nDeviceCustomNumber3 == \"402\", \"Close\",\nDeviceCustomNumber3 == \"403\", \"Execute\", \nDeviceCustomNumber3 == \"501\", \"Invoke\",\nDeviceCustomNumber3 == \"601\", \"Exploit\",\nDeviceCustomNumber3 == \"9999\", \"Unhandled Operation\",\n\"unknown\")\n| summarize OperationCount = count() by Translatedoperation, DstUserName\n| sort by OperationCount desc \n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This identifies new Windows Reserved Filenames on Office services like SharePoint and OneDrive in the past 7 days. It also detects when a user uploads these files to another users workspace, which may indicate malicious activity.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = totimespan((endtime-starttime)*7);\n// a threshold can be enabled, see commented line below for PrevSeenCount\nlet threshold = 1;\n// Reserved FileNames/Extension for Windows\nlet Reserved = dynamic(['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9']);\nOfficeActivity | where TimeGenerated between(starttime..endtime)\n| where isnotempty(SourceFileExtension)\n| where SourceFileName !~ SourceFileExtension\n| where SourceFileExtension in~ (Reserved) or SourceFileName in~ (Reserved)\n| where UserAgent !has \"Mac OS\"\n| project TimeGenerated, OfficeId, OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, UserAgent, Site_Url, SourceRelativeUrl, SourceFileName, SourceFileExtension\n| join kind= leftanti (\nOfficeActivity | where TimeGenerated between (ago(lookback)..starttime)\n| where isnotempty(SourceFileExtension)\n| where SourceFileName !~ SourceFileExtension\n| where SourceFileExtension in~ (Reserved) or SourceFileName in~ (Reserved)\n| where UserAgent !has \"Mac OS\"\n| summarize SourceRelativeUrl = make_set(SourceRelativeUrl, 100000), UserId = make_set(UserId, 100000), SourceFileName = make_set(SourceFileName, 100000) , PrevSeenCount = count() by SourceFileExtension\n// To exclude previous matches when only above a specific count, change threshold above and uncomment the line below\n//| where PrevSeenCount > threshold\n| mvexpand SourceRelativeUrl, UserId, SourceFileName\n| extend SourceRelativeUrl = tostring(SourceRelativeUrl), UserId = tostring(UserId), SourceFileName = tostring(SourceFileName)\n) on SourceFileExtension\n| extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])\n| extend UserIdUserFolderFormat = tolower(replace_regex(UserId, '@|\\\\.', '_'))\n// identify when UserId is not a match to the specific site url personal folder reference\n| extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true , false )\n| summarize TimeGenerated = make_list(TimeGenerated, 100000), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Operations = make_list(Operation, 100000), UserAgents = make_list(UserAgent, 100000),\nOfficeIds = make_list(OfficeId, 100000), SourceRelativeUrls = make_list(SourceRelativeUrl, 100000), FileNames = make_list(SourceFileName, 100000)\nby OfficeWorkload, RecordType, UserType, UserKey, UserId, ClientIP, Site_Url, SourceFileExtension, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder\n// Use mvexpand on any list items and you can expand out the exact time and other metadata about the hit\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n| extend IP_0_Address = ClientIP\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix\n| extend URL_0_Url = Site_Url\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Threat actors may use tools such as Curl to download additional files, communicate with C2 infrastructure, or exfiltrate data. This query looks for new files being downloaded using Curl.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "let known_files = DeviceNetworkEvents\n  | where TimeGenerated between (ago(7d)..ago(1d))\n  | where InitiatingProcessFileName has \"curl\"\n  | extend url = extract(\"http[s]?:\\\\/\\\\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\", 0,InitiatingProcessCommandLine)\n  | extend ip = extract(\"(\\\\b25[0-5]|\\\\b2[0-4][0-9]|\\\\b[01]?[0-9][0-9]?)(\\\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}[^ ]*\", 0, InitiatingProcessCommandLine)\n  | extend remote_file = iif(isnotempty(url), url, ip)\n  | union (SecurityEvent\n  | where TimeGenerated between (ago(7d)..ago(1d))\n  | where EventID == 4688\n  | where CommandLine has \"curl\"\n  | extend url = extract(\"http[s]?:\\\\/\\\\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\", 0,CommandLine)\n  | extend ip = extract(\"(\\\\b25[0-5]|\\\\b2[0-4][0-9]|\\\\b[01]?[0-9][0-9]?)(\\\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}[^ ]*\", 0, CommandLine)\n  | extend remote_file = iif(isnotempty(url), url, ip))\n  | summarize by remote_file;\n  DeviceNetworkEvents\n  | where TimeGenerated > ago(1d)\n  | where InitiatingProcessFileName has \"curl\"\n  | extend url = extract(\"http[s]?:\\\\/\\\\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\", 0,InitiatingProcessCommandLine)\n  | extend ip = extract(\"(\\\\b25[0-5]|\\\\b2[0-4][0-9]|\\\\b[01]?[0-9][0-9]?)(\\\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}[^ ]*\", 0, InitiatingProcessCommandLine)\n  | extend remote_file = iif(isnotempty(url), url, ip)\n  | union (SecurityEvent\n  | where EventID == 4688\n  | where CommandLine has \"curl\"\n  | extend url = extract(\"http[s]?:\\\\/\\\\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\", 0,CommandLine)\n  | extend ip = extract(\"(\\\\b25[0-5]|\\\\b2[0-4][0-9]|\\\\b[01]?[0-9][0-9]?)(\\\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}[^ ]*\", 0, CommandLine)\n  | extend remote_file = iif(isnotempty(url), url, ip))\n  | where remote_file !in (known_files)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for users being deleted.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where TimeGenerated > ago(24h)\n| where data_eventName_s =~ 'DeleteUser'\n| extend AccountCustomEntity = data_definedTags_Oracle_Tags_CreatedBy_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple incidents from user.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "let threshold = 2;\nDigitalGuardianDLPEvent\n| where isnotempty(MatchedPolicies)\n| summarize count() by SrcUserName, bin(TimeGenerated, 30m)\n| where count_ >= threshold\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when multiple instances were terminated.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "let threshold = 5;\nOCILogs\n| where data_eventName_s =~ 'TerminateInstance'\n| summarize count() by SrcIpAddr, bin(TimeGenerated, 10m)\n| where count_ >= threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "ThreatConnect Specific:\nThis rule identifies a match Network Sessions for which the source or destination IP address is a known IoC.\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM NetworkSession schema Topic: ThreatConnect"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet IP_TI = materialize (\n  ThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where ExpirationDateTime > now() and Active == true\n  | where SourceSystem startswith \"ThreatConnect-\"\n  | extend TI_ipEntity = coalesce(NetworkIP, NetworkDestinationIP, NetworkSourceIP,EmailSourceIpAddress,\"NO_IP\")\n  | where TI_ipEntity != \"NO_IP\"\n);\nIP_TI\n  // using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique \n(\n  _Im_NetworkSession (starttime=ago(dt_lookBack))\n  | where isnotempty(SrcIpAddr)\n  | summarize imNWS_mintime=min(TimeGenerated), imNWS_maxtime=max(TimeGenerated) by SrcIpAddr, DstIpAddr, Dvc, EventProduct, EventVendor  \n  | lookup (IP_TI | project TI_ipEntity, Active) on $left.SrcIpAddr == $right.TI_ipEntity\n  | project-rename SrcMatch = Active\n  | lookup (IP_TI | project TI_ipEntity, Active) on $left.DstIpAddr == $right.TI_ipEntity\n  | project-rename DstMatch = Active\n  | where SrcMatch or DstMatch\n  | extend \n      IoCIP = iff(SrcMatch, SrcIpAddr, DstIpAddr),\n      IoCDirection = iff(SrcMatch, \"Source\", \"Destination\")\n)on $left.TI_ipEntity == $right.IoCIP\n| where imNWS_mintime < ExpirationDateTime\n| project imNWS_mintime, imNWS_maxtime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, SrcIpAddr, DstIpAddr, IoCDirection, IoCIP, Dvc, EventVendor, EventProduct\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies users logging in from two different countries within a specified time window, potentially indicating VPN use. It includes UEBA logs IdentityInfo and BehaviorAnalytics for context.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "\nlet riskScoreCutoff = 20; //Adjust this based on volume of results\nlet windowTime = 20min / 2; //Window to lookup anomalous logins within\nlet excludeKnownVPN = dynamic(['127.0.0.1', '0.0.0.0']); //Known VPN IP addresses to exclude\nSigninLogs\n| where ConditionalAccessStatus =~ \"success\"\n| extend country = LocationDetails['countryOrRegion']\n| where country != \"\"\n| summarize count() by tostring(country)\n| join (\n    //Get the total number of logins from any country and join it to the previous count in a single table\n    SigninLogs\n    | where ConditionalAccessStatus =~ \"success\"\n    | extend country = LocationDetails['countryOrRegion']\n    | where country != \"\"\n    | summarize count(), make_list(tostring(country))\n    | mv-expand list_country\n    | extend country = tostring(list_country)\n) on country\n| summarize by country, count_, count_1\n//Now calculate each countries prevalence within login events\n| extend prevalence = toreal(count_) / toreal(count_1) * 100\n| project-away count_1\n| where prevalence < 0.01\n| join kind=rightsemi(\n    SigninLogs\n    //Enable to limit to o365 exchange logins\n    //| where AppDisplayName =~ \"Office 365 Exchange Online\"\n    | where ConditionalAccessStatus =~ \"success\"\n    | where IPAddress != \"\"\n    | extend country = tostring(LocationDetails['countryOrRegion'])\n    | summarize count() by TimeGenerated, UserPrincipalName, country, IPAddress\n) on country\n| join kind=leftouter (\n    SigninLogs\n    //Enable to limit to o365 exchange logins\n    //| where AppDisplayName =~ \"Office 365 Exchange Online\"\n    | where ConditionalAccessStatus =~ \"success\"\n    | extend country = tostring(LocationDetails['countryOrRegion'])\n    | summarize by TimeGenerated, IPAddress, UserPrincipalName, country\n) on UserPrincipalName\n| where IPAddress != IPAddress1 and country != country1\n| extend WindowStart = TimeGenerated1 - windowTime\n| extend WindowEnd = TimeGenerated1 + windowTime\n| where TimeGenerated between (WindowStart .. WindowEnd)\n| project Account=UserPrincipalName, AnomalousIP=IPAddress, AnomalousLoginTime=TimeGenerated, AnomalousCountry=country, OtherLoginIP=IPAddress1, OtherLoginCountry=country1, OtherLoginWindowStart=WindowStart, OtherLoginWindowEnd=WindowEnd\n| where AnomalousIP !in(excludeKnownVPN) and OtherLoginIP !in(excludeKnownVPN)\n| extend timestamp = AnomalousLoginTime, Account = tolower(Account), Account_0_Name = Account, IP_0_Address = AnomalousIP\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n    | project-rename Account = AccountUPN\n) on Account\n| join kind=leftouter (\n    BehaviorAnalytics\n    | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n    | where isnotempty(SourceIPAddress)\n    | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress\n    | project-rename AnomalousIP = SourceIPAddress\n    | summarize\n        UsersInsights = make_set(UsersInsights, 1000),\n        DevicesInsights = make_set(DevicesInsights, 1000),\n        IPInvestigationPriority = sum(InvestigationPriority)\n    by AnomalousIP)\non AnomalousIP\n| extend UEBARiskScore = IPInvestigationPriority\n| where  UEBARiskScore > riskScoreCutoff\n| sort by UEBARiskScore desc \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple client errors from one source in short timeframe\n Topic: Tomcat"}, {"role": "assistant", "content": "let threshold = 100;\nTomcatEvent\n| where HttpStatusCode >= 400 and HttpStatusCode <= 499 \n| summarize MultipleClientErrors = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleClientErrors > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unscanned downloaded file.\n Topic: CiscoWSA"}, {"role": "assistant", "content": "CiscoWSAEvent\n| where isnotempty(AmpFileName)\n| where AmpScanningVerdict in ('2', '3')\n| extend IPCustomEntity = SrcIpAddr, FileCustomEntity = AmpFileName, AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when changes have been made to the SSO configuration. Once this analytics rule is triggered it will group all related future alerts for upto an hour when all related entities are the same.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "OnePasswordEventLogs_CL\n| where log_source == \"auditevents\"\n| where action has_any(\"enblsso\", \"disblsso\", \"chngpsso\", \"chngasso\", \"chngdsso\", \"addgsso\", \"delgsso\")\n| where object_type == \"sso\"\n| extend\n    ActorUsername = actor_details.email\n    , SrcIpAddr = session.ip"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies Dataverse and Dynamics 365 logons by sensitive users. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "# Sensitive users are marked in the VIP Users watchlist using the Tags field.\n# Enter the tags values to monitor\nlet monitored_tags = dynamic([\"DataverseSensitive\"]);\nlet query_frequency = 1h;\nlet sensitive_users = MSBizAppsVIPUsers()\n    | where Tags in (monitored_tags);\nsensitive_users\n| join kind=inner (DataverseActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where Message == \"UserSignIn\")\n    on $left.UserPrincipalName == $right.UserId\n| summarize FirstSeen = arg_max(TimeGenerated, *) by UserId\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    FirstSeen,\n    UserId,\n    ClientIp,\n    UserAgent,\n    InstanceUrl,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0034 (Theom has observed shadow (or clone) databases/tables. Additionally, it has observed roles that are overprovisioned for these data stores. As per this requirement, use this information to apply data access control lists or access permissions and enforce data retention policies)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0034\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies large delete or update operations on Finance & Operations user records based on predefined thresholds. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "// Set threshold for number of updated or deleted records\nlet update_detection_threshold = 50;\nlet deleted_detection_threshold = 10;\nFinanceOperationsActivity_CL\n| where TableName == \"UserInfo\" and LogType in (\"Update\", \"Delete\")\n| summarize\n    TotalEvents = count(),\n    StartTime = min(LogCreatedDateTime),\n    EndTime = max(LogCreatedDateTime)\n    by TableName, Username, LogType\n| where (LogType == \"Update\" and TotalEvents > update_detection_threshold) or (LogType == \"Delete\" and TotalEvents > deleted_detection_threshold)\n| extend FinOpsAppId = 32780\n| project StartTime, EndTime, Username, LogType, TableName, TotalEvents, FinOpsAppId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects put and post method request in high risk file type.\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "let HighRiskFileType = dynamic(['.exe', '.msi', '.msp', '.jar', '.bat', '.cmd', '.js', '.jse', 'ws', '.ps1', '.ps2', '.msh']);\nPaloAltoCDLEvent\n| where EventResourceId =~ 'THREAT'\n| where EventResult =~ 'file'\n| where HttpRequestMethod has_any (\"POST\", \"PUT\")\n| where FileType in (HighRiskFileType)\n| extend FileCustomEntity = SrcFileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple failed logins.\n Topic: Bitglass"}, {"role": "assistant", "content": "let threshold = 10;\nBitglass\n| where EventType =~ 'access'\n| where EventResultDetails =~ 'Failed login attempt.'\n| summarize count() by User, bin(TimeGenerated, 10m)\n| where count_ >= threshold\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies IPs from which users grant access to other users on Azure resources and alerts when a previously unseen source IP address is used.\n Topic: Azure Activity"}, {"role": "assistant", "content": "let starttime = 14d;\nlet endtime = 1d;\n// The number of operations above which an IP address is considered an unusual source of role assignment operations\nlet alertOperationThreshold = 5;\nlet AzureBuiltInRole = externaldata(Role:string,RoleDescription:string,ID:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/AzureBuiltInRole.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet createRoleAssignmentActivity = AzureActivity\n| where OperationNameValue =~ \"microsoft.authorization/roleassignments/write\";\nlet RoleAssignedActivity = createRoleAssignmentActivity \n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| summarize count() by CallerIpAddress, Caller, bin(TimeGenerated, 1d)\n| where count_ >= alertOperationThreshold\n// Returns all the records from the right side that don't have matches from the left.\n| join kind = rightanti ( \ncreateRoleAssignmentActivity\n| where TimeGenerated > ago(endtime)\n| extend parsed_property = tostring(parse_json(Properties).requestbody)\n| extend PrincipalId = case(parsed_property has_cs 'PrincipalId',parse_json(parsed_property).Properties.PrincipalId, parsed_property has_cs 'principalId',parse_json(parsed_property).properties.principalId,\"\")\n| extend PrincipalType = case(parsed_property has_cs 'PrincipalType',parse_json(parsed_property).Properties.PrincipalType, parsed_property has_cs 'principalType',parse_json(parsed_property).properties.principalType, \"\")\n| extend Scope = case(parsed_property has_cs 'Scope',parse_json(parsed_property).Properties.Scope, parsed_property has_cs 'scope',parse_json(parsed_property).properties.scope,\"\")\n| extend RoleAddedDetails = case(parsed_property has_cs 'RoleDefinitionId',parse_json(parsed_property).Properties.RoleDefinitionId,parsed_property has_cs 'roleDefinitionId',parse_json(parsed_property).properties.roleDefinitionId,\"\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = make_set(TimeGenerated), ActivityStatusValue = make_set(ActivityStatusValue), CorrelationId = make_set(CorrelationId), ActivityCountByCallerIPAddress = count()  \nby ResourceId, CallerIpAddress, Caller, OperationNameValue, Resource, ResourceGroup, PrincipalId, PrincipalType, Scope, RoleAddedDetails\n) on CallerIpAddress, Caller\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress;\nlet RoleAssignedActivitywithRoleDetails = RoleAssignedActivity\n| extend RoleAssignedID = tostring(split(RoleAddedDetails, \"/\")[-1])\n// Returns all matching records from left and right sides.\n| join kind = inner (AzureBuiltInRole \n) on $left.RoleAssignedID == $right.ID;\nlet CallerIPCountSummary = RoleAssignedActivitywithRoleDetails | summarize AssignmentCountbyCaller = count() by Caller, CallerIpAddress;\nlet RoleAssignedActivityWithCount = RoleAssignedActivitywithRoleDetails | join kind = inner (CallerIPCountSummary | project Caller, AssignmentCountbyCaller, CallerIpAddress) on Caller, CallerIpAddress;\nRoleAssignedActivityWithCount\n| summarize arg_max(StartTimeUtc, *) by PrincipalId, RoleAssignedID\n// \tReturns all the records from the left side and only matching records from the right side.\n| join kind = leftouter( IdentityInfo\n| summarize arg_max(TimeGenerated, *) by AccountObjectId\n) on $left.PrincipalId == $right.AccountObjectId\n// Check if assignment count is greater than the threshold.\n| where AssignmentCountbyCaller >= alertOperationThreshold\n| project ActivityTimeStamp, OperationNameValue, Caller, CallerIpAddress, PrincipalId, RoleAssignedID, RoleAddedDetails, Role, RoleDescription, AccountUPN, AccountCreationTime, GroupMembership, UserType, ActivityStatusValue, ResourceGroup, PrincipalType, Scope, CorrelationId, timestamp, AccountCustomEntity, IPCustomEntity, AssignmentCountbyCaller\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when admins password was reset.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where DvcAction =~ \"admin_reset_password\"\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule generates an incident when there are more than 5 failed login attemts for a given host in the last 15 minutes. Topic: Veritas NetBackup"}, {"role": "assistant", "content": "NetBackupAlerts_CL\r\n| where operation_s contains \"LOGIN\" and Message contains \"authentication failed\" \r\n| extend userName =  split(userName_s, \"@\")[0]\r\n| extend host = split(userName_s, \"@\")[1] \r\n| summarize Total=count() by tostring(host)\r\n| where Total >= 5"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search sources with high number of Failed Authentication events.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "let threshold = 10;\nCiscoISEEvent\n| where TimeGenerated > ago(24h)\n| where EventId in ('5400', '5401')\n| summarize TotalEvents = count() by SrcIpAddr\n| where TotalEvents > threshold\n| project SrcIpAddr, TotalEvents"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule detects any executable file creation in uncommon locations like temproray folders. This could be an indication of a persistence or defese evasion attempt by an adversary.\n Topic: Malware Protection Essentials"}, {"role": "assistant", "content": "// List of file extensions to monitor\nlet executableExtensions = dynamic(['exe', 'bat', 'cmd', 'vbs', 'ps1', 'psm1', 'wsf']);\n// List of file locations to monitor\nlet fileLocations = dynamic([\n    '\\\\Windows\\\\System32\\\\',\n    '\\\\Windows\\\\Temp\\\\',\n    '\\\\AppData\\\\Local\\\\Temp\\\\',\n    '\\\\Recycle Bin\\\\'\n    ]);\n_ASim_FileEvent\n| where EventType == 'FileCreated'\n| extend FileExtension =  tostring(split(FileName, '.')[1])\n| where FileExtension in~ (executableExtensions) and FilePath has_any (fileLocations)\n| project TimeGenerated, DvcHostname, DvcDomain, User, ActingProcessId, ActingProcessName, CommandLine, FileName, FilePath, Hash, HashType\n| extend Username = iff(User contains '@', tostring(split(User, '@')[0]), User)\n| extend UPNSuffix = iff(User contains '@', tostring(split(User, '@')[1]), '')\n| extend Username = iff(User contains '\\\\', tostring(split(User, '\\\\')[1]), Username)\n| extend NTDomain = iff(User contains '\\\\', tostring(split(User, '\\\\')[0]), '')\n| extend Host_0_HostName = DvcHostname\n| extend Host_0_DnsDomain = DvcDomain\n| extend Host_0_NTDomain = NTDomain\n| extend Account_0_Name = Username\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend File_0_Name = FileName\n| extend File_0_Directory = FilePath\n| extend FileHash_0_Algorithm = HashType\n| extend FileHash_0_Value = Hash\n| extend Process_0_ProcessId = ActingProcessId\n| extend Process_0_CommandLine = CommandLine\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Cobalt Strike is a famous Pen Test tool that is used by pen testers as well as attackers alike To compromise an environment. \n The query tries to detect suspicious DNS queries known from Cobalt Strike beacons.\n Topic: Attacker Tools Threat Protection Essentials"}, {"role": "assistant", "content": "let badNames = dynamic([\"aaa.stage.\", \"post.1\"]);\n(union isfuzzy=true\n(DnsEvents \n| where Name has_any (badNames)\n| extend Domain = Name, SourceIp = ClientIP, RemoteIP = todynamic(IPAddresses)\n| mvexpand RemoteIP\n| extend RemoteIP = tostring(RemoteIP)),\n(VMConnection\n| where isnotempty(RemoteDnsCanonicalNames) \n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| where DNSName has_any (badNames)\n| extend Domain = DNSName, RemoteIP = RemoteIp\n))\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by Domain, SourceIp, RemoteIP, Computer\n| extend timestamp = StartTimeUtc, HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n| extend IP_0_Address = RemoteIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query dynamically identifies Exchange servers and then looks for instances where the IIS worker process initiates a call out to a remote URL using either cmd.exe or powershell.exe.\nThis behaviour was described as post-compromise behaviour following exploitation of CVE-2022-41040 and CVE-2022-41082, this pattern of activity was use to download additional tools to the server. This suspicious activity is generic.\n Topic: Detections"}, {"role": "assistant", "content": "let suspiciousCmdLineKeywords = dynamic([\"http://\", \"https://\"]);\n// Identify exchange servers based on known paths\n// Summarize these to get a list of exchange server hostnames\nlet exchangeServers = W3CIISLog\n| where csUriStem has_any(\"/owa/\",\"/ews/\",\"/ecp/\",\"/autodiscover/\")\n// Only where successful, rule out failed scanning\n| where scStatus startswith \"2\"\n| summarize by Computer;\nDeviceProcessEvents\n| where DeviceName in~ (exchangeServers)\n// Where the IIS worker process initiated CMD or PowerShell\n| where InitiatingProcessParentFileName == \"w3wp.exe\"\n| where InitiatingProcessFileName has_any(\"cmd.exe\", \"powershell.exe\")\n// Where CMD or PowerShell command line included parameters associated with CVE-2022-41040/CVE-2022-41082 exploitation\n| where ProcessCommandLine has_any(suspiciousCmdLineKeywords)\n| project TimeGenerated, DeviceId, DeviceName, InitiatingProcessFileName, ProcessCommandLine, AccountDomain = InitiatingProcessAccountDomain, AccountName = InitiatingProcessAccountName\n| extend Account = strcat(AccountDomain, \"\\\\\", AccountName)\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows users with newly added owner permissions.\n Topic: Box"}, {"role": "assistant", "content": "BoxEvents\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'COLLABORATION_ROLE_CHANGE'\n| where AdditionalDetailsRole =~ 'Owner'\n| project TimeGenerated, AccessibleByLogin, FileDirectory\n| extend AccountCustomEntity = AccessibleByLogin\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows all users tagged as terminated employees in the Terminated Employees watchlist that had activities after their termination date.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "//Consider creating the watchlist named \"TerminatedEmployees\" and \"HighValueAssets\" having column \"User Principal Name\" and \"Asset Name\" with details of terminated employees\n//If you already have watchlist with different name then consider modifying the query\n_GetWatchlist('HighValueAssets')\n| join kind=innerunique ( BehaviorAnalytics \n        | where ActionType has \"ResourceAccess\") \n        on $left.['Asset Name'] == $right.DestinationDevice\n| join kind=innerunique _GetWatchlist('TerminatedEmployees')\n  on $left.UserPrincipalName == $right.['User Principal Name']\n| extend AadUserId = UsersInsights.AccountObjectID\n| extend Account_0_AadUserId = AadUserId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates Incidents for Exploit events sourced from the Contrast Protect agent.\n Topic: Contrast Protect"}, {"role": "assistant", "content": "let extract_data=(a:string, k:string) {\n  parse_urlquery(replace(@';', @'&', a))[\"Query Parameters\"][k]\n};\n\nCommonSecurityLog \n| where DeviceVendor == \"Contrast Security\"\n| where AdditionalExtensions contains \"EXPLOITED\"\n| extend DeviceProduct\n| extend SourceIP\n| extend DeviceVersion\n| extend Activity\n| extend ApplicationProtocol\n| extend RequestURL\n| extend RequestMethod\n| extend Rule = extract_data(AdditionalExtensions, 'pri')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The Exchange Powershell Snapin was loaded on a host, this allows for a Exchange server management via PowerShell. Whilst this is a legitimate administrative tool it is abused by attackers to performs actions on a compromised Exchange server. Hunt for unusual activity related to this Snapin including it being added on new hosts or by new accounts.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID == 4688\n| where Process has_any (\"cmd.exe\", \"powershell.exe\", \"PowerShell_ISE.exe\")\n| where isnotempty(CommandLine)  \n| where CommandLine has \"Add-PSSnapin Microsoft.Exchange.Management.Powershell.Snapin\"\n| summarize FirstSeen = min(TimeGenerated), LastSeen = max(TimeGenerated) by Computer, Account, CommandLine\n| extend NTDomain = tostring(split(Account,'\\\\',0)[0]), Name = tostring(split(Account,'\\\\',1)[0])  \n| extend timestamp = FirstSeen\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies files uploaded to SharePoint via a Teams chat and\nsummarizes users and IP addresses that have accessed these files. This allows for \nidentification of anomalous file sharing patterns.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "// Define the query for EnrichedMicrosoft365AuditLogs\nlet enrichedLogs = EnrichedMicrosoft365AuditLogs\n  | where RecordType == \"SharePointFileOperation\"\n  | where Operation == \"FileUploaded\"\n  | where UserId != \"app@sharepoint\"\n  | where ObjectId has \"Microsoft Teams Chat Files\"\n  | extend SourceFileName = tostring(parse_json(tostring(AdditionalProperties)).SourceFileName)\n  | join kind=leftouter (\n      EnrichedMicrosoft365AuditLogs\n      | where RecordType == \"SharePointFileOperation\"\n      | where Operation in (\"FileDownloaded\", \"FileAccessed\")\n      | where UserId != \"app@sharepoint\"\n      | where ObjectId has \"Microsoft Teams Chat Files\"\n      | extend UserId1 = UserId, ClientIp1 = ClientIp\n  ) on ObjectId\n  | extend userBag = bag_pack(\"UserId1\", UserId1, \"ClientIp1\", ClientIp1)\n  | summarize AccessedBy = make_bag(userBag), make_set(UserId1, 10000) by bin(TimeGenerated, 1h), UserId, ObjectId, SourceFileName\n  | extend NumberOfUsersAccessed = array_length(bag_keys(AccessedBy))\n  | project timestamp = TimeGenerated, UserId, FileLocation = ObjectId, FileName = SourceFileName, AccessedBy, NumberOfUsersAccessed\n  | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n  | extend Account_0_Name = AccountName\n  | extend Account_0_UPNSuffix = AccountUPNSuffix;\n// Define the query for OfficeActivity\nlet officeLogs = OfficeActivity\n  | where RecordType == \"SharePointFileOperation\"\n  | where Operation == \"FileUploaded\"\n  | where UserId != \"app@sharepoint\"\n  | where SourceRelativeUrl has \"Microsoft Teams Chat Files\"\n  | join kind=leftouter (\n      OfficeActivity\n      | where RecordType == \"SharePointFileOperation\"\n      | where Operation in (\"FileDownloaded\", \"FileAccessed\")\n      | where UserId != \"app@sharepoint\"\n      | where SourceRelativeUrl has \"Microsoft Teams Chat Files\"\n  ) on OfficeObjectId\n  | extend userBag = bag_pack(UserId1, ClientIP1)\n  | summarize AccessedBy = make_bag(userBag, 10000), make_set(UserId1, 10000) by TimeGenerated, UserId, OfficeObjectId, SourceFileName\n  | extend NumberUsers = array_length(bag_keys(AccessedBy))\n  | project timestamp = TimeGenerated, UserId, FileLocation = OfficeObjectId, FileName = SourceFileName, AccessedBy, NumberOfUsersAccessed = NumberUsers\n  | extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n  | extend Account_0_Name = AccountName\n  | extend Account_0_UPNSuffix = AccountUPNSuffix;\n// Union both results\nenrichedLogs\n| union officeLogs\n| order by timestamp desc;\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when user collaboration role is changed to owner.\n Topic: Box"}, {"role": "assistant", "content": "let lbperiod = 14d;\nlet lbtime = 1h;\nBoxEvents\n| where TimeGenerated between (ago(lbperiod) .. ago(lbtime))\n| where EventType =~ 'COLLABORATION_INVITE'\n| where AdditionalDetailsRole !~ 'Owner'\n| summarize min(TimeGenerated) by AccessibleByName, FileDirectory, AdditionalDetailsRole\n| project AccessibleByName, FileDirectory, InitialRole = AdditionalDetailsRole\n|join (BoxEvents\n          | where EventType =~ 'COLLABORATION_ROLE_CHANGE'\n          | summarize max(TimeGenerated) by AccessibleByName, FileDirectory, AdditionalDetailsRole\n          | project AccessibleByName, FileDirectory, NewRole = AdditionalDetailsRole\n          ) on FileDirectory, AccessibleByName\n| where NewRole =~ 'Owner'\n| project AccessibleByName, FileDirectory\n| extend AccountCustomEntity = AccessibleByName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects process injections using CreateRemoteThread, QueueUserAPC or SetThread context APIs, originating from an Office process (only Word/Excel/PowerPoint)that might contains macros. Performing process injection from a macro is a common technique by attackers to escape out of the Office process into something longer running. \n Topic: FalconFriday"}, {"role": "assistant", "content": "DeviceEvents \n| where ActionType in (\"CreateRemoteThreadApiCall\", \"QueueUserApcRemoteApiCall\", \"SetThreadContextRemoteApiCall\")\n| where InitiatingProcessFileName in~ (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\")\n| where InitiatingProcessCommandLine !contains \"/dde\"\n| where not(InitiatingProcessCommandLine has_any (\".docx\", \"dotx\",\".xlsx\", \".xltx\", \".pptx\")) // These files can't contain macros.\n// Enable the line below if the results are too noisy.\n//| where InitiatingProcessCommandLine has_any (\".doc\", \".wbk\", \".docm\", \".dot\", \".dotm\" \".xls\", \".xlsm\", \".xltm\", \".xla\",\".xll\", \".xlam\", \".ppt\", \".pptm\", \".pot\", \".potm\", \".ppsm\", \".sldm\") \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects permission changes generated by the CTERA Edge Filer. Topic: CTERA"}, {"role": "assistant", "content": "Syslog\n| where ProcessName == 'gw-audit'\n| extend\n    TenantName = extract(\"\\\"vportal\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage),\n    UserName = extract(\"user=([^|]*)\", 1, SyslogMessage),\n    Operation = extract(\"op=([^|]*)\", 1, SyslogMessage),\n    EdgeFiler = extract(\"\\\"client\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage),\n    RootPath = extract(\"rootPath=([^|]*)\", 1, SyslogMessage),\n    Share = extract(\"share=([^|]*)\", 1, SyslogMessage),\n    LocalPath = extract(\"path=([^|]*)\", 1, SyslogMessage),\n    Timestamp = todatetime(extract(\"\\\"@timestamp\\\":\\\"([^\\\"]*)\\\"\", 1, SyslogMessage))\n| where Operation in ('ACLAdded', 'ACLDeleted', 'ACLProtectionAdded','chown', 'setsd', 'ACLProtectionDeleted', 'ACEChanged', 'setdacl')\n| summarize Count = count() by UserName, bin(Timestamp, 2m)\n| where Count > 100\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies a possible port scan, in which a single source tries to access a large number of different ports is a short time frame. This may indicate that a [port scanner](https://en.wikipedia.org/wiki/Port_scanner) is trying to identify open ports in order to penetrate a system.\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM NetworkSession schema\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "let PortScanThreshold = 50;\n_Im_NetworkSession\n| where ipv4_is_private(SrcIpAddr) == False\n| where SrcIpAddr !in (\"127.0.0.1\", \"::1\")\n| summarize AttemptedPortsCount=dcount(DstPortNumber), AttemptedPorts=make_set(DstPortNumber, 100), ReportedBy=make_set(strcat(EventVendor, \"/\", EventProduct), 20) by SrcIpAddr, bin(TimeGenerated, 5m)\n| where AttemptedPortsCount > PortScanThreshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This queries GitLab Audit Logs for access tokens. Attacker can exfiltrate data from you GitLab repository after gaining access to it by generating or hijacking access tokens. \nThis hunting queries allows you to track the personal access tokens creation for each of your repositories. \nThe visualization allow you to quickly identify anomalies/excessive creation, to further investigate repo access & permissions.\n Topic: GitLab"}, {"role": "assistant", "content": "// l_min_tokens_created - minimum tokens created per repository per user per day to consider\nlet l_min_tokens_created = 0;\nlet interval = 1d;\nGitLabAudit\n| where TargetType == \"PersonalAccessToken\"\n| project Severity, TimeGenerated = bin(todatetime(EventTime),1d), AuthorName, IPAddress, Repository = EntityName, Action, TargetType\n| summarize total = count() by Repository, TimeGenerated, AuthorName\n| where total >= l_min_tokens_created\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected creation of new SSM policy and afterwards used one of the attach policy operations (AttachUserPolicy/AttachRolePolicy/AttachGroupPolicy). This might indicate a privilege escalation technique that attackers could use.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\n  let createPolicy =  dynamic([\"CreatePolicy\", \"CreatePolicyVersion\"]);\nlet timeframe = 1d;\nlet lookback = 14d;\n// Creating Master table with all the events to use with materialize for better performance\nlet EventInfo = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName in (EventNameList) or EventName in (createPolicy)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\");\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\nlet FullAdminPolicyEvents =  materialize(  EventInfo\n| where TimeGenerated >= ago(lookback)\n| where EventName in (createPolicy)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and (Action contains \"ssm:*\" or Action contains \"ssm:Create*\" or Action contains \"ssm:CreateAssociation\") and Resource == \"*\" and Condition == \"\"\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn, RecipientAccountId, AccountName, AccountUPNSuffix\n| project-rename StartTime = TimeGenerated  );\nlet PolicyAttach = materialize(  EventInfo\n| where TimeGenerated >= ago(timeframe)\n| where EventName in (EventNameList) and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\"/\")[1])\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName,   UserIdentityType , UserIdentityArn, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, PolicyName\n| extend AttachEvent = pack(\"StartTime\", StartTime, \"EndTime\", EndTime, \"EventName\", EventName, \"UserIdentityType\",   UserIdentityType, \"AccountName\", AccountName, \"AccountUPNSuffix\", AccountUPNSuffix, \"RecipientAccountId\", RecipientAccountId, \"UserIdentityArn\", UserIdentityArn, \"SourceIpAddress\", SourceIpAddress)\n| project EventSource, PolicyName, AttachEvent, RecipientAccountId, AccountName, AccountUPNSuffix, AttachEventCount\n);\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\nFullAdminPolicyEvents\n| join kind=leftouter\n(\n    PolicyAttach\n)\non PolicyName\n| project-away PolicyName1\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies activities in a predefined Honeypot Dataverse instance. Alerts when either sign-in to the Honeypot is detected or when monitored Dataverse tables in the Honeypot are accessed.\n\nNote: Requires a dedicated Honeypot Dataverse instance in Power Platform with auditing enabled.\n Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let honeypot_dataverse_instances = dynamic([\"https://myinstance.crm.dynamics.com/\"]);\nlet honeypot_authorized_users = dynamic([\"scanner@mydomain.com\"]);\nlet monitored_dataverse_entities = dynamic([\"contact\", \"account\", \"opportunity\", \"lead\", \"competitor\"]);\nlet query_frequency = 1h;\nDataverseActivity\n| where TimeGenerated >= ago(query_frequency)\n| where InstanceUrl in (honeypot_dataverse_instances)\n| where UserId !in (honeypot_authorized_users)\n| where UserId !endswith \"@onmicrosoft.com\"\n    and UserId != \"Unknown\"\n    and isnotempty(ClientIp)\n| where Message in (\"UserSignIn\") or EntityName in (monitored_dataverse_entities)\n| summarize\n    TimeStart = min(TimeGenerated),\n    TimeEnd = max(TimeGenerated),\n    Entities = make_set(EntityName, 10),\n    Messages = make_set(Message, 10)\n    by UserId, ClientIp, InstanceUrl\n| extend Severity = iif(array_length(set_difference(Messages, dynamic([\"UserSignIn\"]))) > 0, \"Medium\", \"Low\")\n| extend CloudAppId = int(32780)\n| extend AccountName = tostring(split(UserId, '@')[0])\n| extend UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    TimeStart,\n    TimeEnd,\n    UserId,\n    ClientIp,\n    InstanceUrl,\n    Messages,\n    Entities,\n    Severity,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows elevation requests.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where TimeGenerated > ago(24h)\n| where EventSubType =~ 'ElevationRequest'\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for infected files received via email.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where TimeGenerated > ago(24h)\n| where EventCategoryType in~ ('exchange', 'gmail', 'exchangeserver')\n| where isnotempty(SecurityRiskName)\n| where EventOriginalResultDetails =~ 'Quarantine'\n| project DetectionTime, DstUserName, MailMessageFileName, SecurityRiskName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Image Scanning for ECR was disabled, which could lead to missing vulnerable container images in your environment. Attackers could disable the Image Scanning for defense evasion purposes.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"PutImageScanningConfiguration\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend scanOnPush = parse_json(tostring((parse_json(RequestParameters).imageScanningConfiguration))).scanOnPush\n| where scanOnPush == false\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| distinct TimeGenerated, EventName, SourceIpAddress, UserIdentityArn, UserIdentityUserName, RecipientAccountId, AccountName, AccountUPNSuffix\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when permissions have changed within a privileged vault. Once this analytics rule is triggered it will group all related future alerts for upto an hour when all related entities are the same.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "let watchlist =\n    _GetWatchlist(\"PV1PW\")\n    | project SearchKey\n;\n// Insert the vault UUIDs below when using the dynamic vaults list within the analytics rule itself\nlet vaults = dynamic([\"\"]);\nOnePasswordEventLogs_CL\n| where log_source == \"auditevents\"\n| where\n    (action has_any(\"grant\", \"revoke\", \"update\") and object_type == \"uva\") or\n    (action has_any(\"grant\", \"revoke\", \"update\") and object_type == \"gva\")\n// Enable the line below when using the \"Privileged Vaults - 1PW\" watchlist\n| where object_uuid in (watchlist)\n// Enable the line below when using the dynamic vaults list within the analytics rule itself\n// | where object_uuid in (vaults)\n| extend\n    TargetUsername = case(isnotempty(aux_details), aux_details.email, \"\")\n    , TargetGroupUUID = case(isempty(aux_details), aux_uuid, \"\")\n    , ActorUsername = actor_details.email\n    , SrcIpAddr = session.ip"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query tracks sign-ins via Nord VPN using a daily-updated API. Investigate unfamiliar sign-ins from VPNs unless common in your organization. It now includes UEBA logs IdentityInfo and BehaviorAnalytics for context.\n Topic: Cloud Identity Threat Protection Essentials"}, {"role": "assistant", "content": "let nord_vpn_feed = (externaldata(id:int,ip_address: string,search_keywords: dynamic,categories:dynamic,name: string,domain:string,price:int,flag:string,country:string,location:dynamic ,load: int ,features:dynamic)\n  [@\"https://raw.githubusercontent.com/microsoft/mstic/master/nordvpn-servers.csv\"] with (format=\"csv\", ignoreFirstRecord=True));\nSigninLogs \n  | where TimeGenerated > ago(4h) \n  | where ResultType == 0 \n  | summarize TotalEvents = count(), AppList = make_set(AppDisplayName),  StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by IPAddress, UserPrincipalName, ClientAppUsed, ConditionalAccessStatus, AuthenticationRequirement, RiskDetail \n  | join kind= inner nord_vpn_feed on $left.IPAddress == $right.ip_address\n  | project StartTime , EndTime, IPAddress, UserPrincipalName, AppList, ClientAppUsed, ConditionalAccessStatus, AuthenticationRequirement, RiskDetail, categories, domain, country\n  | extend timestamp = StartTime, UserPrincipalName = tolower(UserPrincipalName), AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n  | join kind=leftouter (\n      IdentityInfo\n      | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n      | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n      | summarize\n          Tags = make_set(Tags, 1000),\n          GroupMembership = make_set(GroupMembership, 1000),\n          AssignedRoles = make_set(AssignedRoles, 1000),\n          UserType = make_set(UserType, 1000),\n          UserAccountControl = make_set(UserType, 1000)\n      by AccountUPN\n      | extend UserPrincipalName=tolower(AccountUPN)\n  ) on UserPrincipalName\n  | join kind=leftouter (\n      BehaviorAnalytics\n      | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n      | where isnotempty(SourceIPAddress)\n      | where ActivityInsights[\"ISPUncommonlyUsedInTenant\"] == True\n      | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress\n      | project-rename IPAddress = SourceIPAddress\n      | summarize\n        UsersInsights = make_set(UsersInsights, 1000),\n        DevicesInsights = make_set(DevicesInsights, 1000),\n        IPInvestigationPriority = sum(InvestigationPriority)\n      by IPAddress\n  ) on IPAddress\n  | extend UEBARiskScore = IPInvestigationPriority\n  | sort by UEBARiskScore desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for all the vulerabilities that RidgeBot identified\n Topic: RidgeSecurity"}, {"role": "assistant", "content": "CommonSecurityLog\n| where DeviceVendor == \"RidgeSecurity\"\n| where DeviceEventClassID startswith \"40\"\n| order by LogSeverity\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies changes to user accounts where the network alias was modified to a new value. Shortly afterwards, the updated alias is used to update a bank account number. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_frequency = 15m;\nFinanceOperationsActivity_CL\n| where LogType == \"Update\" and TableName == \"UserInfo\"\n| extend UserId = tostring(parse_json(tostring(FormattedData.[\"03::id\"])).NewData)\n| extend NetworkAlias = parse_json(tostring(FormattedData.networkAlias))\n| extend\n    CurrentAlias = tostring(NetworkAlias.NewData),\n    PreviousAlias = tostring(NetworkAlias.OldData)\n| where CurrentAlias != PreviousAlias\n| extend\n    AliasUpdated = LogCreatedDateTime,\n    AliasChangedBy = Username\n| join kind=inner(FinanceOperationsActivity_CL\n    | where TimeGenerated >= ago (query_frequency)\n    | where LogType == \"Update\" and TableName == \"BankAccountTable\"\n    | extend AccountId = tostring(parse_json(tostring(FormattedData.AccountID)).NewData)\n    | extend AccountNum = parse_json(tostring(FormattedData.AccountNum))\n    | extend\n        CurrentAccountNum = tostring(AccountNum.NewData),\n        OldAccountNum = tostring(AccountNum.OldData)\n    | where CurrentAccountNum != OldAccountNum\n    | extend BankUpdated = LogCreatedDateTime)\n    on $left.UserId == $right.Username\n| where BankUpdated > AliasUpdated\n| extend\n    FinOpsAppId = 32780,\n    AccountName = tostring(split(CurrentAlias, \"@\")[0]),\n    UPNSuffix = tostring(split(CurrentAlias, \"@\")[1])\n| project\n    AliasUpdated,\n    AliasChangedBy,\n    Username,\n    AccountId,\n    CurrentAccountNum,\n    OldAccountNum,\n    CurrentAlias,\n    PreviousAlias,\n    FinOpsAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies evidence of brute force activity against a user based on multiple authentication failures and at least one successful authentication within a given time window. This query limits IPAddresses to 100 and may not potentially cover all IPAddresses.\nThe default failure threshold is 10, success threshold is 1, and the default time window is 20 minutes.\n Topic: Salesforce Service Cloud"}, {"role": "assistant", "content": "let failureCountThreshold = 10;\nlet successCountThreshold = 1;\nlet Failures =\nSalesforceServiceCloud\n| where EventType == \"Login\" and LoginStatus != \"LOGIN_NO_ERROR\"\n| summarize\n      FailureStartTime = min(TimeGenerated),\n      FailureEndTime = max(TimeGenerated),\n      IpAddresses = make_set (ClientIp, 100),\n      FailureCount = count() by User, UserId, UserType;\n  SalesforceServiceCloud\n  | where EventType == \"Login\" and LoginStatus == \"LOGIN_NO_ERROR\"\n  | summarize\n          SuccessStartTime = min(TimeGenerated),\n          SuccessEndTime = max(TimeGenerated),\n          IpAddresses = make_set (ClientIp, 100),\n          SuccessCount = count() by User, UserId, UserType\n  | join kind=leftouter Failures on UserId\n  | where FailureCount >= failureCountThreshold and SuccessCount >= successCountThreshold\n  | where FailureEndTime < SuccessStartTime\n  | project User, EventStartTime = FailureStartTime, EventEndTime = SuccessEndTime, IpAddresses\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for failed attempts to log in from more than 15 various users within a 5 minute timeframe from the same source. This is a potential indication of a password spray attack\n To use this analytics rule, make sure you have deployed the [ASIM normalization parsers](https://aka.ms/ASimAuthentication)\n Topic: Detections"}, {"role": "assistant", "content": "let FailureThreshold = 15;\nimAuthentication\n| where EventType== 'Logon' and  EventResult== 'Failure'\n// reason: creds \n| where EventResultDetails in ('No such user or password', 'Incorrect password')\n| summarize UserCount=dcount(TargetUserId), Vendors=make_set(EventVendor), Products=make_set(EventVendor)\n  , Users = make_set(TargetUserId,100) \n    by SrcDvcIpAddr, SrcGeoCountry, bin(TimeGenerated, 5m)\n| where UserCount > FailureThreshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects suspicious behavior that is generally indicative of malware.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where EventOriginalType has 'Suspicious Activity' or EventType has 'Suspicious Activity'\n| project TimeGenerated, DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies Active Directory computer objects modifications that allow an adversary to abuse the Resource-based constrained delegation. \nThis query checks for event id 5136 that the Object Class field is \"computer\" and the LDAP Display Name is \"msDS-AllowedToActOnBehalfOfOtherIdentity\" which is an indicator of Resource-based constrained delegation.\nRef: https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html\n Topic: Detections"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID == 5136 \n| parse EventData with * 'ObjectClass\">' ObjectClass \"<\" *\n| parse EventData with * 'AttributeLDAPDisplayName\">' AttributeLDAPDisplayName \"<\" *\n| where ObjectClass == \"computer\" and AttributeLDAPDisplayName == \"msDS-AllowedToActOnBehalfOfOtherIdentity\"\n| parse EventData with * 'ObjectDN\">' ObjectDN \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by Computer, SubjectAccount, SubjectUserName, SubjectDomainName, SubjectUserSid, SubjectLogonId, ObjectDN, AttributeLDAPDisplayName\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "In order for an attacker to be able to conduct many potential attacks against Azure DevOps they will need to gain elevated permissions. \nThis detection looks for users being granted key administrative permissions. If the principal of least privilege is applied, the number of users granted these permissions should be small. Note that permissions can also be granted via Microsoft Entra ID Protection groups and monitoring of these should also be conducted.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where OperationName =~ \"Group.UpdateGroupMembership.Add\"\n| where Details has_any (\"Project Administrators\", \"Project Collection Administrators\", \"Project Collection Service Accounts\", \"Build Administrator\")\n| project-reorder TimeGenerated, Details, ActorUPN, IpAddress, UserAgent, AuthenticationMechanism, ScopeDisplayName\n| extend timekey = bin(TimeGenerated, 1h)\n| extend ActorUserId = tostring(Data.MemberId)\n| project timekey, ActorUserId, AddingUser=ActorUPN, TimeAdded=TimeGenerated, PermissionGrantDetails = Details\n// Get details of operations conducted by user soon after elevation of permissions\n| join (AzureDevOpsAuditing\n| extend ActorUserId = tostring(Data.MemberId)\n| extend timekey = bin(TimeGenerated, 1h)) on timekey, ActorUserId\n| summarize ActionsWhenAdded = make_set(OperationName) by ActorUPN, AddingUser, TimeAdded, PermissionGrantDetails, IpAddress, UserAgent\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n| extend AddingUserAccountName = tostring(split(AddingUser, \"@\")[0]), AddingUserAccountUPNSuffix = tostring(split(AddingUser, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a user or application modifies the federation settings on the domain or Update domain authentication from Managed to Federated.\nFor example, this alert will trigger when a new Active Directory Federated Service (ADFS) TrustedRealm object, such as a signing certificate, is added to the domain.\nModification to domain federation settings should be rare. Confirm the added or modified target domain/URL is legitimate administrator behavior.\nTo understand why an authorized user may update settings for a federated domain in Office 365, Azure, or Intune, see: https://docs.microsoft.com/office365/troubleshoot/active-directory/update-federated-domain-office-365.\nFor details on security realms that accept security tokens, see the ADFS Proxy Protocol (MS-ADFSPP) specification: https://docs.microsoft.com/openspecs/windows_protocols/ms-adfspp/e7b9ea73-1980-4318-96a6-da559486664b.\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where OperationName =~ \"Set federation settings on domain\" or OperationName =~ \"Set domain authentication\"\n//| where Result =~ \"success\"   // commenting out, as it may be interesting to capture failed attempts\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-apply Property = modifiedProperties on \n  (\n      where Property.displayName =~ \"LiveType\"\n      | extend targetDisplayName = tostring(Property.displayName),\n               NewDomainValue = tostring(Property.newValue)\n  )\n| extend Federated = iif(OperationName =~ \"Set domain authentication\", iif(NewDomainValue has \"Federated\", True, False), True)\n| where Federated == True\n| mv-expand AdditionalDetails\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend UserAgent = tostring(AdditionalDetail.value)\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| project-reorder TimeGenerated, OperationName, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, AADOperationType, targetDisplayName, Result, UserAgent, CorrelationId, TenantId, AADTenantId\n| extend Name = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for bruteforce Password Guessing attacks.\n Topic: TenableAD"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.kql parser into the workspace\n// Retrieve the parser here: https://raw.githubusercontent.com/tenable/Azure-Sentinel/Tenable.ad-connector/Solutions/TenableAD/Parsers/afad_parser.kql\n// Then, create the Kusto Function with alias afad_parser\nafad_parser\n  | where MessageType == 2 and Codename == \"Password Guessing\"\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for DCShadow attacks.\n Topic: Tenable App"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.yaml parser into the workspace\n// Retrieve the parser here: https://aka.ms/sentinel-TenableApp-afad-parser\n// Then, create the Kusto Function with alias afad_parser\nafad_parser\n  | where MessageType == 2 and Codename == \"DCShadow\"\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The attacker sends a spearphishing email to a user. The email contains a link, which points to a website that eventually presents the user a download of an MS Office document. This document contains a malicious macro. The macro spawns a new child process providing initial access. This detection looks for suspicious parent-process chains starting with a browser which spawns an Office application which spawns something else.\n Topic: FalconFriday"}, {"role": "assistant", "content": "let browsers = dynamic([\"iexplore.exe\", \"chrome.exe\", \"firefox.exe\", \"msedge.exe\"]); // Customize this list for your environment.\nlet officeApps = dynamic([\"winword.exe\", \"excel.exe\", \"powerpnt.exe\"]); // Consider adding other Office applications such as Publisher, Visio and Access. \n// This is an allow-list of the most common child processes. This is a quick and dirty solution. Consider allow-listing the full process path instead of file name.\n// Also, make this list as short as possible. Remove anything from this list if it doesn't occur in your organization. \nlet allowList = dynamic([\"MSOSYNC.exe\", \"splwow64.exe\", \"csc.exe\", \"outlook.exe\", \"AcroRd32.exe\", \"Acrobat.exe\", \"explorer.exe\", \"DW20.exe\", \n\"Microsoft.Mashup.Container.Loader.exe\", \"Microsoft.Mashup.Container.NetFX40.exe\", \"WerFault.exe\", \"CLVIEW.exe\"]); \nDeviceProcessEvents\n| where InitiatingProcessParentFileName in~ (browsers) and InitiatingProcessFileName in~ (officeApps) and \nFileName !in~ (officeApps) and FileName !in~ (browsers) and FileName !in~ (allowList)\n| project-rename ProcessStart_Timestamp = Timestamp\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when multiple alerts received from same host.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where ActivityType == 3608\n| extend RuleName = extract(@'Custom Rule:\\s(.*?)\\sin Group', 1, EventOriginalMessage)\n| extend DstHostname = extract(@'detected on\\s(\\S+)\\.', 1, EventOriginalMessage)\n| summarize count() by DstHostname, bin(TimeGenerated, 15m)\n| where count_ > 1\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will help you discover any new admin account activity which was seen and were not seen historically.\nAny new accounts seen in the results can be validated and investigated for any suspicious activities.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet historicalActivity=\nOfficeActivity\n| where TimeGenerated between(lookback..starttime)\n| where RecordType==\"ExchangeAdmin\" and UserType in (\"Admin\",\"DcAdmin\")\n| summarize historicalCount=count() by UserId;\nlet recentActivity = OfficeActivity\n| where TimeGenerated between(starttime..endtime)\n| where UserType in (\"Admin\",\"DcAdmin\")\n| summarize recentCount=count() by UserId;\nrecentActivity | join kind = leftanti (\n   historicalActivity\n) on UserId\n| project UserId,recentCount\n| order by recentCount asc, UserId\n| join kind = rightsemi\n(OfficeActivity\n| where TimeGenerated between(starttime..endtime)\n| where RecordType == \"ExchangeAdmin\" | where UserType in (\"Admin\",\"DcAdmin\"))\non UserId\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), count() by RecordType, Operation, UserType, UserId, OriginatingServer, ResultStatus\n| extend AccountName = iff(UserId contains '@', tostring(split(UserId, '@')[0]), UserId)\n| extend AccountUPNSuffix = iff(UserId contains '@', tostring(split(UserId, '@')[1]), '')\n| extend AccountName = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[1]), AccountName)\n| extend AccountNTDomain = iff(UserId contains '\\\\', tostring(split(UserId, '\\\\')[0]), '')\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix\n| extend Account_0_NTDomain = AccountNTDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies authentication methods being changed for a privileged account. This could be an indication of an attacker adding an auth method to the account so they can have continued access.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#things-to-monitor-1\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let queryperiod = 14d;\nlet queryfrequency = 2h;\nlet security_info_actions = dynamic([\"User registered security info\", \"User changed default security info\", \"User deleted security info\", \"Admin updated security info\", \"User reviewed security info\", \"Admin deleted security info\", \"Admin registered security info\"]);\nlet VIPUsers = (\n    IdentityInfo\n    | where TimeGenerated > ago(queryperiod)\n    | mv-expand AssignedRoles\n    | where AssignedRoles contains 'Admin'\n    | summarize by AccountUPN);\nAuditLogs\n| where TimeGenerated > ago(queryfrequency)\n| where Category =~ \"UserManagement\"\n| where ActivityDisplayName in (security_info_actions)\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend TargetUserPrincipalName = tostring(TargetResource.userPrincipalName)\n  )\n| where TargetUserPrincipalName in~ (VIPUsers)\n// Uncomment the line below if you are experiencing high volumes of Target entities. If this is uncommented, the Target column will not be mapped to an entity.\n//| summarize Start=min(TimeGenerated), End=max(TimeGenerated), Actions = make_set(ResultReason, MaxSize=8), Targets=make_set(Target, MaxSize=256) by Initiator, IP, Result\n// Comment out this line below, if line above is used.\n| summarize Start=min(TimeGenerated), End=max(TimeGenerated), Actions = make_set(ResultReason, MaxSize=8) by InitiatingAppName, InitiatingAppServicePrincipalId, \nInitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIpAddress, TargetUserPrincipalName, Result\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1]), \nTargetName = iff(tostring(TargetUserPrincipalName) has \"[\", \"\", tostring(split(TargetUserPrincipalName,'@',0)[0])), TargetUPNSuffix = iff(tostring(TargetUserPrincipalName) has \"[\", \"\", tostring(split(TargetUserPrincipalName,'@',1)[0]))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "CMMC 2.0 Level 2 (Advanced) assessments have deviated from configured threshold baselines. This alert is triggered when CMMC2.0 policy compliance is assessed below 70% compliance in 7 days.\n Topic: CybersecurityMaturityModelCertification(CMMC)2.0"}, {"role": "assistant", "content": "SecurityRegulatoryCompliance\n| where ComplianceStandard == \"NIST-SP-800-171-R2\"\n| extend Level=iff(ComplianceControl in (\"3.1.1\",\"3.1.2\",\"3.1.20\",\"3.1.22\",\"3.4.1\",\"3.5.2\",\"3.5.2\",\"3.8.3\",\"3.13.1\",\"3.13.5\",\"3.14.1\",\"3.14.2\",\"3.14.4\",\"3.14.5\"), \"Level 1: Foundational\",\"Level 2: Advanced\")\n| where Level == \"Level 2: Advanced\"\n| summarize arg_max(TimeGenerated, *) by RecommendationName, AssessedResourceId, Level\n|summarize Failed=countif(State==\"Failed\"),Passed=countif(State==\"Passed\"),Total=countif(State==\"Passed\" or State == \"Failed\") by Level\n|extend PassedControlsPercentage = (Passed/todouble(Total))*100\n| where PassedControlsPercentage < 70 \n//Adjust Either Passed Thresholds within Organizational Needs\n| extend RemediationLink = strcat('https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/22')\n| project Level, Total, PassedControlsPercentage, Passed, Failed, RemediationLink, LastObserved=now()\n| extend URLCustomEntity = RemediationLink\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for logins with an expired access credential (for example an expired cookie). It then matches the IP address from which the expired credential access occurred with the IP addresses of successful logins.\nIf there are logins with expired credentials, but no successful logins from an IP, this might indicate an attacker has copied the authentication cookie and is re-using it on another machine.\n Topic: FalconFriday"}, {"role": "assistant", "content": "// Timeframe to search for failed logins.\nlet timeframe=1d;\n// Timeframe to look back for successful logins from the same user by IP.\nlet lookback=7d;\nlet SuspiciousSignings=(\n    SigninLogs\n    | where TimeGenerated >= ago(timeframe)\n    | where ResourceDisplayName contains \"Windows Azure Active Directory\"\n    // 50132 = SsoArtifactInvalidOrExpired - The session is not valid due to password expiration or recent password change.\n    // 50173 = FreshTokenNeeded - The provided grant has expired due to it being revoked, and a fresh auth token is needed. \n    // 70008 = ExpiredOrRevokedGrant - The refresh token has expired due to inactivity. The token was issued on XXX and was inactive for a certain period of time.\n    // 81010 = DesktopSsoAuthTokenInvalid - Seamless SSO failed because the user's Kerberos ticket has expired or is invalid.\n    | where ResultType in (50173, 50132, 70008, 81010)\n    | summarize FailedCountPerDay=count(),FailedUserAgents=make_set(UserAgent), FailedCountries=make_set(LocationDetails.countryOrRegion),FailedIps=make_set(IPAddress) by UserPrincipalName, Day=bin(TimeGenerated, 1d)\n    | where FailedCountPerDay >= 1\n);\nlet SuccessLogins=(\n    SigninLogs\n    | where TimeGenerated >= ago(lookback)\n    | where UserPrincipalName in ((SuspiciousSignings | project UserPrincipalName))\n    | where ResultType == 0\n    | summarize count() by UserPrincipalName, IPAddress\n);\nSuspiciousSignings\n| mv-expand FailedIp=FailedIps\n| extend FailedIp=tostring(FailedIp)\n| join kind=leftanti SuccessLogins on $left.FailedIp==$right.IPAddress, UserPrincipalName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare user agents\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "OracleWebLogicServerEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(HttpUserAgentOriginal)\n| summarize UAs = count() by tostring(HttpUserAgentOriginal)\n| top 20 by UAs asc\n| extend UrlCustomEntity = UAs\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for top sources by transferred data over period of time.\n Topic: Corelight"}, {"role": "assistant", "content": "corelight_http\n| where TimeGenerated > ago(24h)\n| where method in~ ('POST', 'PUT')\n| summarize data_sent = sum(tolong(request_body_len)) by id_orig_h\n| top 10 by data_sent\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of top destinations connections to which were blocked by firewall.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "UbiquitiAuditEvent\n| where TimeGenerated > ago(24h)\n| where EventCategory =~ 'firewall'\n| where DvcAction =~ 'Blocked'\n| summarize count() by DstIpAddr\n| top 10 by count_\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies changes in the protocol used for specific destination ports, comparing the current runtime with a learned baseline.\nThis can indicate potential protocol misuse or configuration changes.\nConfigurable Parameters:\n- Learning period: The time range to establish the baseline. Default is set to 7 days.\n- Run time: The time range for current analysis. Default is set to 1 day.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let LearningPeriod = 7d;\nlet RunTime = 1d;\nlet StartLearningPeriod = ago(LearningPeriod + RunTime);\nlet EndRunTime = ago(RunTime);\nlet LearningPortToProtocol = \n  NetworkAccessTraffic\n  | where TimeGenerated between (StartLearningPeriod .. EndRunTime)\n  | where isnotempty(DestinationPort)\n  | summarize LearningTimeCount = count() by LearningTimeDstPort = DestinationPort, LearningTimeProtocol = TransportProtocol, SourceIp, DestinationFqdn;\nlet AlertTimePortToProtocol = \n  NetworkAccessTraffic\n  | where TimeGenerated between (EndRunTime .. now())\n  | where isnotempty(DestinationPort)\n  | summarize AlertTimeCount = count() by AlertTimeDstPort = DestinationPort, AlertTimeProtocol = TransportProtocol, SourceIp, DestinationFqdn;\nAlertTimePortToProtocol\n  | join kind=leftouter (LearningPortToProtocol) on $left.AlertTimeDstPort == $right.LearningTimeDstPort and $left.SourceIp == $right.SourceIp and $left.DestinationFqdn == $right.DestinationFqdn\n  | where isnull(LearningTimeProtocol) or LearningTimeProtocol != AlertTimeProtocol\n  | project AlertTimeDstPort, AlertTimeProtocol, LearningTimeProtocol, SourceIp, DestinationFqdn\n  | extend IPCustomEntity = SourceIp, FqdnCustomEntity = DestinationFqdn\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies failed Business Application Studio access attempts over a predefined number of subaccounts. Topic: SAP BTP"}, {"role": "assistant", "content": "let subaccount_detection_threshold = 3;\nSAPBTPAuditLog_CL\n| where Category == \"audit.security-events\" and Message has \"Unauthorized access attempt\"\n| summarize Start=min(UpdatedOn), End=max(UpdatedOn), Tenants = make_set(Tenant, 100) by UserName\n| where array_length(Tenants) > subaccount_detection_threshold\n| project Start, End, UserName, Tenants, CloudApp = \"SAP BTP\"\n| extend AccountName = split(UserName, \"@\")[0], UPNSuffix = split(UserName, \"@\")[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies distributed password cracking attempts from the Microsoft Entra ID SigninLogs.\nThe query looks for unusually high number of failed password attempts coming from multiple locations for a user account.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n50053   Account is locked because the user tried to sign in too many times with an incorrect user ID or password.\n50055   Invalid password, entered expired password.\n50056   Invalid or null password - Password does not exist in store for this user.\n50126   Invalid username or password, or invalid on-premises username or password.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "let s_threshold = 30;\nlet l_threshold = 3;\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where OperationName =~ \"Sign-in activity\"\n// Error codes that we want to look at as they are related to the use of incorrect password.\n| where ResultType in (\"50126\", \"50053\" , \"50055\", \"50056\")\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend LocationString = strcat(tostring(LocationDetails.countryOrRegion), \"/\", tostring(LocationDetails.state), \"/\", tostring(LocationDetails.city))\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), LocationCount=dcount(LocationString), Location = make_set(LocationString,100),\nIPAddress = make_set(IPAddress,100), IPAddressCount = dcount(IPAddress), AppDisplayName = make_set(AppDisplayName,100), ResultDescription = make_set(ResultDescription,50),\nBrowser = make_set(Browser,20), OS = make_set(OS,20), SigninCount = count() by UserPrincipalName, Type\n// Setting a generic threshold - Can be different for different environment\n| where SigninCount > s_threshold and LocationCount >= l_threshold\n| extend Location = tostring(Location), IPAddress = tostring(IPAddress), AppDisplayName = tostring(AppDisplayName), ResultDescription = tostring(ResultDescription), Browser = tostring(Browser), OS = tostring(OS)\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in SecurityAlert data.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet URLRegex = \"((https?|ftp|ldap|wss?|file):\\\\/\\\\/(([\\\\:\\\\%\\\\w\\\\_\\\\-]+(\\\\.|@))*((xn--)?[a-zA-Z0-9\\\\-]+\\\\.)+(xn--[a-z0-9]+|[A-Za-z]+)|\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{0,3})[.,:\\\\w@?^=%&\\\\/~+#-]*[\\\\w@?^=%&\\\\/~+#-])\";\nlet SecurityEvents = materialize(SecurityAlert\n  | where TimeGenerated >= ago(dt_lookBack)\n  | extend MSTI = case(AlertName has \"TI map\" and VendorName == \"Microsoft\" and ProductName == 'Azure Sentinel', true, false)\n  | where MSTI == false\n  // Extract URL from JSON data\n  | mv-expand parse_json(Entities)\n  | where isnotempty(Entities.Url) or isnotempty(Entities.Urls)\n  | extend Url = coalesce(Entities.Url, Entities.Urls)\n  | mv-expand Url\n  | extend Url = tolower(Url)\n  // Extract hostname from JSON data for entity mapping\n  | extend Compromised_Host = tostring(parse_json(ExtendedProperties).[\"Compromised Host\"])\n  | extend Alert_TimeGenerated = TimeGenerated);\nlet EventUrls = materialize(SecurityEvents | distinct Url | summarize make_list(Url));\nThreatIntelligenceIndicator\n| where isnotempty(Url)\n| where TimeGenerated >= ago(ioc_lookBack)\n| extend Url = tolower(Url)\n| where tolower(Url) in (EventUrls)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\" \n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (SecurityEvents) on Url\n| where Alert_TimeGenerated < ExpirationDateTime\n| summarize Alert_TimeGenerated = arg_max(Alert_TimeGenerated, *) by IndicatorId, AlertName\n| project timestamp = Alert_TimeGenerated, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, AlertName, AlertSeverity, Description, Url, Compromised_Host\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This creates an incident in the event that a single source IP address generates a excessive amount of denied connections.\n Topic: Sophos XG Firewall"}, {"role": "assistant", "content": "let threshold = 5000;\nSophosXGFirewall\n| where Log_Type =~ \"Firewall\" and Status =~ \"Deny\"\n| summarize count() by Src_IP, bin(TimeGenerated,5m)\n| where count_ > threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for an active Azure Premium P2 license is required to use and edit this policy. \n You will be required to have setup the MFA Policy before activating this policy\n Topic: SenservaPro"}, {"role": "assistant", "content": "let timeframe = 14d;\nSenservaPro_CL\n| where TimeGenerated >= ago(timeframe)\n| where ControlName_s == 'AzureSecureScoreSigninRiskPolicy'"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Header: Web Server Exposed\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"low\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"Header: Web Server Exposed\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when permission scheme was updated.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where EventMessage =~ 'Permission scheme updated'\n| project EventCreationTime, ObjectItemName, UserName, SrcIpAddr, ChangedValues\n| extend AccountCustomEntity = UserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Hunting query to detect new inbox rule creation with activity of mail moved from inbox to archive folder within 12minutes.Though such activities could be legitimate some attackers may use these techniques to perform email diversion attack.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "// New Inbox rule creation\nlet Inboxrulecreation=\nOfficeActivity\n| where Operation =~ \"New-InboxRule\"\n| where ResultStatus =~ \"Succeeded\"\n| extend Inboxrulecreationtime = TimeGenerated  \n| project Operation, _ResourceId, _SubscriptionId, UserId, Inboxrulecreationtime, ActorIpAddress\n;\n// Email Sent Succeeded\nlet Emailsent=\nOfficeActivity\n| extend Emailsenttime = TimeGenerated\n| where Operation =~ \"Send\"\n| where ResultStatus =~ \"Succeeded\"\n| extend Subject = tostring(parse_json(Item).[\"Subject\"])\n| summarize count() by UserId, Emailsenttime, OriginatingServer, Subject, ActorIpAddress\n;\n//Email moved from Sent to Archive folder\nlet Emailmoved=\nOfficeActivity\n| extend Emailmovedtime = TimeGenerated\n| where Operation =~ \"move\"\n| where OfficeWorkload =~ \"Exchange\"\n| where ResultStatus =~ \"Succeeded\"\n|  extend OriginFolderPath = tostring(parse_json(Folder).[\"Path\"])\n| extend DestFolderPath = tostring(parse_json(DestFolder).[\"Path\"])\n| extend Subject = tostring(parse_json(AffectedItems)[0].Subject)\n| where OriginFolderPath contains \"Sent\"\n| where DestFolderPath contains \"Archive\"\n| project  OriginFolderPath, DestFolderPath, UserId, Emailmovedtime, OriginatingServer, Subject\n;\nInboxrulecreation\n| join kind=inner Emailsent on UserId\n| where abs(datetime_diff('minute',Inboxrulecreationtime, Emailsenttime)) <=12\n| join kind=inner Emailmoved on UserId,Subject\n| where abs(datetime_diff('minute', Emailsenttime, Emailmovedtime)) <=12\n// Email is Sent before Moving to Archive Folder\n| where Emailsenttime <= Emailmovedtime\n| extend AccountCustomEntity = UserId\n| extend IPCustomEntity = ActorIpAddress\n| extend HostCustomEntity = OriginatingServer\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects suspicious connections.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where EventMessage has \"Suspicious Connection\"\n| where NetworkDirection == 1 \n| where DvcAction in ('1', '3')\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a user creates, updates, or disables the user account MFA settings. Once this analytics rule is triggered it will group all related future alerts for upto an hour when all related entities are the same.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "OnePasswordEventLogs_CL\n| where log_source == \"auditevents\"\n| where action has_any(\"enblmfa\", \"updatmfa\", \"disblmfa\")\n| where object_type == \"user\"\n| extend\n    ActorUsername = actor_details.email\n    , SrcIpAddr = session.ip"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures related to Active Directory attacks pathways.\n Topic: TenableAD"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.kql parser into the workspace\n// Retrieve the parser here: https://raw.githubusercontent.com/tenable/Azure-Sentinel/Tenable.ad-connector/Solutions/TenableAD/Parsers/afad_parser.kql\n// Then, create the Kusto Function with alias afad_parser\nlet SeverityTable=datatable(Severity:string,Level:int) [\n\"low\", 1,\n\"medium\", 2,\n\"high\", 3,\n\"critical\", 4\n];\nlet codeNameList = datatable(Codename:string)[\"C-PRIV-ACCOUNTS-SPN\", \"C-SDPROP-CONSISTENCY\", \"C-DANG-PRIMGROUPID\", \"C-GPO-HARDENING\", \"C-DC-ACCESS-CONSISTENCY\", \"C-DANGEROUS-TRUST-RELATIONSHIP\", \"C-UNCONST-DELEG\", \"C-ABNORMAL-ENTRIES-IN-SCHEMA\"];\nafad_parser\n| where MessageType == 0 and Codename in~ (codeNameList)\n| lookup kind=leftouter SeverityTable on Severity\n| order by Level\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when multiple emails where sent to the same recipient with large archived attachments.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let lbtime = 30m;\nlet msgthreshold = 3;\nlet compressedTypes = dynamic(['zip', 'rar', 'tar', 'x-7z-compressed']);\nProofpointPOD\n| where TimeGenerated > ago(lbtime)\n| where EventType == 'message'\n| where NetworkDirection == 'outbound'\n| extend attachedMimeType = todynamic(MsgParts)[0]['detectedMime']\n| where attachedMimeType has_any (compressedTypes)\n| summarize count(), make_set(attachedMimeType) by SrcUserUpn, DstUserUpn\n| where count_ > msgthreshold\n| extend AccountCustomEntity = SrcUserUpn\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "NetClean Incident\n Topic: NetClean ProActive"}, {"role": "assistant", "content": "Netclean_Incidents_CL |  where value_incidentVersion_d == 1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "User signed in using weak credentials Topic: Cynerio"}, {"role": "assistant", "content": "CynerioEvent_CL\n| where TimeGenerated > ago(24h)\n| where module_s == 'IDS'\n| where title_s == 'Weak Password'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query for auditing large queries.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let lbtime_30d = 30d;\nlet lbtime_1d = 1d;\nOracleDatabaseAuditEvent\n| where TimeGenerated > ago(lbtime_30d)\n| where isnotempty(ActionLength)\n| summarize avg_action_length = avg(toint(ActionLength))\n| extend a = 1\n| join (OracleDatabaseAuditEvent\n  | where TimeGenerated > ago(lbtime_1d)\n  | where isnotempty(ActionLength)\n  | extend a = 1) on a\n| where toint(ActionLength) > 2*avg_action_length\n| project avg_action_length, ActionLength, Action, DstUserName,SrcIpAddr\n| extend AccountCustomEntity = DstUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which medium sensitive financial information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let mediumRisk = 2;\nlet financial = 'Financial Information';\nCognniIncidents_CL \n| where Severity == mediumRisk\n| where informationType_s == financial\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for suspicious request patterns to Exchange servers that fit patterns recently blogged about by PeterJson. This exploitation chain utilises an SSRF vulnerability in Exchange which eventually allows the attacker to execute arbitrary Powershell on the server.\nIn the example powershell can be used to write an email to disk with an encoded attachment containing a shell.\nReference: https://peterjson.medium.com/reproducing-the-proxyshell-pwn2own-exploit-49743a4ea9a1\n Topic: Detections"}, {"role": "assistant", "content": "let successCodes = dynamic([200, 302, 401]);\nW3CIISLog\n| where scStatus has_any (successCodes)\n| where ipv4_is_private(cIP) == False\n| where csUriStem hasprefix \"/autodiscover/autodiscover.json\"\n| project TimeGenerated, cIP, sIP, sSiteName, csUriStem, csUriQuery, Computer, csUserName, _ResourceId, FileUri\n| where (csUriQuery !has \"Protocol\" and isnotempty(csUriQuery))\nor (csUriQuery has_any(\"/mapi/\", \"powershell\"))\nor (csUriQuery contains \"@\" and csUriQuery matches regex @\"\\.[a-zA-Z]{2,4}?(?:[a-zA-Z]{2,4}\\/)\")\nor (csUriQuery contains \":\" and csUriQuery matches regex @\"\\:[0-9]{2,4}\\/\")\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(csUserName, \"@\")[0]), AccountUPNSuffix = tostring(split(csUserName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for tables queries.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let lbtime = 24h;\nOracleDatabaseAuditEvent\n| where TimeGenerated > ago(lbtime)\n| where DbAction =~ 'SELECT'\n| extend TableName = replace(@'[,\\(\\)]', '', extract(@'(?i)SELECT(.*?)FROM\\s(.*?)\\s', 2, Action))\n| where isnotempty(TableName)\n| where TableName !~ 'select'\n| summarize count() by TableName, DstUserName\n| order by count_\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected usage of AttachUserPolicy/AttachGroupPolicy/AttachRolePolicy on Glue policy. Attackers could use these operations for privilege escalation. Verify these actions with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n  | where EventName in (\"PutUserPolicy\",\"PutRolePolicy\",\"PutGroupPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n  | extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n  | extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n  | mvexpand Statement\n  | extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n  | extend Action = tostring(Action)\n  | where Effect =~ \"Allow\" and ((((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"glue:*\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"glue:CreateDevEndpoint\" and Action contains \"glue:GetDevEndpoints\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"glue:Create*\" and Action contains \"glue:Get*\")) or (Action contains \"glue:*\") or (Action contains \"glue:GetDevEndpoints\" and Action contains \"glue:UpdateDevEndpoint\") or (Action contains \"glue:Get*\" and Action contains \"glue:Update*\")) and Resource == \"*\" and Condition == \"\"\n  | extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n  | extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n  | extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n  | extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n    AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n  | distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, UserIdentityUserName\n  | extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows list of files with error requests.\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "OracleWebLogicServerEvent\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode >= 400 and HttpStatusCode <= 599 \n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| summarize TotalFile = count() by File\n| top 20 by TotalFile desc\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects exfiltration to online fileshare.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "let threshold = 10;\nDigitalGuardianDLPEvent\n| where isnotempty(inspected_document)\n| where http_url contains 'dropbox' or http_url contains 'mega.nz'\n| summarize f = dcount(inspected_document) by SrcUserName, bin(TimeGenerated, 30m)\n| where f >= threshold\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query searches possible exploitation attempts for CVE-2021-44228 involving log4j vulnerability in Azure Web Application Firewall   logs.\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "let log4jcmdstring = dynamic([\"${jndi:ldap\",\"${jndi:dns\",\"${jndi:rmi\",\"${jndi:corba\",\"${jndi:iiop\",\"${jndi:nis\",\"${jndi:nds\"]);\nlet log4jRegex = @'(\\\\$|%24)(\\\\{|%7B)([^jJ]*[jJ])([^nN]*[nN])([^dD]*[dD])([^iI]*[iI])(:|%3A|\\\\$|%24|}|%7D)';\nAzureDiagnostics\n| where Category in~ (\"FrontdoorWebApplicationFirewallLog\", \"FrontdoorAccessLog\", \"ApplicationGatewayFirewallLog\", \"ApplicationGatewayAccessLog\")\n //Extending the columns to aviod failures.\n| extend originalRequestUriWithArgs_s = column_ifexists(\"originalRequestUriWithArgs_s\", \"\"), \n  userAgent_s = column_ifexists(\"userAgent_s\", \"\"), \n  clientIP_s = column_ifexists(\"clientIP_s\", \"\"),  \n  clientPort_d = column_ifexists(\"originalRequestUriWithArgs_s\", \"\"),\n  host_s = column_ifexists(\"host_s\", \"\"),\n  requestUri_s = column_ifexists(\"requestUri_s\", \"\"),\n  httpStatus_d = column_ifexists(\"httpStatus_d\",\"\"),\n  listenerName_s = column_ifexists(\"listenerName_s\", \"\"),\n  httpMethod_s = column_ifexists(\"httpMethod_s\", \"\")\n //The regex and the string matching look for the most common attacks. This is not supposed to be comprehensive.\n| where originalRequestUriWithArgs_s has_any (log4jcmdstring) or originalRequestUriWithArgs_s matches regex log4jRegex or userAgent_s has_any (log4jcmdstring) or  userAgent_s matches regex log4jRegex\n| extend CmdLine = iff(originalRequestUriWithArgs_s has 'Base64/', split(split(originalRequestUriWithArgs_s, \"Base64/\",1)[0], \"}\", 0)[0], split(split(userAgent_s, \"Base64/\",1)[0], \"}\", 0)[0])\n| extend CmdLine = base64_decode_tostring(tostring(CmdLine))\n| where CmdLine has_any (\"wget\",\"curl\")\n| summarize Total = count() by originalRequestUriWithArgs_s, userAgent_s, clientIP_s,clientPort_d, TimeGenerated, host_s, requestUri_s, httpStatus_d,listenerName_s, CmdLine, httpMethod_s, Category\n| extend IP_0_Address = clientIP_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for potentialy suspicious files downloads.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where DvcAction =~ 'file_downloaded'\n| extend fe = split(EntityFileName, '.')\n| where array_length(fe) > 2\n| where fe[1] matches regex @\"\\D+\"\n| where strlen(fe[1]) < 5\n| project EntityFileName, SrcUserName\n| extend AccountCustomEntity = SrcUserName\n| extend FileCustomEntity = EntityFileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting queries identifies users who are added to a Teams Channel or Teams chat\nand within 1 minute of being added upload a file via the chat. This might be\nan indicator of suspicious activity.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "let threshold = 1m;\nOfficeActivity\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where Operation == \"MemberAdded\"\n| extend TeamName = iff(isempty(TeamName), Members[0].UPN, TeamName)\n| project TimeGenerated, UploaderID=UserId, TeamName\n| join (\n  OfficeActivity\n  | where RecordType == \"SharePointFileOperation\"\n  | where SourceRelativeUrl has \"Microsoft Teams Chat Files\"\n  | where Operation == \"FileUploaded\"\n  | project UploadTime=TimeGenerated, UploaderID=UserId, FileLocation=OfficeObjectId, FileName=SourceFileName\n  ) on UploaderID\n| where UploadTime > TimeGenerated and UploadTime < TimeGenerated+threshold\n| project-away UploaderID1\n| extend timestamp=TimeGenerated, AccountCustomEntity = UploaderID \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The analytic rule creates an incident when an alert is created in Atlassian Beacon. The incidents events contains values such as alert name, alert url, actor name, actor details, worskpace id of the atlassian beacon, etc. Navigate to the alertDetailURL to view more information on recommendations and remediations.\n Topic: Integration for Atlassian Beacon"}, {"role": "assistant", "content": "atlassian_beacon_alerts_CL\n| project TimeGenerated, detectiontime_d, alert_created_t, alert_title_s, alertTitle_s, alert_url_s, alertDetailURL_s, activity_action_s, alert_product_s, activity_subject_ari_s, actor_name_s, actor_url_s, actor_sessions_s, atlassianAlertType_s, atlassianWorkspace_id_g, atlassianWorkspace_orgId_s, Type\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for authentication errors.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'authentication'\n| where EventResult =~ 'error'\n| project TimeGenerated, DstUserName, SrcIpAddr, EventResultDetails\n| extend AccountCustomEntity = DstUserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in PaloAlto CommonSecurityLog table from any Domain IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h; // Look back 1 hour\nlet ioc_lookBack = 14d; // Look back 14 days\n// Create a list of top-level domains (TLDs) from the threat feed data for later validation\nlet SecurityLog = materialize(\n  CommonSecurityLog\n    // Filter common security logs based on the specified time range\n    | extend IngestionTime = ingestion_time()\n    | where IngestionTime > ago(dt_lookBack)\n    | where DeviceEventClassID =~ 'url'\n    // Uncomment the line below to only alert on allowed connections\n    //| where DeviceAction !~ \"block-url\"\n    // Extract the domain from RequestURL, if not present, extract it from AdditionalExtensions\n    | extend PA_Url = column_ifexists(\"RequestURL\", \"None\")\n    | extend PA_Url = iif(isempty(PA_Url) and AdditionalExtensions !startswith \"PanOS\", extract(\"([^\\\\\\\"]+)\", 1, tolower(AdditionalExtensions)), trim('\"', PA_Url))\n    | extend PA_Url = iif(PA_Url !startswith \"http://\" and ApplicationProtocol !~ \"ssl\", strcat('http://', PA_Url), iif(PA_Url !startswith \"https://\" and ApplicationProtocol =~ \"ssl\", strcat('https://', PA_Url), PA_Url))\n    | extend Domain = trim('\"', tostring(parse_url(PA_Url).Host))\n    | where isnotempty(Domain)\n    | extend Domain = tolower(Domain)\n    | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n);\nlet LogDomains = SecurityLog | distinct Domain | summarize make_list(Domain);\n// Retrieve threat intelligence indicators within the specified time range\nlet Domain_Indicators = materialize(\n    ThreatIntelligenceIndicator\n    | where isnotempty(DomainName)\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | extend TI_DomainEntity = tolower(DomainName)\n    | where TI_DomainEntity in (LogDomains)\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now());\n// Join threat intelligence indicators with common security logs\nDomain_Indicators | join kind=innerunique (SecurityLog) on $left.TI_DomainEntity == $right.Domain\n| where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId\n| project CommonSecurityLog_TimeGenerated, Description, ActivityGroupNames, PA_Url, Domain, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DeviceAction, DestinationIP, DestinationPort, DeviceName, SourceIP, SourcePort, ApplicationProtocol, RequestMethod, Type, TI_DomainEntity\n| extend timestamp = CommonSecurityLog_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies IP addresses that may be performing DNS lookups associated with common currency mining pools.\n Topic: Windows Server DNS"}, {"role": "assistant", "content": "DnsEvents\n| where Name contains \".\"\n| where Name has_any (\"monerohash.com\", \"do-dear.com\", \"xmrminerpro.com\", \"secumine.net\", \"xmrpool.com\", \"minexmr.org\", \"hashanywhere.com\",\n\"xmrget.com\", \"mininglottery.eu\", \"minergate.com\", \"moriaxmr.com\", \"multipooler.com\", \"moneropools.com\", \"xmrpool.eu\", \"coolmining.club\",\n\"supportxmr.com\", \"minexmr.com\", \"hashvault.pro\", \"xmrpool.net\", \"crypto-pool.fr\", \"xmr.pt\", \"miner.rocks\", \"walpool.com\", \"herominers.com\",\n\"gntl.co.uk\", \"semipool.com\", \"coinfoundry.org\", \"cryptoknight.cc\", \"fairhash.org\", \"baikalmine.com\", \"tubepool.xyz\", \"fairpool.xyz\", \"asiapool.io\",\n\"coinpoolit.webhop.me\", \"nanopool.org\", \"moneropool.com\", \"miner.center\", \"prohash.net\", \"poolto.be\", \"cryptoescrow.eu\", \"monerominers.net\", \"cryptonotepool.org\",\n\"extrmepool.org\", \"webcoin.me\", \"kippo.eu\", \"hashinvest.ws\", \"monero.farm\", \"supportxmr.com\", \"xmrpool.eu\", \"linux-repository-updates.com\", \"1gh.com\",\n\"dwarfpool.com\", \"hash-to-coins.com\", \"hashvault.pro\", \"pool-proxy.com\", \"hashfor.cash\", \"fairpool.cloud\", \"litecoinpool.org\", \"mineshaft.ml\", \"abcxyz.stream\",\n\"moneropool.ru\", \"cryptonotepool.org.uk\", \"extremepool.org\", \"extremehash.com\", \"hashinvest.net\", \"unipool.pro\", \"crypto-pools.org\", \"monero.net\",\n\"backup-pool.com\", \"mooo.com\", \"freeyy.me\", \"cryptonight.net\", \"shscrypto.net\")\n| extend HostName = iff(Computer has '.', substring(Computer,0,indexof(Computer,'.')),Computer)\n| extend DnsDomain = iff(Computer has '.', substring(Computer,indexof(Computer,'.')+1),\"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The query below identifies dllhost.exe using WMIC to discover additional hosts and associated domains in the environment.\n Topic: Dev 0270 Detection and Hunting"}, {"role": "assistant", "content": "(union isfuzzy=true\n(SecurityEvent\n| where EventID==4688\n| where CommandLine has \"wmic computersystem get domain\" and ParentProcessName has \"dllhost.exe\"\n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName, ProcessNameFullPath = NewProcessName, EventID, Activity, CommandLine, EventSourceName, Type\n),\n(DeviceProcessEvents \n| where ProcessCommandLine has \"wmic computersystem get domain\" and InitiatingProcessFileName =~ \"dllhost.exe\" and InitiatingProcessCommandLine has \"dllhost.exe\"\n| extend Account = strcat(InitiatingProcessAccountDomain, @'\\', InitiatingProcessAccountName), Computer = DeviceName\n)\n)\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountNTDomain = tostring(split(Account, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Generates an incident when an unauthorized session or action is detected either by Radiflows iSID.\n Topic: Radiflow"}, {"role": "assistant", "content": "RadiflowEvent\n| where DeviceProduct =~ 'iSID'\n| where EventClassID in (5, 156, 161, 169, 171, 182, 183, 184, 185)\n| extend EventMessage = iif(EventMessage == ' ', 'Policy Violation', EventMessage)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will look for connections to a domain where only a single file is requested, this is unusual as most modern web applications require additional recources. This type of activity is often assocaited with malware beaconing or tracking URLs delivered in emails. Developed for Zscaler but applicable to any outbound web logging.\n Topic: Zscaler Internet Access"}, {"role": "assistant", "content": "let scriptExtensions = dynamic([\".php\", \".aspx\", \".asp\", \".cfml\"]);\n//The number of URI's seen to be suspicious, higher = less likely to be suspicious\nlet uriThreshold = 1;\nCommonSecurityLog\n// Only look at connections that were allowed through the web proxy\n| where DeviceVendor =~ \"Zscaler\" and DeviceAction =~ \"Allowed\"\n// Only look where some data was exchanged.\n| where SentBytes > 0 and ReceivedBytes > 0\n// Extract the Domain\n| extend Domain = iff(countof(DestinationHostName,'.') >= 2, strcat(split(DestinationHostName,'.')[-2], '.',split(DestinationHostName,'.')[-1]), DestinationHostName)\n| extend GetData=iff(RequestURL == \"?\", 1, 0)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), makelist(RequestURL), makelist(DestinationIP), makelist(SourceIP), numOfConnections = count(), make_set(RequestMethod), max(GetData), max(RequestContext) by Domain\n// Determine the number of URIs that have been visited for the domain\n| extend destinationURI = arraylength(list_RequestURL)\n| where destinationURI <= uriThreshold\n| where tostring(list_RequestURL) has_any(scriptExtensions)\n//Remove matches with referer\n| where max_RequestContext == \"\"\n//Keep requests where data was trasferred either in a GET with parameters or a POST\n| where set_RequestMethod in~ (\"POST\") or max_GetData == 1\n//Defeat email click tracking, may increase FN's while decreasing FP's\n| where list_RequestURL !has \"click\" and set_RequestMethod !has \"GET\"\n| mvexpand list_RequestURL, list_DestinationIP\n| extend RequestURL = tostring(list_RequestURL), DestinationIP = tostring(list_DestinationIP), ClientIP = tostring(list_SourceIP)\n//Extend custom entitites for incidents\n| project-away list_RequestURL, list_DestinationIP, list_SourceIP, destinationURI, Domain, StartTimeUtc, EndTimeUtc, max_GetData, max_RequestContext\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Powercat is a PowerShell implementation of netcat. Whilst it can be used as a legitimate administrative tool it can be abused by attackers to exfiltrate data. This query looks for command line activity downloading PowerCat.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID == 4688\n| where Process has_any (\"cmd.exe\", \"powershell.exe\", \"PowerShell_ISE.exe\")\n| where CommandLine hassuffix \"powercat.ps1\"\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects access to the Internet by uncommon processes.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "let lb_period = 14d;\nlet q_time = 1h;\nlet inet_access_proc = CyberArkEPM\n| where TimeGenerated between (ago(lb_period) .. ago(q_time))\n| where EventSubType =~ 'DetectAccessInternet'\n| where isnotempty(ActingProcessFileInternalName)\n| summarize makeset(ActingProcessFileInternalName);\nCyberArkEPM\n| where TimeGenerated > ago(q_time)\n| where EventSubType =~ 'DetectAccessInternet'\n| where ActingProcessFileInternalName !in (inet_access_proc)\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "TLS Certificate Using Weak Cipher\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"low\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"TLS Certificate Using Weak Cipher\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows allowed requests to URI categories which heavily are used in Initial Access stage by threat actiors and may contain malicious content.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "Cisco_Umbrella\n| where TimeGenerated > ago(24h)\n| where EventType == 'proxylogs'\n| where UrlCategory contains 'Dating' or UrlCategory contains 'Digital Postcards' or UrlCategory contains 'Freeware and Shareware' or UrlCategory contains 'Gambling' or UrlCategory contains  'Hacking' or UrlCategory contains 'Hunting' or UrlCategory contains 'Mobile Phones' or UrlCategory contains 'Software Updates' or UrlCategory contains 'URL Shortener' or UrlCategory contains  'Web Hosting'\n| where DvcAction == 'ALLOWED'\n| summarize TotalEvents = count() by UrlOriginal, SrcIpAddr\n| sort by TotalEvents\n| summarize listOfIps = make_set(SrcIpAddr) by UrlOriginal\n| extend URLCustomEntity = UrlOriginal"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An attacker could use CreateLoginProfile permissions on other users for privilege escalation by creating a password to a victim user without a login profile to use to login to the AWS Console.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n  | where  EventName == \"CreateLoginProfile\" and isempty(ErrorCode) and isempty(ErrorMessage)\n  | project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, UserIdentityArn, \n  UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements, RequestParameters\n  | extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n  | extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The policy detect the creation of new AWS roles with shadow admin privileges. The policy configuration allows limiting the policy to specific accounts. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s \n| where Policy has \"AWS role with shadow admin privileges\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query uses syslog data to alert on artifacts from container images used in digital cryptocurrency mining, often seen post Log4j vulnerability (CVE-2021-44228) exploitation. \n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "Syslog\n| where Facility == 'user'\n| where SyslogMessage has \"AUOMS_EXECVE\"\n| parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n| where EventType =~ \"AUOMS_EXECVE\"\n| parse EventData with * \"syscall=\" syscall \" syscall_r=\" * \" success=\" success \" exit=\" exit \" a0\" * \" ppid=\" ppid \" pid=\" pid \" audit_user=\" audit_user \" auid=\" auid \" user=\" user \" uid=\" uid \" group=\" group \" gid=\" gid \"effective_user=\" effective_user \" euid=\" euid \" set_user=\" set_user \" suid=\" suid \" filesystem_user=\" filesystem_user \" fsuid=\" fsuid \" effective_group=\" effective_group \" egid=\" egid \" set_group=\" set_group \" sgid=\" sgid \" filesystem_group=\" filesystem_group \" fsgid=\" fsgid \" tty=\" tty \" ses=\" ses \" comm=\\\"\" comm \"\\\" exe=\\\"\" exe \"\\\"\" * \"cwd=\\\"\" cwd \"\\\"\" * \"name=\\\"\" name \"\\\"\" * \"cmdline=\" cmdline \n| extend cmdline = trim_end('redactors=.*',cmdline) \n| where (exe has \"docker\" and cmdline has_any  (\"monero-miner\",\"minergate-cli\",\"aeon-miner\",\"xmr-miner\")) or (exe has_any (\"bash\",\"dash\") and cmdline has \"docker kill\" and cmdline has_any (\"gakeaws\",\"monero\",\"xmr\",\"pocosow\"))\n| project TimeGenerated, Computer, audit_user, user, cmdline\n| extend timestamp = TimeGenerated\n| extend Host_0_HostName = Computer\n| extend Account_0_Name = user\n| sort by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies users whose single Factor Auth Events in scenarios where it has not been seen before, or where only multi factor auth has been observed.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "\nlet starttime = totimespan('{{StartTimeISO}}');\nlet endtime = totimespan('{{EndTimeISO}}');\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet lookback = starttime - 7d;\nlet behaviorAnalyticsData = materialize(\n BehaviorAnalytics\n      | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n      | where isnotempty(SourceIPAddress)\n      | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress\n      | project-rename IPAddress = SourceIPAddress\n      | summarize\n          UsersInsights = make_set(UsersInsights, 1000),\n          DevicesInsights = make_set(DevicesInsights, 1000),\n          IPInvestigationPriority = sum(InvestigationPriority)\n      by IPAddress\n);\nlet aadFunc = (tableName:string){\n  table(tableName)\n  | where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n  | where not(Identity matches regex isGUID)\n  | where ResultType == 0\n  | where AuthenticationDetails != \"[]\"\n  | extend AuthenticationMethod = tostring(todynamic(AuthenticationDetails)[0].authenticationMethod)\n  | where AuthenticationMethod != \"Previously satisfied\"\n  | join kind=leftouter (\n      behaviorAnalyticsData\n  ) on IPAddress\n  | summarize count(), make_set(AuthenticationRequirement, 1000), make_set(AuthenticationMethod, 1000), make_set(IPAddress, 1000), make_set(Location, 1000), LastLogin = max(TimeGenerated), IPInvestigationPriority = sum(IPInvestigationPriority) by UserPrincipalName\n  | extend noofAuthMehods = array_length(set_AuthenticationMethod), noofAuthReqs = array_length(set_AuthenticationRequirement)\n  | where noofAuthMehods > 1 or noofAuthReqs > 1\n  | extend timestamp = LastLogin, Account_0_Name = UserPrincipalName\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt \n| sort by IPInvestigationPriority desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in DataverseActivity from any IP IOC from Microsoft Sentinel Threat Intelligence. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(NetworkIP)\n    or isnotempty(EmailSourceIpAddress)\n    or isnotempty(NetworkDestinationIP)\n    or isnotempty(NetworkSourceIP)\n// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\n// Taking the first non-empty value based on potential IOC match availability\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n//Exclude local addresses, using the ipv4_is_private operator\n| where ipv4_is_private(TI_ipEntity) == false\n    and TI_ipEntity !startswith \"fe80\"\n    and TI_ipEntity !startswith \"::\"\n    and TI_ipEntity !startswith \"127.\"\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n    DataverseActivity\n    | where TimeGenerated >= ago(dt_lookBack)\n    | where isnotempty(ClientIp)\n    //Exclude local addresses, using the ipv4_is_private operator\n    | where ipv4_is_private(ClientIp) == false\n        and ClientIp !startswith \"fe80\"\n        and ClientIp !startswith \"::\"\n        and ClientIp !startswith \"127.\"\n    // renaming time column so it is clear the log this came from\n    | extend DataverseActivity_TimeGenerated = TimeGenerated\n    )\n    on $left.TI_ipEntity == $right.ClientIp\n| where DataverseActivity_TimeGenerated < ExpirationDateTime\n| summarize DataverseActivity_TimeGenerated = arg_max(DataverseActivity_TimeGenerated, *) by IndicatorId, ClientIp\n| project DataverseActivity_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\n    TI_ipEntity, ClientIp, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, InstanceUrl, UserId\n| extend\n    timestamp = DataverseActivity_TimeGenerated,\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[0]),\n    CloudAppId = int(32780)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identity and Access Management (IAM) securely manages access to AWS services and resources. \nIdentifies when a Privileged role is attached to an existing instance or new instance at deployment. This instance may be used by an adversary to escalate a normal user privileges to an adminsitrative level.\nand AWS API AddRoleToInstanceProfile at https://docs.aws.amazon.com/IAM/latest/APIReference/API_AddRoleToInstanceProfile.html \n Topic: Amazon Web Services"}, {"role": "assistant", "content": "\nlet EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\nlet PolicyArnList = dynamic([\"arn:aws:iam::aws:policy/AdministratorAccess\",\"arn:aws:iam::aws:policy/DatabaseAdministrator\",\"arn:aws:iam::aws:policy/NetworkAdministrator\",\"arn:aws:iam::aws:policy/SystemAdministrator\",\"arn:aws:iam::aws:policy/AmazonS3FullAccess\"]);\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\n//Creating a temp table of events creating privileged role or users which can later be correlated with suspicious operations.\nlet PrivilegedRoleorUsers = AWSCloudTrail\n| where TimeGenerated >= lookback \n| where EventName in (EventNameList)\n| extend PolicyArn = tostring(parse_json(RequestParameters).policyArn), RoleName = tostring(parse_json(RequestParameters).roleName)\n| where PolicyArn in (PolicyArnList)\n| distinct PolicyArn, UserIdentityType, UserIdentityUserName,RoleName;\n// Joining the list of identities having Privileged roles with the API call AddRoleToInstanceProfile to indentify the instances which may be used by adversaries as pivot point for privilege escalation.\nPrivilegedRoleorUsers\n| join (\nAWSCloudTrail\n| where TimeGenerated between (starttime..endtime)\n| where EventName in (\"AddRoleToInstanceProfile\") \n| extend InstanceProfileName = tostring(parse_json(RequestParameters).InstanceProfileName), RoleName = tostring(parse_json(RequestParameters).roleName)\n| summarize EventCount=count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventSource, EventName, UserIdentityType , UserIdentityArn , UserIdentityUserName, SourceIpAddress, RoleName\n) on RoleName \n| extend timestamp = StartTimeUtc, IPCustomEntity = SourceIpAddress, AccountCustomEntity = RoleName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies instances of a base64 encoded PE file header seen in the process command line parameter.\nTo use this analytics rule, make sure you have deployed the [ASIM normalization parsers](https://aka.ms/ASimProcessEvent)\n Topic: Detections"}, {"role": "assistant", "content": "imProcessCreate\n| where CommandLine contains \"TVqQAAMAAAAEAAA\"\n| where isnotempty(Process)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by Dvc, ActorUsername, Process, CommandLine, ActingProcessName, EventVendor, EventProduct\n| extend AccountName = tostring(split(ActorUsername, @'\\')[1]), AccountNTDomain = tostring(split(ActorUsername, @'\\')[0])\n| extend HostName = tostring(split(Dvc, \".\")[0]), DomainIndex = toint(indexof(Dvc, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Dvc, DomainIndex + 1), Dvc)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert leverages Defender for IoT to detect an OT device communicating with Internet which is possibly an indication of improper configuration of an application or malicious activity on the network.\n Topic: IoTOTThreatMonitoringwithDefenderforIoT"}, {"role": "assistant", "content": "SecurityAlert\n| where ProviderName == \"IoTSecurity\"\n| where AlertName has \"Internet\"\n| extend ExtendedProperties = parse_json(ExtendedProperties)\n| where tostring(ExtendedProperties.isNew) == \"True\"\n| extend DeviceId = tostring(ExtendedProperties.DeviceId), \n         SourceDeviceAddress = tostring(ExtendedProperties.SourceDeviceAddress), \n         DestDeviceAddress = tostring(ExtendedProperties.DestinationDeviceAddress), \n         RemediationSteps = tostring(parse_json(RemediationSteps)[0]), \n         Protocol = tostring(ExtendedProperties.Protocol), \n         AlertManagementUri = tostring(ExtendedProperties.AlertManagementUri)\n| project\n  TimeGenerated,\n  DeviceId,\n  ProductName,\n  ProductComponentName,\n  AlertSeverity,\n  AlertName,\n  Description,\n  Protocol,\n  SourceDeviceAddress,\n  DestDeviceAddress,\n  RemediationSteps,\n  Tactics,\n  Entities,\n  VendorOriginalId,\n  AlertLink,\n  AlertManagementUri,\n  Techniques\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in DuoSecurity.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n| where TimeGenerated >= ago(ioc_lookBack)\n// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\n// Taking the first non-empty value based on potential IOC match availability\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| join (\n    DuoSecurityAuthentication_CL\n    | where TimeGenerated >= ago(dt_lookBack)\n    | where isnotempty(access_device_ip_s)\n    // renaming time column so it is clear the log this came from\n    | extend Duo_TimeGenerated = isotimestamp_t\n)\non $left.TI_ipEntity == $right.access_device_ip_s\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, Duo_TimeGenerated,\nTI_ipEntity, user_name_s, factor_s, result_s, application_name_s, event_type_s, txid_g, user_key_s, access_device_ip_s, access_device_location_city_s, access_device_location_state_s, access_device_location_country_s\n| extend timestamp = Duo_TimeGenerated, Name = tostring(split(user_name_s, '@', 0)[0]), UPNSuffix = tostring(split(user_name_s, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies a single source that generates an excessive amount of failed connections. Modify the threshold to change the sensitivity of the rule: the higher the threshold, the less sensitive is the rule and less incidents will be generated.\n This analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM NetworkSession schema\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "let threshold = 5000;\n_Im_NetworkSession(eventresult='Failure')\n| summarize Count=count() by SrcIpAddr, bin(TimeGenerated,5m)\n| where Count > threshold\n| extend timestamp = TimeGenerated, threshold\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies anomalies if the number of documents uploaded or downloaded from device(s) associated with a previously unseen user agent exceeds a threshold (default is 5) and deviation (default is 25).\n Topic: Microsoft 365"}, {"role": "assistant", "content": "// Set threshold for the number of downloads/uploads from a new user agent\nlet threshold = 5;\n// Define constants for SharePoint file operations\nlet szSharePointFileOperation = \"SharePointFileOperation\";\nlet szOperations = dynamic([\"FileDownloaded\", \"FileUploaded\"]);\n// Define the historical activity for analysis\nlet starttime = 14d; // Define the start time for historical data (14 days ago)\nlet endtime = 1d;   // Define the end time for historical data (1 day ago)\n// Extract the base events for analysis\nlet Baseevents =\n  OfficeActivity\n  | where TimeGenerated between (ago(starttime) .. ago(endtime))\n  | where RecordType =~ szSharePointFileOperation\n  | where Operation in~ (szOperations)\n  | where isnotempty(UserAgent);\n// Identify frequently occurring user agents\nlet FrequentUA = Baseevents\n  | summarize FUACount = count() by UserAgent, RecordType, Operation\n  | where FUACount >= threshold\n  | distinct UserAgent;\n// Calculate a user baseline for further analysis\nlet UserBaseLine = Baseevents\n  | summarize Count = count() by UserId, Operation, Site_Url\n  | summarize AvgCount = avg(Count) by UserId, Operation, Site_Url;\n// Extract recent activity for analysis\nlet RecentActivity = OfficeActivity\n  | where TimeGenerated > ago(endtime)\n  | where RecordType =~ szSharePointFileOperation\n  | where Operation in~ (szOperations)\n  | where isnotempty(UserAgent)\n  | where UserAgent in~ (FrequentUA)\n  | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), OfficeObjectIdCount = dcount(OfficeObjectId), OfficeObjectIdList = make_set(OfficeObjectId), UserAgentSeenCount = count() \n  by RecordType, Operation, UserAgent, UserType, UserId, ClientIP, OfficeWorkload, Site_Url;\n// Analyze user behavior based on baseline and recent activity\nlet UserBehaviorAnalysis = UserBaseLine\n  | join kind=inner (RecentActivity) on UserId, Operation, Site_Url\n  | extend Deviation = abs(UserAgentSeenCount - AvgCount) / AvgCount;\n// Filter and format results for specific user behavior analysis\nUserBehaviorAnalysis\n  | where Deviation > 25\n  | extend UserIdName = tostring(split(UserId, '@')[0]), UserIdUPNSuffix = tostring(split(UserId, '@')[1])\n  | project-reorder StartTime, EndTime, UserAgent, UserAgentSeenCount, UserId, ClientIP, Site_Url\n  | project-away Site_Url1, UserId1, Operation1\n  | order by UserAgentSeenCount desc, UserAgent asc, UserId asc, Site_Url asc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies instances where a user is added and subsequently removed from an Azure Key Vault access policy within a short duration, which could indicate attempts to credential access and persistence.\n Topic: Cloud Service Threat Protection Essentials"}, {"role": "assistant", "content": "let timeframe = 10m;\nAzureDiagnostics\n| where ResourceType =~ \"VAULTS\"\n| where OperationName =~ \"VaultPatch\"\n| where ResultType =~ \"Success\"\n| extend UserObjectAdded = column_ifexists(\"addedAccessPolicy_ObjectId_g\",\"\")\n| extend AddedActor = identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_name_s\n| extend KeyAccessAdded = tostring(column_ifexists(\"addedAccessPolicy_Permissions_keys_s\",\"\"))\n| extend SecretAccessAdded = tostring(column_ifexists(\"addedAccessPolicy_Permissions_secrets_s\",\"\"))\n| extend CertAccessAdded = tostring(column_ifexists(\"addedAccessPolicy_Permissions_certificates_s\",\"\"))\n| where isnotempty(UserObjectAdded)\n| project AccessAddedTime=TimeGenerated, ResourceType, OperationName, ResultType, KeyVaultName=id_s, AddedActor, UserObjectAdded, KeyAccessAdded, SecretAccessAdded, CertAccessAdded\n| join kind=inner \n( \nAzureDiagnostics\n| where ResourceType =~ \"VAULTS\"\n| where OperationName =~ \"VaultPatch\"\n| where ResultType =~ \"Success\"\n| extend RemovedActor = identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_name_s\n| extend UserObjectRemoved = column_ifexists(\"removedAccessPolicy_ObjectId_g\", \"\")\n| extend KeyAccessRemoved = tostring(column_ifexists(\"removedAccessPolicy_Permissions_keys_s\",\"\"))\n| extend SecretAccessRemoved = tostring(column_ifexists(\"removedAccessPolicy_Permissions_secrets_s\",\"\"))\n| extend CertAccessRemoved = tostring(column_ifexists(\"removedAccessPolicy_Permissions_certificates_s\",\"\"))\n| where isnotempty(UserObjectRemoved)\n| project AccessRemovedTime=TimeGenerated, ResourceType, OperationName, ResultType, KeyVaultName=id_s, RemovedActor, UserObjectRemoved, KeyAccessRemoved, SecretAccessRemoved, CertAccessRemoved\n)\non KeyVaultName\n| extend TimeDelta = abs(AccessAddedTime - AccessRemovedTime)\n| where TimeDelta < timeframe\n| project KeyVaultName, AccessAddedTime, AddedActor, UserObjectAdded, KeyAccessAdded, SecretAccessAdded, CertAccessAdded, AccessRemovedTime, RemovedActor, UserObjectRemoved, KeyAccessRemoved, SecretAccessRemoved, CertAccessRemoved, TimeDelta\n| extend Account_0_AadUserId = UserObjectAdded\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Triggeres when ransomware was detected on several accounts.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where EventType =~ 'ransomware'\n| summarize count() by DstUserName, bin(TimeGenerated, 2m)\n| where count_ >= 2\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The utilization of system commands or functions in the request URL may suggest that an attacker is trying to gain unauthorized access to the environment by exploiting a vulnerable service.\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let lookback = 5m;\nlet RiskyCommandsInUrl = materialize(externaldata(Commands: string)\n    [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/CommandsInURL.csv\"]\n    with(format=\"csv\", ignoreFirstRecord=True));\nlet CustomRiskyCommandsInUrl = (_ASIM_GetWatchlistRaw(\"Web_RiskyCommandsInUrl\") // Create new Watchlist and add your custom indicators(Optional)\n    | extend\n        Commands = tostring(WatchlistItem[\"Commands\"])\n    | project Commands\n    | where isnotempty(Commands));\nlet CombinedRiskyCommandsInUrl = union RiskyCommandsInUrl, CustomRiskyCommandsInUrl;\nlet knownRiskyCommandsInUrl=toscalar(CombinedRiskyCommandsInUrl\n    | where isnotempty(Commands)\n    | summarize make_set(Commands, 1000));\n// You can add more keywords to the query as necessary, depending on the specific indicators you want to detect.\n_Im_WebSession (starttime=ago(lookback), eventresult='Success', url_has_any=knownRiskyCommandsInUrl)\n| where isnotempty(Url)\n| project Url, SrcIpAddr, SrcUsername, SrcHostname, DstIpAddr, TimeGenerated\n| extend Decoded_url = url_decode(Url)\n| where Decoded_url has_any (knownRiskyCommandsInUrl)\n| summarize\n    EventCount=count(),\n    EventStartTime=min(TimeGenerated),\n    EventEndTime=max(TimeGenerated)\n    by SrcIpAddr, SrcUsername, SrcHostname, Url, Decoded_url, DstIpAddr\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects a users consent to an OAuth application being blocked due to it being too risky.\n  These events should be investigated to understand why the user attempted to consent to the applicaiton and what other applicaitons they may have consented to.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-applications#end-user-stopped-due-to-risk-based-consent\n Topic: Detections"}, {"role": "assistant", "content": "AuditLogs\n  | where OperationName has \"Consent to application\"\n  | where Result =~ \"failure\"\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n  | extend userAgent = iif(AdditionalDetails[0].key == \"User-Agent\", tostring(AdditionalDetails[0].value), tostring(AdditionalDetails[1].value))\n  | where isnotempty(TargetResources)\n  | extend TargetAppName = tostring(TargetResources[0].displayName)\n  | extend TargetAppId = tostring(TargetResources[0].id)\n  | mv-expand TargetResources[0].modifiedProperties\n  | extend TargetResources_0_modifiedProperties = columnifexists(\"TargetResources_0_modifiedProperties\", '')\n  | where isnotempty(TargetResources_0_modifiedProperties)\n  | where TargetResources_0_modifiedProperties.displayName =~ \"MethodExecutionResult.\"\n  | extend TargetPropertyDisplayName = tostring(TargetResources_0_modifiedProperties.displayName)\n  | extend FailureReason = tostring(parse_json(tostring(TargetResources_0_modifiedProperties.newValue)))\n  | where FailureReason contains \"Risky\"\n  | extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n  | project-reorder TimeGenerated, OperationName, Result, TargetAppName, TargetAppId, FailureReason, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIPAddress, userAgent\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies new UserAgents observed in the last 24 hours versus the previous 14 days. This detection extracts words from user agents to build the baseline and determine rareity rather than perform a direct comparison. This avoids FPs caused by version numbers and other high entropy user agent components.\nThese new UserAgents could be benign. However, in normally stable environments, these new UserAgents could provide a starting point for investigating malicious activity.\nNote: W3CIISLog can be noisy depending on the environment, however OfficeActivity and AWSCloudTrail are usually stable with low numbers of detections.\n Topic: Network Threat Protection Essentials"}, {"role": "assistant", "content": "let starttime = 14d;\nlet endtime = 1d;\nlet UserAgentAll =\n(union isfuzzy=true\n(OfficeActivity\n| where TimeGenerated >= ago(starttime)\n| where isnotempty(UserAgent)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = ClientIP, Account = UserId, Type, RecordType, Operation\n),\n(\nW3CIISLog\n| where TimeGenerated >= ago(starttime)\n| where isnotempty(csUserAgent)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = csUserAgent, SourceIP = cIP, Account = csUserName, Type, sSiteName, csMethod, csUriStem\n),\n(\nAWSCloudTrail\n| where TimeGenerated >= ago(starttime)\n| where isnotempty(UserAgent)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = SourceIpAddress, Account = UserIdentityUserName, Type, EventSource, EventName\n))\n// remove wordSize blocks of non-numeric hex characters prior to word extraction\n| extend UserAgentNoHexAlphas = replace(\"([A-Fa-f]{4,})\", \"x\", UserAgent)\n// once blocks of hex chars are removed, extract wordSize blocks of a-z\n| extend Tokens = extract_all(\"([A-Za-z]{4,})\", UserAgentNoHexAlphas)\n// concatenate extracted words to create a summarized user agent for baseline and comparison\n| extend NormalizedUserAgent = strcat_array(Tokens, \"|\")\n| project-away UserAgentNoHexAlphas, Tokens;\nUserAgentAll\n| where StartTime >= ago(endtime)\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), count() by UserAgent, NormalizedUserAgent, SourceIP, Account, Type, RecordType, Operation, EventSource, EventName, sSiteName, csMethod, csUriStem\n| join kind=leftanti\n(\nUserAgentAll\n| where StartTime < ago(endtime)\n| summarize by NormalizedUserAgent, SourceIP, Account, Type, RecordType, Operation, EventSource, EventName, sSiteName, csMethod, csUriStem\n)\non NormalizedUserAgent\n| extend timestamp = StartTime\n| extend Name = tostring(split(Account, '@', 0)[0]), UPNSuffix = tostring(split(Account, '@', 1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected creation of new Datapipeline policy and usage of the attach policy operations (AttachUserPolicy/AttachRolePolicy/AttachGroupPolicy). This might indicate a privilege escalation technique that attackers could use.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\nlet createPolicy =  dynamic([\"CreatePolicy\", \"CreatePolicyVersion\"]);\nlet timeframe = 1d;\nlet lookback = 14d;\n// Creating Master table with all the events to use with materialize for better performance\nlet EventInfo = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName in (EventNameList) or EventName in (createPolicy)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\");\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\nlet FullAdminPolicyEvents =  materialize(  EventInfo\n| where TimeGenerated >= ago(lookback)\n| where EventName in (createPolicy)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and (((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"datapipeline:*\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"datapipeline:CreatePipeline\" and Action contains \"datapipeline:PutPipelineDefinition\" and Action contains \"datapipeline:ActivatePipeline\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"datapipeline:Create*\" and Action contains \"datapipeline:Put*\" and Action contains \"datapipeline:Activate*\")) and Resource == \"*\" and Condition == \"\"\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn,  RecipientAccountId, AccountName, AccountUPNSuffix\n| project-rename StartTime = TimeGenerated  );\nlet PolicyAttach = materialize(  EventInfo\n| where TimeGenerated >= ago(timeframe)\n| where EventName in (EventNameList) and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\"/\")[1])\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName,   UserIdentityType , UserIdentityArn, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, PolicyName\n| extend AttachEvent = pack(\"StartTime\", StartTime, \"EndTime\", EndTime, \"EventName\", EventName, \"UserIdentityType\",   UserIdentityType, \"SourceIpAddress\", SourceIpAddress, \"AccountName\", AccountName, \"AccountUPNSuffix\", AccountUPNSuffix, \"RecipientAccountId\", RecipientAccountId, \"UserIdentityArn\", UserIdentityArn)\n| project EventSource, PolicyName, AttachEvent, RecipientAccountId, AccountName, AccountUPNSuffix, AttachEventCount\n);\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\nFullAdminPolicyEvents\n| join kind=leftouter\n(\n    PolicyAttach\n)\non PolicyName\n| project-away PolicyName1\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for hosts with modified agent settings.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where TimeGenerated > ago(24h)\n| where EventSubType =~ 'Agent'\n| where EventMessage !~ 'create'\n| extend HostCustomEntity = DstHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query will alert on a positive pattern match by Azure WAF for CVE-2021-44228 log4j vulnerability exploitation attempt. If possible, it then decodes the malicious command for further analysis.\n Reference: https://www.microsoft.com/security/blog/2021/12/11/guidance-for-preventing-detecting-and-hunting-for-cve-2021-44228-log4j-2-exploitation/\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "let log4jioc = dynamic([\"jndi\",\"ldap\",\"${::\"]);\nAzureDiagnostics\n| where ResourceProvider == \"MICROSOFT.NETWORK\" and Category in (\"ApplicationGatewayFirewallLog\", \"FrontdoorWebApplicationFirewallLog\")\n| extend details_data_s = column_ifexists(\"details_data_s\", tostring(AdditionalFields.details_data))\n|where requestUri_s has_any (log4jioc) or details_message_s has_any (log4jioc) or details_data_s has_any (log4jioc)\n| extend Malicious = iff(isnotempty( details_data_s),details_data_s,iff(isnotempty( requestUri_s),requestUri_s,\"\"))\n|parse Malicious with * '${' MaliciousCommand '}' * \n| extend EncodeCmd = iff(MaliciousCommand has 'Base64/', split(split(MaliciousCommand, \"Base64/\",1)[0], \"}\", 0)[0], \"\")\n| extend EncodeCmd1 = iff(MaliciousCommand has 'base64/', split(split(MaliciousCommand, \"base64/\",1)[0], \"}\", 0)[0], \"\")\n| extend CmdLine = iff( isnotempty(EncodeCmd), EncodeCmd, EncodeCmd1)\n| extend DecodedCmdLine = base64_decode_tostring(tostring(CmdLine))\n| extend DecodedCmdLine = iff( isnotempty(DecodedCmdLine), DecodedCmdLine, \"Unable to decode/Doesn't need decoding\")\n| project TimeGenerated, Target=column_ifexists(\"hostname_s\", tostring(AdditionalFields.hostname)), MaliciousHost = column_ifexists(\"clientIp_s\", tostring(AdditionalFields.clientIp)) , MaliciousCommand, details_data_s = column_ifexists(\"details_data_s\", tostring(AdditionalFields.details_data)), DecodedCmdLine, Message,\nruleSetType_s = column_ifexists(\"ruleSetType_s\", tostring(AdditionalFields.ruleSetType)), OperationName, SubscriptionId, details_message_s = column_ifexists(\"details_message_s\", tostring(AdditionalFields.details_message)), \ndetails_file_s = column_ifexists(\"details_message_s\", tostring(AdditionalFields.details_file))\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Email sender IP in TI list.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n          ProofpointPOD \n          | where TimeGenerated >= ago(dt_lookBack)\n          | where isnotempty(SrcIpAddr)\n          | extend ProofpointPOD_TimeGenerated = TimeGenerated, ClientIP = SrcIpAddr\n  )\non $left.TI_ipEntity == $right.ClientIP\n| where ProofpointPOD_TimeGenerated < ExpirationDateTime\n| summarize ProofpointPOD_TimeGenerated = arg_max(ProofpointPOD_TimeGenerated, *) by IndicatorId, ClientIP\n| project ProofpointPOD_TimeGenerated, SrcUserUpn, DstUserUpn, SrcIpAddr, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore,\nTI_ipEntity, ClientIP\n| extend timestamp = ProofpointPOD_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for new users created.\n Topic: CiscoDuoSecurity"}, {"role": "assistant", "content": "CiscoDuo\n| where TimeGenerated > ago(24h)\n| where DvcAction == \"user_create\"\n| project TimeGenerated, SrcIpAddr, SrcUserName, DstUserName\n| extend AccountCustomEntity = SrcUserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies previously unseen IP and user agents in a Dataverse instance following disabling of cookie binding protection. See https://docs.microsoft.com/power-platform/admin/block-cookie-replay-attack Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_frequency = 1h;\nlet query_lookback = 14d;\nlet cookie_lifetime = 24h;\nlet cookie_binding_disabled_events = DataverseActivity\n    | where TimeGenerated >= ago(query_lookback)\n    | where Message == \"Update\" and EntityName == \"organization\"\n    | mv-expand Fields\n    | where Fields.Name == \"enableipbasedcookiebinding\" and Fields.Value == 'False'\n    | summarize CookieBindingDisabled = min(TimeGenerated) by CookieBindingDisabledBy = UserId, InstanceUrl;\nlet current_activity = cookie_binding_disabled_events\n    | join kind=inner(DataverseActivity\n        | where UserId !endswith \"@onmicrosoft.com\" and UserId !endswith \"@microsoft.com\"\n        | where isnotempty(ClientIp) and isnotempty(UserAgent)\n        | where TimeGenerated >= ago(query_frequency + cookie_lifetime)\n        | summarize LatestEvent = arg_max(TimeGenerated, *) by UserId, ClientIp, InstanceUrl)\n        on InstanceUrl;\nlet users_switched_ip = current_activity\n    | summarize IPCount = count() by UserId, InstanceUrl\n    | where IPCount > 1\n    | join kind=inner (current_activity) on UserId, InstanceUrl\n    | summarize arg_max(LatestEvent, *) by UserId, InstanceUrl;\nusers_switched_ip\n| join kind = inner (DataverseActivity\n    | where TimeGenerated >= ago (query_lookback)\n    | where UserId !endswith \"@onmicrosoft.com\" and UserId !endswith \"@microsoft.com\"\n    | where isnotempty(ClientIp) and isnotempty(UserAgent)\n    | project-rename\n        HistoricalTime = TimeGenerated,\n        HistoricalIP = ClientIp,\n        HistoricalAgent = UserAgent)\n    on UserId, InstanceUrl\n| where HistoricalTime >= ago(query_lookback) and HistoricalTime < LatestEvent\n| summarize\n    HistoricalIPs = make_set(HistoricalIP, 100),\n    HistoricalAgents = make_set(HistoricalAgent, 100)\n    by\n    UserId,\n    UserAgent,\n    ClientIp,\n    InstanceUrl,\n    LatestEvent,\n    CookieBindingDisabled,\n    CookieBindingDisabledBy\n| where (HistoricalIPs !has ClientIp) and (HistoricalAgents !has UserAgent)\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    LatestEvent,\n    UserId,\n    ClientIp,\n    UserAgent,\n    InstanceUrl,\n    HistoricalIPs,\n    HistoricalAgents,\n    CookieBindingDisabled,\n    CookieBindingDisabledBy,\n    AccountName,\n    UPNSuffix,\n    CloudAppId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for insecure file transfer sources.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where TimeGenerated > ago(24h)\n| where NetworkApplicationProtocol in~ ('HTTP', 'FTP')\n| project SrcUserName, SrcIpAddr, DstIpAddr, DstPortNumber, File=inspected_document\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when user email linked to account changes.\n Topic: SlackAudit"}, {"role": "assistant", "content": "SlackAudit\n| where TimeGenerated between (ago(14d) .. (1d))\n| summarize max(TimeGenerated) by SrcUserName, SrcUserEmail\n| join (SlackAudit \n      | where Action =~ 'user_login'\n      | project SrcIpAddr, SrcUserName, NewUserEmail = SrcUserEmail) on SrcUserName\n| where NewUserEmail != SrcUserEmail\n| extend AccountCustomEntity = SrcUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0036 (Theom has observed shadow or clone databases/tables. Additionally, it has observed atypical accesses to these data stores. As per this requirement, use this information to apply data access control lists or access permissions and enforce data retention policies)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0036\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query detects mailbox exports from on-prem Exchange servers, followed by export removal from same host within a short time window. This is a common attack pattern used by attackers when exfiltrating emails from a target environment.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// Adjust the timeframe to change the window events need to occur within to alert\nlet timeframe = 1h;\nSecurityEvent\n| where EventID == 4688\n| where Process in~ (\"powershell.exe\", \"cmd.exe\")\n| where CommandLine has 'New-MailboxExportRequest'\n| summarize by Computer, timekey = bin(TimeGenerated, timeframe), CommandLine, SubjectUserName\n| join kind=inner (SecurityEvent\n| where EventID == 4688\n| where Process in~ (\"powershell.exe\", \"cmd.exe\")\n| where CommandLine has 'Remove-MailboxExportRequest'\n| summarize by Computer, timekey = bin(TimeGenerated, timeframe), CommandLine, SubjectUserName) on Computer, timekey, SubjectUserName\n| extend commands = pack_array(CommandLine1, CommandLine)\n| summarize by timekey, Computer, tostring(commands), SubjectUserName\n| project-reorder timekey, Computer, SubjectUserName, ['commands']\n| extend HostCustomEntity = Computer, AccountCustomEntity = SubjectUserName\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Account_0_Name = SubjectUserName\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies compromises and attacks and detect malicious activities in ones domain entity from TI.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d; \nlet list_tlds =\n  ThreatIntelligenceIndicator\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now()\n    | where isnotempty(DomainName)\n    | extend DomainName = tolower(DomainName)\n    | extend parts = split(DomainName, '.')\n    | extend tld = parts[(array_length(parts) - 1)]\n    | summarize count() by tostring(tld)\n    | summarize make_set(tld);\nlet Domain_Indicators =\n  ThreatIntelligenceIndicator\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now()\n    | extend TI_DomainEntity = DomainName\n    | where isnotempty(TI_DomainEntity);\n  Domain_Indicators\n    | join kind=innerunique (\n  CloudAppEvents\n    | extend IngestionTime = ingestion_time()\n    | where IngestionTime > ago(dt_lookBack)\n    | extend PAUrl = columnifexists(\"RequestURL\", \"None\")\n    | extend Domain = trim('\"', tostring(parseurl(PAUrl).Host))\n    | extend Domain = tolower(Domain)\n    | extend parts = split(Domain, '.')\n    | extend tld = parts[(array_length(parts) - 1)]\n    | extend CloudAppEvents_TimeGenerated = TimeGenerated) on $left.TI_DomainEntity == $right.Domain\n    | where CloudAppEvents_TimeGenerated < ExpirationDateTime\n    | summarize CloudAppEvents_TimeGenerated = argmax(CloudAppEvents_TimeGenerated, *) by IndicatorId\n    | extend Description = max_CloudAppEvents_TimeGenerated_Description, ActivityGroupNames = max_CloudAppEvents_TimeGenerated_ActivityGroupNames, ThreatType = max_CloudAppEvents_TimeGenerated_ThreatType, ExpirationDateTime = max_CloudAppEvents_TimeGenerated_ExpirationDateTime, ConfidenceScore = max_CloudAppEvents_TimeGenerated_ConfidenceScore, DomainName = max_CloudAppEvents_TimeGenerated_DomainName, ProviderName = max_CloudAppEvents_TimeGenerated_IndicatorProvider, AlertSeverity = max_CloudAppEvents_TimeGenerated_ThreatSeverity, IPAddress = max_CloudAppEvents_TimeGenerated_IPAddress\n    | project CloudAppEvents_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DomainName, ProviderName, AlertSeverity, IPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection identifies instances of a base64 encoded PE file header seen in the process command line parameter.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n | where EventID == 4688\n | where isnotempty(CommandLine)\n | where CommandLine contains \"TVqQAAMAAAAEAAA\"\n | extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Attackers may delete builds after modifying pipelines to minimize traces. This query spots such deletions within an hour of pipeline changes, aiding in system footprint reduction.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n| where OperationName =~ \"Release.ReleaseDeleted\"\n| extend PipelineId = tostring(Data.PipelineId)\n| extend PipelineName = tostring(Data.PipelineName)\n| extend timekey = bin(TimeGenerated, 1h)\n| join (AzureDevOpsAuditing\n| where OperationName =~ 'Release.ReleasePipelineModified'\n| extend PipelineId = tostring(Data.PipelineId)\n| extend PipelineName = tostring(Data.PipelineName)\n| extend timekey = bin(TimeGenerated, 1h)) on timekey, PipelineId, ActorUPN\n| where TimeGenerated1 < TimeGenerated\n| extend ReleaseName = tostring(Data.ReleaseName)\n| project-rename TimeModified = TimeGenerated1, TimeDeleted = TimeGenerated, ModifyOperation = OperationName1, ModifyUser=ActorUPN1, ModifyIP=IpAddress1, ModifyUA= UserAgent1, DeleteOperation=OperationName, DeleteUser=ActorUPN, DeleteIP=IpAddress, DeleteUA=UserAgent\n| project-reorder TimeModified, ProjectName, PipelineName, ModifyUser, ModifyIP, ModifyUA, TimeDeleted, DeleteOperation, DeleteUser, DeleteIP, DeleteUA,ReleaseName\n| extend timestamp = TimeDeleted, AccountCustomEntity = DeleteUser, IPCustomEntity = DeleteIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This policy detects when an application or service account gained new access to your assets. This policy is defined by Authomize and can be edited to change the configuration. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"New service account gained access to IaaS resource\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert creates an incident when Image classification AI Model Evasion high suspicious, high severity vulnerability detected from the AIShield.\n Topic: AIShield AI Security Monitoring"}, {"role": "assistant", "content": "AIShield\n| where Message has 'Image Classification AI Model Evasion Attack Identified'\n| where Severity =~ 'High'\n| where SuspiciousLevel =~ 'high suspicious attack'\n| extend NTDomain = tostring(split(Computer, '\\\\')[0]), HostName = tostring(split(Computer, '.')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for unusual TLDs.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "let known_tlds =\nGCPCloudDNS\n| where TimeGenerated between (ago(30d) .. ago(1d))\n| extend tld = extract(@'.*\\.(\\w+)\\.$', 1, Query)\n| summarize a_tld = makeset(tld)\n| extend k=1;\nknown_tlds\n| join (GCPCloudDNS\n| where TimeGenerated > ago(24h)\n| where isnotempty(Query)\n| extend tld = extract(@'.*\\.(\\w+)\\.$', 1, Query)\n| extend k=1) on k\n| where a_tld !has tld\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert is desinged to monitor Azure policies aligned with the Maturity Model for Event Log Management (M-21-31) standard. The alert triggers when EL2 policy compliance falls below 70% within a 1 week timeframe.\n Topic: MaturityModelForEventLogManagementM2131"}, {"role": "assistant", "content": "SecurityRecommendation\n| where RecommendationDisplayName <> \"\"\n| extend MaturityLevel=iff(RecommendationDisplayName has_any(\"agent\",\"extension\",\"retention\",\"logs encryption\",\"collect\",\"retained\",\"log profile\",\"CloudTrail\",\"metric\",\"AWS\",\"GCP\",\"DNS\",\"Auditing\",\"Flow\",\"logging\",\"usage\"), \"Event Logging (EL0)\",\niff(RecommendationDisplayName has_any(\"container registries\",\"logic apps\",\"Enhanced monitoring\",\"IoT Hub\",\"Event Hub\",\"App Service\", \"Kubernetes\",\"updates\",\"email\", \"automation\", \"adaptive\"), \"Advanced Event Logging (EL3)\",\niff(RecommendationDisplayName has_any(\"signatures\",\"CMK\",\"CMEK\",\"double encryption\",\"managed key\",\"KMS\",\"container\",\"Watcher\"), \"Intermediate Event Logging (EL2)\",\niff(RecommendationDisplayName has_any(\"Exploit Guard\",\"endpoint protection\",\"Antimalware\",\"health\",\"VPC\",\"Defender\",\"Vulnerabilities\",\"vulnerability\",\"diagnostic\",\"Key\",\"activity log alert\",\"\"), \"Basic Event Logging (EL1)\",\"Other\"))))\n| summarize arg_max(TimeGenerated, *) by RecommendationDisplayName, AssessedResourceId, MaturityLevel\n| summarize Failed = countif(RecommendationState == \"Unhealthy\"), Passed = countif(RecommendationState == \"Healthy\"), Total = countif(RecommendationState == \"Healthy\" or RecommendationState == \"Unhealthy\") by MaturityLevel\n| extend PassedControls = (Passed/todouble(Total))*100\n| extend RemediationLink = strcat('https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/22')\n| project MaturityLevel, Total, PassedControls, Passed, Failed, RemediationLink, LastObserved=now()\n| where MaturityLevel <> ''\n| where MaturityLevel == \"Intermediate Event Logging (EL2)\"\n| where PassedControls < 70 \n//Adjust Either FailedRatePercentage or PasedRatePercentage Thresholds within   Organizational Needs\n| sort by PassedControls desc\n| extend URLCustomEntity = RemediationLink\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies instances where malware intentionally configures the browser settings for its use by modifying the following registry entries by Nylon Typhoon threat actor.\n Topic: Legacy IOC based Threat Protection"}, {"role": "assistant", "content": "let reg_paths = dynamic([\"HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Internet Explorer\\\\Main\", \n                        \"HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Internet Explorer\\\\Recovery\", \n                        \"HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Internet Explorer\\\\Privacy\", \n                        \"HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\ZoneMap\"\n                        ]);\nlet reg_keys = dynamic([\"Start Page\", \"DisableFirstRunCustomize\", \"RunOnceComplete\", \"RunOnceHasShown\", \"Check_Associations\", \"AutoRecover\", \"ClearBrowsingHistoryOnExit\", \"Completed\", \"IEHarden\"]);\n(union isfuzzy=true\n(\nSecurityEvent\n| where EventID == 4657\n| where ObjectName has_any (reg_paths) and ObjectValueName has_any (reg_keys)\n| summarize Count=count() by Computer, Account, ObjectName\n| extend AccountCustomEntity = Account, HostCustomEntity = Computer\n),\n(\nWindowsEvent\n| where EventID == 4657 and EventData  has_any (reg_paths) and EventData has_any (reg_keys)\n| extend ObjectName = tostring(EventData.ObjectName)\n| extend ObjectValueName = tostring(EventData.ObjectValueName)\n| where ObjectName has_any (reg_paths) and ObjectValueName has_any (reg_keys)\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| summarize Count=count() by Computer, Account, ObjectName\n| extend AccountCustomEntity = Account, HostCustomEntity = Computer\n),\n(\nEvent\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID in (12, 13)\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| where TargetObject has_any (reg_paths) and TargetObject has_any (reg_keys)\n| summarize Count=count() by Computer, UserName, tostring(TargetObject)\n| extend AccountCustomEntity = UserName, HostCustomEntity = Computer\n),\n(\nimRegistry\n| where RegistryKey has_any (reg_paths) and RegistryValue has_any (reg_keys)\n| summarize Count=count() by Dvc, Username, RegistryKey\n| extend AccountCustomEntity = Username, HostCustomEntity = Dvc\n)\n)\n| extend NTDomain = tostring(split(AccountCustomEntity, '\\\\', 0)[0]), Name = tostring(split(AccountCustomEntity, '\\\\', 1)[0])\n| extend HostName = tostring(split(HostCustomEntity, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(HostCustomEntity, '.'), 1, -1), '.'))\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Triggers asset is down.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where EventOriginalType has 'Asset Down' or EventType has 'Asset Down'\n| project TimeGenerated, DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection query aims to correlate potentially suspicious user activities logged in Google Cloud Platform (GCP) Audit Logs with security alerts originating from Microsoft Security products. This correlation facilitates the identification of potential cross-cloud security incidents. By summarizing these findings, the query provides valuable insights into cross-cloud identity threats and their associated details, enabling organizations to respond promptly and mitigate potential risks effectively.\n Topic: Multi Cloud Attack Coverage Essentials - Resource Abuse"}, {"role": "assistant", "content": "// Filter GCP Audit Logs to exclude service accounts\nGCPAuditLogs \n| where PrincipalEmail !endswith \"gserviceaccount.com\"\n// Exclude system-related authentication information\n| where AuthenticationInfo !has (\"system:\")\n// Extract GCP request name and relevant attributes\n| extend GCPRequestName= parse_json(Request).name\n| extend\n    GCPAccoutType= tostring(split(GCPRequestName, \"/\")[2]),\n    GCPUserIdentity = iff(isempty(tostring(split(GCPRequestName, \"/\")[3])), tostring(parse_json(AuthenticationInfo).principalEmail), \"na\"), \n    GCPUserIp = tostring(parse_json(RequestMetadata).callerIp),\n    GCPCallerUA = tostring(parse_json(RequestMetadata).callerSuppliedUserAgent)\n// Filter out empty or service account identities\n| where isnotempty(GCPUserIdentity) and GCPUserIdentity !endswith \"gserviceaccount.com\"\n// Select relevant attributes for further analysis\n| project\n    PrincipalEmail,\n    GCPUserIdentity,\n    GCPAccoutType,\n    GCPRequestName,\n    GCPCallerUA,\n    Request,\n    RequestMetadata,\n    GCPUserIp,\n    MethodName,\n    ServiceName,\n    GCPEventTime= TimeGenerated,\n    ProjectId\n// Join GCP Audit Logs with SecurityAlert data based on user identity and IP\n| join kind=inner (    \n    SecurityAlert \n    // Exclude alerts from Azure Sentinel\n    | where ProductName !in (\"Azure Sentinel\")\n    // Extract IP entities from alert data\n    | extend AlertIPEntity=  tostring(extract(@\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", 0, Entities))\n    | extend\n        AlertUserUPN = tostring(extract(@'\\b[\\w\\.\\-]+@[\\w\\.\\-]+\\b', 0, Entities)),\n        AlertTime= TimeGenerated\n    // Filter out empty user identities and IP entities\n    | where isnotempty(AlertIPEntity) and isnotempty(AlertUserUPN)\n    )\n    on $left.GCPUserIdentity == $right.AlertUserUPN and $left.GCPUserIp == $right.AlertIPEntity\n// Summarize the data, calculating time differences and aggregating attributes\n| summarize\n    FirstAlert=min(AlertTime),\n    LastAlert=max(AlertTime),\n    TimeDiff=datetime_diff('minute', min(AlertTime), min(GCPEventTime)),\n    MethodName=make_set(MethodName),\n    ServiceName= make_set(ServiceName),\n    GCPProjctId=make_set(ProjectId),\n    Request=make_set(Request),\n    GCPCallerUA=make_set(GCPCallerUA)\n    by\n    AlertUserUPN,\n    AlertIPEntity,\n    GCPUserIp,\n    GCPUserIdentity,\n    AlertSeverity,\n    AlertName,\n    AlertLink,\n    Description,\n    Tactics,\n    ProductName,\n    SystemAlertId,\n    GCPAccoutType\n// Extend the data with additional attributes\n| extend\n    Name = tostring(split(GCPUserIdentity, \"@\")[0]),\n    UPNSuffix = tostring(split(GCPUserIdentity, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "While most of these values are associated with legitimate bots or crawlers, malicious actors may sometimes spoof or manipulate user agent headers to disguise their activities. It is important to investigate their activities.\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let lookback = 1d;\n// You can add or remove items from this list as per your requirement.\nlet BotandCrawlersList = dynamic (['bot','crawler','baiduspider','80legs','ia_archiver','voyager','wget','yahoo','slurp','mediapartners-google','facebookexternalhit','facebookcatalog','okhttp','cURL','Bytespider']);\n  _Im_WebSession (starttime=ago(lookback))\n  | where HttpUserAgent has_any (BotandCrawlersList)\n  | summarize EventCount = count(), EventStartTime=min(TimeGenerated), EventEndTime=max(TimeGenerated), UserAgentList = make_set(HttpUserAgent,100), URLs = make_set(Url,100) by SrcIpAddr, SrcUsername, SrcHostname\n  | extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\")\n  | order by EventCount desc\n  | extend IP_0_Address = SrcIpAddr\n  | extend Account_0_Name = Name\n  | extend Account_0_UPNSuffix = UPNSuffix\n  | extend Host_0_HostName = SrcHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects ZPA connections by dormant user.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "let dt_lastlogintime = 14d;\nlet activeUsers =\nZPAEvent \n| where TimeGenerated > ago(dt_lastlogintime)\n| where DvcAction == 'open'\n| summarize lastLoginTime = max(TimeGenerated) by DstUserName\n| summarize makelist(DstUserName);\nZPAEvent\n| where DstUserName !in~ (activeUsers)\n| summarize EventCount = count() by DstUserName\n| project-away EventCount\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for emails which size is 2 times grater than average size of outbound email for user.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet out_msg = ProofpointPOD\n| where TimeGenerated between (lookback..starttime)\n| where EventType == 'message'\n| where NetworkDirection == 'outbound'\n| where SrcUserUpn != '';\nProofpointPOD\n| where TimeGenerated between(starttime..endtime)\n| where EventType == 'message'\n| where NetworkDirection == 'outbound'\n| where SrcUserUpn != ''\n| summarize AvgMsgSize = toint(avg(NetworkBytes)) by SrcUserUpn\n| join out_msg on SrcUserUpn\n| where NetworkBytes > AvgMsgSize*2\n| project SrcUserUpn, AvgMsgSize, NetworkBytes\n| extend AccountCustomEntity = SrcUserUpn"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a user logins from new device.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where EventType =~ 'access'\n| where EventMessage =~ 'Login'\n| summarize dev = makeset(Dvc) by User\n| join (Bitglass\n        | where EventType =~ 'access'\n        | where EventMessage =~ 'Login') on User\n| where dev !contains Dvc\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows errors events.\n Topic: Tomcat"}, {"role": "assistant", "content": "TomcatEvent\n| where TimeGenerated > ago(24d)\n| where EventType =~ 'ErrorLog'\n| where EventMessage has \"error\"\n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for new users created.\n Topic: Oracle Cloud Infrastructure"}, {"role": "assistant", "content": "OCILogs\n| where TimeGenerated > ago(24h)\n| where data_eventName_s =~ 'CreateUser'\n| extend AccountCustomEntity = data_definedTags_Oracle_Tags_CreatedBy_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "VIP Account with more than 6 failed logon attempts in 10 minutes, include your own VIP list in the table below\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// Create DataTable with your own values, example below shows dummy usernames that are authorized and for what domain\nlet List = datatable(VIPUser:string, Domain:string)[\"Bob\", \"Domain\", \"joe\", \"domain\", \"MATT\", \"DOMAIN\"];\nList | extend Account = strcat(Domain,\"\\\\\",VIPUser) | join kind= inner (\nSecurityEvent \n| where EventID == \"4625\"\n| where AccountType == \"User\"\n| where LogonType == \"2\" or LogonType == \"3\"\n) on Account \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), FailedVIPLogons = count() by LogonType, Account\n| where FailedVIPLogons >= 6\n| extend timestamp = StartTimeUtc, NTDomain = tostring(split(Account, '\\\\', 0)[0]), UserName = tostring(split(Account, '\\\\', 1)[0])\n| extend Account_0_NTDomain = NTDomain \n| extend Account_0_Name = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Triggers when a new asset has been added into the environment.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where EventOriginalType has 'New Asset' or EventType has 'New Asset'\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": " This query will detect logins from guest account which was recently deleted. \nFor any successful logins from deleted identities should be investigated further if any existing user accounts have been altered or linked to such identity prior deletion\n Topic: Detections"}, {"role": "assistant", "content": "let query_frequency = 1h;\nlet query_period = 1d;\nAuditLogs\n| where TimeGenerated > ago(query_frequency)\n| where Category =~ \"UserManagement\" and OperationName =~ \"Delete user\"\n| mv-expand TargetResource = TargetResources\n| where TargetResource[\"type\"] == \"User\" and TargetResource[\"userPrincipalName\"] has \"#EXT#\"\n| extend ParsedDeletedUserPrincipalName = extract(@\"^[0-9a-f]{32}([^\\#]+)\\#EXT\\#\", 1, tostring(TargetResource[\"userPrincipalName\"]))\n| extend\n    Initiator = iif(isnotempty(InitiatedBy[\"app\"]), tostring(InitiatedBy[\"app\"][\"displayName\"]), tostring(InitiatedBy[\"user\"][\"userPrincipalName\"])),\n    InitiatorId = iif(isnotempty(InitiatedBy[\"app\"]), tostring(InitiatedBy[\"app\"][\"servicePrincipalId\"]), tostring(InitiatedBy[\"user\"][\"id\"])),\n    Delete_IPAddress = tostring(InitiatedBy[tostring(bag_keys(InitiatedBy)[0])][\"ipAddress\"])\n| project Delete_TimeGenerated = TimeGenerated, Category, Identity, Initiator, Delete_IPAddress, OperationName, Result, ParsedDeletedUserPrincipalName, InitiatedBy, AdditionalDetails, TargetResources, InitiatorId, CorrelationId\n| join kind=inner (\n    SigninLogs\n    | where TimeGenerated > ago(query_period)\n    | where ResultType == 0\n    | summarize take_any(*) by UserPrincipalName\n    | extend ParsedUserPrincipalName = translate(\"@\", \"_\", UserPrincipalName)\n    | project SigninLogs_TimeGenerated = TimeGenerated, UserPrincipalName, UserDisplayName, ResultType, ResultDescription, IPAddress, LocationDetails, AppDisplayName, ResourceDisplayName, ClientAppUsed, UserAgent, DeviceDetail, UserId, UserType, OriginalRequestId, ParsedUserPrincipalName\n    ) on $left.ParsedDeletedUserPrincipalName == $right.ParsedUserPrincipalName\n| where SigninLogs_TimeGenerated > Delete_TimeGenerated\n| project-away ParsedDeletedUserPrincipalName, ParsedUserPrincipalName\n| extend\n    AccountName = tostring(split(UserPrincipalName, \"@\")[0]),\n    AccountUPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rare destination ports.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where TimeGenerated > ago(24h)\n| summarize count() by DstIpAddr, DstPortNumber\n| order by count_ asc\n| top 10 by count_\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects known malicious user agents\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "let mal_ua_list = dynamic(['Nikto', '(hydra)', '.nasl', 'absinthe', 'advanced email extractor', 'arachni/', 'autogetcontent', 'bilbo', 'BFAC', 'brutus', 'brutus/aet', 'bsqlbf', 'cgichk', 'cisco-torch', 'commix', 'core-project/1.0', 'crimscanner/', 'datacha0s', 'dirbuster', 'domino hunter', 'dotdotpwn', 'email extractor', 'fhscan core 1.', 'floodgate', 'get-minimal', 'gootkit auto-rooter scanner', 'grabber', 'grendel-scan', 'havij', 'inspath', 'internet ninja', 'jaascois', 'zmeu', 'masscan', 'metis', 'morfeus', 'mysqloit', 'n-stealth', 'nessus', 'netsparker', 'nmap nse', 'nmap scripting engine', 'nmap-nse', 'nsauditor', 'openvas', 'pangolin', 'paros', 'pmafind', 'prog.customcrawler', 'qualys was', 's.t.a.l.k.e.r.', 'security scan', 'springenwerk', 'sql power injector', 'sqlmap', 'sqlninja', 'teh forest lobster', 'this is an exploit', 'toata dragostea', 'toata dragostea mea pentru diavola', 'uil2pn', 'user-agent:', 'vega/', 'voideye', 'w3af.sf.net', 'w3af.sourceforge.net', 'w3af.org', 'webbandit', 'webinspect', 'webshag', 'webtrends security analyzer', 'webvulnscan', 'whatweb', 'whcc/', 'wordpress hash grabber', 'xmlrpc exploit', 'WPScan', 'XSpider', 'SF/', 'FooBar/42', 'ScanAlert', 'Webscanner', 'Webster', 'fantomCrew', 'fantomBrowser', 'visvo', 'magereport', 'ltx71', 'websiteprotection', 'BigCliqueBOT', '(BOT for JCE)']);\nNGINXHTTPServer\n| where HttpUserAgentOriginal has_any (mal_ua_list)\n| extend IPCustomEntity = SrcIpAddr, MalwareCustomEntity = HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule is triggered when low patch disk store space is detected.\n Topic: VMWareESXi"}, {"role": "assistant", "content": "let threshold = 100;\nVMwareESXi\n| where SyslogMessage has ('Patch store disk')\n| extend sp = toreal(extract(@'free space is:\\s(\\d+)', 1, SyslogMessage)) / 1000000000\n| where sp < threshold\n| extend h = 'Hypervisor'\n| extend HostCustomEntity = h\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when Data Access Logging is disabled.\n Topic: GoogleCloudPlatformIAM"}, {"role": "assistant", "content": "GCP_IAM\n| where PayloadMethodname == 'SetIamPolicy'\n| extend s = parse_json(todynamic(PayloadRequestPolicyAuditconfigs))[0]['auditLogConfigs']\n| where isempty(s)\n| extend AccountName = tostring(split(PayloadAuthenticationinfoPrincipalemail, \"@\")[0]), AccountUPNSuffix = tostring(split(PayloadAuthenticationinfoPrincipalemail, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for incident domains.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(http_url)\n| extend u = parse_url(http_url)\n| extend domain=u.Host\n| summarize count() by tostring(domain), SrcUserName\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "An attacker could delete a network ACL and gain access to an instance from anywhere. Verify this action with the entity.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == 'DeleteNetworkAclEntry' and isempty(ErrorMessage) and isempty(ErrorCode)\n| extend egress=parse_json(RequestParameters)['egress']\n| where egress == false\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare files requested\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "NGINXHTTPServer\n| where TimeGenerated > ago(24h)\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| summarize RareFiles = count() by File\n| top 20 by RareFiles asc \n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when new user downloads forbidden file types.\n Topic: Box"}, {"role": "assistant", "content": "let forbidden_files = dynamic(['ps1', 'bat', 'scr', 'sh']);\nBoxEvents\n| where EventType =~ 'DOWNLOAD'\n| extend file_type = extract(@'\\.(\\w+)$', 1, SourceItemName)\n| where file_type in (forbidden_files)\n| extend AccountCustomEntity = SrcUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query hunts for Nylon Typhoon-related activity, specifically data collection and staging. It looks for use of tools like xcopy and renamed archiving tools on hosts with observed signatures.\n Topic: Legacy IOC based Threat Protection"}, {"role": "assistant", "content": "let xcopy_tokens = dynamic([\"xcopy\", \"\\\\windows\\\\temp\\\\wmi\", \"/S/Y/C\"]);\nlet archive_tokens = dynamic([\"\\\\windows\\\\temp\\\\wmi\", \".rar\", \".7zip\"]);\nlet SigNames = dynamic([\"Backdoor:Win32/Leeson\", \"Trojan:Win32/Kechang\", \"Backdoor:Win32/Nightimp!dha\", \"Trojan:Win32/QuarkBandit.A!dha\", \"TrojanSpy:Win32/KeyLogger\"]);\n(union isfuzzy=true\n(DeviceProcessEvents  \n| where ProcessCommandLine has_all(xcopy_tokens) or (ProcessCommandLine has_all (archive_tokens)) \n| join kind=leftouter (\nSecurityAlert\n| where ProductName == \"Microsoft Defender Advanced Threat Protection\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| where isnotempty(ThreatName)\n| extend AlertRiskScore =iif(ThreatName has_any (SigNames), 1.0, 0.5))\n| extend AlertRiskScore = iif(isempty(AlertRiskScore), 0.0 , AlertRiskScore)\n| project-reorder  TimeGenerated, DeviceName, DeviceId, ProcessCommandLine, AccountName\n| extend timestamp = TimeGenerated, AccountCustomEntity = AccountName, HostCustomEntity = DeviceName,  ProcessCustomEntity = InitiatingProcessFileName\n),\n(imProcessCreate\n| where (CommandLine has_all (xcopy_tokens)) or (CommandLine has_all (archive_tokens))\n| extend timestamp = TimeGenerated, HostCustomEntity = DvcHostname , AccountCustomEntity = ActorUsername, ProcessCustomEntity = TargetProcessName\n),\n(SecurityEvent\n| where EventID == '4688'\n| where (CommandLine has_all (xcopy_tokens)) or (CommandLine has_all (archive_tokens))\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type, CommandLine\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName\n),\n(WindowsEvent\n| where EventID == '4688' and (EventData has_all (xcopy_tokens) or EventData has_all (archive_tokens))\n| extend CommandLine = tostring(EventData.CommandLine) \n| where (CommandLine has_all (xcopy_tokens)) or (CommandLine has_all (archive_tokens))\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend NewProcessId = tostring(EventData.NewProcessId)\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type, CommandLine\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName\n)\n)\n| extend NTDomain = tostring(split(AccountCustomEntity, '\\\\', 0)[0]), Name = tostring(split(AccountCustomEntity, '\\\\', 1)[0])\n| extend HostName = tostring(split(HostCustomEntity, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(HostCustomEntity, '.'), 1, -1), '.'))\n| extend Account_0_Name = Name\n| extend Account_0_NTDomain = NTDomain\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n| extend Process_0_ProcessId = ProcessCustomEntity\n| extend Process_0_CommandLine = CommandLineCustomEntity\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a service account integration token has been created, renamed, verified, or revoked. Once this analytics rule is triggered it will group all related future alerts for upto an hour when all related entities are the same.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "OnePasswordEventLogs_CL\n| where log_source == \"auditevents\"\n| where action has_any(\"create\", \"trename\", \"tverify\", \"trevoke\")\n| where object_type == \"satoken\"\n| extend\n    ActorUsername = actor_details.email\n    , SrcIpAddr = session.ip"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection uses Sysmon telemetry to detect suspicious local connections via a named pipe to the AD FS configuration database (Windows Internal Database).\nIn order to use this query you need to be collecting Sysmon EventIdD 18 (Pipe Connected).\nIf you do not have Sysmon data in your workspace this query will raise an error stating:\nFailed to resolve scalar expression named \"[@Name]\"\n Topic: Windows Security Events"}, {"role": "assistant", "content": "// Adjust this to use a longer timeframe to identify ADFS servers\n//let lookback = 6d;\n// Adjust this to adjust the key export detection  timeframe\n//let timeframe = 1d;\n// Start be identifying ADFS servers to reduce FP chance\nlet ADFS_Servers = (\nEvent\n//| where TimeGenerated > ago(timeframe+lookback)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 18\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, MG, ManagementGroupName, _ResourceId)\n| extend Image = column_ifexists(\"Image\", \"\")\n| extend process = split(Image, '\\\\', -1)[-1]\n| where process =~ \"Microsoft.IdentityServer.ServiceHost.exe\"\n| summarize by Computer);\n// Look for ADFS servers where Named Pipes event are present\nEvent\n//| where TimeGenerated > ago(timeframe)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 18\n| where Computer in~ (ADFS_Servers)\n| extend RenderedDescription = tostring(split(RenderedDescription, \":\")[0])\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| extend RuleName = column_ifexists(\"RuleName\", \"\"),\n    TechniqueId = column_ifexists(\"TechniqueId\", \"\"),\n    TechniqueName = column_ifexists(\"TechniqueName\", \"\"),\n    Image = column_ifexists(\"Image\", \"\"),\n    PipeName = column_ifexists(\"PipeName\", \"\"),\n    EventType = column_ifexists(\"EventType\", \"\")\n| parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName\n// Look for Pipe related to querying the WID\n| where PipeName == \"\\\\MICROSOFT##WID\\\\tsql\\\\query\"\n| extend process = split(Image, '\\\\', -1)[-1]\n// Exclude expected processes\n| where process !in (\"Microsoft.IdentityServer.ServiceHost.exe\", \"Microsoft.Identity.Health.Adfs.PshSurrogate.exe\", \"AzureADConnect.exe\", \"Microsoft.Tri.Sensor.exe\", \"wsmprovhost.exe\",\"mmc.exe\", \"sqlservr.exe\")\n| extend Operation = RenderedDescription\n| project-reorder TimeGenerated, EventType, Operation, process, Image, Computer, UserName\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(UserName, @'\\')[1]), AccountNTDomain = tostring(split(UserName, @'\\')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies suspicious behaviors in hierarchy security including:\n- Hierarchy security disabled.\n- User assigns themselves as a manager.\n- User assigns themselves to a monitored position.\n Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let monitored_position_ids = dynamic([\n    // Enter a list of monitored position ID (guids)\n    //\"79380ac5-da2a-ed11-9db1-000d3a58d546\"\n    ]);\nlet query_frequency = 1h;\nlet security_disabled_events = DataverseActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where Message == \"Update\" and EntityName == \"organization\"\n    | mv-expand Fields\n    | where Fields.Name == \"ishierarchicalsecuritymodelenabled\"\n    | where Fields.Value == \"False\"\n    | extend Message = \"Hierarchy security has been disabled\"\n    | project TimeGenerated, UserId, ClientIp, InstanceUrl, Message;\nlet assign_self_as_manager_events = DataverseActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where Message == \"Update\" and EntityName == \"systemuser\"\n    | mv-expand Fields\n    | where Fields.Name == \"parentsystemuserid\"\n    | extend ModifiedManager = tostring(Fields.Value)\n    | where SystemUserId == ModifiedManager\n    | extend Message = \"User added self as manager of another user\";\nlet assign_self_to_position_events = DataverseActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where Message == \"Update\" and EntityName == \"systemuser\"\n    | mv-expand Position = Fields\n    | where Position.Name == \"positionid\" and tostring(Position.Value) in (monitored_position_ids)\n    | mv-expand Target = Fields\n    | where Target.Name == \"systemuserid\"\n    | extend UserAssigned = tostring(Target.Value)\n    | where SystemUserId == UserAssigned\n    | extend\n        Message = \"User assigned self to a monitored position\",\n        PositionId = tostring(Position.Value);\nunion\n    security_disabled_events,\n    assign_self_as_manager_events,\n    assign_self_to_position_events\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    TimeGenerated,\n    UserId,\n    ClientIp,\n    InstanceUrl,\n    Message,\n    PositionId,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Single high threat level domain queried at least 200 times in 1 hour regardless of source. Customize query count, scheduling, responses and more. This rule depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC**](https://aka.ms/sentinel-InfobloxCloudDataConnector-parser).\n Topic: Infoblox Cloud Data Connector"}, {"role": "assistant", "content": "let threshold = 200;\nInfobloxCDC\n| where DeviceEventClassID has_cs \"RPZ\"\n| where ThreatLevel_Score >= 80\n| summarize count() by DestinationDnsDomain\n| where count_ > threshold\n| join kind=inner (InfobloxCDC\n  | where DeviceEventClassID has_cs \"RPZ\"\n  | where ThreatLevel_Score >= 80\n  ) on DestinationDnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query will determine multiple password resets by user across multiple data sources.\nAccount manipulation including password reset may aid adversaries in maintaining access to credentials and certain permission levels within an environment.\n Topic: Detections"}, {"role": "assistant", "content": "let selfServicePasswordReset = dynamic([\"Self-service password reset flow activity progress\", \"Change password (self-service)\", \"Reset password (self-service)\"]); \n//Self-service password reset flow activity progress is typically caused by a password policy which requires users to rotate passwords. This operation already implies the user has signed in successfully and therefore the password reset is non-malicious.\nlet PerUserThreshold = 5;\nlet TotalThreshold = 100;\nlet action = dynamic([\"change\", \"changed\", \"reset\"]);\nlet pWord = dynamic([\"password\", \"credentials\"]);\nlet PasswordResetMultiDataSource =\n(union isfuzzy=true\n(//Password reset events\n//4723: An attempt was made to change an account's password\n//4724: An attempt was made to reset an accounts password\nSecurityEvent\n| where EventID in (\"4723\",\"4724\")\n| project TimeGenerated, Computer, AccountType, Account, Type, TargetUserName),\n(//Password reset events\n//4723: An attempt was made to change an account's password\n//4724: An attempt was made to reset an accounts password\nWindowsEvent\n| where EventID in (\"4723\",\"4724\")\n| extend SubjectUserSid = tostring(EventData.SubjectUserSid)\n| extend TargetUserName = tostring(EventData.TargetUserName)\n| extend Account = strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend AccountType=case(Account endswith \"$\" or SubjectUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(SubjectUserSid), \"\", \"User\")\n| project TimeGenerated, Computer, AccountType, Account, Type, TargetUserName),\n(//Azure Active Directory Password reset events\nAuditLogs\n| where OperationName has_any (pWord) and OperationName has_any (action) and Result =~ \"success\"\n| where OperationName !in (selfServicePasswordReset)\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend AccountType = tostring(TargetResource.type),\n               Account = tostring(InitiatedBy.user.userPrincipalName),\n               TargetUserName = tolower(tostring(TargetResource.userPrincipalName))\n  )\n| project TimeGenerated, AccountType, Account, TargetUserName, Computer = \"\", Type),\n(//OfficeActive ActiveDirectory Password reset events\nOfficeActivity\n| where OfficeWorkload == \"AzureActiveDirectory\"\n| where (ExtendedProperties has_any (pWord) or ModifiedProperties has_any (pWord)) and (ExtendedProperties has_any (action) or ModifiedProperties has_any (action))\n| extend AccountType = UserType, Account = OfficeObjectId\n| project TimeGenerated, AccountType, Account, Type, Computer = \"\"),\n(// Unix syslog password reset events\nSyslog\n| where Facility in (\"auth\",\"authpriv\")\n| where SyslogMessage has_any (pWord) and SyslogMessage has_any (action)\n| extend AccountType = iif(SyslogMessage contains \"root\", \"Root\", \"Non-Root\")\n| where SyslogMessage matches regex \".*password changed for.*\"\n| parse SyslogMessage with * \"password changed for\" Account\n| project TimeGenerated, AccountType, Account, Computer = HostName, Type)\n);\nlet pwrmd = PasswordResetMultiDataSource\n| project TimeGenerated, Computer, AccountType, Account, Type, TargetUserName;\n(union isfuzzy=true\n(pwrmd\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Computerlist = make_set(Computer, 25), AccountType = make_set(AccountType, 25), Computer = arg_max(Computer , TimeGenerated), TargetUserList = make_set(TargetUserName, 25), TargetUserName = arg_max(TargetUserName, TimeGenerated), Total=count() by Account, Type\n| where Total > PerUserThreshold\n| extend ResetPivot = \"PerUserReset\"),\n(pwrmd\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ComputerList = make_set(Computer, 25), AccountList = make_set(Account, 25), AccountType = make_set(AccountType, 25), Computer = arg_max(Computer , TimeGenerated), TargetUserList = make_set(TargetUserName, 25), TargetUserName = arg_max(TargetUserName, TimeGenerated), Total=count() by Type\n| where Total > TotalThreshold\n| extend ResetPivot = \"TotalUserReset\")\n)\n| extend timestamp = StartTimeUtc, HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')), Name = tostring(split(Account, '@', 0)[0]), UPNSuffix = tostring(split(Account, '@', 1)[0]), TargetName = tostring(split(TargetUserName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows users access groups.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "ZPAEvent\n| summarize ApplicationGroup = make_set(AppGroup)by DstUserName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for hosts with completed full scan.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where TimeGenerated > ago(24h)\n| where ActivityType == 92\n| order by TimeGenerated\n| project EventCreationTime, DataComputerName\n| extend HostCustomEntity = DataComputerName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies source IP that abnormally connects to multiple destinations according to learning period activity. This can indicate initial access attempts by attackers, trying to jump between different machines in the organization.\n Topic: Azure Firewall"}, {"role": "assistant", "content": "let LearningPeriod = 5d;\nlet RunTime = 1h;\nlet StartLearningPeriod = LearningPeriod + RunTime;\nlet EndRunTime = RunTime - 1d;\nlet BinTime = 1h;\nlet NumOfStdsThreshold = 3;\nlet MinThreshold = 10;\nlet MinLearningBuckets = 5;\nlet TrafficLogs = (union isfuzzy=true\n(AzureDiagnostics\n| where OperationName == \"AzureFirewallApplicationRuleLog\" or OperationName == \"AzureFirewallNetworkRuleLog\"\n| parse msg_s with * \"from \" SourceIp \":\" SourcePort:int \" to \" Fqdn \":\" DestinationPort:int \".\" *\n| where isnotempty(Fqdn) and isnotempty(SourceIp)),\n(AZFWApplicationRule\n| where isnotempty(Fqdn) and isnotempty(SourceIp)),\n(AZFWNetworkRule\n| extend Fqdn = DestinationIp\n| where isnotempty(Fqdn) and isnotempty(SourceIp)));\nlet LearningSrcIp = (TrafficLogs\n| where TimeGenerated between (ago(StartLearningPeriod) .. ago(RunTime))\n| summarize dcount(Fqdn) by SourceIp, bin(TimeGenerated, BinTime)\n| summarize LearningTimeSrcAvg = avg(dcount_Fqdn), LearningTimeSrcStd = stdev(dcount_Fqdn), LearningTimeBuckets = count() by SourceIp\n| where LearningTimeBuckets > MinLearningBuckets);\nlet AlertTimeSrcIp = (TrafficLogs\n| where TimeGenerated between (ago(RunTime) .. ago(EndRunTime))\n| summarize AlertTimeSrcIpdCount = dcount(Fqdn) by SourceIp, Fqdn);\nAlertTimeSrcIp\n| join kind=leftouter (LearningSrcIp) on SourceIp\n| extend LearningThreshold = max_of(LearningTimeSrcAvg + NumOfStdsThreshold * LearningTimeSrcStd, MinThreshold)\n| where AlertTimeSrcIpdCount > LearningThreshold\n| project-away SourceIp1, LearningTimeSrcAvg, LearningTimeSrcStd\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect activities when a user was added to the organization. This query runs every day and its severity is Medium.\n Topic: GitHub"}, {"role": "assistant", "content": "GitHubAuditData\n| where Action == \"org.add_member\"\n| project Actor, Action\n| extend Name = iif(Actor contains \"@\", split(Actor, \"@\")[0], Actor)\n| extend UPNSuffix = iif(Actor contains \"@\", split(Actor, \"@\")[1], \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a rule was disabled.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where ActivityType == 3603\n| project EventCreationTime, DataRuleName, DataRuleQueryDetails, DataUserName\n| extend AccountCustomEntity = DataUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detection of KMS keys where action kms:Encrypt is accessible for everyone (also outside of your organization). This is an idicator that your account is compromised and the attacker uses the encryption key to compromise another company.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let check_actions = AWSCloudTrail\n| where (EventName == \"CreateKey\" or EventName == \"PutKeyPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend state=parse_json(parse_json(replace_string(tostring(parse_json(RequestParameters)['policy']),'\\\\\"','\"')).['Statement'])\n| mv-expand state\n| extend Action= tostring(parse_json(state.['Action'][0])), Effect=tostring(parse_json(state.['Effect'])),\n         Principal=tostring(parse_json(state.['Principal']))\n| where (Action == \"kms:Encrypt\" or Action == \"kms:*\") and (Effect == 'Allow') and (Principal has \"*\")\n| distinct AwsEventId;\nAWSCloudTrail\n| where (EventName == \"CreateKey\" or EventName == \"PutKeyPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| join kind=inner (check_actions) on AwsEventId\n| extend timestamp = TimeGenerated\n| project-away AwsEventId1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect activities when a repository was created. This query runs every day and its severity is Medium.\n Topic: GitHub"}, {"role": "assistant", "content": "GitHubAuditData\n| where Action == \"repo.create\"\n| extend AccountName = tostring(split(Actor, \"@\")[0]), AccountUPNSuffix = tostring(split(Actor, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected creation of new Lambda policy and usage of one of the attach policy operations (AttachUserPolicy/AttachRolePolicy/AttachGroupPolicy). This might indicate a privilege escalation technique that attackers could use.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\n  let createPolicy =  dynamic([\"CreatePolicy\", \"CreatePolicyVersion\"]);\nlet timeframe = 1d;\nlet lookback = 14d;\n// Creating Master table with all the events to use with materialize for better performance\nlet EventInfo = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName in (EventNameList) or EventName in (createPolicy)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\");\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\nlet FullAdminPolicyEvents =  materialize(  EventInfo\n| where TimeGenerated >= ago(lookback)\n| where EventName in (createPolicy)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and ((((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"lambda:*\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"lambda:CreateFunction\" and Action contains \"lambda:InvokeFunction\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"lambda:Create*\" and Action contains \"lambda:Invoke*\")) or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"lambda:*\" and Action contains \"dynamodb:*\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"lambda:CreateFunction\" and Action contains \"lambda:CreateEventSourceMapping\" and Action contains \"dynamodb:PutItem\" and Action contains \"dynamodb:CreateTable\") or ((Action contains \"iam:*\" or Action contains \"iam:PassRole\") and Action contains \"lambda:Create*\" and Action contains \"dynamodb:Put*\" and Action contains \"dynamodb:Create*\")) and Resource == \"*\" and Condition == \"\"\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn, RecipientAccountId, AccountName, AccountUPNSuffix\n| project-rename StartTime = TimeGenerated  );\nlet PolicyAttach = materialize(  EventInfo\n| where TimeGenerated >= ago(timeframe)\n| where EventName in (EventNameList) and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\"/\")[1])\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName,   UserIdentityType , UserIdentityArn, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix,  PolicyName\n| extend AttachEvent = pack(\"StartTime\", StartTime, \"EndTime\", EndTime, \"EventName\", EventName, \"UserIdentityType\",   UserIdentityType, \"SourceIpAddress\", SourceIpAddress, \"AccountName\", AccountName, \"AccountUPNSuffix\", AccountUPNSuffix, \"RecipientAccountId\", RecipientAccountId, \"UserIdentityArn\", UserIdentityArn)\n| project EventSource, PolicyName, AttachEvent, RecipientAccountId, AccountName, AccountUPNSuffix, AttachEventCount\n);\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\nFullAdminPolicyEvents\n| join kind=leftouter\n(\n    PolicyAttach\n)\non PolicyName\n| project-away PolicyName1\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Double extension vulnerability is a significant concern in file uploads, as it can lead to various issues if an attacker successfully uploads a virus-infected file.\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let common_file_ext_list = dynamic([\".txt\", \".xlsx\", \".doc\", \".docx\", \".csv\", \".pdf\", \".png\", \".jpg\", \".jpeg\"]); // Add list of common files as per your environment\n_Im_WebSession (starttime=ago(1h), eventresult='Success')\n| where HttpRequestMethod in~ (\"POST\", \"PUT\") \n| project\n    Url,\n    SrcIpAddr,\n    SrcUsername,\n    SrcHostname,\n    DstIpAddr,\n    DstPortNumber,\n    DstHostname,\n    TimeGenerated\n| extend requestedFileName=tostring(split(tostring(parse_url(Url)[\"Path\"]), '/')[-1])\n| extend FileWithdualextension = extract(@'([\\w-]+\\.\\w+\\.\\w+)$', 1, requestedFileName, typeof(string))\n| extend SecondExt = tostring(split(FileWithdualextension, '.')[-1])\n| where strcat('.', SecondExt) in~ (common_file_ext_list) // Second extension is mostly from the common files\n| summarize\n    EventCount=count(),\n    EventStartTime=min(TimeGenerated),\n    EventEndTime=max(TimeGenerated)\n    by\n    SrcIpAddr,\n    Url,\n    FileWithdualextension,\n    SrcUsername,\n    SrcHostname,\n    DstIpAddr,\n    DstPortNumber,\n    DstHostname\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query detects rare files requested\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where TimeGenerated > ago(24h)\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| summarize RareFiles = count() by File\n| top 20 by RareFiles asc\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for access keys used for programmatic access.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where TimeGenerated > ago(30d)\n| where ResourceType =~ 'Login'\n| where EventMessage has 'access key'\n| summarize by UserName, SrcIpAddr\n| extend IPCustomEntity = SrcIpAddr\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for OS Credentials dumping attacks.\n Topic: TenableAD"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.kql parser into the workspace\n// Retrieve the parser here: https://raw.githubusercontent.com/tenable/Azure-Sentinel/Tenable.ad-connector/Solutions/TenableAD/Parsers/afad_parser.kql\n// Then, create the Kusto Function with alias afad_parser\nafad_parser\n  | where MessageType == 2 and Codename == \"OS Credential Dumping: LSASS Memory\"\n  | extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A new incident was created in the Cortex XDR portal with a severity \"Medium\". Click on the events for incident details. \n Topic: Cortex XDR"}, {"role": "assistant", "content": "CortexXDR_Incidents_CL\n| where severity_s contains \"medium\"\n| where status_s !contains \"resolved_auto\"\n// the below line filters for incidents that has at least one user or one host in it. Comment the below line if you want to generated incidents that have 0 user or 0 host as well\n| where host_count_d > 0 or user_count_d > 0\n| project TimeGenerated, incident_id_s, status_s, severity_s, incident_sources_s, description_s, xdr_url_s, hosts_s, users_s, alert_categories_s, host_count_d, user_count_d, alert_count_d, creation_time_d, modification_time_d\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "42Crunch API protection against account takeover\n Topic: 42Crunch API Protection"}, {"role": "assistant", "content": "let firstRec = apifirewall_log_1_CL \n| where TimeGenerated >= ago(5m) \n| project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Request_Header_s, Response_Header_s, Errors_s, Type, UUID_g\n| where Instance_Name_s == \"Instance_1\" and (URI_Path_s has \"/api/register\" or URI_Path_s has \"/api/reset\") and Status_d == 403;\nlet recCount = iff((toscalar(firstRec | count) >= 20), 1, 0);\nfirstRec | take recCount\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for deleted tables.\n Topic: Snowflake"}, {"role": "assistant", "content": "Snowflake\n| where TimeGenerated > ago(24h)\n| where QUERY_TYPE_s =~ 'DROP'\n| where QUERY_TEXT_s has 'table'\n| where EXECUTION_STATUS_s =~ 'SUCCESS'\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Two-factor authentication is a process where a user is prompted during the sign-in process for an additional form of identification, such as to enter a code on their cellphone or to provide a fingerprint scan. Two factor authentication reduces the risk of account takeover. Attacker will want to disable such security tools in order to go undetected. \n Topic: GitHub"}, {"role": "assistant", "content": "GitHubAudit\n| where Action == \"org.disable_two_factor_requirement\"\n| project TimeGenerated, Action, Actor, Country, IPaddress, Repository\n| extend Name = iif(Actor contains \"@\", split(Actor, \"@\")[0], Actor)\n| extend UPNSuffix = iif(Actor contains \"@\", split(Actor, \"@\")[1], \"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected an external account adding lambda layer, which attackers could use to inject a backdoor inside the lambda function. If this is the case, make sure to remove the layer from the function.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where (EventName startswith \"UpdateFunctionConfiguration\" or EventName startswith \"CreateFunction\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend layers = parse_json(tostring((parse_json(RequestParameters)))).layers\n| extend accId = split(parse_json(tostring((parse_json(RequestParameters)))).layers,\":\",4)\n| mv-expand accId\n| where layers <> \"\" and layers !has RecipientAccountId\n// Exclude AWS Owned AccIds (built-in layers)\n| where accId !in (\"249908578461\",\"668099181075\",\"468957933125\",\"399891621064\",\"325793726646\",\"118857876118\",\"296580773974\",\"961244031340\",\"631267018583\",\"817496625479\",\"778625758767\",\"292169987271\",\"642425348156\",\"142628438157\",\"959311844005\",\"640010853179\",\"259788987135\",\"420165488524\",\"683298794825\",\"382066503313\",\"556739011827\",\"138526772879\",\"027255383542\",\"728743619870\",\"958113053741\",\"359756378197\",\"039592058896\",\"066940009817\",\"434848589818\",\"282860088358\",\"493207061005\",\"646970417810\",\"203683718741\",\"615057806174\",\"615084187847\",\"630222743974\",\"980059726660\",\"706869817123\",\"826293736237\",\"421114256042\",\"080788657173\",\"418787028745\",\"554480029851\",\"000010852771\",\"574348263942\",\"559955524753\",\"946561847325\",\"946746059096\",\"580247275435\",\"012438385374\",\"519774774795\",\"488211338238\",\"339249233099\",\"285320876703\")\n| distinct TimeGenerated, EventName, SourceIpAddress, UserIdentityArn, UserIdentityUserName, tostring(layers)\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects new site admin user.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where EventMessage =~ 'User added to group'\n| where ObjectItemName =~ 'site-admins'\n| extend user = todynamic(AssociatedItems)[0]['name']\n| extend AccountCustomEntity = user\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The exposure for a domain has increased by more than 5% over the past 7 days.\n Topic: BloodHound Enterprise"}, {"role": "assistant", "content": "BloodHoundLogs_CL\n| where data_type == \"posture\"\n| where created_at > ago (7d)\n| summarize min(exposure_index), arg_max(created_at, exposure_index, domain_name) by domain_name\n| extend min_exposure = min_exposure_index * 100, latest_exposure = exposure_index * 100\n| where latest_exposure - min_exposure > 5"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "When Knox device camera access has been detected through system policy when such access is disabled.\n Topic: Samsung Knox Asset Intelligence"}, {"role": "assistant", "content": "Samsung_Knox_System_CL \n| where Name == \"PERIPHERAL_ACCESS_THROUGH_POLICY_DETECTED_CAMERA\" \nand MitreTtp has \"KNOX.2\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Display incidents in which highly sensitive business information was placed at risk by user sharing.\n Topic: Cognni"}, {"role": "assistant", "content": "let highRisk = 3;\nlet business = 'Business Information';\nCognniIncidents_CL \n| where Severity == highRisk\n| where informationType_s == business\n| where TimeGenerated >= ago(5h)\n| extend AccountCustomEntity = userId_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection identifies the top four Ngrok domains from DNS resolution. Ngrok reverse proxy can bypass network defense. While not inherently harmful, it has been used for malicious activities recently.\n Topic: DNS Essentials"}, {"role": "assistant", "content": "// Define a list of Ngrok domains\nlet NgrokDomains = dynamic([\"ngrok.com\", \"ngrok.io\", \"ngrok\", \"tunnel.com\", \"korgn\", \"lennut.com\"]);\n// Query the _Im_Dns function for the past 1 hour\n_Im_Dns(starttime=ago(1h))\n| where isnotempty(DnsQuery) // Filter out empty DNS queries\n| where DnsQuery has_any (NgrokDomains) // Filter DNS queries that match any of the Ngrok domains\n| summarize Starttime = min(EventStartTime),Endtime=max(EventEndTime),EventsCount=sum(EventCount),EventResults=make_set(EventResult,4) by DnsQuery, Domain, SrcIpAddr, Dvc\n// Summarize the data by Domain, DNS query, source IP address, and device Dvc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query get the details of role created for kube-audit.\n Topic: Azure kubernetes Service"}, {"role": "assistant", "content": "AzureDiagnostics\n| where Category == \"kube-audit\"\n| project log_s\n| where parse_json(log_s).verb == \"create\"\n| where parse_json(tostring(parse_json(log_s).annotations)).[\"authorization.k8s.io/decision\"] == \"allow\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Fires Microsoft Sentinel alerts for Dragos Notifcations.\n Topic: Dragos"}, {"role": "assistant", "content": "DragosNotificationsToSentinel()\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when SmartEdge endpoint agent was uninstalled.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where EventType =~ 'access'\n| where EventResultDetails startswith 'The SmartEdge endpoint agent was uninstalled'\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies communication with hosts that have a domain name that might have been generated by a Domain Generation Algorithm (DGA).\nDGAs are used by malware to generate rendezvous points that are difficult to predict in advance. This detection uses the top 1 million domain names to build a model of what normal domains look like nad uses the model to identify domains that may have been randomly generated by an algorithm. You can modify the triThreshold and dgaLengthThreshold query parameters to change Analytic Rule sensitivity. The higher the numbers, the less noisy the rule is.\n This analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM WebSession schema (ASIM WebSession Schema)\n Topic: Detections"}, {"role": "assistant", "content": "let triThreshold = 500;\nlet querystarttime = 6h;\nlet dgaLengthThreshold = 8;\n// fetch the cisco umbrella top 1M domains\nlet top1M =  (externaldata (Position:int, Domain:string)   [@\"http://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip\"]  with (format=\"csv\", zipPattern=\"*.csv\"));\n// extract tri grams that are above our threshold - i.e. are common\nlet triBaseline =   top1M\n  | extend Domain = tolower(extract(\"([^.]*).{0,7}$\", 1, Domain))\n  | extend AllTriGrams = array_concat(extract_all(\"(...)\", Domain), extract_all(\"(...)\", substring(Domain, 1)), extract_all(\"(...)\", substring(Domain, 2)))\n  | mvexpand Trigram=AllTriGrams to typeof(string)\n  | summarize triCount=count() by Trigram\n  | sort by triCount desc\n  | where triCount > triThreshold\n  | distinct Trigram;\n// collect domain information from common security log, filter and extract the DGA candidate and its trigrams\nlet allDataSummarized =  _Im_WebSession\n| where isnotempty(Url)\n| extend Name = tolower(tostring(parse_url(Url)[\"Host\"]))\n| summarize NameCount=count() by Name\n| where Name has \".\"\n| where Name !endswith \".home\" and Name !endswith \".lan\"\n// extract DGA candidate\n| extend DGADomain = extract(\"([^.]*).{0,7}$\", 1, Name)\n| where strlen(DGADomain) > dgaLengthThreshold\n// throw out domains with number in them\n| where DGADomain matches regex \"^[A-Za-z]{0,}$\"\n// extract the tri grams from summarized data\n| extend AllTriGrams = array_concat(extract_all(\"(...)\", DGADomain), extract_all(\"(...)\", substring(DGADomain, 1)), extract_all(\"(...)\", substring(DGADomain, 2)));\n// throw out domains that have repeating tri's and/or >=3 repeating letters\nlet nonRepeatingTris =  allDataSummarized\n| join kind=leftanti\n(\n    allDataSummarized\n    | mvexpand AllTriGrams\n    | summarize count() by tostring(AllTriGrams), DGADomain\n    | where count_ > 1\n    | distinct DGADomain\n)\non DGADomain;\n// find domains that do not have a common tri in the baseline\nlet dataWithRareTris =  nonRepeatingTris\n| join kind=leftanti\n(\n    nonRepeatingTris\n    | mvexpand AllTriGrams\n    | extend Trigram = tostring(AllTriGrams)\n    | distinct Trigram, DGADomain\n    | join kind=inner\n    (\n        triBaseline\n    )\n    on Trigram\n    | distinct DGADomain\n)\non DGADomain;\ndataWithRareTris\n// join DGAs back on connection data\n| join kind=inner\n(\n    _Im_WebSession\n    | where isnotempty(Url)\n    | extend Url = tolower(Url)\n    | summarize arg_max(TimeGenerated, EventVendor,  SrcIpAddr) by Url\n    | extend Name=tostring(parse_url(Url)[\"Host\"])\n    | summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated) by Name, SrcIpAddr, Url\n)\non Name\n| project StartTime, EndTime, Name, DGADomain, SrcIpAddr, Url, NameCount\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Following the September 14th, 2021 release of three Elevation of Privilege (EoP) vulnerabilities (CVE-2021-38645, CVE-2021-38649, CVE-2021-38648) and one unauthenticated Remote Code Execution (RCE) vulnerability (CVE-2021-38647) in the Open Management Infrastructure (OMI) Framework.\nThis detection validates that any OMS-agent that is reporting to the Microsoft Sentinel workspace is updated with the patch. The detection will go over the heartbeats received from all agents over the last day and will create alert for those agents who are not updated.\n Topic: Detections"}, {"role": "assistant", "content": "let OMIVulnerabilityPatchVersion = \"OMIVulnerabilityPatchVersion:1.13.40-0\";\nHeartbeat\n| where Category == \"Direct Agent\"\n| summarize arg_max(TimeGenerated,*) by Computer\n| parse strcat(\"Version:\" , Version) with * \"Version:\" Major:long \".\"\nMinor:long \".\" Patch:long \"-\" *\n| parse OMIVulnerabilityPatchVersion with * \"OMIVulnerabilityPatchVersion:\"\nOMIVersionMajor:long \".\" OMIVersionMinor:long \".\" OMIVersionPatch:long \"-\" *\n| where Major <OMIVersionMajor or (Major==OMIVersionMajor and Minor\n<OMIVersionMinor) or (Major==OMIVersionMajor and Minor==OMIVersionMinor and\nPatch<OMIVersionPatch) \n| project Version, Major,Minor,Patch,\nComputer,ComputerIP,OSType,OSName,ResourceId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when error sending alert occurs.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "McAfeeEPOEvent\n| where EventId == '1062'\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected usage of AttachUserPolicy/AttachGroupPolicy/AttachRolePolicy by CRUD KMS policy. Attackers could use these operations for privilege escalation. Verify these actions with the user.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName in (\"PutUserPolicy\",\"PutRolePolicy\",\"PutGroupPolicy\") and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and (Action contains \"kms:Create\" and (Action contains \"kms:Get\" or Action contains \"kms:Describe\")  and (Action contains \"kms:Disable\" or Action contains \"kms:Enable\") and Action contains \"kms:Delete\") and Resource == \"*\" and Condition == \"\"\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, UserIdentityUserName\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches uncommon user agent strings.\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "let length = 20;\nNGINXHTTPServer\n| where TimeGenerated > ago(100d)\n| where strlen(HttpUserAgentOriginal) < length\n| extend UrlCustomEntity = HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects risky Base64-encoded commands in web requests. It identifies potential C2 server communication and illuminates injected webshells. Note that base64 is case-sensitive, requiring multiple permutations for full coverage.\n Topic: Network Threat Protection Essentials"}, {"role": "assistant", "content": "let mapping = datatable (CommandFound:string, match_list:dynamic) [\n\"whoami\", dynamic(['d2hvYW1p', 'dob2Fta', '3aG9hbW']),\n\"net share\", dynamic(['bmV0IHNoYXJl', '5ldCBzaGFyZ', 'uZXQgc2hhcm']),\n\"net use\", dynamic(['bmV0IHVzZ', '5ldCB1c2', 'uZXQgdXNl']),\n\"net view\", dynamic(['bmV0IHZpZX', '5ldCB2aWV3', 'uZXQgdmlld']),\n\"ipconfig\", dynamic(['aXBjb25maWc', 'lwY29uZmln', 'pcGNvbmZpZ']),\n\"net sh\", dynamic(['bmV0c2gg', '5ldHNoI', 'uZXRzaC']),\n\"schtasks\", dynamic(['2NodGFza3', 'NjaHRhc2tz', 'zY2h0YXNrc']),\n\"Invoke- \", dynamic(['SW52b2tlL', 'ludm9rZS', 'JbnZva2Ut']),\n];\nlet riskyCommandRegex = @\"(d2hvYW1p|dob2Fta|3aG9hbW|bmV0IHNoYXJl|5ldCBzaGFyZ|uZXQgc2hhcm|bmV0IHVzZ|5ldCB1c2|uZXQgdXNl|bmV0IHZpZX|5ldCB2aWV3|uZXQgdmlld|aXBjb25maWc|lwY29uZmln|pcGNvbmZpZ|bmV0c2gg|5ldHNoI|uZXRzaC|2NodGFza3|NjaHRhc2tz|zY2h0YXNrc|SW52b2tlL|ludm9rZS|JbnZva2Ut)\";\nCommonSecurityLog\n| where TimeGenerated > ago(3d)\n| where RequestURL matches regex riskyCommandRegex\n| extend B64MatchData = extract_all(riskyCommandRegex, RequestURL)\n| where isnotempty(B64MatchData)\n| mv-expand B64MatchData to typeof(string)\n| join kind=leftouter ( \n    mapping\n    | mv-expand match_list to typeof(string)\n) on $left.B64MatchData == $right.match_list\n| project TimeGenerated, B64MatchData, CommandFound, RequestURL, RequestMethod, DestinationHostName, DestinationIP, SourceIP, DeviceVendor, DeviceProduct, Activity\n| extend timestamp = TimeGenerated\n| extend HostName = tostring(split(DestinationHostName, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(DestinationHostName, '.'), 1, -1), '.'))\n| extend IP_0_Address = SourceIP\n| extend IP_1_Address = DestinationIP\n| extend DNS_0_HostName = HostName\n| extend DNS_0_DnsDomain = DnsDomain  \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects known malicious user agent strings\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "OracleWebLogicServerEvent\n| where isnotempty(HttpUserAgentOriginal)\n| where HttpUserAgentOriginal has_any ('Nikto', '(hydra)', '.nasl', 'absinthe', 'advanced email extractor', 'arachni/', 'autogetcontent', 'bilbo', 'BFAC', 'brutus', 'brutus/aet', 'bsqlbf', 'cgichk', 'cisco-torch', 'commix', 'core-project/1.0', 'crimscanner/', 'datacha0s', 'dirbuster', 'domino hunter', 'dotdotpwn', 'email extractor', 'fhscan core 1.', 'floodgate', 'get-minimal', 'gootkit auto-rooter scanner', 'grabber', 'grendel-scan', 'havij', 'inspath', 'internet ninja', 'jaascois', 'zmeu', 'masscan', 'metis', 'morfeus', 'mysqloit', 'n-stealth', 'nessus', 'netsparker', 'nmap nse', 'nmap scripting engine', 'nmap-nse', 'nsauditor', 'openvas', 'pangolin', 'paros', 'pmafind', 'prog.customcrawler', 'qualys was', 's.t.a.l.k.e.r.', 'security scan', 'springenwerk', 'sql power injector', 'sqlmap', 'sqlninja', 'teh forest lobster', 'this is an exploit', 'toata dragostea', 'toata dragostea mea pentru diavola', 'uil2pn', 'user-agent:', 'vega/', 'voideye', 'w3af.sf.net', 'w3af.sourceforge.net', 'w3af.org', 'webbandit', 'webinspect', 'webshag', 'webtrends security analyzer', 'webvulnscan', 'whatweb', 'whcc/', 'wordpress hash grabber', 'xmlrpc exploit', 'WPScan', 'XSpider', 'SF/', 'FooBar/42', 'ScanAlert', 'Webscanner', 'Webster', 'fantomCrew', 'fantomBrowser', 'visvo', 'magereport', 'ltx71', 'websiteprotection', 'BigCliqueBOT', '(BOT for JCE)')\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Azure DevOps has been targeted over the years with a handful of toolkits.  This detection will look for some common signs known for a few of these tools.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "AzureDevOpsAuditing\n// Look for known bad user agents\n| where UserAgent has_any (\"ADOKit\")\n| extend timestamp = TimeGenerated\n| extend AccountName = tostring(split(ActorUPN, \"@\")[0]), AccountUPNSuffix = tostring(split(ActorUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects inbound connection to high risk ports.\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "let HighRiskPorts = dynamic(['21', '22', '23', '25', '53', '443', '110', '135', '137', '138', '139', '1433', '1434']);\nPaloAltoCDLEvent\n| where EventResourceId =~ 'TRAFFIC'\n| where ipv4_is_private(SrcIpAddr) == false\n| where DstPortNumber in (HighRiskPorts)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a set of Azure Virtual Network Subnets for administrative and operational detection queries for hunting activities.\n Topic: Azure Activity"}, {"role": "assistant", "content": "let opValues = dynamic([\"Microsoft.Network/virtualNetworks/subnets/write\",\"Microsoft.Network/virtualNetworks/subnets/delete\"]);\n// Creating, Updating or Deleting Virtual Network Subnets\nAzureActivity\n| where CategoryValue =~ \"Administrative\"\n| where OperationNameValue in~ (opValues)\n| where ActivitySubstatusValue in~ (\"Created\",\"Accepted\")\n| sort by TimeGenerated desc\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = CallerIpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Use this query to look for alerts related to DazzleSpy activity, known to affect macOS devices via a MachO binary\n Topic: Jamf Protect"}, {"role": "assistant", "content": "JamfProtect\n| where TargetProcessSHA256 in (\n    \"341bc86bc9b76ac69dca0a48a328fd37d74c96c2e37210304cfa66ccdbe72b27\", \n    \"4c67717fdf1ba588c8be62b6137c92d344a7d4f46b24fa525e5eaa3de330b16c\", \n    \"570cd76bf49cf52e0cb347a68bdcf0590b2eaece134e1b1eba7e8d66261bdbe6\", \n    \"623f99cbe20af8b79cbfea7f485d47d3462d927153d24cac4745d7043c15619a\", \n    \"8fae0d5860aa44b5c7260ef7a0b277bcddae8c02cea7d3a9c19f1a40388c223f\", \n    \"9b71fad3280cf36501fe110e022845b29c1fb1343d5250769eada7c36bc45f70\", \n    \"a63466d09c3a6a2596a98de36083b6d268f393a27f7b781e52eeb98ae055af97\", \n    \"bbbfe62cf15006014e356885fbc7447e3fd37c3743e0522b1f8320ad5c3791c9\", \n    \"cf5edcff4053e29cb236d3ed1fe06ca93ae6f64f26e25117d68ee130b9bc60c8\", \n    \"d599d7814adbab0f1442f5a10074e00f3a776ce183ea924abcd6154f0d068bb4\", \n    \"df5b588f555cccdf4bbf695158b10b5d3a5f463da7e36d26bdf8b7ba0f8ed144\", \n    \"f9ad42a9bd9ade188e997845cae1b0587bf496a35c3bffacd20fefe07860a348\")\n  or DstIpAddr in (\"103.255.44.56\",\n    \"123.1.170.152\",\n    \"207.148.102.208\",\n    \"88.218.192.128\")\n  or TargetFilePath contains \"/Library/LaunchAgents/softwareupdate.plist\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when Exchange Online transport rule configured to forward emails.\nThis could be an adversary mailbox configured to collect mail from multiple user accounts.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "OfficeActivity\n| where OfficeWorkload == \"Exchange\"\n| where Operation in~ (\"New-TransportRule\", \"Set-TransportRule\")\n| mv-apply DynamicParameters = todynamic(Parameters) on (summarize ParsedParameters = make_bag(pack(tostring(DynamicParameters.Name), DynamicParameters.Value)))\n| extend RuleName = case(\n    Operation =~ \"Set-TransportRule\", OfficeObjectId,\n    Operation =~ \"New-TransportRule\", ParsedParameters.Name,\n    \"Unknown\")\n| mv-expand ExpandedParameters = todynamic(Parameters)\n| where ExpandedParameters.Name in~ (\"BlindCopyTo\", \"RedirectMessageTo\") and isnotempty(ExpandedParameters.Value)\n| extend RedirectTo = ExpandedParameters.Value\n| extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIP)[0]\n| project TimeGenerated, RedirectTo, IPAddress = tostring(ClientIPValues[0]), Port = tostring(ClientIPValues[1]), UserId, Operation, RuleName, Parameters\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix\n| extend IP_0_Address = IPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The number of Tier Zero assets has increased by more than 5% over the past 7 days.\n Topic: BloodHound Enterprise"}, {"role": "assistant", "content": "BloodHoundLogs_CL\n| where data_type == \"posture\"\n| where created_at > ago (7d)\n| summarize min_tier_zero = min(tier_zero_count), max_tier_zero = arg_max(created_at, current_tier_zero = tier_zero_count, domain_name) by domain_name\n| extend percent_difference = ((current_tier_zero - min_tier_zero) / min_tier_zero) * 100\n| where percent_difference > 5"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Ideally one user should be associated with one MAC ID, this hunting query will identify if same MAC ID is associated with more than one user which can be a case of MAC spoofing attack.\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "let lookback = 1h;\n_Im_NetworkSession(starttime=ago(lookback),endtime=now())\n  | where isnotempty(DstMacAddr) and isnotempty(DstUsername)\n  | summarize UserSet = make_set(DstUsername,10) by DstMacAddr\n  | extend UniqueUsers = array_length(UserSet)\n  | where UniqueUsers >= 2"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies beaconing patterns from web traffic logs based on recurrent timedelta patterns.\nReference Blog:\nhttps://techcommunity.microsoft.com/t5/microsoft-sentinel-blog/detect-network-beaconing-via-intra-request-time-delta-patterns/ba-p/779586\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let starttime = 2d;\nlet endtime = 1d;\nlet TimeDeltaThreshold = 25; // Minimum time difference in seconds between two events of same SourceIP and DestinationIP\nlet TotalEventsThreshold = 30; // Total number of events in an hour\nlet MostFrequentTimeDeltaThreshold = 25; // Most frequent time difference in seconds between two events of same SourceIP\nlet PercentBeaconThreshold = 80; // what percent of times the requests were sent at same interval within an hour\n_Im_WebSession(starttime=startofday(ago(starttime)), endtime=startofday(ago(endtime)))\n| where isnotempty(SrcIpAddr) and isnotempty(DstIpAddr) and isnotempty(SrcBytes)\n| where ipv4_is_private(DstIpAddr)== false // Focus only on traffic going to internet\n| project TimeGenerated, SrcIpAddr, DstIpAddr, SrcBytes, DstBytes, SrcUsername\n| sort by SrcIpAddr asc,TimeGenerated asc, DstIpAddr asc\n| serialize\n| extend NextTimeGenerated = next(TimeGenerated,1), NextSrcIpAddr = next(SrcIpAddr,1)\n| extend TimeDeltaInSeconds = datetime_diff('second', NextTimeGenerated, TimeGenerated)\n| where SrcIpAddr == NextSrcIpAddr\n| where TimeDeltaInSeconds > TimeDeltaThreshold\n| summarize EventCount=count(), sum(DstBytes), sum(SrcBytes) by TimeDeltaInSeconds, bin(TimeGenerated,1h), SrcUsername, SrcIpAddr, DstIpAddr\n| summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(EventCount, TimeDeltaInSeconds), TotalEvents=sum(EventCount), TotalSentBytes = sum(sum_SrcBytes), TotalReceivedBytes = sum(sum_DstBytes) by bin(TimeGenerated,1h), SrcUsername, SrcIpAddr, DstIpAddr\n| where TotalEvents > TotalEventsThreshold and MostFrequentTimeDeltaCount > MostFrequentTimeDeltaThreshold\n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent > PercentBeaconThreshold\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\")\n| extend IP_0_Address = SrcIpAddr\n| extend IP_1_Address = DstIpAddr\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect activities when a client secret was removed. This query runs every day and its severity is Medium.\n Topic: GitHub"}, {"role": "assistant", "content": "GitHubAuditData\n| where Action == \"oauth_application.remove_client_secret\"\n| extend AccountName = tostring(split(Actor, \"@\")[0]), AccountUPNSuffix = tostring(split(Actor, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies clients or servers whose data has been compromised.\n Topic: Commvault Security IQ"}, {"role": "assistant", "content": "SecurityIncident\n| where Title has \"Cvlt Alert\" and Description has \"Client\" and Description has \"Compromised\" and Status has \"New\"\n| extend extracted_word = extract(\"Client\\\\s(.*?)\\\\sCompromised\", 1, Description)\n| project TimeGenerated, Title, Description, Status\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will check for emails that Defend has identified as dangerous and a user has clicked a link.\n Topic: Egress Defend"}, {"role": "assistant", "content": "EgressDefend_CL \n| where event_s == \"linkClick\" \n| where email_threat_s == \"dangerous\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible privileges discovery activity.\n Topic: Snowflake"}, {"role": "assistant", "content": "Snowflake\n| where QUERY_TYPE_s =~ 'SHOW'\n| where QUERY_TEXT_s has_all ('SHOW', 'ROLES')\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for phishing threats stopped by MailGuard 365.\n Topic: MailGuard 365"}, {"role": "assistant", "content": "MailGuard365_Threats_CL\n| where Category == \"Phishing\"\n| extend MailMessage_0_NetworkMessageId = MessageId_s\n| extend MailMessage_0_Recipient = Email_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match across various data feeds for  hashes and IP IOC related to Europium\n Reference: https://www.microsoft.com/security/blog/2022/09/08/microsoft-investigates-iranian-attacks-against-the-albanian-government\n Topic: Detections"}, {"role": "assistant", "content": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Europium_September2022.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet sha256Hashes = (iocs | where Type =~ \"sha256\" | project IoC);\nlet IPList = (iocs | where Type =~ \"ip\"| project IoC);\nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\n(union isfuzzy=true\n(CommonSecurityLog\n| where SourceIP in (IPList) or DestinationIP in (IPList) or Message has_any (IPList)\n| parse Message with * '(' DNSName ')' * \n| project TimeGenerated, SourceIP, DestinationIP, Message, SourceUserID, RequestURL, DNSName, Type\n| extend MessageIP = extract(IPRegex, 0, Message), RequestIP = extract(IPRegex, 0, RequestURL)\n| extend IPMatch = case(SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", MessageIP in (IPList), \"Message\",  \"NoMatch\")\n| extend timestamp = TimeGenerated, IPEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, IPMatch == \"Message\", MessageIP, \"NoMatch\")\n),\n(DnsEvents\n| where IPAddresses in (IPList)  \n| project TimeGenerated, Computer, IPAddresses, Name, ClientIP, Type\n| extend DestinationIPAddress = IPAddresses, DNSName = Name, Computer \n| extend timestamp = TimeGenerated, IPEntity = DestinationIPAddress, HostEntity = Computer\n),\n(VMConnection\n| where SourceIp in (IPList) or DestinationIp in (IPList)\n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| project TimeGenerated, Computer, Direction, ProcessName, SourceIp, DestinationIp, DestinationPort, RemoteDnsQuestions, DNSName,BytesSent, BytesReceived, RemoteCountry, Type\n| extend IPMatch = case( SourceIp in (IPList), \"SourceIP\", DestinationIp in (IPList), \"DestinationIP\", \"None\") \n| extend timestamp = TimeGenerated, IPEntity = case(IPMatch == \"SourceIP\", SourceIp, IPMatch == \"DestinationIP\", DestinationIp, \"NoMatch\"), File = ProcessName, HostEntity = Computer\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 3\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = tostring(EventDetail.[9].[\"#text\"]), DestinationIP = tostring(EventDetail.[14].[\"#text\"]), Image = tostring(EventDetail.[4].[\"#text\"])\n| where SourceIP in (IPList) or DestinationIP in (IPList)\n| project TimeGenerated, SourceIP, DestinationIP, Image, UserName, Computer, Type\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\")\n| extend timestamp = TimeGenerated, File = tostring(split(Image, '\\\\', -1)[-1]), IPEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\"), \nHostEntity = Computer, AccountName = tostring(split(UserName, @'\\')[1]), AccountDomain = tostring(split(UserName, @'\\')[0])\n| extend InitiatingProcessAccount = UserName\n), \n(OfficeActivity\n| where ClientIP in (IPList) \n| project TimeGenerated, UserAgent, Operation, RecordType, UserId, ClientIP, Type\n| extend timestamp = TimeGenerated, IPEntity = ClientIP, AccountName = tostring(split(UserId, \"@\")[0]), AccountDomain = tostring(split(UserId, \"@\")[1])\n| extend InitiatingProcessAccount = UserId\n),\n(DeviceNetworkEvents\n| where RemoteIP in (IPList) or InitiatingProcessSHA256 in (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, Computer = DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, \nInitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, RemotePort, LocalIP, Type\n| extend timestamp = TimeGenerated, IPEntity = RemoteIP, HostEntity = Computer, AccountName = InitiatingProcessAccountName, AccountDomain = InitiatingProcessAccountDomain\n| extend InitiatingProcessAccount = strcat(AccountDomain, \"\\\\\", AccountName)\n),\n(WindowsFirewall\n| where SourceIP in (IPList) or DestinationIP in (IPList) \n| project TimeGenerated, Computer, CommunicationDirection, SourceIP, DestinationIP, SourcePort, DestinationPort, Type\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\")\n| extend timestamp = TimeGenerated, HostEntity = Computer, IPEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n), \n(imFileEvent\n| where TargetFileSHA256 has_any (sha256Hashes)\n| extend Account = ActorUsername, Computer = DvcHostname, IPAddress = SrcIpAddr, CommandLine = ActingProcessCommandLine, FileHash = TargetFileSHA256\n| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\n| extend timestamp = TimeGenerated, IPEntity = IPAddress,  HostEntity = Computer, Algorithm = \"SHA256\", FileHash = tostring(FileHash)\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountDomain = tostring(split(Account, @'\\')[0])\n| extend InitiatingProcessAccount = Account\n),\n(DeviceFileEvents\n| where SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, \nInitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend timestamp = TimeGenerated, HostEntity = DeviceName, AccountName = InitiatingProcessAccountName, AccountDomain = InitiatingProcessAccountDomain, \nAlgorithm = \"SHA256\", FileHash = tostring(InitiatingProcessSHA256), CommandLine = InitiatingProcessCommandLine,Image = InitiatingProcessFolderPath\n| extend InitiatingProcessAccount = strcat(AccountDomain, \"\\\\\", AccountName)\n),\n(DeviceImageLoadEvents\n| where SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, \nInitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend timestamp = TimeGenerated, HostEntity = DeviceName, AccountName = InitiatingProcessAccountName, AccountDomain = InitiatingProcessAccountDomain, \nAlgorithm = \"SHA256\", FileHash = tostring(InitiatingProcessSHA256),  CommandLine = InitiatingProcessCommandLine,Image = InitiatingProcessFolderPath\n| extend InitiatingProcessAccount = strcat(AccountDomain, \"\\\\\", AccountName)\n),\n(Event\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend Image = EventDetail.[4].[\"#text\"],  CommandLine = EventDetail.[10].[\"#text\"], Hashes = tostring(EventDetail.[17].[\"#text\"])\n| extend Hashes = extract_all(@\"(?P<key>\\w+)=(?P<value>[a-zA-Z0-9]+)\", dynamic([\"key\",\"value\"]), Hashes)\n| extend Hashes = column_ifexists(\"Hashes\", dynamic([\"\", \"\"])), CommandLine = column_ifexists(\"CommandLine\", \"\")\n| mv-expand Hashes\n| where Hashes[0] =~ \"SHA256\" and Hashes[1] has_any (sha256Hashes)  \n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, Hashes, CommandLine, Image\n| extend Type = strcat(Type, \": \", Source)\n| extend timestamp = TimeGenerated, HostEntity = Computer, AccountName = tostring(split(UserName, @'\\')[1]), AccountUPNSuffix = tostring(split(UserName, @'\\')[0]), FileHash = tostring(Hashes[1])\n| extend InitiatingProcessAccount = UserName\n)\n)\n| extend HostName = tostring(split(HostEntity, \".\")[0]), DomainIndex = toint(indexof(HostEntity, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(HostEntity, DomainIndex + 1), HostEntity)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection detects abnormal SMB traffic, a file-sharing protocol. By calculating the average deviation of SMB connections over last 14 days, flagging sources exceeding 50 average deviations.\n Topic: Network Session Essentials"}, {"role": "assistant", "content": "// Define the threshold for deviation\nlet threshold = 50;\n// Define the time range for the baseline data\nlet starttime = 14d;\nlet endtime = 1d;\n// Define the SMB ports to monitor\nlet SMBPorts = dynamic([\"139\", \"445\"]);\n// Get the baseline data for user network sessions and Filter for the defined time range\nlet userBaseline = _Im_NetworkSession(starttime=ago(starttime), endtime=ago(endtime))\n  | where ipv4_is_private(SrcIpAddr) and tostring(DstPortNumber) has_any (SMBPorts) and SrcIpAddr != DstIpAddr // Filter for private IP addresses and SMB ports\n  | summarize Count = count() by SrcIpAddr, DstPortNumber // Group by source IP and destination port\n  | summarize AvgCount = avg(Count) by SrcIpAddr, DstPortNumber; // Calculate the average count\n// Get the recent user activity data and Filter for recent activity\nlet recentUserActivity = _Im_NetworkSession(starttime=ago(endtime))\n  | where ipv4_is_private(SrcIpAddr) and tostring(DstPortNumber) has_any (SMBPorts) and SrcIpAddr != DstIpAddr // Filter for private IP addresses and SMB ports\n  | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), RecentCount = count() by SrcIpAddr, DstPortNumber; // Group by source IP and destination port\n// Join the baseline and recent activity data\nlet UserBehaviorAnalysis = userBaseline\n  | join kind=inner (recentUserActivity) on SrcIpAddr, DstPortNumber\n  | extend Deviation = abs(RecentCount - AvgCount) / AvgCount; // Calculate the deviation\n// Filter for deviations greater than the threshold\nUserBehaviorAnalysis\n  | where Deviation > threshold\n  | project SrcIpAddr, DstPortNumber, Deviation, Count = RecentCount; // Project the required columns\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for logs of AD Applications without Client Credentials (Key or Secret)\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'ApplicationNotUsingClientCredentials'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies the host and account that executed AdFind by hash and filename in addition to common and unique flags that are used by many threat actors in discovery.\nTo use this analytics rule, make sure you have deployed the [ASIM normalization parsers](https://aka.ms/ASimProcessEvent)\n Topic: Detections"}, {"role": "assistant", "content": "let args = dynamic([\"objectcategory\",\"domainlist\",\"dcmodes\",\"adinfo\",\"trustdmp\",\"computers_pwdnotreqd\",\"Domain Admins\", \"objectcategory=person\", \"objectcategory=computer\", \"objectcategory=*\",\"dclist\"]);\nlet parentProcesses = dynamic([\"pwsh.exe\",\"powershell.exe\",\"cmd.exe\"]);\nimProcessCreate\n//looks for execution from a shell\n| where ActingProcessName has_any (parentProcesses)\n| extend ActingProcessFileName = tostring(split(ActingProcessName, '\\\\')[-1])\n| where ActingProcessFileName in~ (parentProcesses)\n// main filter\n| where Process hassuffix \"AdFind.exe\" or TargetProcessSHA256 == \"c92c158d7c37fea795114fa6491fe5f145ad2f8c08776b18ae79db811e8e36a3\"\n// AdFind common Flags to check for from various threat actor TTPs\nor CommandLine has_any (args)\n| extend AlgorithmType = \"SHA256\"\n| extend AccountName = tostring(split(User, @'\\')[1]), AccountNTDomain = tostring(split(User, @'\\')[0])\n| extend HostName = tostring(split(Dvc, \".\")[0]), DomainIndex = toint(indexof(Dvc, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Dvc, DomainIndex + 1), Dvc)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected S3 bucket publicly exposed via access point, which could lead to sensitive information leakage to the public. Verify the S3 object configurations.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"PutAccessPointPolicy\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).PutAccessPointPolicyRequest.Policy))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition), Principal_aws = tostring(parse_json(Statement).Principal.AWS), Principal = tostring(parse_json(Statement).Principal)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and (Principal_aws == \"*\" or Principal == \"*\") and isempty(Condition)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| distinct TimeGenerated, EventName, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, UserIdentityArn, UserIdentityUserName\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects RDP protocol usage for data transfer which is not common.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where DstPortNumber == 3389\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests from forbidden countries.\n Topic: PingFederate"}, {"role": "assistant", "content": "let forbidden_geo = dynamic(['CH']);\nPingFederateEvent\n| where isnotempty(DstGeoCountry)\n| where tostring(DstGeoCountry) in~ (forbidden_geo)\n| extend AccountCustomEntity = DstUserName\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches spyware detection events.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where TimeGenerated > ago(24h)\n| where EventMessage has \"Spyware\"\n| extend MalwareCustomEntity = VirusName, FileCustomEntity = FileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows behavior monitoring triggered policy by command line.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where TimeGenerated > ago(24h)\n| where EventMessage has \"Behavior Monitoring\"\n| where isnotempty(Policy)\n| extend TriggeredPolicy = case(\nPolicy == \"0\", \"Compromised executable file\", \nPolicy == \"1\", \"New startup program\",\nPolicy == \"2\", \"Host file modification\",\nPolicy == \"3\", \"Program library injection\", \nPolicy == \"4\", \"New Internet Explorer plugin\",\nPolicy == \"5\", \"Internet Explorer setting modification\",\nPolicy == \"6\", \"Shell modification\", \nPolicy == \"7\", \"New service\",\nPolicy == \"8\", \"Security policy modification\",\nPolicy == \"9\", \"Firewall policy modification\", \nPolicy == \"10\", \"System file modification\",\nPolicy == \"11\", \"Duplicated system file\",\nPolicy == \"13\", \"Layered service provider\", \nPolicy == \"14\", \"System process modification\",\nPolicy == \"16\", \"Suspicious behavior\",\nPolicy == \"100\", \"Newly encountered programs\", \nPolicy == \"200\", \"Unauthorized file encryption\",\nPolicy == \"1000\", \"Threat behavior analysis\",\nPolicy == \"9999\", \"User-defined policy\",\n\"unknown\")\n| summarize PolicyCount = count() by TriggeredPolicy, ProcessCommandLine\n| extend ProcessCustomEntity = ProcessCommandLine\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when sensitive Azure Key Vault operations are used. This includes: VaultDelete, KeyDelete, SecretDelete, SecretPurge, KeyPurge, SecretBackup, KeyBackup.\nAny Backup operations should match with expected scheduled backup activity.\n Topic: Azure Key Vault"}, {"role": "assistant", "content": "let SensitiveOperationList = dynamic(\n[\"VaultDelete\", \"KeyDelete\", \"SecretDelete\", \"SecretPurge\", \"KeyPurge\", \"SecretBackup\", \"KeyBackup\"]);\nAzureDiagnostics\n| extend ResultType = column_ifexists(\"ResultType\", \"NoResultType\"), \nrequestUri_s = column_ifexists(\"requestUri_s\", \"None\"), \nidentity_claim_oid_g = column_ifexists(\"identity_claim_oid_g\", \"None\"), CallerIPAddress = column_ifexists(\"CallerIPAddress\", \"None\"), \nclientInfo_s = column_ifexists(\"clientInfo_s\", \"None\"), \nidentity_claim_upn_s = column_ifexists(\"identity_claim_upn_s\", \"None\"),\nidentity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = column_ifexists(\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\", \"None\")\n| where ResourceType =~ \"VAULTS\" and ResultType =~ \"Success\"\n| where OperationName in~ (SensitiveOperationList)\n| summarize EventCount=count(), StartTimeUtc=min(TimeGenerated), EndTimeUtc=max(TimeGenerated), TimeTriggered=make_list(TimeGenerated),OperationNameList=make_set(OperationName), RequestURLList=make_set(requestUri_s), CallerIPList = make_set(CallerIPAddress),  CallerIPMax= arg_max(CallerIPAddress,*) by ResourceType, ResultType, Resource, identity_claim_upn_s, clientInfo_s, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\n| extend timestamp = StartTimeUtc\n| extend Name = tostring(split(identity_claim_upn_s,'@',0)[0]), UPNSuffix = tostring(split(identity_claim_upn_s,'@',1)[0]), AadUserId = identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Suspicious activity of the STS token of an EC2 machine hosted by ECS (for example, by SSRF) indicates a possible token hijacking. An attacker may have stolen the token and could abuse its permissions to escalate privileges and move laterally in the cloud account.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let aws_public_ips = externaldata(prefixes: string)\n[ \n   h@'https://aka.ms/awspublicipaddresse/aws-public-ip-addresses/ip-ranges.json'\n]\nwith(format='multijson');\nlet timeframe = 30m;\nlet lookback = 12h;\n//Get the AccessKey in the STS token (IMDS) when EC2 service assumes the Role periodically\nlet sts_token = AWSCloudTrail\n| where TimeGenerated >= ago (lookback)\n| where EventSource == \"sts.amazonaws.com\" and SourceIpAddress == \"ec2.amazonaws.com\"\n| extend instanceId = tostring(parse_json(RequestParameters).roleSessionName)\n| extend token = tostring(parse_json(ResponseElements).credentials.accessKeyId);\n//Identify if the EC2 belongs to ECS/EKS\nlet typeOfEC2 = AWSCloudTrail\n| where TimeGenerated >= ago (lookback)\n| extend instanceId = tostring(split(UserIdentityPrincipalid, \":\")[1])\n| join sts_token on instanceId\n| where UserAgent !startswith \"kubernetes\" or UserAgent !startswith \"Amazon ECS Agent\"\n| project-away SourceIpAddress1, UserIdentityUserName1, UserIdentityArn1, TimeGenerated1;\n//Get the identities who used that STS token - this can be the EC2 which assumed it (legit),\n//but it can also be an external identity (attacker) which abuses the token permissions \nlet tokenUsage = AWSCloudTrail\n| where TimeGenerated >= ago (timeframe)\n| join kind=inner typeOfEC2 on $left.UserIdentityAccessKeyId == $right.token\n| extend region = AWSRegion\n| project-away SourceIpAddress1, UserIdentityUserName1, UserIdentityArn1, TimeGenerated1;\n//Check whether the called identity is legit\naws_public_ips\n| mv-expand todynamic(prefixes)\n| extend ip_prefix=tostring(todynamic(prefixes.['ip_prefix']))\n| extend region=tostring(todynamic(prefixes.['region']))\n| extend service=tostring(todynamic(prefixes.['service']))\n| project-away prefixes\n| where service == \"EC2\" \n| join kind=inner tokenUsage on region\n| where SourceIpAddress !contains \"amazonaws.com\"\n| where ipv4_is_private(SourceIpAddress) == false\n| extend IsInRange = ipv4_is_in_range(SourceIpAddress, ip_prefix)\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName, AssumedRoleArn = UserIdentityArn\n| summarize timestamp=arg_max(timestamp,*), r = make_set(IsInRange) by SourceIpAddress, UserIdentityUserName, UserIdentityArn\n| where not (set_has_element(r, true))\n| project-away ip_prefix, IsInRange\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for an active Azure Premium P2 license is required to use and edit this policy. \n You will be required to have setup the MFA Policy before activating this policy\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'AzureSecureScoreUserRiskPolicy'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies a source that repeatedly fails to authenticate to a web service (HTTP response code 403). This may indicate a [brute force](https://en.wikipedia.org/wiki/Brute-force_attack) or [credential stuffing](https://en.wikipedia.org/wiki/Credential_stuffing) attack.\nThis rule uses the [Advanced Security Information Model (ASIM)](https://aka.ms/AboutSIM) and supports any web session source that complies with ASIM.\n Topic: Detections"}, {"role": "assistant", "content": "let error403_count_threshold=200;\n_Im_WebSession(eventresultdetails_in=dynamic([\"403\"]))\n| extend ParsedUrl=parse_url(Url)\n| extend UrlHost=tostring(ParsedUrl[\"Host\"]), UrlSchema=tostring(ParsedUrl[\"Schema\"])\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), NumberOfErrors = count(), Urls=makeset(Url) by UrlHost, SrcIpAddr\n| where NumberOfErrors > error403_count_threshold\n| sort by NumberOfErrors desc\n| extend Url=tostring(Urls[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows uninstalled agents.\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where TimeGenerated > ago(24h)\n| where ActivityType == 31\n| extend HostCustomEntity = DataComputerName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The purpose of this content is to identify successful phishing links accessed by users. Once a user clicks on a phishing link, we observe successful network activity originating from non-Microsoft network devices. These devices may include Palo Alto Networks, Fortinet, Check Point, and Zscaler devices.\n Topic: Detections"}, {"role": "assistant", "content": "//Finding MDO Security alerts and extracting the Entities user, Domain, Ip, and URL.\nlet Alert_List= dynamic([\n\"Phishing link click observed in Network Traffic\",\n\"Phish delivered due to an IP allow policy\",\n\"A potentially malicious URL click was detected\",\n\"High Risk Sign-in Observed in Network Traffic\",\n\"A user clicked through to a potentially malicious URL\",\n\"Suspicious network connection to AitM phishing site\",\n\"Messages containing malicious entity not removed after delivery\",\n\"Email messages containing malicious URL removed after delivery\",\n\"Email reported by user as malware or phish\",\n\"Phish delivered due to an ETR override\",\n\"Phish not zapped because ZAP is disabled\"]);\nSecurityAlert\n|where ProviderName in~ (\"Office 365 Advanced Threat Protection\", \"OATP\")\n| where AlertName in~ (Alert_List)\n//extracting Alert Entities\n | extend Entities = parse_json(Entities)\n| mv-apply Entity = Entities on\n(\nwhere Entity.Type == 'account'\n| extend EntityUPN = iff(isempty(Entity.UserPrincipalName), tostring(strcat(Entity.Name, \"@\", tostring (Entity.UPNSuffix))), tostring(Entity.UserPrincipalName))\n)\n| mv-apply Entity = Entities on\n(\nwhere Entity.Type == 'url'\n| extend EntityUrl = tostring(Entity.Url)\n)\n| summarize AccountUpn=tolower(tostring(take_any(EntityUPN))),Url=tostring(tolower(take_any(EntityUrl))),AlertTime= min(TimeGenerated)by SystemAlertId, ProductName\n// filtering 3pnetwork devices\n| join kind= inner (CommonSecurityLog\n| where DeviceVendor has_any  (\"Palo Alto Networks\", \"Fortinet\", \"Check Point\", \"Zscaler\")\n| where DeviceAction != \"Block\"\n| where DeviceProduct startswith \"FortiGate\" or DeviceProduct startswith  \"PAN\" or DeviceProduct startswith  \"VPN\" or DeviceProduct startswith \"FireWall\" or DeviceProduct startswith  \"NSSWeblog\" or DeviceProduct startswith \"URL\"\n| where isnotempty(RequestURL)\n| where isnotempty(SourceUserName)\n| extend SourceUserName = tolower(SourceUserName)\n| project\n3plogTime=TimeGenerated,\nDeviceVendor,\nDeviceProduct,\nActivity,\nDestinationHostName,\nDestinationIP,\nRequestURL=tostring(tolower(RequestURL)),\nMaliciousIP,\nName = tostring(split(SourceUserName,\"@\")[0]),\nUPNSuffix =tostring(split(SourceUserName,\"@\")[1]),\nSourceUserName,\nIndicatorThreatType,\nThreatSeverity,AdditionalExtensions,\nThreatConfidence)on $left.Url == $right.RequestURL and $left.AccountUpn == $right.SourceUserName\n// Applied the condition where alert trigger 1st and then the 3p Network activity execution\n| where AlertTime between ((3plogTime - 1h) .. (3plogTime + 1h))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects the execution of renamed Windows binaries (Lolbins). This is a common technique used by adversaries to evade detection. \nRef: https://docs.paloaltonetworks.com/cortex/cortex-xdr/cortex-xdr-analytics-alert-reference/cortex-xdr-analytics-alert-reference/execution-of-renamed-lolbin.html\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "let procList = externaldata(Process:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Microsoft_Lolbas_Execution_Binaries.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nEvent\n| where EventLog =~ \"Microsoft-Windows-Sysmon/Operational\" and EventID==1\n| parse EventData with * 'Image\">' Image \"<\" * 'OriginalFileName\">' OriginalFileName \"<\" *\n| where OriginalFileName has_any (procList) and not (Image has_any (procList))\n| parse EventData with * 'ProcessGuid\">' ProcessGuid \"<\" * 'Description\">' Description \"<\" * 'CommandLine\">' CommandLine \"<\" * 'CurrentDirectory\">' CurrentDirectory \"<\" * 'User\">' User \"<\" * 'LogonGuid\">' LogonGuid \"<\" * 'Hashes\">' Hashes \"<\" * 'ParentProcessGuid\">' ParentProcessGuid \"<\" * 'ParentImage\">' ParentImage \"<\" * 'ParentCommandLine\">' ParentCommandLine \"<\" * 'ParentUser\">' ParentUser \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, User, ParentImage, ParentProcessGuid, ParentCommandLine, ParentUser, Image, ProcessGuid, CommandLine, Description, OriginalFileName, CurrentDirectory, Hashes\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in Syslog data.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(Url)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n  Syslog\n  | where TimeGenerated >= ago(dt_lookBack)\n  // Extract URL from the Syslog message but only take messages that include URLs\n  | extend Url = extract(\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\", 1,SyslogMessage)\n  | where isnotempty(Url)\n  | extend Syslog_TimeGenerated = TimeGenerated\n) on Url\n| where Syslog_TimeGenerated < ExpirationDateTime\n| summarize Syslog_TimeGenerated  = arg_max(Syslog_TimeGenerated , *) by IndicatorId, Url\n| project timestamp = Syslog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, SyslogMessage, Computer, ProcessName, Url, HostIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in DnsEvents from Recorded Future Actively Communicating C&C Server Risklist.\n Topic: Recorded Future"}, {"role": "assistant", "content": "// Identifies a match in DnsEvent from the Recorded Future C2 Malware Detection IPs (Actively Communicating C&C Server RiskList)\nlet dt_lookBack = 1h;\nlet ioc_lookBack = 1d;\nThreatIntelligenceIndicator\n// Picking up only Recorded Future IOC's that are pertinent to the use case (Malware C2 Detection)\n| where Description == \"Recorded Future - IP - Actively Communicating C&C Server\"\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| where Active == true\n| join (\n  DnsEvents | where TimeGenerated >= ago(dt_lookBack)\n  | where SubType =~ \"LookupQuery\" and isnotempty(IPAddresses)\n  | extend SingleIP = split(IPAddresses, \",\")\n  | mvexpand SingleIP\n  | extend SingleIP = tostring(SingleIP)\n  // renaming time column so it is clear the log this came from\n  | extend DNS_TimeGenerated = TimeGenerated\n  )\non $left.NetworkIP == $right.SingleIP\n| where DNS_TimeGenerated >= TimeGenerated and DNS_TimeGenerated < ExpirationDateTime\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| project LatestIndicatorTime, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, DNS_TimeGenerated, Computer, EventId, SubType, ClientIP, Name, IPAddresses, NetworkIP, Description, AdditionalInformation\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detected creation of new CRUD KMS policy and usage of one of the attach policy operations (AttachUserPolicy/AttachRolePolicy/AttachGroupPolicy). This might indicate a privilege escalation technique that attackers could use.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let EventNameList = dynamic([\"AttachUserPolicy\",\"AttachRolePolicy\",\"AttachGroupPolicy\"]);\nlet createPolicy =  dynamic([\"CreatePolicy\", \"CreatePolicyVersion\"]);\nlet timeframe = 1d;\nlet lookback = 14d;\n// Creating Master table with all the events to use with materialize for better performance\nlet EventInfo = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName in (EventNameList) or EventName in (createPolicy)\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\");\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\nlet FullAdminPolicyEvents =  materialize(  EventInfo\n| where TimeGenerated >= ago(lookback)\n| where EventName in (createPolicy)\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\n| mvexpand Statement\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource), Condition = tostring(parse_json(Statement).Condition)\n| extend Action = tostring(Action)\n| where Effect =~ \"Allow\" and (Action contains \"kms:Create\" and (Action contains \"kms:Get\" or Action contains \"kms:Describe\")  and (Action contains \"kms:Disable\" or Action contains \"kms:Enable\") and Action contains \"kms:Delete\") and Resource == \"*\" and Condition == \"\"\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn,  RecipientAccountId, AccountName, AccountUPNSuffix\n| project-rename StartTime = TimeGenerated  );\nlet PolicyAttach = materialize(  EventInfo\n| where TimeGenerated >= ago(timeframe)\n| where EventName in (EventNameList) and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\"/\")[1])\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName,   UserIdentityType , UserIdentityArn, SourceIpAddress, RecipientAccountId, AccountName, AccountUPNSuffix, PolicyName\n| extend AttachEvent = pack(\"StartTime\", StartTime, \"EndTime\", EndTime, \"EventName\", EventName, \"UserIdentityType\",   UserIdentityType, \"SourceIpAddress\", SourceIpAddress, \"AccountName\", AccountName, \"AccountUPNSuffix\", AccountUPNSuffix, \"RecipientAccountId\", RecipientAccountId, \"UserIdentityArn\", UserIdentityArn)\n| project EventSource, PolicyName, AttachEvent, RecipientAccountId, AccountName, AccountUPNSuffix, AttachEventCount\n);\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\nFullAdminPolicyEvents\n| join kind=leftouter\n(\n    PolicyAttach\n)\non PolicyName\n| project-away PolicyName1\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for rare firewall rule changes using netsh utility by comparing rule names and program names from the previous day.\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\n// historical time frame\nlet lookback = totimespan((endtime-starttime)*7);\nlet AccountAllowList = dynamic(['SYSTEM']);\nlet tokens = dynamic([\"add\", \"delete\", \"set\"]);\n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(lookback)\n// remove comment below to adjust for noise\n// | where Process =~ \"netsh.exe\"\n| where CommandLine has_all (\"advfirewall\", \"firewall\") and CommandLine has_any (tokens)\n| where AccountType !~ \"Machine\" and Account !in~ (AccountAllowList)\n| extend KeyValuePairs = extract_all(@'(?P<key>\\w+)=(?P<value>[a-zA-Z0-9-\\\":\\\\\\s$_@().\"]+\\\"|[a-zA-Z0-9-\\\":$_\\\\@().\"]+)', dynamic([\"key\",\"value\"]), CommandLine)\n| mv-apply KeyValuePairs on (\n  summarize CommandLineParsed = make_bag(bag_pack(tostring(KeyValuePairs[0]), KeyValuePairs[1]))\n )\n| extend RuleName = tostring(parse_json(CommandLineParsed).name), Program = tostring(parse_json(CommandLineParsed).program)\n| join kind=leftanti (\nSecurityEvent\n| where TimeGenerated between (starttime..endtime)\n// remove comment below to adjust for noise\n// | where Process =~ \"netsh.exe\"\n| where CommandLine has_all (\"advfirewall\", \"firewall\") and CommandLine has_any (tokens)\n| where AccountType !~ \"Machine\" and Account !in~ (AccountAllowList)\n| extend KeyValuePairs = extract_all(@'(?P<key>\\w+)=(?P<value>[a-zA-Z0-9-\\\":\\\\\\s$_@().\"]+\\\"|[a-zA-Z0-9-\\\":$_\\\\@().\"]+)', dynamic([\"key\",\"value\"]), CommandLine)\n| mv-apply KeyValuePairs on (\n  summarize CommandLineParsed = make_bag(bag_pack(tostring(KeyValuePairs[0]), KeyValuePairs[1]))\n )\n| extend RuleName = tostring(parse_json(CommandLineParsed).name), Program = tostring(parse_json(CommandLineParsed).program)\n) on RuleName, Program\n| summarize count() , StartTime= min(TimeGenerated), EndTime=max(TimeGenerated) by Type, Computer, Account, SubjectDomainName, SubjectUserName, RuleName, Program, CommandLineParsed = tostring(CommandLineParsed), Process, ParentProcessName\n| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = Computer\n),\n(\nDeviceProcessEvents\n| where TimeGenerated >= ago(lookback)\n// remove comment below to adjust for noise\n// | where InitiatingProcessFileName =~ \"netsh.exe\"\n| where InitiatingProcessCommandLine has_all (\"advfirewall\", \"firewall\") and InitiatingProcessCommandLine has_any (tokens)\n| where AccountName !in~ (AccountAllowList)\n| extend KeyValuePairs = extract_all(@'(?P<key>\\w+)=(?P<value>[a-zA-Z0-9-\\\":\\\\\\s$_@().\"]+\\\"|[a-zA-Z0-9-\\\":$_\\\\@().\"]+)', dynamic([\"key\",\"value\"]), InitiatingProcessCommandLine)\n| mv-apply KeyValuePairs on (\n  summarize CommandLineParsed = make_bag(bag_pack(tostring(KeyValuePairs[0]), KeyValuePairs[1]))\n)\n| extend RuleName = tostring(parse_json(CommandLineParsed).name), Program = tostring(parse_json(CommandLineParsed).program)\n| join kind=leftanti (\nDeviceProcessEvents\n| where TimeGenerated between (starttime..endtime)\n// remove comment below to adjust for noise\n// | where InitiatingProcessFileName =~ \"netsh.exe\"\n| where InitiatingProcessCommandLine has_all (\"advfirewall\", \"firewall\") and InitiatingProcessCommandLine has_any (tokens)\n| where AccountName !in~ (AccountAllowList)\n| extend KeyValuePairs = extract_all(@'(?P<key>\\w+)=(?P<value>[a-zA-Z0-9-\\\":\\\\\\s$_@().\"]+\\\"|[a-zA-Z0-9-\\\":$_\\\\@().\"]+)', dynamic([\"key\",\"value\"]), InitiatingProcessCommandLine)\n| mv-apply KeyValuePairs on (\n  summarize CommandLineParsed = make_bag(bag_pack(tostring(KeyValuePairs[0]), KeyValuePairs[1]))\n)\n| extend RuleName = tostring(parse_json(CommandLineParsed).name), Program = tostring(parse_json(CommandLineParsed).program)\n) on RuleName, Program\n| summarize count() , StartTime= min(TimeGenerated), EndTime=max(TimeGenerated) by Type, DeviceName, AccountName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, RuleName, Program,  CommandLineParsed = tostring(CommandLineParsed), InitiatingProcessFileName, InitiatingProcessParentFileName\n| extend timestamp = StartTime, AccountCustomEntity = InitiatingProcessAccountName, HostCustomEntity = DeviceName\n),\n(\nEvent\n| where TimeGenerated > ago(lookback)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n// remove comment below to adjust for noise\n// | where OriginalFileName =~ \"netsh.exe\"\n| where CommandLine has_all (\"advfirewall\", \"firewall\") and CommandLine has_any (tokens)\n| where User !in~ (AccountAllowList)\n| extend KeyValuePairs = extract_all(@'(?P<key>\\w+)=(?P<value>[a-zA-Z0-9-\\\":\\\\\\s$_@().\"]+\\\"|[a-zA-Z0-9-\\\":$_\\\\@().\"]+)', dynamic([\"key\",\"value\"]), CommandLine)\n| mv-apply KeyValuePairs on (\n  summarize CommandLineParsed = make_bag(bag_pack(tostring(KeyValuePairs[0]), KeyValuePairs[1]))\n)\n| extend RuleName = tostring(parse_json(CommandLineParsed).name), Program = tostring(parse_json(CommandLineParsed).program)\n| join kind=leftanti (\nEvent\n| where TimeGenerated > ago(lookback)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n// remove comment below to adjust for noise\n// | where OriginalFileName =~ \"netsh.exe\"\n| where CommandLine has_all (\"advfirewall\", \"firewall\") and CommandLine has_any (tokens)\n| where User !in~ (AccountAllowList)\n| extend KeyValuePairs = extract_all(@'(?P<key>\\w+)=(?P<value>[a-zA-Z0-9-\\\":\\\\\\s$_@().\"]+\\\"|[a-zA-Z0-9-\\\":$_\\\\@().\"]+)', dynamic([\"key\",\"value\"]), CommandLine)\n| mv-apply KeyValuePairs on (\n  summarize CommandLineParsed = make_bag(bag_pack(tostring(KeyValuePairs[0]), KeyValuePairs[1]))\n)\n| extend RuleName = tostring(parse_json(CommandLineParsed).name), Program = tostring(parse_json(CommandLineParsed).program)\n) on RuleName, Program\n| extend Type = strcat(Type, \": \", Source)\n| summarize count() , StartTime= min(TimeGenerated), EndTime=max(TimeGenerated) by Type, Computer, User, Process, RuleName, Program, CommandLineParsed = tostring(CommandLineParsed), ParentImage\n)\n)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies S3 data transfer spikes using GetObject API, BytesTransferredOut, and KQL anomaly detection. Investigate sudden action frequency increases. Adjust scorethreshold to 3+ to reduce noise.\n Topic: Business Email Compromise - Financial Fraud"}, {"role": "assistant", "content": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 14d;\nlet timeframe = 1h;\nlet scorethreshold = 1.5;\n// Preparing the time series data aggregated on BytesTransferredOut column in the form of multi-value array so that it can be used with time series anomaly function.\nlet TimeSeriesData=\nAwsBucketAPILogs_CL\n| where EventTime between (lookback..endtime)\n| where EventName == \"GetObject\"\n| make-series Total=sum(BytesTransferredOut) on EventTime from startofday(starttime) to startofday(endtime) step timeframe;\n// Use the time series data prepared in previous step with time series aomaly function to generate baseline pattern and flag the outlier based on scorethreshold value.\nlet TimeSeriesAlerts = TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, scorethreshold, -1, 'linefit')\n| mv-expand Total to typeof(double), EventTime to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\n| where anomalies > 0\n| project EventTime, Total, baseline, anomalies, score;\n// Joining the flagged outlier from the previous step with the original dataset to present contextual information during the anomalyhour to analysts to conduct investigation or informed decistions.\nTimeSeriesAlerts\n| join\n(\n  AWSS3BucketAPILogParsed\n  | where EventTime between (startofday(lookback)..endofday(endtime))\n  | where EventName == \"GetObject\"\n  | summarize Total = sum(BytesTransferredOut), Files= makeset(Key) , max(EventTime) by bin(EventTime, 1h), EventSource,EventName, SourceIPAddress, UserIdentityType, UserIdentityArn, UserIdentityUserName, BucketName, Host, AuthenticationMethod, SessionMfaAuthenticated, SessionUserName\n) on EventTime\n| project AnomalyTime = max_EventTime, SourceIPAddress, UserIdentityType,UserIdentityUserName,SessionUserName, BucketName, Host, AuthenticationMethod, Files, Total, baseline, anomalies, score\n| extend timestamp = AnomalyTime, AccountCustomEntity = SessionUserName , HostCustomEntity = Host, IPCustomEntity = SourceIPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare ports by user.\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "PaloAltoCDLEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(DstPortNumber) \n| summarize RarePorts = count() by DstPortNumber, DstIpAddr, DstUsername\n| top 20 by RarePorts asc \n| extend IPCustomEntity = DstIpAddr, AccountCustomEntity = DstUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A policy with excessive permissions detected. Attacker could use that policy to escalate privileges and for malicious activities. Verify the policy creation with the entity.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let check_actions = AWSCloudTrail\n| where EventName == \"CreatePolicyVersion\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend state=parse_json(parse_json(replace_string(tostring(parse_json(RequestParameters)['policyDocument']),'\\\\\"','\"')).['Statement'])\n| mv-expand state\n| extend Action= tostring(parse_json(state.['Action'][0])), Effect=tostring(parse_json(state.['Effect']))\n| where Action has \"*\" and Effect == 'Allow'\n| distinct AwsEventId;\nAWSCloudTrail\n| where EventName == \"CreatePolicyVersion\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| join kind=inner (check_actions) on AwsEventId\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\n| project-away AwsEventId1\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects threat for data leak when action is notification Topic: MimecastSEG"}, {"role": "assistant", "content": "MimecastDLP_CL| where action_s == \"notification\";"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A Group created in the last 7 days was added to a privileged built in domain local group or global group such as the\nEnterprise Admins, Cert Publishers or DnsAdmins.  Be sure to verify this is an expected addition\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 7d;\n// For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\n// The SIDs for DnsAdmins and DnsUpdateProxy can be different than *-1102 and -*1103. Check these SIDs in your domain before running the query\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$\";\nlet GroupAddition = SecurityEvent\n| where TimeGenerated between(lookback..starttime)\n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group\n| where EventID in (\"4728\", \"4732\", \"4756\")\n| where AccountType == \"User\" and MemberName == \"-\"\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, GroupAddComputer = Computer,\nGroupAddTargetUserName = TargetUserName, GroupAddTargetDomainName = TargetDomainName, GroupAddTargetSid = TargetSid,\nGroupAddSubjectUserName = SubjectUserName, GroupAddSubjectUserSid = SubjectUserSid, GroupSid = MemberSid, Account, Computer\n| extend AccountCustomEntity = Account, HostCustomEntity = Computer;\nlet GroupCreated = SecurityEvent\n| where TimeGenerated between(starttime..endtime)\n// 4727 - A security-enabled global group was created\n// 4731 - A security-enabled local group was created\n// 4754 - A security-enabled universal group was created\n| where EventID in (\"4727\", \"4731\", \"4754\")\n| where AccountType == \"User\"\n| project GroupCreateTime = TimeGenerated, GroupCreateEventID = EventID, GroupCreateActivity = Activity, GroupCreateComputer = Computer,\nGroupCreateTargetUserName = TargetUserName, GroupCreateTargetDomainName = TargetDomainName, GroupCreateSubjectUserName = SubjectUserName,\nGroupCreateSubjectDomainName = SubjectDomainName, GroupCreateSubjectUserSid = SubjectUserSid, GroupSid = TargetSid, Account, Computer;\nGroupCreated\n| join (\nGroupAddition\n) on GroupSid\n| extend NTDomain = tostring(split(Account,'\\\\',0)[0]), Name = tostring(split(Account,'\\\\',1)[0])\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches shared private document.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where TimeGenerated > ago(24h)\n| where OldVisibility has \"private\" and Visibility has \"shared\"\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query will detect if user properties of Global Administrator are updated by an existing user. Usually only user administrator or other global administrator can update such properties.\nInvestigate if such user change is an attempt to elevate an existing low privileged identity or rogue administrator activity\n Topic: Detections"}, {"role": "assistant", "content": "let query_frequency = 1h;\nlet query_period = 14d;\nIdentityInfo\n| where TimeGenerated > ago(query_period)\n| where set_has_element(AssignedRoles, \"Global Administrator\")\n| distinct AccountUPN, AccountObjectId\n| join kind=inner (\n    AuditLogs\n    | where TimeGenerated > ago(query_frequency)\n    | where OperationName=~ \"Update user\" and Result =~ \"success\"\n    // | where isnotempty(InitiatedBy[\"user\"])\n    | mv-expand TargetResource = TargetResources\n    | where TargetResource[\"type\"] == \"User\"\n    | extend AccountObjectId = tostring(TargetResource[\"id\"])\n    | where tostring(TargetResource[\"modifiedProperties\"]) != \"[]\"\n    | mv-apply modifiedProperty = TargetResource[\"modifiedProperties\"] on (\n        summarize modifiedProperties = make_bag(\n            bag_pack(tostring(modifiedProperty[\"displayName\"]),\n                bag_pack(\"oldValue\", trim(@'[\\\"\\s]+', tostring(modifiedProperty[\"oldValue\"])),\n                    \"newValue\", trim(@'[\\\"\\s]+', tostring(modifiedProperty[\"newValue\"])))))\n    )\n    | where not(tostring(modifiedProperties[\"Included Updated Properties\"][\"newValue\"]) in (\"LastDirSyncTime\", \"\"))\n    | where not(tostring(modifiedProperties[\"Included Updated Properties\"][\"newValue\"]) == \"StrongAuthenticationPhoneAppDetail\" and isnotempty(modifiedProperties[\"StrongAuthenticationPhoneAppDetail\"]) and tostring(array_sort_asc(extract_all(@'\\\"Id\\\"\\:\\\"([^\\\"]+)\\\"', tostring(modifiedProperties[\"StrongAuthenticationPhoneAppDetail\"][\"newValue\"])))) == tostring(array_sort_asc(extract_all(@'\\\"Id\\\"\\:\\\"([^\\\"]+)\\\"', tostring(modifiedProperties[\"StrongAuthenticationPhoneAppDetail\"][\"oldValue\"])))))\n    | extend\n        Initiator = iif(isnotempty(InitiatedBy[\"app\"]), tostring(InitiatedBy[\"app\"][\"displayName\"]), tostring(InitiatedBy[\"user\"][\"userPrincipalName\"])),\n        InitiatorId = iif(isnotempty(InitiatedBy[\"app\"]), tostring(InitiatedBy[\"app\"][\"servicePrincipalId\"]), tostring(InitiatedBy[\"user\"][\"id\"])),\n        IPAddress = tostring(InitiatedBy[tostring(bag_keys(InitiatedBy)[0])][\"ipAddress\"])\n) on AccountObjectId\n| project TimeGenerated, Category, Identity, Initiator, IPAddress, OperationName, Result, AccountUPN, InitiatedBy, AdditionalDetails, TargetResources, AccountObjectId, InitiatorId, CorrelationId\n| extend\n    InitiatorName = tostring(split(Initiator, \"@\")[0]),\n    InitiatorUPNSuffix = tostring(split(Initiator, \"@\")[1]),\n    AccountName = tostring(split(AccountUPN, \"@\")[0]),\n    AccountUPNSuffix = tostring(split(AccountUPN, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates an incident when a large number of Critical/High severity CrowdStrike Falcon sensor detections is triggered by a single user\n Topic: CrowdStrike Falcon Endpoint Protection"}, {"role": "assistant", "content": "let timeframe = 1h;\nlet threshold = 15; // update threshold value based on organization's preference\nlet NoteableEvents = CrowdStrikeFalconEventStream\n| where TimeGenerated > ago(timeframe)\n| where EventType == \"DetectionSummaryEvent\"\n| where Severity in (\"Critical\", \"High\")\n| summarize Total = count() by DstUserName\n| where Total > threshold;\nCrowdStrikeFalconEventStream\n| where TimeGenerated > ago(timeframe)\n| where EventType == \"DetectionSummaryEvent\"\n| where Severity in (\"Critical\", \"High\")\n| join kind=inner (NoteableEvents) on DstUserName\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Total = count() by DstHostName, SrcIpAddr, DstUserName, FileName, FileHash, Message\n| extend timestamp = StartTimeUtc, AccountCustomEntity = DstUserName, HostCustomEntity = DstHostName, IPCustomEntity = SrcIpAddr, FileHashCustomEntity = FileHash, FileHashAlgo = \"MD5\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search for emails with high score of malware filter classifier value.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let scoreThreshold = 80;\nProofpointPOD\n| where EventType == 'message'\n| where NetworkDirection == 'inbound'\n| where todynamic(FilterModulesSpamScoresClassifiers).malware > scoreThreshold"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for high severity alerts.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where TimeGenerated > ago(24h)\n| where Reason =~ 'NEW_ALERT'\n| where AlertSeverity =~ 'high'\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies a web request with a user agent header known to belong PowerShell. <br>You can add custom Powershell indicating User-Agent headers using a watchlist, for more information refer to the [UnusualUserAgents Watchlist](https://aka.ms/ASimUnusualUserAgentsWatchlist).<br><br>\n This analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM WebSession schema (ASIM WebSession Schema)\n Topic: Detections"}, {"role": "assistant", "content": "let threatCategory=\"Powershell\";\nlet knownUserAgentsIndicators = materialize(externaldata(UserAgent:string, Category:string)\n    [ @\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/UnusualUserAgents.csv\"]\n        with(format=\"csv\", ignoreFirstRecord=True));\nlet knownUserAgents=toscalar(knownUserAgentsIndicators | where Category==threatCategory | where isnotempty(UserAgent) | summarize make_list(UserAgent));\nlet customUserAgents=toscalar(_GetWatchlist(\"UnusualUserAgents\") | where SearchKey==threatCategory | extend UserAgent=column_ifexists(\"UserAgent\",\"\") | where isnotempty(UserAgent) | summarize make_list(UserAgent));\nlet fullUAList = array_concat(knownUserAgents,customUserAgents);\n_Im_WebSession(httpuseragent_has_any=fullUAList)\n| project SrcIpAddr, Url, TimeGenerated, HttpUserAgent, SrcUsername\n| extend AccountName = tostring(split(SrcUsername, \"@\")[0]), AccountUPNSuffix = tostring(split(SrcUsername, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies when a new user is granted access and starts granting access to other users.  This can help you identify rogue or malicious user behavior.\n Topic: Cloud Identity Threat Protection Essentials"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet auditLookback = starttime - 14d;\nlet opName = dynamic([\"Add user\", \"Invite external user\"]);\n// Helper function to extract relevant fields from AuditLog events\nlet auditLogEvents = view (startTimeSpan:timespan, operation:dynamic)  {\n    AuditLogs | where TimeGenerated >= auditLookback\n    | where OperationName in~ (operation)\n    | extend ModProps = iff(TargetResources.[0].modifiedProperties != \"[]\", TargetResources.[0].modifiedProperties, todynamic(\"NoValues\"))\n    | extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \n    tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\n    | extend InitiatedByFull = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \n    tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n    | extend InitiatedBy = replace(\"_\",\"@\",tostring(split(InitiatedByFull, \"#\")[0]))\n    | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetResourceName = case(\n    isempty(tostring(TargetResources.[0].displayName)), TargetUserPrincipalName,\n    isnotempty(tostring(TargetResources.[0].displayName)) and tostring(TargetResources.[0].displayName) startswith \"upn:\", tolower(tostring(TargetResources.[0].displayName)),\n    tolower(tostring(TargetResources.[0].displayName))\n    )\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetUserName = iff(isempty(TargetUserName), tostring(split(split(TargetResourceName, \",\")[0], \" \")[1]), TargetUserName ) \n    | mvexpand ModProps\n    | extend PropertyName = tostring(ModProps.displayName), newValue = replace('\\\"','',tostring(ModProps.newValue));\n};\n// Assigning time for First TargetUserName that was added\nlet FirstAdd = auditLogEvents(auditLookback, opName)  \n| project FirstAddTimeUtc = TimeGenerated, Type, FirstInitiatedBy = InitiatedBy, IpAddress, FirstTargetUserName = TargetUserName, FirstTargetResourceName = TargetResourceName, \nFirstOperationName = OperationName, FirstPropertyName = PropertyName, FirstnewValue = newValue, FirstCorrelationId = CorrelationId, FirstId = Id;\n// Assigning time for second TargetUserName that was added, which will allow us to see if a first TargetUserName added in is the Initiated by on the second in the later join\nlet SecondAdd = auditLogEvents(auditLookback, opName)  \n| project SecondAddTimeUtc = TimeGenerated, Type, SecondInitiatedBy = InitiatedBy, IpAddress, SecondTargetUserName = TargetUserName, SecondTargetResourceName = TargetResourceName, \nSecondOperationName = OperationName, SecondPropertyName = PropertyName, SecondnewValue = newValue, SecondCorrelationId = CorrelationId, SecondId = Id;\n//  Joining the FirstAdd with SecondAdd where the FirstAdd TargetUserName value matches the SecondAdd InitiatedBy.  This shows the new user adding a user.\nlet NewUserAddsUser = FirstAdd | join SecondAdd on $left.FirstTargetUserName == $right.SecondInitiatedBy\n// we only want items where the FirstAddTimeUtc is before the SecondAddTimeUtc\n| where FirstAddTimeUtc < SecondAddTimeUtc\n;\n// Build out some of the properties for context\nNewUserAddsUser\n| extend FirstnewValue = split(FirstnewValue, \";\"), SecondnewValue = split(SecondnewValue, \";\")\n| extend PropertyUpdate = pack(FirstPropertyName, FirstnewValue, SecondPropertyName, SecondnewValue, \"FirstCorrelationId\", FirstCorrelationId, \"FirstId\", FirstId, \"SecondCorrelationId\", SecondCorrelationId, \"SecondId\", SecondId)\n| summarize PropertyUpdateSet = make_bag(PropertyUpdate, 1000) by FirstAddTimeUtc, FirstInitiatedBy, FirstTargetUserName, SecondAddTimeUtc, SecondInitiatedBy, SecondTargetUserName, \nIpAddress, FirstTargetResourceName, SecondTargetResourceName, FirstOperationName, SecondOperationName\n| extend timestamp = FirstAddTimeUtc, FirstInitiatedByUserName = tostring(strcat_array(array_slice(split(FirstInitiatedBy, '@'), 0, -2), '@')), FirstInitiatedByUPNSuffix = tostring(split(FirstInitiatedBy, '@')[-1])\n| extend Account_0_Name = FirstInitiatedByUserName\n| extend Account_0_UPNSuffix = FirstInitiatedByUPNSuffix\n| extend IP_0_Address = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when device with unseen MAC Address joined AP.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "let lbperiod = 14d;\nlet lbperiod_24h = 24h;\nlet known_macs = UbiquitiAuditEvent\n| where TimeGenerated between (ago(lbperiod) .. ago(lbperiod_24h))\n| where DvcAction =~ 'JOIN'\n| summarize makeset(SrcMacAddr);\nUbiquitiAuditEvent\n| where DvcAction =~ 'JOIN'\n| where SrcMacAddr !in (known_macs)\n| extend Device = SrcMacAddr\n| extend HostCustomEntity = Device\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for mails with SPF failure status.\n Topic: CiscoSEG"}, {"role": "assistant", "content": "CiscoSEGEvent\n| where TimeGenerated > ago(24h)\n| where tostring(AdditionalFields) has 'ESASPFVerdict'\n| extend spf_status = extract(@'ESASPFVerdict\":\"(Pass|Neutral|SoftFail|Fail|TempError|PermError)\"', 1, tostring(AdditionalFields))\n| where spf_status in~ ('Fail', 'TempError', 'PermError')\n| extend AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "A service principal name (SPN) is used to uniquely identify a service instance in a Windows environment.\nEach SPN is usually associated with a service account. Organizations may have used service accounts with weak passwords in their environment.\nAn attacker can try requesting Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC) which contains a hash of the Service account. This can then be used for offline cracking.\nThis hunting query looks for accounts that are generating excessive requests to different resources within the last hour compared with the previous 24 hours.  Normal users would not make an unusually large number of request within a small time window. This is based on 4769 events which can be very noisy so environment based tweaking might be needed.\n Topic: Detections"}, {"role": "assistant", "content": "let starttime = 1d;\nlet endtime = 1h;\nlet prev23hThreshold = 4;\nlet prev1hThreshold = 15;\nlet Kerbevent = (union isfuzzy=true\n(SecurityEvent\n| where TimeGenerated >= ago(starttime)\n| where EventID == 4769\n| parse EventData with * 'TicketEncryptionType\">' TicketEncryptionType \"<\" *\n| where TicketEncryptionType == '0x17'\n| parse EventData with * 'TicketOptions\">' TicketOptions \"<\" *\n| where TicketOptions == '0x40810000'\n| parse EventData with * 'Status\">' Status \"<\" *\n| where Status == '0x0'\n| parse EventData with * 'ServiceName\">' ServiceName \"<\" *\n| where ServiceName !contains \"$\" and ServiceName !contains \"krbtgt\"\n| parse EventData with * 'TargetUserName\">' TargetUserName \"<\" *\n| where TargetUserName !contains \"$@\" and TargetUserName !contains ServiceName\n| parse EventData with * 'IpAddress\">::ffff:' ClientIPAddress \"<\" *\n),\n(\nWindowsEvent\n| where TimeGenerated >= ago(starttime)\n| where EventID == 4769 and EventData has '0x17' and EventData has '0x40810000' and EventData has 'krbtgt'\n| extend TicketEncryptionType = tostring(EventData.TicketEncryptionType)\n| where TicketEncryptionType == '0x17'\n| extend TicketOptions = tostring(EventData.TicketOptions)\n| where TicketOptions == '0x40810000'\n| extend Status = tostring(EventData.Status)\n| where Status == '0x0'\n| extend ServiceName = tostring(EventData.ServiceName)\n| where ServiceName !contains \"$\" and ServiceName !contains \"krbtgt\"\n| extend TargetUserName = tostring(EventData.TargetUserName)\n| where TargetUserName !contains \"$@\" and TargetUserName !contains ServiceName\n| extend ClientIPAddress = tostring(EventData.IpAddress)\n));\nlet Kerbevent23h = Kerbevent\n| where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime)\n| summarize ServiceNameCountPrev23h = dcount(ServiceName), ServiceNameSet23h = makeset(ServiceName)\nby Computer, TargetUserName,TargetDomainName, ClientIPAddress, TicketOptions, TicketEncryptionType, Status\n| where ServiceNameCountPrev23h < prev23hThreshold;\nlet Kerbevent1h =\nKerbevent\n| where TimeGenerated >= ago(endtime)\n| summarize min(TimeGenerated), max(TimeGenerated), ServiceNameCountPrev1h = dcount(ServiceName), ServiceNameSet1h = makeset(ServiceName)\nby Computer, TargetUserName, TargetDomainName, ClientIPAddress, TicketOptions, TicketEncryptionType, Status;\nKerbevent1h\n| join kind=leftanti\n(\nKerbevent23h\n) on TargetUserName, TargetDomainName\n// Threshold value set above is based on testing, this value may need to be changed for your environment.\n| where ServiceNameCountPrev1h > prev1hThreshold\n| project StartTime = min_TimeGenerated, EndTime = max_TimeGenerated, TargetUserName, Computer, ClientIPAddress, TicketOptions,\nTicketEncryptionType, Status, ServiceNameCountPrev1h, ServiceNameSet1h, TargetDomainName\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend TargetAccount = strcat(TargetDomainName,  \"\\\\\", TargetUserName)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a user is added to any of the Privileged Groups.\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\nFor Administrator role permissions in Microsoft Entra ID please see https://docs.microsoft.com/azure/active-directory/users-groups-roles/directory-assign-admin-roles\n Topic: SecurityThreatEssentialSolution"}, {"role": "assistant", "content": "let OperationList = dynamic([\"Add member to role\",\"Add member to role in PIM requested (permanent)\"]);\nlet PrivilegedGroups = dynamic([\"UserAccountAdmins\",\"PrivilegedRoleAdmins\",\"TenantAdmins\"]);\nAuditLogs\n//| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"RoleManagement\"\n| where OperationName in~ (OperationList)\n| mv-expand TargetResources\n| extend modProps = parse_json(TargetResources).modifiedProperties\n| mv-expand bagexpansion=array modProps\n| evaluate bag_unpack(modProps)\n| extend displayName = column_ifexists(\"displayName\", \"NotAvailable\"), newValue = column_ifexists(\"newValue\", \"NotAvailable\")\n| where displayName =~ \"Role.WellKnownObjectName\"\n| extend DisplayName = displayName, GroupName = replace('\"','',newValue)\n| extend initByApp = parse_json(InitiatedBy).app, initByUser = parse_json(InitiatedBy).user\n| extend AppId = initByApp.appId,\nInitiatedByDisplayName = case(isnotempty(initByApp.displayName), initByApp.displayName, isnotempty(initByUser.displayName), initByUser.displayName, \"not available\"),\nServicePrincipalId = tostring(initByApp.servicePrincipalId),\nServicePrincipalName = tostring(initByApp.servicePrincipalName),\nUserId = initByUser.id,\nUserIPAddress = initByUser.ipAddress,\nUserRoles = initByUser.roles,\nUserPrincipalName = tostring(initByUser.userPrincipalName),\nTargetUserPrincipalName = tostring(TargetResources.userPrincipalName)\n| where GroupName in~ (PrivilegedGroups)\n// If you don't want to alert for operations from PIM, remove below filtering for MS-PIM.\n//| where InitiatedByDisplayName != \"MS-PIM\"\n| project TimeGenerated, AADOperationType, Category, OperationName, AADTenantId, AppId, InitiatedByDisplayName, ServicePrincipalId, ServicePrincipalName, DisplayName, GroupName, UserId, UserIPAddress, UserRoles, UserPrincipalName, TargetUserPrincipalName\n| extend InitiatorAccount = case(isnotempty(ServicePrincipalName), ServicePrincipalName, isnotempty(ServicePrincipalId), ServicePrincipalId, isnotempty(UserPrincipalName), UserPrincipalName, \"not available\")\n| extend InitiatorName = iif(InitiatorAccount has '@',tostring(split(InitiatorAccount,'@',0)[0]),\"\")\n| extend InitiatorUPNSuffix = iif(InitiatorAccount has '@',tostring(split(InitiatorAccount,'@',1)[0]),\"\")\n| extend InitiatorAadUserId = iif(InitiatorAccount !has '@',InitiatorAccount,\"\")\n| extend TargetName = iif(TargetUserPrincipalName has '@',tostring(split(TargetUserPrincipalName,'@',0)[0]),\"\")\n| extend TargetUPNSuffix = iif(TargetUserPrincipalName has '@',tostring(split(TargetUserPrincipalName,'@',1)[0]),\"\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects multiple server errors from one source in short timeframe\n Topic: NGINX HTTP Server"}, {"role": "assistant", "content": "let threshold = 100;\nNGINXHTTPServer\n| where tolong(HttpStatusCode) >= 500 and tolong(HttpStatusCode) <= 599 \n| summarize MultipleServerErrors = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleServerErrors > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows request to forbidden files.\n Topic: Tomcat"}, {"role": "assistant", "content": "TomcatEvent\n| where TimeGenerated > ago(24h)\n| where HttpStatusCode == 403\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for hosts running a rare process. A rare process has execution requency of less than 1% of the average for 30 days and less than a count of 100 on a given host or less than a 14 count on a given host from the last 7 days.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 30d;\nlet basic=materialize(\n  SecurityEvent\n    | where TimeGenerated between(lookback..endtime)\n    | where EventID == 4688\n    | summarize FullCount = count()\n                , Count= countif(TimeGenerated between (starttime .. endtime))\n                , min_TimeGenerated=min(TimeGenerated)\n                , max_TimeGenerated=max(TimeGenerated)\n                      by Computer, NewProcessName\n    | where Count > 0 and Count < 100);\nlet basic_avg = basic\n    | summarize Avg = avg(FullCount) by  NewProcessName;\nbasic | project-away FullCount\n  | join kind=inner\nbasic_avg\n  on NewProcessName | project-away NewProcessName1\n  | where Count < 14 or (Count <= Avg*0.01 and Count < 100)\n  | extend HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n  | extend Host_0_HostName = HostName\n  | extend Host_0_DnsDomain = DnsDomain \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects possible Exchange online autodiscover abuse.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "GCPCloudDNS\n| where Query has_any ('autodiscover.com.br', 'autodiscover.com.cn', 'autodiscover.com.co', 'autodiscover.es', 'autodiscover.fr', 'autodiscover.in', 'autodiscover.it', 'autodiscover.sg', 'autodiscover.uk', 'autodiscover.xyz', 'autodiscover.online')\n| extend DNSCustomEntity = Query, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for time consuming queries.\n Topic: Snowflake"}, {"role": "assistant", "content": "let acceptable_duration = 1000;\nSnowflake\n| where TimeGenerated > ago(24h)\n| where TOTAL_ELAPSED_TIME_d > acceptable_duration\n| summarize by QUERY_TEXT_s, TOTAL_ELAPSED_TIME_d, TargetUsername\n| order by TOTAL_ELAPSED_TIME_d\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The policy detects admin users in AWS or Azure. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s\n| where Policy has \"IaaS admin detected\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for file delete audit events generated by a Nasuni Edge Appliance.\n Topic: Nasuni"}, {"role": "assistant", "content": "Syslog \n| where SyslogMessage matches regex \"(nasuni.)([0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{1})\"\n| extend SyslogMessageJson = extract('{(.*?)}', 0, SyslogMessage)\n| extend event_details = parse_json(SyslogMessageJson)\n| extend path_parts = parse_path(tostring(event_details.path))\n| extend SrcIpAdr = event_details.ipaddr\n| extend sAMAccountName = trim(@\"(?s)^.*\\\\\\s*\", tostring(event_details.username))\n| extend sid = event_details.sid\n| extend domainName = trim_end(@\"[\\\\]\\S*\", tostring(event_details.username))\n| extend HostName\n| extend filename = path_parts.Filename\n| extend directorypath = path_parts.DirectoryPath\n| where event_details.event_type == \"AUDIT_UNLINK\"\n| project\n    TimeGenerated,\n    HostName,\n    event_type = event_details.event_type,\n    sAMAccountName,\n    domainName,\n    filename,\n    directorypath,\n    SrcIpAdr,\n    sid,\n    volume_guid = event_details.volume,\n    access_point = event_details.resource,\n    primary_group_name = trim(@\"(?s)^.*\\\\\\s*\", tostring(event_details.groupname)),\n    new_path = event_details.newpath\n| extend Host_0_HostName = HostName\n| extend Account_0_Name = sAMAccountName\n| extend Account_0_NTDomain = domainName\n| extend Account_0_Sid = sid\n| extend File_0_Name = filename\n| extend File_0_Directory = directorypath\n| extend IP_0_Address = SrcIpAdr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects files which potentialy may contain sensitive data such as passwords, authentication tokens, secret keys.\n Topic: Box"}, {"role": "assistant", "content": "BoxEvents\n| where SourceItemName =~ 'id_rsa' or SourceItemName contains 'password' or SourceItemName contains 'key' or SourceItemName contains '_key' or SourceItemName contains '.ssh' or SourceItemName endswith '.npmrc' or SourceItemName endswith '.muttrc' or SourceItemName contains 'config.json' or SourceItemName contains '.gitconfig' or SourceItemName endswith '.netrc' or SourceItemName endswith 'package.json' or SourceItemName endswith 'Gemfile' or SourceItemName endswith 'bower.json' or SourceItemName endswith 'config.gypi' or SourceItemName endswith 'travis.yml' or SourceFileName =~ 'id_rsa' or SourceFileName contains 'password' or SourceFileName contains 'key' or SourceFileName contains '_key' or SourceFileName contains '.ssh' or SourceFileName endswith '.npmrc' or SourceFileName endswith '.muttrc' or SourceFileName contains 'config.json' or SourceFileName contains '.gitconfig' or SourceFileName endswith '.netrc' or SourceFileName endswith 'package.json' or SourceFileName endswith 'Gemfile' or SourceFileName contains 'bower.json' or SourceFileName contains 'config.gypi' or SourceFileName contains 'travis.yml'\n| extend AccountCustomEntity = SrcUserName\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for requests to IP lookup resources.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "let ip_check = dynamic(['whatismyipaddress.com', 'ip2location.com', 'ipaddress.my', 'whatismyip.com', 'ipinfo.info', 'checkmyip.com', 'myip.com', 'checkmyip.org', 'canireachthe.net', 'ipv4.icanhazip.com', 'ip.anysrc.net', 'edns.ip-api.com', 'wtfismyip.com', 'checkip.dyndns.org', 'api.2ip.ua', 'icanhazip.com', 'api.ipify.org', 'ip-api.com', 'checkip.amazonaws.com', 'ipecho.net', 'ipinfo.io', 'ipv4bot.whatismyipaddress.com', 'freegeoip.app', 'checkip.azurewebsites.net']);\nGCPCloudDNS\n| where TimeGenerated > ago(24h)\n| where Query in~ (ip_check)\n| extend DNSCustomEntity = Query, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a user adds an unverified domain as an authentication method, followed by a sign-in from a user the newly added domain. Threat actors may add custom domains to create a backdoor to your tenant. Its important to monitor whenever custom domains are added to the tenant.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "// Microsoft Entra ID  Backdoors: Identity Federation\n//Ref: https://www.inversecos.com/2021/11/how-to-detect-azure-active-directory.html\nAuditLogs\n| where OperationName == \"Add unverified domain\"\n| where Result == \"success\"\n| extend InitiatedBy = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend DomainName = tostring(TargetResources[0].displayName)\n| summarize DomainAddedTime = min(TimeGenerated), ModifiedProperties = make_set(parse_json(TargetResources[0].modifiedProperties),1048576) by InitiatedBy, DomainName\n| join kind=inner (\nSigninLogs\n| where ResultType == \"0\"\n| extend UserDomain = tostring(parse_json(split(UserPrincipalName,\"@\",1)[0]))\n| summarize SignInTime = min(TimeGenerated)  by UserPrincipalName, IPAddress, tostring(LocationDetails),AppDisplayName,ResourceDisplayName,UserDomain\n) on $left.DomainName == $right.UserDomain\n// Getting UserName and Domain\n| extend Name = split(UserPrincipalName,\"@\",0), Domain = split(UserPrincipalName,\"@\",1)\n| mv-expand Name,Domain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies anomalies in activity patterns of Dataverse application (non-interactive) users, based on activity falling outside the normal pattern of use. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_lookback = 14d;\nlet query_frequency = 5h;\nlet anomaly_threshold = 2.5;\nlet seasonality = -1;\nlet trend = 'linefit';\nlet step_duration = 5h;\nlet app_user_regex = \"^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}\\\\.com$\";\nlet guid_regex = \"([0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12})\";\nlet application_users = DataverseActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where UserId !endswith \"@onmicrosoft.com\" and UserId != \"Unknown\"\n    | summarize by UserId\n    | where split(UserId, \"@\")[1] matches regex app_user_regex;\nDataverseActivity\n| where TimeGenerated >= startofday(ago(query_lookback))\n| where UserId in (application_users)\n| where isnotempty(OriginalObjectId)\n| make-series TotalEvents = count() default=0 on TimeGenerated from startofday(ago(query_lookback)) to now() step step_duration by UserId, InstanceUrl, OriginalObjectId\n| extend (Anomalies, Score, Baseline) = series_decompose_anomalies(TotalEvents, anomaly_threshold, seasonality, trend)\n| mv-expand\n    TotalEvents to typeof(double),\n    AnomalyTimeGenerated = TimeGenerated to typeof(datetime),\n    Anomalies to typeof(double),\n    Score to typeof(double),\n    Baseline to typeof(long)\n| where Anomalies > 0\n| extend Details = bag_pack(\n                       \"TotalEvents\",\n                       TotalEvents,\n                       \"Anomalies\",\n                       Anomalies,\n                       \"Baseline\",\n                       Baseline,\n                       \"Score\",\n                       Score,\n                       \"OriginalObjectId\",\n                       OriginalObjectId\n                   )\n| summarize Details = make_set(Details, 100) by UserId, InstanceUrl, AnomalyTimeGenerated\n| extend\n    CloudAppId = int(32780),\n    AadUserId = extract(guid_regex, 1, tostring(split(UserId, \"@\")[0]))\n| project\n    AnomalyTimeGenerated,\n    UserId,\n    AadUserId,\n    InstanceUrl,\n    Details,\n    CloudAppId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may manipulate accounts to maintain access to victim systems. These actions include adding new accounts to high-privilege groups. Dragonfly 2.0, for example, added newly created accounts to the administrators group to maintain elevated access. The query below generates an output of all high Blast Radius users performing Add member to priveleged role, or where one or more features of the activity deviate from the user, his peers, or the tenant profile.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "let critical = dynamic(['9b895d92-2cd3-44c7-9d02-a6ac2d5ea5c3','c4e39bd9-1100-46d3-8c65-fb160da0071f','158c047a-c907-4556-b7ef-446551a6b5f7','62e90394-69f5-4237-9190-012177145e10','d29b2b05-8046-44ba-8758-1e26182fcf32','729827e3-9c14-49f7-bb1b-9608f156bbb8','966707d0-3269-4727-9be2-8c3a10f19b9d','194ae4cb-b126-40b2-bd5b-6091b380977d','fe930be7-5e62-47db-91af-98c3a49a38b1']);\nlet high = dynamic(['cf1c38e5-3621-4004-a7cb-879624dced7c','7495fdc4-34c4-4d15-a289-98788ce399fd','aaf43236-0c0d-4d5f-883a-6955382ac081','3edaf663-341e-4475-9f94-5c398ef6c070','7698a772-787b-4ac8-901f-60d6b08affd2','b1be1c3e-b65d-4f19-8427-f6fa0d97feb9','9f06204d-73c1-4d4c-880a-6edb90606fd8','29232cdf-9323-42fd-ade2-1d097af3e4de','be2f45a1-457d-42af-a067-6ec1fa63bc45','7be44c8a-adaf-4e2a-84d6-ab2649e08a13','e8611ab8-c189-46e8-94e1-60213ab1f814']);\nAuditLogs\n| where OperationName =~ \"Add member to role\"\n| mv-expand TargetResources\n| extend RoleId = tostring(TargetResources.modifiedProperties[0].newValue)\n| extend RoleName = tostring(TargetResources.modifiedProperties[1].newValue)\n| where RoleId in~ (critical,high)\n| extend TargetId = tostring(TargetResources.id)\n| extend Target = tostring(TargetResources.userPrincipalName)\n| where isnotempty(RoleId) or isnotempty(RoleName)\n| join kind=inner ( BehaviorAnalytics\n) on $left._ItemId == $right.SourceRecordId\n| where UsersInsights.BlasrRadius =~ \"High\" or ActivityInsights has \"True\"\n| project TimeGenerated, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"TargetUser\"]=Target, RoleName, ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, ResourceId\n| extend Name=split(UserPrincipalName, \"@\")[0], UPNSuffix=split(UserPrincipalName, \"@\")[1]\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SourceIPAddress\n| extend AzureResource_0_ResourceId = ResourceId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects an abuse of the DSRM account in order to maintain persistence and access to the organizations Active Directory.\nRef: https://adsecurity.org/?p=1785\n Topic: Detections"}, {"role": "assistant", "content": "Event\n| where EventLog == \"Microsoft-Windows-Sysmon/Operational\" and EventID in (13)\n| parse EventData with * 'ProcessId\">' ProcessId \"<\"* 'Image\">' Image \"<\" * 'TargetObject\">' TargetObject \"<\" * 'Details\">' Details \"<\" * 'User\">' User \"<\" * \n| where TargetObject has (\"HKLM\\\\System\\\\CurrentControlSet\\\\Control\\\\Lsa\\\\DsrmAdminLogonBehavior\") and Details == \"DWORD (0x00000002)\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, User, ProcessId, Image, TargetObject, Details, _ResourceId\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(User, \"\\\\\")[1]), AccountNTDomain = tostring(split(User, \"\\\\\")[0])\n| extend ImageFileName = tostring(split(Image, \"\\\\\")[-1])\n| extend ImageDirectory = replace_string(Image, ImageFileName, \"\")\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for requests rare domains.\n Topic: GoogleCloudPlatformDNS"}, {"role": "assistant", "content": "GCPCloudDNS\n| where TimeGenerated > ago(24h)\n| summarize count() by Query\n| order by count_ asc\n| top 10 by count_\n| extend DNSCustomEntity = Query\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when file type changed.\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "PaloAltoCDLEvent\n| where EventResourceId =~ 'THREAT'\n| where EventResult =~ 'file'\n| where FileType != OldFileType\n| extend FileCustomEntity = SrcFileName, AccountCustomEntity = DstUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule is triggered when generic IOC is observed on host.\n Topic: Cisco Secure Endpoint"}, {"role": "assistant", "content": "CiscoSecureEndpoint\n| where EventMessage has 'Generic IOC'\n| extend HostCustomEntity = DstHostname, MalwareCustomEntity = ThreatName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create an incident when an identity is suspected to be compromised. Vectra is using AI to prioritize an entity based on multiple factors (attack rating, velocity, breadth, importance.etc.). This layer of aggregation at the entity level provides a greater signal-to-noise ratio and help analyst focus on what matters. Topic: Vectra XDR"}, {"role": "assistant", "content": "Entities_Data_CL\n| where type_s == \"account\" and is_prioritized_b == true\n| summarize arg_max(['last_modified_timestamp_t'], *) by ['name_s']\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when User Agent string has changed for user.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where EventType =~ 'access'\n| where EventMessage =~ 'Login'\n| summarize ua = makeset(HttpUserAgent) by User\n| join (Bitglass\n        | where EventType =~ 'access'\n        | where EventMessage =~ 'Login') on User\n| where ua !contains HttpUserAgent\n| extend AccountCustomEntity = User\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects successful signins using single factor authentication where the device, location, and ASN are abnormal.\n Single factor authentications pose an opportunity to access compromised accounts, investigate these for anomalous occurrencess.\n Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-devices#non-compliant-device-sign-in\n Topic: Detections"}, {"role": "assistant", "content": "let known_locations = (SigninLogs\n  | where TimeGenerated between(ago(7d)..ago(1d))\n  | where ResultType == 0\n  | extend LocationDetail = strcat(Location, \"-\", LocationDetails.state)\n  | summarize by LocationDetail);\nlet known_asn = (SigninLogs\n  | where TimeGenerated between(ago(7d)..ago(1d))\n  | where ResultType == 0\n  | summarize by AutonomousSystemNumber);\nSigninLogs\n| where TimeGenerated > ago(1d)\n| where ResultType == 0\n| where isempty(DeviceDetail.deviceId)\n| where AuthenticationRequirement == \"singleFactorAuthentication\"\n| extend LocationParsed = parse_json(LocationDetails), DeviceParsed = parse_json(DeviceDetail)\n| extend City = tostring(LocationParsed.city), State = tostring(LocationParsed.state)\n| extend LocationDetail = strcat(Location, \"-\", State)\n| extend DeviceId = tostring(DeviceParsed.deviceId), DeviceName=tostring(DeviceParsed.displayName), OS=tostring(DeviceParsed.operatingSystem), Browser=tostring(DeviceParsed.browser)\n| where AutonomousSystemNumber !in (known_asn) and LocationDetail !in (known_locations)\n| project TimeGenerated, Type, UserId, UserDisplayName, UserPrincipalName, IPAddress, Location, State, City, ResultType, ResultDescription, AppId, AppDisplayName, AuthenticationRequirement, ConditionalAccessStatus, ResourceDisplayName, ClientAppUsed, Identity, HomeTenantId, ResourceTenantId, Status, UserAgent, DeviceId, DeviceName, OS, Browser, MfaDetail\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects suspicious user agent strings used by crypto miners in proxy logs.\n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = 15m;\nCisco_Umbrella\n| where EventType == \"proxylogs\"\n| where TimeGenerated > ago(timeframe)\n| where HttpUserAgentOriginal contains \"XMRig\" or HttpUserAgentOriginal contains \"ccminer\"\n| extend Message = \"Crypto Miner User Agent\"\n| project Message, SrcIpAddr, DstIpAddr, UrlOriginal, TimeGenerated,HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests from countries which are in blocklist.\n Topic: Cloudflare"}, {"role": "assistant", "content": "let bl_countries = dynamic(['cn', 'hk']);\nCloudflare\n| where SrcGeoCountry in~ (bl_countries)\n| extend IPCustomEntity = SrcIpAddr\n| extend UrlCustomEntity = ClientRequestURI\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unexpected version of update operation.\n Topic: Zscaler Private Access (ZPA)"}, {"role": "assistant", "content": "ZPAEvent\n| where isnotempty(AuditOperationType)\n| extend ExpectedVersion1 = extract(@'(expectedVersion\":\")([0-9]+)\\.([0-9]+\\.[0-9]+)', 2, AuditOldValue)\n| extend ExpectedVersion2 = extract(@'(expectedVersion\":\")([0-9]+)\\.([0-9]+\\.[0-9]+)', 3, AuditOldValue)\n| extend NewVersion1 = extract(@'(\"currentVersion\":\")([0-9]+)\\.([0-9]+\\.[0-9]+)', 2, AuditNewValue)\n| extend NewVersion2 = extract(@'(\"currentVersion\":\")([0-9]+)\\.([0-9]+\\.[0-9]+)', 3, AuditNewValue)\n| extend Comparision1 = iff(tolong(ExpectedVersion2) > tolong(NewVersion2), 'Unexpected version', 'Expected version')\n| extend VersionCheck = iff(tolong(ExpectedVersion1) > tolong(NewVersion1), 'Unexpected version', Comparision1)\n| project-away ExpectedVersion1, ExpectedVersion2, NewVersion1, NewVersion2, Comparision1\n| extend ProcessCustomEntity = AuditOperationType\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Looks across your environment for least common Parent/Child process combinations.\nWill possibly find some malicious activity disguised as well known process names.\nBy ZanCo\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = starttime - 7d;\nlet Allowlist = dynamic (['foo.exe', 'baz.exe']);\nlet Sensitivity = 5;\nSecurityEvent\n| where TimeGenerated between(lookback..endtime)\n| where EventID == 4688 and isnotempty(ParentProcessName)  \n| extend ProcArray = split(NewProcessName, '\\\\'), ParentProcArray = split(ParentProcessName, '\\\\')\n// ProcArrayLength is Folder Depth\n| extend ProcArrayLength = array_length(ProcArray), ParentProcArrayLength = array_length(ParentProcArray)\n| extend LastIndex = ProcArrayLength - 1, ParentLastIndex = ParentProcArrayLength - 1\n| extend Proc = ProcArray[LastIndex], ParentProc = ParentProcArray[ParentLastIndex]\n| where Proc !in (Allowlist)\n| extend ParentChildPair = strcat(ParentProc , ' > ', Proc)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TimesSeen = count(), HostCount = dcount(Computer), Hosts = make_set(Computer,maxSize=1000), UserCount = dcount(SubjectUserName), Users = make_set(SubjectUserName,maxSize=1000) by ParentChildPair\n| where TimesSeen < Sensitivity\n| extend timestamp = StartTimeUtc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when critical deviation from baseline occurs.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where EventOriginalType has 'Baseline Deviation' or EventType has 'Baseline Deviation'\n| where EventSeverity == '5'\n| project TimeGenerated, DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rare files recieved via email services.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where TimeGenerated > ago(24h)\n| where EventCategoryType in~ ('exchange', 'gmail', 'exchangeserver')\n| where isnotempty(MailMessageFileName)\n| summarize count() by MailMessageFileName, EventOriginalResultDetails\n| order by count_ asc\n| extend FileCustomEntity = MailMessageFileName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for bruteforce Password Guessing attacks\n Topic: Alsid For AD"}, {"role": "assistant", "content": "afad_parser\n| where MessageType == 2 and Codename == \"Password Guessing\"\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when project roles were changed.\n Topic: AtlassianJiraAudit"}, {"role": "assistant", "content": "JiraAudit\n| where EventMessage =~ 'Project roles changed'\n| project EventCreationTime, ObjectItemName, UserName, SrcIpAddr, AssociatedItems\n| extend AccountCustomEntity = UserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for new users.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "let known_users = \nPaloAltoPrismaCloud\n| where TimeGenerated between (ago(30d) .. (1d))\n| where ResourceType =~ 'Login'\n| where EventMessage !has 'access key'\n| summarize makeset(UserName);\nPaloAltoPrismaCloud\n| where TimeGenerated > ago(24h)\n| where ResourceType =~ 'Login'\n| where EventMessage !has 'access key'\n| where UserName !in (known_users)\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows behavior monitoring event types.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where TimeGenerated > ago(24h)\n| where EventMessage has \"Behavior Monitoring\"\n| where isnotempty(Event_Type)\n| extend TypeOfEvent= case(\nEvent_Type == \"1\", \"Process\",\nEvent_Type == \"2\", \"Process image\",\nEvent_Type == \"4\", \"Registry\",\nEvent_Type == \"8\", \"File system\",\nEvent_Type == \"16\", \"Driver\",\nEvent_Type == \"32\", \"SDT\", \nEvent_Type == \"64\", \"System API\",\nEvent_Type == \"128\", \"User Mode\",\nEvent_Type == \"2048\", \"Exploit\",\nEvent_Type == \"65535\", \"All\",\n\"unknown\")\n| summarize EventTypeCount = count() by TypeOfEvent, DstUserName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when user drops many tables in short period of time.\n Topic: OracleDatabaseAudit"}, {"role": "assistant", "content": "let tbl_threshold = 10;\nOracleDatabaseAuditEvent\n| where isnotempty(DstUserName)\n| where DbAction =~ 'DROP'\n| extend TableName = replace(@'[,\\(\\)]', '', extract(@'(?i)SELECT(.*?)FROM\\s(.*?)\\s', 2, Action))\n| where isnotempty(TableName)\n| where TableName !~ 'SELECT'\n| summarize tbl_count = dcount(TableName) by DstUserName\n| where tbl_count > tbl_threshold\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows abnormal request size.\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "let Average_Body_Bytes = OracleWebLogicServerEvent\n| where TimeGenerated > ago(30d)\n| summarize Avg_Size = avg(tolong(HttpResponseBodyBytes))\n| extend K = 1;\nOracleWebLogicServerEvent\n| where TimeGenerated > ago(24h)\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| extend K = 1\n| join kind=inner Average_Body_Bytes on K\n| where tolong(HttpResponseBodyBytes) > Avg_Size\n| extend FileCustomEntity = File\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Header: X-XSS-Protection Missing\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"informational\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"Header: X-XSS-Protection Missing\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows alert triggers (e.g. files, processes, etc.).\n Topic: SentinelOne"}, {"role": "assistant", "content": "SentinelOne\n| where TimeGenerated > ago(24h)\n| where ActivityType == 3608\n| order by EventCreationTime\n| extend trigger = extract(@'Alert created for\\s+(.*?)\\sfrom Custom', 1, EventOriginalMessage)\n| extend MalwareCustomEntity = trigger\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect activities when a repository was destroyed. This query runs every day and its severity is Medium.\n Topic: GitHub"}, {"role": "assistant", "content": "GitHubAuditData\n| where Action == \"repo.destroy\"\n| extend AccountName = tostring(split(Actor, \"@\")[0]), AccountUPNSuffix = tostring(split(Actor, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies when a JIT Rule connection is new or rare by a given account today based on comparison with the previous 14 days.\nJIT Rule creations are indicated by the Activity Type Id 20\n Topic: ZeroNetworks"}, {"role": "assistant", "content": "let starttime = 14d;\nlet endtime = 1d;\nZNSegmentAudit\n| where TimeGenerated >= ago(endtime)\n| where AuditTypeId == 20\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ConnectionCount = count()\nby PerformedByName, tostring(DestinationEntityName)\n  // use left anti to exclude anything from the previous 14 days that is not rare\n| join kind=leftanti (\nZNSegmentAudit\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where AuditTypeId == 20\n| summarize by tostring(DestinationEntityName)\n) on DestinationEntityName\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), ConnectionCount = sum(ConnectionCount)\nby PerformedByName, DestinationEntityName\n| extend TimeGenerated = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects abnormal protocol usage.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "ImpervaWAFCloud\n| where NetworkApplicationProtocol in~ ('HTTP', 'HTTPs')\n| where DstPortNumber !in ('80', '443')\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests with different user agents from one source in short timeframe.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "let threshold = 5;\nGWorkspaceActivityReports\n| where isnotempty(UserAgentOriginal)\n| summarize user_ua = makeset(UserAgentOriginal) by SrcIpAddr, bin(TimeGenerated, 5m)\n| where array_length(user_ua) > threshold\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "High severity subnet alerts found by Prancer.\n Topic: Prancer PenSuiteAI Integration"}, {"role": "assistant", "content": "union prancer_CL\n| where deviceProduct_s == 'azure'\n| where parse_json(data_data_snapshots_s)[0].type == 'Microsoft.Network/virtualNetworks/subnets'\n| where data_data_severity_s == 'High' and data_data_result_s == 'failed'\n| extend snapshot = parse_json(data_data_snapshots_s)\n| mv-expand snapshot \n| extend\n    id = tostring(snapshot.id),\n    structure = tostring(snapshot.structure),\n    reference = tostring(snapshot.reference),\n    source = tostring(snapshot.source),\n    collection = tostring(snapshot.collection),\n    type = tostring(snapshot.type),\n    region = tostring(snapshot.region),\n    resourceTypes = tostring(snapshot.resourceTypes),\n    path = tostring(snapshot.path)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Alerts in links that have been shared across multiple Zoom chat channels by the same user in a short space if time.\nAdjust the threshold figure to change the number of channels a message needs to be posted in before an alert is raised.\n Topic: Detections"}, {"role": "assistant", "content": "let threshold = 3;\nZoomLogs\n| where Event =~ \"chat_message.sent\"\n| extend Channel = tostring(parse_json(ChatEvents).Channel)\n| extend Message = tostring(parse_json(ChatEvents).Message)\n| where Message matches regex \"http(s?):\\\\/\\\\/\"\n| summarize Channels = makeset(Channel), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by Message, User, UserId\n| extend ChannelCount = arraylength(Channels)\n| where ChannelCount > threshold\n| extend AccountName = tostring(split(User, \"@\")[0]), AccountUPNSuffix = tostring(split(User, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies use of legacy authentication protocol in the Okta Logs.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "OktaSSO\n| where debugContext_debugData_requestUri_s  has 'sso/wsfed/active'\n| where outcome_result_s == 'SUCCESS'\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by actor_alternateId_s, actor_displayName_s, client_userAgent_os_s, client_ipAddress_s, client_geographicalContext_state_s,displayMessage_s, outcome_result_s,eventType_s,\noutcome_reason_s, column_ifexists('debugContext_debugData_logOnlySecurityData_s', \"\"), debugContext_debugData_threatSuspected_s, client_userAgent_rawUserAgent_s,client_userAgent_browser_s, severity_s,  client_geographicalContext_country_s, client_geographicalContext_city_s\n| extend Account_0_Name = actor_displayName_s\n| extend IP_0_Address = client_ipAddress_s\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection looks for cases of close-time proximity between incoming network traffic on RPC/TCP, followed by the creation of a DCOM object, followed by the creation of a child process of the DCOM object. \nThe query first identifies incoming network traffic over RPC/TCP, followed by the creation of a DCOM object (process) within 2 seconds, followed by the creation of a child process of this DCOM object. \n Topic: FalconFriday"}, {"role": "assistant", "content": "let allowListedExecs = dynamic([\"TiWorker.exe\", \"dllhost.exe\", \"backgroundTaskHost.exe\", \"mobsync.exe\", \"WmiPrvSE.exe\", \"RuntimeBroker.exe\", \"smartscreen.exe\", \"SppExtComObj.Exe\", \"usocoreworker.exe\", \"browser_broker.exe\", \"ssoncom.exe\"]);\nlet rpcNetwEvents = materialize(DeviceNetworkEvents\n| where InitiatingProcessFileName =~ \"svchost.exe\" and InitiatingProcessCommandLine has \"rpcss\" and LocalPort == 135\n| where LocalIP !~ RemoteIP and ActionType != \"ListeningConnectionCreated\"\n| project TimestampNetwEvent=bin(Timestamp, 5s),TimestampNetwEventExact=Timestamp, DeviceId, DeviceName, RPCHostID=InitiatingProcessId, RPCHostFileName=InitiatingProcessFileName, LocalIP, RemoteIP);\nlet dcomProcEvents = materialize (DeviceProcessEvents\n| where InitiatingProcessFileName =~ \"svchost.exe\" and InitiatingProcessCommandLine has \"dcomlaunch\"\n| project TimestampProcEvent=bin(Timestamp, 5s),TimestampProcEventExact=Timestamp, DeviceId, DeviceName, DCOMHostPID=InitiatingProcessId, DCOMHostFileName=InitiatingProcessFileName, DCOMPID=ProcessId, DCOMFileName=FileName, DCOMCmdLine=ProcessCommandLine);\nlet lastBootTime = materialize(DeviceProcessEvents\n| where FileName =~ \"services.exe\"\n| summarize LastBootTime=max(Timestamp) by DeviceId);\nlet RemoteDcomProcs = materialize(rpcNetwEvents\n| join kind=inner dcomProcEvents on DeviceId \n| join kind=leftouter lastBootTime on DeviceId\n| where TimestampProcEvent > LastBootTime+5m // Ignore first 5 min after boot.\n// Avoiding < 2 since if the time between netw and proc creation is negative, they can't be related. Network event must come first. \n| where datetime_diff(\"second\", TimestampProcEventExact, TimestampNetwEventExact) between (0 .. 2) \n// Allow-listing some usual suspects which create lot of noise. This is dangerous though...huge gap for bypass. \n| where DCOMFileName  !in~ (allowListedExecs));\nRemoteDcomProcs\n| join kind=inner hint.strategy=broadcast (\n    DeviceProcessEvents \n    | where InitiatingProcessParentFileName =~ \"svchost.exe\" and InitiatingProcessFileName in ((RemoteDcomProcs | project DCOMFileName))) \non $left.DCOMHostPID == $right.InitiatingProcessParentId, DeviceId, $left.DCOMPID == $right.InitiatingProcessId\n| where InitiatingProcessParentFileName =~ \"svchost.exe\" and InitiatingProcessFileName =~ DCOMFileName \n// Allow-listing the magic of Defender.\n| where FileName !in~ (\"csc.exe\") \n| summarize make_set(ProcessCommandLine) by TimestampNetwEventExact, TimestampProcEventExact, DeviceId, DeviceName, InitiatingProcessId, LocalIP, RemoteIP, LastBootTime, DCOMCmdLine\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when a successful vault export has occurred within 14 days of a new account being created within 1Password.\n\nRef: https://1password.com/\nRef: https://github.com/securehats/ Topic: 1Password"}, {"role": "assistant", "content": "let ruleFrequency = 1h;\nlet lookback = 14d;\nlet onePasswordUserCreationCheck =\n    OnePasswordEventLogs_CL\n    | where TimeGenerated between (ago(lookback) .. ago(now() - ago(ruleFrequency)))\n    | extend creationActivityFound = iff(action == \"activate\" and object_type == \"user\", bool(1), bool(0))\n;\nOnePasswordEventLogs_CL\n| where action == \"export\" and object_type == \"vault\"\n| extend userUuid = tostring(actor_details.uuid)\n| join (\n    onePasswordUserCreationCheck\n    | where creationActivityFound == true\n    | extend userUuid = tostring(object_details.uuid)\n    )\n    on $left.userUuid == $right.userUuid\n| extend\n    TargetUsername = object_details1.email\n    , SrcIpAddr = session1.ip_address"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection identifies high-severity alerts across various Microsoft security products, including Microsoft Defender XDR and Microsoft Entra ID, and correlates them with instances of Google Cloud VM creation. It focuses on instances where VMs were created within a short timeframe of high-severity alerts, potentially indicating suspicious activity.\n Topic: Detections"}, {"role": "assistant", "content": "// Filter alerts from specific Microsoft security products with medium and high severity\nSecurityAlert \n| where ProductName in (\"Microsoft 365 Defender\", \"Azure Active Directory\", \"Microsoft Defender Advanced Threat Protection\", \"Microsoft Cloud App Security\", \"Azure Active Directory Identity Protection\", \"Microsoft Defender ATP\")\n| where AlertSeverity has_any (\"Medium\", \"High\")\n// Parse JSON entities and extend AlertTimeGenerated\n| extend Entities = parse_json(Entities), AlertTimeGenerated=TimeGenerated\n// Extract and process IP entities\n| mv-apply Entity = Entities on \n    ( \n    where Entity.Type == 'ip' \n    | extend EntityIp = tostring(Entity.Address) \n    ) \n// Extract and process account entities\n| mv-apply Entity = Entities on \n    ( \n    where Entity.Type == 'account' \n    | extend AccountObjectId = tostring(Entity.AadUserId)\n    )\n// Filter out records with empty EntityIp\n| where isnotempty(EntityIp)\n// Summarize data and create sets of entities and system alert IDs\n| summarize Entitys=make_set(Entity), SystemAlertIds=make_set(SystemAlertId)\n    by \n    AlertName,\n    ProductName,\n    AlertSeverity,\n    EntityIp,\n    Tactics,\n    Techniques,\n    ProviderName,\n    AlertTime= bin(AlertTimeGenerated, 1d),\n    AccountObjectId\n// Join with GCPAuditLogs for VM instance creation\n| join kind=inner (\n    GCPAuditLogs\n    | where ServiceName == \"compute.googleapis.com\" and MethodName endswith \"instances.insert\"\n    | extend\n        GCPUserUPN= tostring(parse_json(AuthenticationInfo).principalEmail),\n        GCPUserIp = tostring(parse_json(RequestMetadata).callerIp),\n        GCPUserUA= tostring(parse_json(RequestMetadata).callerSuppliedUserAgent),\n        VMStatus =  tostring(parse_json(Response).status),\n        VMOperation=tostring(parse_json(Response).operationType),\n        VMName= tostring(parse_json(Request).name),\n        VMType = tostring(split(parse_json(Request).machineType, \"/\")[-1])\n    | where GCPUserUPN !has \"gserviceaccount.com\"\n    | where VMOperation == \"insert\" and isnotempty(GCPUserIp) and GCPUserIp != \"private\"\n    | project\n        GCPOperationTime=TimeGenerated,\n        VMName,\n        VMStatus,\n        MethodName,\n        GCPUserUPN,\n        ProjectId,\n        GCPUserIp,\n        GCPUserUA,\n        VMOperation,\n        VMType\n    )\n    on $left.EntityIp == $right.GCPUserIp \n// Join with IdentityInfo to enrich user identity details\n| join kind=inner (IdentityInfo \n    | distinct AccountObjectId, AccountUPN, JobTitle\n    )\n    on AccountObjectId \n// Calculate the time difference between the alert and VM creation for further analysis\n| extend TimeDiff= datetime_diff('day', AlertTime, GCPOperationTime),Name = split(GCPUserUPN, \"@\")[0], UPNSuffix = split(GCPUserUPN, \"@\")[1]\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for users who have large number of failed logins.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where TimeGenerated > ago(24h)\n| where ResourceType =~ 'Login'\n| where EventMessage !has 'access key'\n| summarize count() by UserName\n| order by count_ desc\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when device changes PostureStatus from \"Compliant\".\n Topic: Cisco ISE"}, {"role": "assistant", "content": "let lbtime_48h = 48h;\nlet lbtime_24h = 24h;\nlet lbtime_now = now();\nlet compliantIPs = CiscoISEEvent\n| where TimeGenerated between (ago(lbtime_48h) .. ago(lbtime_24h))\n| where PostureStatus == 'Compliant'\n| summarize makelist(DstIpAddr)\n;\nCiscoISEEvent\n| where TimeGenerated between (ago(lbtime_24h) .. lbtime_now)\n| where PostureStatus != 'Compliant'\n| where DstIpAddr in (compliantIPs)\n| project DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects threats from impersonation mail under targeted threat protection Topic: MimecastSEG"}, {"role": "assistant", "content": "MimecastSIEM_CL| where mimecastEventId_s == \"mail_ttp_impersonation\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Creates an incident based on Jamf Protect Alert data in Microsoft Sentinel\n Topic: Jamf Protect"}, {"role": "assistant", "content": "JamfProtect\n| where EventProduct == \"Jamf Protect - Alerts\"\n    and isnotempty(EventSeverity)\n| extend\n    algorithm = \"SHA256\",\n    Host_IPs = tostring(parse_json(DvcIpAddr)[0]),\n    Tags = tostring(Match_facts[0].tags),\n    Tactics = case(Match_tags has \"Execution\", \"Execution\", Match_tags has \"Visibility\", \"Visibility\", Match_tags has \"Persistence\", \"Persistence\", Match_tags has \"LateralMovement\", \"LateralMovement\", Match_tags has \"CredentialAccess\", \"CredentialAcccess\", Match_tags has \"DefenseEvasion\", \"DefenseEvasion\", Match_tags has \"PrivilegeEscalation\", \"PrivilegeEscalation\", Match_tags has \"Impact\", \"Impact\", Match_tags has \"CommandAndControl\", \"CommandandControl\", Match_tags has \"Discovery\", \"Discovery\", Match_tags has \"InitialAccess\", \"InitialAccess\", \"\"),\n    Techniques = pack_array(extract(@\"[A-Za-z]\\d{4}\", 0, tostring(Match_tags))),\n    JamfPro = case(Match_actions has \"SmartGroup\", \"Workflow with Jamf Pro\", Match_actions has \"Prevented\", \"No workflow, Prevented by Protect\", \"No workflow\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query creates a list of IP addresses with the number of failed login attempts to Entra ID \nabove a set threshold ( default of 5 ).  It then looks for any successful Palo Alto VPN logins from any of these IPs within the same timeframe.\n Topic: Detections"}, {"role": "assistant", "content": "//Set a threshold of failed AAD signins from an IP address within 1 day above which we want to deem those logins suspicious.\nlet signin_threshold = 5; \n//Make a list of IPs with AAD signin failures above our threshold.\nlet aadFunc = (tableName:string){\nlet suspicious_signins = \n    table(tableName)\n    //Looking for logon failure results\n    | where ResultType !in (\"0\", \"50125\", \"50140\")\n    //Exclude localhost addresses to reduce the chance of FPs\n    | where IPAddress !in (\"127.0.0.1\", \"::1\")\n    | summarize count() by IPAddress\n    | where count_ >  signin_threshold\n    | summarize make_set(IPAddress);\n    suspicious_signins\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nlet suspicious_signins = \nunion isfuzzy=true aadSignin, aadNonInt\n| summarize make_set(set_IPAddress);\n//See if any of those IPs have sucessfully logged into PA VPNs during the same timeperiod\nCommonSecurityLog\n    //Select only PA VPN sucessful logons\n    | where DeviceVendor == \"Palo Alto Networks\" and DeviceEventClassID == \"globalprotect\"\n    | where Message has \"GlobalProtect gateway user authentication succeeded\"\n    //Parse out the logon source IP from the Message field to match on\n    | extend SourceIP = extract(\"Login from: ([^,]+)\", 1, Message) \n    | where SourceIP in (suspicious_signins)\n    | extend Reason = \"Multiple failed AAD logins from SourceIP\"\n    //Parse out other useful information from Message field\n    | extend User = extract('User name: ([^,]+)', 1, Message) \n    | extend ClientOS = extract('Client OS version: ([^,\\\"]+)', 1, Message)\n    | extend Location = extract('Source region: ([^,]{2})',1, Message)\n    | project TimeGenerated, Reason, SourceIP, User, ClientOS, Location, Message, DeviceName, ReceiptTime, DeviceVendor, DeviceEventClassID, Computer, FileName\n    | extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detect activities when a pull request was merged. This query runs every day and its severity is Medium.\n Topic: GitHub"}, {"role": "assistant", "content": "GitHubAuditData\n| where Action == \"pull_request.merge\"\n| project Actor, Action\n| extend AccountName = tostring(split(Actor, \"@\")[0]), AccountUPNSuffix = tostring(split(Actor, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for resources which appeared in different alerts.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where TimeGenerated > ago(24h)\n| where Reason =~ 'NEW_ALERT'\n| summarize count() by ResourceName\n| order by count_ desc\n| extend AccountCustomEntity = ResourceName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows requests to URL where UrlCategory is not set.\n Topic: CiscoUmbrella"}, {"role": "assistant", "content": "Cisco_Umbrella\n| where TimeGenerated > ago(24h)\n| where DvcAction =~ 'Allowed'\n| where UrlCategory == ''\n| project UrlOriginal, Identities\n| extend URLCustomEntity = UrlOriginal\n| extend AccountCustomEntity = Identities"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies audit log data deletion activity in Dataverse. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let query_frequency = 1h;\nDataverseActivity\n| where TimeGenerated >= ago(query_frequency)\n| where Message =~ 'DeleteRecordChangeHistory' or Message =~ 'DeleteAuditData'\n| extend CloudAppId = int(32780)\n| extend AccountName = tostring(split(UserId, \"@\")[0])\n| extend UPNSuffix = tostring(split(UserId, \"@\")[1])\n| project\n    TimeGenerated,\n    UserId,\n    ClientIp,\n    UserAgent,\n    Message,\n    EntityName,\n    InstanceUrl,\n    AccountName,\n    UPNSuffix,\n    CloudAppId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies an unusual pattern of events whereby a new role is created followed by the creator adding members to the role and subsequently removing the member or deleting the role after a short time period. Topic: Microsoft Business Applications"}, {"role": "assistant", "content": "let role_create_watch_period = 2d;\nlet query_frequency = 1h;\nlet role_create_add_events= DataverseActivity\n    | where Message == \"Create\" and EntityName == \"role\"\n    | mv-expand Role = Fields\n    | extend RoleName = Role.Value\n    | where Role.Name == \"name\"\n    | mv-expand Role = Fields\n    | extend RoleCreateTime = TimeGenerated, RoleId = tostring(Role.Value)\n    | where Role.Name == \"roleid\"\n    | join kind=inner (\n        DataverseActivity\n        | where Message == \"Associate\" and EntityName == \"systemuser\"\n        | mv-expand Role = Fields\n        | where Role.Name == \"role\"\n        | extend RoleMemberAddedTime = TimeGenerated, MemberAddedRoleId = tostring(Role.Value))\n        on $left.RoleId == $right.MemberAddedRoleId, InstanceUrl, UserId\n    | where RoleMemberAddedTime between (RoleCreateTime .. (RoleCreateTime + role_create_watch_period));\nlet remove_role_member_events = DataverseActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where Message == \"Disassociate\" and EntityName == \"systemuser\"\n    | mv-expand Role = Fields\n    | where Role.Name == \"role\"\n    | extend ActionTime = TimeGenerated, MemberRemovedRoleId = tostring(Role.Value);\nlet role_delete_events = DataverseActivity\n    | where TimeGenerated >= ago(query_frequency)\n    | where Message == \"Delete\" and EntityName == \"role\"\n    | extend DeletedRoleID = EntityId, Action = \"Role deleted within defined time window\"\n    | project Action, ActionTime = TimeGenerated, UserId, ClientIp, DeletedRoleID, InstanceUrl;\nlet role_member_removals = role_create_add_events\n    | join kind=inner (remove_role_member_events) on $left.RoleId == $right.MemberRemovedRoleId\n    | where ActionTime between (RoleCreateTime .. (RoleCreateTime + role_create_watch_period))\n    | extend Action = \"Role membership removed within defined time window\";\nlet role_deletions = role_create_add_events\n    | join kind=inner (role_delete_events) on $left.RoleId == $right.DeletedRoleID\n    | where ActionTime between (RoleCreateTime .. (RoleCreateTime + role_create_watch_period));\nunion isfuzzy=true role_member_removals, role_deletions\n| extend\n    CloudAppId = int(32780),\n    AccountName = tostring(split(UserId, '@')[0]),\n    UPNSuffix = tostring(split(UserId, '@')[1])\n| project\n    UserId,\n    InstanceUrl,\n    ClientIp,\n    Action,\n    RoleCreateTime,\n    RoleName,\n    ActionTime,\n    CloudAppId,\n    AccountName,\n    UPNSuffix\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unexpected OS update.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports\n| where EventMessage has \"os_updated\"\n| where isnotempty(NeqValue) and isnotempty(OldValue)\n| extend NewVersion1 = extract(@'([0-9]+)\\.([0-9]+)\\.?([0-9])?', 1, NeqValue)\n| extend NewVersion2 = extract(@'([0-9]+)\\.([0-9]+)\\.?([0-9])?', 2, NeqValue)\n| extend NewVersion3 = extract(@'([0-9]+)\\.([0-9]+)\\.?([0-9])?', 3, NeqValue)\n| extend OldVersion1 = extract(@'([0-9]+)\\.([0-9]+)\\.?([0-9])?', 1, OldValue)\n| extend OldVersion2 = extract(@'([0-9]+)\\.([0-9]+)\\.?([0-9])?', 2, OldValue)\n| extend OldVersion3 = extract(@'([0-9]+)\\.([0-9]+)\\.?([0-9])?', 3, OldValue)\n| extend NewVersion3Comparision = iff(isempty(NewVersion3), 0, tolong(NewVersion3))\n| extend OldVersion3Comparision = iff(isempty(OldVersion3), 0, tolong(OldVersion3))\n| extend Comparision1 = iff(tolong(NewVersion3Comparision) > tolong(OldVersion3Comparision), 'Expected version', 'Unexpected version')\n| extend Comparision2 = iff(tolong(NewVersion2) > tolong(OldVersion2), 'Expected version', Comparision1)\n| extend VersionCheck = iff(tolong(NewVersion1) > tolong(OldVersion1), 'Expected version', Comparision2)\n| project-away NewVersion1, NewVersion2, NewVersion3, NewVersion3Comparision, OldVersion1, OldVersion2, OldVersion3, OldVersion3Comparision, Comparision1, Comparision2\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for failed attempts to log into the Okta console from more than 15 various users within a 5 minute timeframe from the same source. This is a potential indication of a password spray attack.\n Topic: Okta Single Sign-On"}, {"role": "assistant", "content": "let FailureThreshold = 15;\nlet FailedEvents = OktaSSO\n| where eventType_s =~ \"user.session.start\"and outcome_reason_s in (\"VERIFICATION_ERROR\",\"INVALID_CREDENTIALS\")\n| summarize dcount(actor_alternateId_s) by client_ipAddress_s, bin(TimeGenerated, 5m)\n| where dcount_actor_alternateId_s > FailureThreshold\n| project client_ipAddress_s, TimeGenerated;\nOktaSSO\n| where eventType_s =~ \"user.session.start\"and outcome_reason_s in (\"VERIFICATION_ERROR\",\"INVALID_CREDENTIALS\")\n| summarize Users = make_set(actor_alternateId_s) by client_ipAddress_s, City = column_ifexists('client_geographicalContext_city_s', \"\"), Country = column_ifexists('client_geographicalContext_country_s', \"\"), bin(TimeGenerated, 5m)\n| join kind=inner (FailedEvents) on client_ipAddress_s, TimeGenerated\n| sort by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system. The query below generates an output of all the users performing user creation where one or more features of the activity deviate from the user, his peers, or the tenant profile.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "BehaviorAnalytics\n| where ActionType =~ \"Add user\"\n| where ActivityInsights has \"True\"\n| join kind=inner(\nAuditLogs\n) on $left.SourceRecordId == $right._ItemId\n| mv-expand TargetResources\n| extend Target =  iff(tostring(TargetResources.userPrincipalName) has \"#EXT#\",replace(\"_\",\"@\",tostring(split(TargetResources.userPrincipalName, \"#\")[0])),TargetResources.userPrincipalName),tostring(TargetResources.userPrincipalName)\n| extend DisplayName = tostring(UsersInsights.AccountDisplayName),\nUserPrincipalName = iff(UserPrincipalName has \"#EXT#\",replace(\"_\",\"@\",tostring(split(UserPrincipalName, \"#\")[0])),UserPrincipalName),\nUserName = iff(UserName has \"#EXT#\",replace(\"_\",\"@\",tostring(split(UserPrincipalName, \"#\")[0])),UserName)\n| sort by TimeGenerated desc\t\n| project TimeGenerated, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"TargetUser\"]=Target, ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, ResourceId\n| extend Name=split(UserPrincipalName, \"@\")[0], UPNSuffix=split(UserPrincipalName, \"@\")[1]\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SourceIPAddress\n| extend AzureResource_0_ResourceId = ResourceId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies new scheduled task entry creations. Malware often creates scheduled tasks to execute malicious code and maintain persistence on a system.\n Topic: Malware Protection Essentials"}, {"role": "assistant", "content": "_ASim_FileEvent\n| where EventType in ('FileCreated' , 'FileModified')\n| where FilePath has '\\\\Windows\\\\System32\\\\Tasks'\n| project TimeGenerated, DvcHostname, DvcDomain, User, ActingProcessId, ActingProcessName, CommandLine, FileName, FilePath, Hash, HashType\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated) by DvcHostname, DvcDomain, User, ActingProcessId, ActingProcessName, CommandLine, FileName, FilePath, Hash, HashType\n| extend Username = iff(User contains '@', tostring(split(User, '@')[0]), User)\n| extend UPNSuffix = iff(User contains '@', tostring(split(User, '@')[1]), '')\n| extend Username = iff(User contains '\\\\', tostring(split(User, '\\\\')[1]), Username)\n| extend NTDomain = iff(User contains '\\\\', tostring(split(User, '\\\\')[0]), '')\n| extend Host_0_HostName = DvcHostname\n| extend Host_0_DnsDomain = DvcDomain\n| extend Host_0_NTDomain = NTDomain\n| extend Account_0_Name = Username\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Account_0_NTDomain = NTDomain\n| extend File_0_Name = FileName\n| extend File_0_Directory = FilePath\n| extend FileHash_0_Algorithm = HashType\n| extend FileHash_0_Value = Hash\n| extend Process_0_ProcessId = ActingProcessId\n| extend Process_0_CommandLine = CommandLine\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects batches of distinct SQL queries that execute (or attempt to) commands that could indicate potential security issues - such as attempts to manipulate firewall rules (e.g. for allowing malicious access to the database).\n Topic: Azure SQL Database solution for sentinel"}, {"role": "assistant", "content": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet hotwords = pack_array('sp_set_firewall_rule', 'sp_set_database_firewall_rule', 'sp_delete_database_firewall_rule', 'sp_delete_firewall_rule', 'sys.firewall_rules', 'sys.database_firewall_rules'); // List of monitored hot words.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | extend hasHotword = iff(Statement has_any (hotwords), 1, 0)\n    | summarize countEvents = count(), countStatements = dcount(Statement)\n        , countStatementsWithHotwords = dcountif(Statement, hasHotword == 1)\n        , countFailedStatementsWithHotwords = dcountif(Statement, (hasHotword == 1) and (Error > 0))\n        , countSuccessfulStatementsWithHotwords = dcountif(Statement, ((hasHotword == 1)) and (Error == 0))\n        , anyMonitoredStatement = anyif(Statement, (hasHotword == 1))\n        , anySuccessfulMonitoredStatement = anyif(Statement, (hasHotword == 1) and (Error == 0))\n        , anyInfo = anyif(AdditionalInfo, hasHotword == 1)\n        , hotWord = anyif(extract(strcat_array(hotwords, '|'), 0, tolower(Statement)), hasHotword == 1)\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId    \n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithHotwords = dcountif(timeSlice, countStatementsWithHotwords >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsHotwordAnomalyOnStatement = iff(((countStatementsWithHotwords >= monitoredStatementsThreshold) and (countSlicesWithHotwords <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithHotwords/monitoredStatementsThreshold, 0)\n| where IsHotwordAnomalyOnStatement == 'true'\n| sort by countSuccessfulStatementsWithHotwords desc,  anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])    \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects a scheduled task, created/updated remotely, using the Schtasks process.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID == 4688 and NewProcessName == \"C:\\\\Windows\\\\System32\\\\schtasks.exe\" and CommandLine has \" /s \"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, SubjectUserName, CommandLine\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Header: Content Security Policy Missing\n Topic: CTM360"}, {"role": "assistant", "content": "HackerViewLog_Azure_1_CL | where severity_s == \"high\" | where progress_status_s == \"New\" | where status_s != \"inactive\"  | where issue_name_s == \"Header: Content Security Policy Missing\""}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects terminated suspicious crypto mining payloads/processes. Attackers often halt other mining processes to gain more resources on compromised systems for their payload.\n Topic: Syslog"}, {"role": "assistant", "content": "Syslog\n| where Facility == 'user'\n| where SyslogMessage has \"AUOMS_EXECVE\"\n| parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n| where EventType =~ \"AUOMS_EXECVE\"\n| parse EventData with * \"syscall=\" syscall \" syscall_r=\" * \" success=\" success \" exit=\" exit \" a0\" * \" ppid=\" ppid \" pid=\" pid \" audit_user=\" audit_user \" auid=\" auid \" user=\" user \" uid=\" uid \" group=\" group \" gid=\" gid \"effective_user=\" effective_user \" euid=\" euid \" set_user=\" set_user \" suid=\" suid \" filesystem_user=\" filesystem_user \" fsuid=\" fsuid \" effective_group=\" effective_group \" egid=\" egid \" set_group=\" set_group \" sgid=\" sgid \" filesystem_group=\" filesystem_group \" fsgid=\" fsgid \" tty=\" tty \" ses=\" ses \" comm=\\\"\" comm \"\\\" exe=\\\"\" exe \"\\\"\" * \"cwd=\\\"\" cwd \"\\\"\" * \"name=\\\"\" name \"\\\"\" * \"cmdline=\\\"\" cmdline \"\\\" containerid=\" containerid\n| where exe has_any (\"pkill\",\"kill\",\"killall\")\n| where cmdline has_any (\"minerd\",\"minergate\",\"kworkerds\",\"xmr\",\"watchbug\",\"cryptonight\",\"stratum\",\"miner\",\"watchbog\")\n| project TimeGenerated, Computer, audit_user, user, cmdline\n| extend AccountCustomEntity = user, HostCustomEntity = Computer, timestamp = TimeGenerated\n| sort by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects using Apache 2.4.49 flaw CVE-2021-41773\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where HttpRequestMethod =~ \"GET\"\n| where UrlOriginal has_all (\"/cgi-bin/\", \"/%2e%2e/\")\n| where HttpStatusCode == \"200\" \n| extend UrlCustomEntity = UrlOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection looks for the very specific value of \"Attribute\" in the \"ShellFolder\" CLSID of a COM object. This value (0xf090013d) seems to only link back to this specific persistence method. \nThe blog post linked here (https://www.ired.team/offensive-security/code-execution/forcing-iexplore.exe-to-load-a-malicious-dll-via-com-abuse) provides more background on the meaning of this value. \n Topic: FalconFriday"}, {"role": "assistant", "content": "DeviceRegistryEvents\n| where RegistryKey has \"ShellFolder\"  and ActionType =~ \"RegistryValueSet\" and RegistryValueName =~ \"Attributes\" \n// toint automatically converts base10 and base16 strings to int toint(\"0xFF\") == toint(\"255\") == int(0xFF) ==  int(255).\n// We are using >= to make sure that if someone adds an additional flag to this field, it doesn't bypass this hunt.\n// Removing any flag will bypass this hunt, but more research is needed to understand which of the flag values are relevant.\n| where toint(RegistryValueData) >= int(0xf090013d) \n//UPDATE: Flag details are here: https://medium.com/falconforce/introducing-falcon-friday-1f972d65ce1b?source=friends_link&sk=e48d9cb974e216cc4b9b61945a3b177d\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "breakdown of scripts running in the environment\n Topic: Windows Security Events"}, {"role": "assistant", "content": "let ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| project EventTime=TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName, AccountDomain=SubjectDomainName,\nFileName=tostring(split(NewProcessName, '\\\\')[-1]),  ProcessCommandLine = CommandLine, \nInitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\";\nprocessEvents;\n};\n// Daily summary of cscript activity - extracting script name and parameters from commandline:\nProcessCreationEvents \n| where FileName =~ \"cscript.exe\"\n// remove commandline switches\n| project EventTime, ComputerName, AccountName, removeSwitches = replace(@\"/+[a-zA-Z0-9:]+\", \"\", ProcessCommandLine)\n// remove the leading cscript.exe process name \n| project EventTime, ComputerName, AccountName, CommandLine = trim(@\"[a-zA-Z0-9\\\\:\"\"]*cscript(.exe)?(\"\")?(\\s)+\", removeSwitches)\n// extract the script name:\n| project EventTime, ComputerName, AccountName, \n// handle case where script name is enclosed in \" characters or is not enclosed in quotes \nScriptName= iff(CommandLine startswith @\"\"\"\", \nextract(@\"([:\\\\a-zA-Z_\\-\\s0-9\\.()]+)(\"\"?)\", 0, CommandLine), \nextract(@\"([:\\\\a-zA-Z_\\-0-9\\.()]+)(\"\"?)\", 0, CommandLine)), CommandLine \n| project EventTime, ComputerName, AccountName, ScriptName=trim(@\"\"\"\", ScriptName) , ScriptNameLength=strlen(ScriptName), CommandLine \n// extract remainder of commandline as script parameters: \n| project EventTime, ComputerName, AccountName, ScriptName, ScriptParams = iff(ScriptNameLength < strlen(CommandLine), substring(CommandLine, ScriptNameLength +1), \"\")\n| summarize min(EventTime), count() by ComputerName, AccountName, ScriptName, ScriptParams\n| order by count_ asc nulls last\n| extend HostName = tostring(split(ComputerName, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(ComputerName, '.'), 1, -1), '.'))\n| extend Account_0_Name = AccountName\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for failed logins.\n Topic: Snowflake"}, {"role": "assistant", "content": "Snowflake\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'LOGIN'\n| where IS_SUCCESS_s =~ 'No'\n| summarize count() by TargetUsername\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for file hashes and AV signatures associated with Prestige ransomware payload.\n Topic: Detections"}, {"role": "assistant", "content": "let sha256Hashes = dynamic([\"5dd1ca0d471dee41eb3ea0b6ea117810f228354fc3b7b47400a812573d40d91d\", \"5fc44c7342b84f50f24758e39c8848b2f0991e8817ef5465844f5f2ff6085a57\", \"6cff0bbd62efe99f381e5cc0c4182b0fb7a9a34e4be9ce68ee6b0d0ea3eee39c\"]);\nlet signames = dynamic([\"Ransom:Win32/Prestige\"]);\n(union isfuzzy=true\n(CommonSecurityLog\n| where FileHash in (sha256Hashes)\n| project TimeGenerated, Message, SourceUserID, FileHash, Type\n| extend timestamp = TimeGenerated, Algorithm = \"SHA256\", AccountNTName = SourceUserID\n),\n(imFileEvent\n| where TargetFileSHA256 has_any (sha256Hashes)\n| extend AccountNT = ActorUsername, Computer = DvcHostname, IPAddress = SrcIpAddr, CommandLine = ActingProcessCommandLine, FileHash = TargetFileSHA256\n| project Type, TimeGenerated, Computer, AccountNT, IPAddress, CommandLine, FileHash, Algorithm = \"SHA256\"\n),\n(Event\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend ProcessId = tolong(EventDetail.[3].[\"#text\"]), Image = tostring(EventDetail.[4].[\"#text\"]), CommandLine = tostring(EventDetail.[10].[\"#text\"]), Hashes = tostring(EventDetail.[17].[\"#text\"])\n| extend Hashes = extract_all(@\"(?P<key>\\w+)=(?P<value>[a-zA-Z0-9]+)\", dynamic([\"key\",\"value\"]), Hashes)\n| extend Hashes = column_ifexists(\"Hashes\", dynamic([\"\", \"\"])), CommandLine = column_ifexists(\"CommandLine\", \"\")\n| mv-expand Hashes\n| where Hashes[0] =~ \"SHA256\" and Hashes[1] has_any (sha256Hashes)  \n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, ProcessId, Hashes, CommandLine, Image\n| extend Type = strcat(Type, \": \", Source)\n| extend AccountNT = UserName, InitiatingProcessId = ProcessId\n| extend Process = tostring(split(Image, '\\\\', -1)[-1]), Algorithm = \"SHA256\", FileHash = tostring(Hashes[1]) \n),\n(DeviceEvents\n| where InitiatingProcessSHA256 has_any (sha256Hashes) or SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend AccountNT = InitiatingProcessAccountName, Computer = DeviceName\n| extend Algorithm = \"SHA256\", FileHash = tostring(InitiatingProcessSHA256), CommandLine = InitiatingProcessCommandLine, Image = InitiatingProcessFolderPath\n),\n(DeviceFileEvents\n| where SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend AccountNT = InitiatingProcessAccountName, Computer = DeviceName\n| extend Algorithm = \"SHA256\", FileHash = tostring(InitiatingProcessSHA256), CommandLine = InitiatingProcessCommandLine, Image = InitiatingProcessFolderPath\n),\n(DeviceImageLoadEvents\n| where SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend AccountNT = InitiatingProcessAccountName, Computer = DeviceName\n| extend Algorithm = \"SHA256\", FileHash = tostring(InitiatingProcessSHA256), CommandLine = InitiatingProcessCommandLine, Image = InitiatingProcessFolderPath\n),\n(SecurityAlert\n| where ProductName == \"Microsoft Defender Advanced Threat Protection\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| where isnotempty(ThreatName)\n| where ThreatName has_any (signames)\n| extend Computer = tostring(parse_json(Entities)[0].HostName)\n)\n)\n| extend AccountNTName = tostring(split(AccountNT, \"\\\\\")[0]), AccountNTDomain = tostring(split(AccountNT, \"\\\\\")[1])\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects spyware with failed response.\n Topic: Trend Micro Apex One"}, {"role": "assistant", "content": "TMApexOneEvent\n| where EventMessage has \"Spyware Detected\"\n| where ActionResult has_any (\"No action\", \"Unable to\")\n| extend IPCustomEntity = SrcIpAddr, AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches top network rules triggered.\n Topic: Cloudflare"}, {"role": "assistant", "content": "Cloudflare\n| where TimeGenerated > ago(24h)\n| where isnotempty(NetworkRuleName)\n| summarize count() by NetworkRuleName, EdgeRequestHost\n| order by count_\n| extend CloudAppCustomEntity = EdgeRequestHost\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows Rare application layer protocols\n Topic: PaloAltoCDL"}, {"role": "assistant", "content": "PaloAltoCDLEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(NetworkApplicationProtocol) \n| summarize ApplicationLayerProtocol = count() by NetworkApplicationProtocol\n| top 10 by ApplicationLayerProtocol asc\n| extend UrlCustomEntity = NetworkApplicationProtocol\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects password reset requests from unexpected source IP address.\n Topic: PingFederate"}, {"role": "assistant", "content": "let known_src = \nPingFederateEvent\n| where TimeGenerated between (ago(14d) .. (1d))\n| where isnotempty(SrcIpAddr)\n| summarize makeset(SrcIpAddr);\nPingFederateEvent\n| where EventType =~ 'PWD_RESET_REQUEST'\n| where isnotempty(SrcIpAddr)\n| where SrcIpAddr !in (known_src)\n| extend AccountCustomEntity = DstUserName\n| extend IpCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows rare user agents\n Topic: ApacheHTTPServer"}, {"role": "assistant", "content": "ApacheHTTPServer\n| where TimeGenerated > ago(24h)\n| where isnotempty(HttpUserAgentOriginal)\n| summarize UAs = count() by (tostring(HttpUserAgentOriginal))\n| top 20 by UAs asc\n| extend UrlCustomEntity = HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for new applications configured.\n Topic: Bitglass"}, {"role": "assistant", "content": "Bitglass\n| where TimeGenerated > ago(24h)\n| where EventType =~ 'admin'\n| where EventResultDetails has_all ('Application', 'added')\n| extend n_app = extract(@'Application\\s(.*?)\\sadded', 1, EventResultDetails)\n| extend AppCustomEntity = n_app\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert creates an incident when Image classification AI Model Evasion low suspicious, high severity vulnerability detected from the AIShield.\n Topic: AIShield AI Security Monitoring"}, {"role": "assistant", "content": "AIShield\n| where Message has 'Image Classification AI Model Evasion Attack Identified'\n| where Severity =~ 'Medium'\n| where SuspiciousLevel =~ 'low suspicious attack'\n| extend NTDomain = tostring(split(Computer, '\\\\')[0]), HostName = tostring(split(Computer, '.')[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches document shared publicy with link.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports \n| where TimeGenerated > ago(24h)\n| where EventType =~ 'acl_change'\n| where Visibility =~ 'people_with_link'\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies GitHub activites where permissions are updated that may be a sign of compromise.\n Topic: GitHub"}, {"role": "assistant", "content": "\nGitHubAuditData\n| where Action == \"org.update_default_repository_permission\"\n| project TimeGenerated, Action, Actor, Country, Repository, PreviousPermission, CurrentPermission\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects unexpected files on file share.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "let f_types = dynamic(['ps1', 'bat', 'scr', 'sh', 'exe', 'js', 'lnk']);\nTrendMicroCAS\n| where EventCategoryType in~ ('sharepoint', 'onedrive', 'dropbox', 'box', 'googledrive')\n| where isnotempty(SrcFileName)\n| extend file_type = extract(@'\\.(\\w+)$', 1, SrcFileName)\n| where file_type in~ (f_types) or SrcFileName !contains @'.'\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rare client applications used.\n Topic: ImpervaCloudWAF"}, {"role": "assistant", "content": "ImpervaWAFCloud\n| where TimeGenerated > ago(24h)\n| where isnotempty(ClientApp)\n| summarize count() by ClientApp\n| top 10 by count_ asc\n| extend AppCustomEntity = ClientApp\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects requests from IP with bad reputation index.\n Topic: Cloudflare"}, {"role": "assistant", "content": "let ip_reputation = dynamic(['unknown', 'badHost', 'greylist', 'securityScanner', 'scan', 'tor']);\nCloudflare\n| where ClientIPClass in~ (ip_reputation)\n| extend IPCustomEntity = SrcIpAddr\n| extend UrlCustomEntity = ClientRequestURI\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This analytic rule detects any registry value creation or modification of print processor registry Driver key. This will load the executable at startup with print spooler service. This could be an indication of a persistence attempt by an adversary.\n Topic: Malware Protection Essentials"}, {"role": "assistant", "content": "// Print Processor Registry Key RegEx\nlet printProcessorRegistryRegEx = @'HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\[A-Za-z0-9]*ControlSet[A-Za-z0-9]*\\\\Control\\\\Print\\\\Environments\\\\Windows\\s[A-Za-z0-9]+\\\\Print Processors\\\\[A-Za-z0-9]+\\\\Driver';\n_ASim_RegistryEvent\n| where EventType in ('RegistryValueSet', 'RegistryKeyCreated')\n| where RegistryKey matches regex printProcessorRegistryRegEx\n| project\n    TimeGenerated,\n    DvcHostname,\n    ActorUsername,\n    ActorUsernameType,\n    ActingProcessId,\n    ActingProcessName,\n    ActingProcessCommandLine,\n    RegistryKey,\n    RegistryValue,\n    RegistryValueType,\n    RegistryValueData\n| extend HostName = tostring(split(DvcHostname, '.')[0])\n| extend DnsDomain = tostring(strcat_array(array_slice(split(DvcHostname, '.'), 1, -1), '.'))\n| extend Username = iff(tostring(ActorUsernameType) == 'Windows', tostring(split(ActorUsername, '\\\\')[1]), ActorUsername)\n| extend NTDomain = iff(tostring(ActorUsernameType) == 'Windows', tostring(split(ActorUsername, '\\\\')[0]), ActorUsername)\n| extend Username = iff(tostring(ActorUsernameType) == 'UPN', tostring(split(ActorUsername, '@')[0]), Username)\n| extend UPNSuffix = iff(tostring(ActorUsernameType) == 'UPN', tostring(split(ActorUsername, '@')[1]), '')\n| extend RegHive = tostring(split(RegistryKey, '\\\\')[0]), RegKey = tostring(strcat_array(array_slice(split(RegistryKey, '\\\\'), 1, -1), '\\\\')) \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "42Crunch API protection against password cracking\n Topic: 42Crunch API Protection"}, {"role": "assistant", "content": "let loginRec = apifirewall_log_1_CL\n| where TimeGenerated >= ago(5m) \n| project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Request_Header_s, Response_Header_s, Errors_s, Type, UUID_g\n| where Instance_Name_s == \"Instance_2\" and URI_Path_s has \"/api/login?user=\" and Status_d == 403;\nlet recCount = iff((toscalar(loginRec | count) > 10), 1, 0);\nloginRec | take recCount\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Calculate the number of SrcBytes (Sent bytes) for each unique combination of SrcIpAddress and DstIpAddress within a 24-hour timeframe. The presence of a high count of repetitive identical SrcBytes could potentially indicate beaconing activity.\n Topic: Web Session Essentials"}, {"role": "assistant", "content": "let lookback = 1d;\nlet TotalEventsThreshold = 25; // Minimum events expected in 1 day. Assuming atleast 25 events.\n_Im_WebSession(starttime=ago(lookback), eventresult='Success')\n| where isnotempty(SrcIpAddr) and isnotempty(DstIpAddr) and isnotempty(SrcBytes)\n| summarize\n    EventCount = count(),\n    make_set(TimeGenerated, 10000),\n    EventStartTime=min(TimeGenerated),\n    EventEndTime=max(TimeGenerated)\n    by SrcIpAddr, DstIpAddr, DstPortNumber, SrcBytes, SrcUsername, SrcHostname // Same SrcBytes between SrcIPAddress and DstIpAddress is a potential sign of beaconing activity.\n| where EventCount > TotalEventsThreshold\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\")\n| sort by EventCount desc // Higher the count, more is the possibility of beaconing activity.\n// Analyze set_TimeGenerated to know if request being sent at specific intervals.\n| extend IP_0_Address = SrcIpAddr\n| extend IP_1_Address = DstIpAddr\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend Host_0_HostName = SrcHostname\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query monitors STS refresh token changes by Service Principals/Applications excluding DirectorySync. It could be due to admins adjusting tokens or for improved login experience. Includes an allowlist. Analyze for unusual operations.\n Topic: Cloud Identity Threat Protection Essentials"}, {"role": "assistant", "content": "// Include your additions to the allow list below as needed\nlet AllowedUserList = dynamic([\"Microsoft Cloud App Security\",\"ADConnectSyncAccount1\",\"SyncAccount2\"]);\nAuditLogs\n| where OperationName has 'StsRefreshTokenValidFrom'\n| where TargetResources[0].modifiedProperties != '[]'\n| where TargetResources[0].modifiedProperties !has 'DirectorySync'\n| extend TargetResourcesModProps = TargetResources[0].modifiedProperties\n| mv-expand TargetResourcesModProps\n| where tostring(TargetResourcesModProps.displayName) =~ 'StsRefreshTokensValidFrom'\n| extend InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| where InitiatingUserOrApp !in~ (AllowedUserList)\n| extend targetUserOrApp = TargetResources[0].userPrincipalName\n| extend eventName = tostring(TargetResourcesModProps.displayName)\n| extend oldStsRefreshValidFrom = todatetime(parse_json(tostring(TargetResourcesModProps.oldValue))[0])\n| extend newStsRefreshValidFrom = todatetime(parse_json(tostring(TargetResourcesModProps.newValue))[0])\n| extend tokenMinutesAdded = datetime_diff('minute',newStsRefreshValidFrom,oldStsRefreshValidFrom)\n| extend tokenMinutesRemaining = datetime_diff('minute',TimeGenerated,newStsRefreshValidFrom)\n| project-reorder Result, AADOperationType\n| extend InitiatingIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\n| extend UserName = iff(InitiatingUserOrApp has '@', tostring(split(InitiatingUserOrApp, '@')[0]), '')\n| extend UPNSuffix = iff(InitiatingUserOrApp has '@', tostring(split(InitiatingUserOrApp, '@')[1]), '')\n| extend CloudApplicationName = iff(InitiatingUserOrApp !has '@', tostring(InitiatingUserOrApp), '')\n| extend Account_0_Name = UserName\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = InitiatingIpAddress\n| extend CloudApplication_0_Name = CloudApplicationName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for Virtual Analyzer threats.\n Topic: Trend Micro Cloud App Security"}, {"role": "assistant", "content": "TrendMicroCAS\n| where TimeGenerated > ago(24h)\n| where EventType has 'virtual_analyzer'\n| where isnotempty(VirusName)\n| project DetectionTime, DstUserName, SrcFileName, RansomwareName\n| extend AccountCustomEntity = DstUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies CommvaultSecurityIQ Alerts.\n Topic: Commvault Security IQ"}, {"role": "assistant", "content": "CommvaultSecurityIQ_CL\n| take 1000\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Search Guest authentication failed events.\n Topic: Cisco ISE"}, {"role": "assistant", "content": "CiscoISEEvent\n| where TimeGenerated > ago(24h)\n| where EventId in ('86009', '86010', '86011', '86012', '86013', '86014', '86015', '86016', '86017', '86018', '86019', '86020')\n| project TimeGenerated, DstUserName, SrcIpAddr, DstIpAddr"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection looks for the steps required to conduct a UAC bypass using Fodhelper.exe. By default this detection looks for the setting of the required registry keys and the invoking of the process within 1 hour - this can be tweaked as required.\n Topic: Detections"}, {"role": "assistant", "content": "imRegistry\n  | where EventType in (\"RegistryValueSet\", \"RegistryKeyCreated\")\n  | where RegistryKey has \"Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command\"\n  | extend TimeKey = bin(TimeGenerated, 1h)\n  | join (imProcess\n  | where Process endswith \"fodhelper.exe\"\n  | where ParentProcessName endswith \"cmd.exe\" or ParentProcessName endswith \"powershell.exe\" or ParentProcessName endswith \"powershell_ise.exe\"\n  | extend TimeKey = bin(TimeGenerated, 1h)) on TimeKey, Dvc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Rule helps to detect a rare user-agents indicating web browsing activity by an unusual process other than a web browser.\n Topic: Detections"}, {"role": "assistant", "content": "let lookBack = 14d;\nlet timeframe = 1d;\nlet user_agents_list = Cisco_Umbrella\n| where EventType == \"proxylogs\"\n| where TimeGenerated > ago(lookBack) and TimeGenerated < ago(timeframe)\n| summarize count() by HttpUserAgentOriginal\n| summarize make_list(HttpUserAgentOriginal);\nCisco_Umbrella\n| where EventType == \"proxylogs\"\n| where TimeGenerated > ago(timeframe)\n| where HttpUserAgentOriginal !in (user_agents_list)\n| extend Message = \"Rare User Agent\"\n| project Message, SrcIpAddr, DstIpAddr, UrlOriginal, TimeGenerated, HttpUserAgentOriginal\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects Collection of known malware commands and control servers.\n Topic: Claroty"}, {"role": "assistant", "content": "ClarotyEvent\n| where EventOriginalType has 'Treat' or EventType has 'Treat'\n| project TimeGenerated, DstIpAddr\n| extend IPCustomEntity = DstIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This alert leverages Defender for IoT to detect an unauthorized DHCP configuration indicating a possible unauthorized device configuration.\n Topic: IoTOTThreatMonitoringwithDefenderforIoT"}, {"role": "assistant", "content": "SecurityAlert\n| where ProviderName == \"IoTSecurity\"\n| where AlertName == \"Device Failed to Receive a Dynamic IP Address\"\n| extend ExtendedProperties = parse_json(ExtendedProperties)\n| where tostring(ExtendedProperties.isNew) == \"True\"\n| extend DeviceId = tostring(ExtendedProperties.DeviceId), \n         SourceDeviceAddress = tostring(ExtendedProperties.SourceDeviceAddress), \n         DestDeviceAddress = tostring(ExtendedProperties.DestinationDeviceAddress), \n         RemediationSteps = tostring(parse_json(RemediationSteps)[0]), \n         Protocol = tostring(ExtendedProperties.Protocol), \n         AlertManagementUri = tostring(ExtendedProperties.AlertManagementUri)\n| project\n  TimeGenerated,\n  DeviceId,\n  ProductName,\n  ProductComponentName,\n  AlertSeverity,\n  AlertName,\n  Description,\n  Protocol,\n  SourceDeviceAddress,\n  DestDeviceAddress,\n  RemediationSteps,\n  Tactics,\n  Entities,\n  VendorOriginalId,\n  AlertLink,\n  AlertManagementUri,\n  Techniques\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies callouts to Discord CDN addresses for risky file extensions. This detection will trigger when a callout for a risky file is made to a discord server that has only been seen once in your environment. Unique discord servers are identified using the server ID that is included in the request URL (DiscordServerId in query). Discord CDN has been used in multiple campaigns to download additional payloads\n Topic: Zscaler Internet Access"}, {"role": "assistant", "content": "let connectionThreshold = 1;\nlet riskyExtensions = dynamic([\".bin\",\".exe\",\".dll\",\".bin\",\".msi\"]);\nCommonSecurityLog\n| where DeviceVendor =~ \"ZScaler\"\n| where RequestURL has_any(\"media.discordapp.net\", \"cdn.discordapp.com\")\n| where RequestURL has \"attachments\"\n| where DeviceAction !~ \"blocked\"\n| extend DiscordServerId = extract(@\"\\/attachments\\/([0-9]+)\\/\", 1, RequestURL)\n| summarize dcount(RequestURL), make_set(SourceUserName), make_set(SourceIP), make_set(RequestURL), min(TimeGenerated), max(TimeGenerated), make_set(DeviceAction) by DiscordServerId, DeviceProduct\n| where dcount_RequestURL <= connectionThreshold\n| mv-expand set_SourceUserName to typeof(string), set_RequestURL to typeof(string), set_DeviceAction to typeof(string), set_SourceIP to typeof(string)\n| summarize by DiscordServerId, DeviceProduct, dcount_RequestURL, set_SourceUserName, min_TimeGenerated, max_TimeGenerated, set_DeviceAction, set_SourceIP, set_RequestURL\n| project StartTime=min_TimeGenerated, EndTime=max_TimeGenerated, DeviceActionTaken=set_DeviceAction, DeviceProduct, SourceUser=set_SourceUserName, SourceIP=set_SourceIP, RequestURL=set_RequestURL\n| where RequestURL has_any (riskyExtensions)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies a match in AzureActivity table from any Email IOC from TI\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$';\nThreatIntelligenceIndicator\n//Filtering the table for Email related IOCs\n| where isnotempty(EmailSenderAddress)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n    AzureActivity | where TimeGenerated >= ago(dt_lookBack) and isnotempty(Caller)\n    | extend Caller = tolower(Caller)\n    | where Caller matches regex emailregex\n    | extend AzureActivity_TimeGenerated = TimeGenerated\n)\non $left.EmailSenderAddress == $right.Caller\n| where AzureActivity_TimeGenerated < ExpirationDateTime\n| summarize AzureActivity_TimeGenerated = arg_max(AzureActivity_TimeGenerated, *) by IndicatorId, Caller\n| project AzureActivity_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, EmailSenderName, EmailRecipient,\nEmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, Caller, Level, CallerIpAddress, CategoryValue, OperationNameValue, ActivityStatusValue,\nResourceGroup, SubscriptionId\n| extend Name = tostring(split(Caller, '@', 0)[0]), UPNSuffix = tostring(split(Caller, '@', 1)[0])\n| extend timestamp = AzureActivity_TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches document shared externally.\n Topic: GoogleWorkspaceReports"}, {"role": "assistant", "content": "GWorkspaceActivityReports \n| where TimeGenerated > ago(24h)\n| where EventType =~ 'acl_change'\n| where Visibility =~ 'shared_externally'\n| extend AccountCustomEntity = ActorEmail\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures related to password issues.\n Topic: TenableAD"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.kql parser into the workspace\n// Retrieve the parser here: https://raw.githubusercontent.com/tenable/Azure-Sentinel/Tenable.ad-connector/Solutions/TenableAD/Parsers/afad_parser.kql\n// Then, create the Kusto Function with alias afad_parser\nlet SeverityTable=datatable(Severity:string,Level:int) [\n\"low\", 1,\n\"medium\", 2,\n\"high\", 3,\n\"critical\", 4\n];\nlet codeNameList = datatable(Codename:string)[\"C-CLEARTEXT-PASSWORD\", \"C-PASSWORD-DONT-EXPIRE\", \"C-USER-REVER-PWDS\", \"C-PASSWORD-POLICY\", \"C-USER-PASSWORD\", \"C-KRBTGT-PASSWORD\", \"C-AAD-SSO-PASSWORD\", \"C-REVER-PWD-GPO\"];\nafad_parser\n| where MessageType == 0 and Codename in~ (codeNameList)\n| lookup kind=leftouter SeverityTable on Severity\n| order by Level\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query detects remote code execution vulnerability in the Log4j component of Apache. Attackers may attempt to launch arbitrary code by passing specific commands to a server, which are then logged and executed by the Log4j component.\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "let log4j_execve=()\n{\n  Syslog\n  | where SyslogMessage has \"AUOMS_EXECVE\"\n  | where SyslogMessage has 'jndi' and SyslogMessage has_any ('ldap', 'dns', 'rmi', 'corba', 'iiop', 'nis', 'nds')\n  | parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n  | where EventType =~ \"AUOMS_EXECVE\"\n  | project TimeGenerated, EventType, Computer, EventData\n  | extend EventData = trim_end('containerid=',EventData)\n  | parse kind=regex EventData with * \"success=\" success \" exit=\" * \"ppid=\" ppid \"pid=\" pid\n  \"audit_user=\" audit_user \"auid=\" * \"user=\" user \" uid=\" uid \" group=\" * \"comm=\\\"\" comm \"\\\" exe=\\\"\" exe\n  \"\\\"\" * \"cwd=\\\"\" cwd \"\\\" name=\\\"\" name \"\\\" (inode|nametype)=\" * \"(proctitle|cmdline)=\" cmdline\n  | extend cmdline = trim_end('redactors=.*',cmdline)\n};\nlog4j_execve\n  | where comm has_any (\"wget\",\"curl\")\n  | where cmdline has_any (\"${jndi:ldap\",\"${jndi:dns\",\"${jndi:rmi\",\"${jndi:corba\",\"${jndi:iiop\",\"${jndi:nis\", \"${jndi:nds\")\n  | project TimeGenerated, Computer, audit_user, user, cmdline\n  | extend Account_0_Name = user\n  | extend Host_0_HostName = Computer\n  | sort by TimeGenerated desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Create Microsoft Sentinel Incident When Ven Goes Into Suspended state\n Topic: IllumioSaaS"}, {"role": "assistant", "content": "Illumio_Auditable_Events_CL\n| union IllumioSyslogAuditEvents  \n| where event_type has 'agent.suspend'\n| extend ipaddress = action.src_ip,\n      hostname = created_by.agent.hostname\n| project-away resource_changes, action, version        \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects a fairly uncommon attack technique using the Windows Distributed Component Object Model (DCOM) to make a remote execution call to another computer system and gain lateral movement throughout the network.\nRef: http://thenegative.zone/incident%20response/2017/02/04/MMC20.Application-Lateral-Movement-Analysis.html\n Topic: Endpoint Threat Protection Essentials"}, {"role": "assistant", "content": "Event\n| where EventLog =~ \"Microsoft-Windows-Sysmon/Operational\" and EventID==1\n| parse EventData with * 'CommandLine\">' CommandLine \"<\" * 'ParentCommandLine\">' ParentCommandLine \"<\" *\n| where ParentCommandLine =~ \"C:\\\\Windows\\\\System32\\\\svchost.exe -k DcomLaunch\" and CommandLine =~ \"C:\\\\Windows\\\\System32\\\\mmc.exe -Embedding\"\n| parse EventData with * 'ProcessGuid\">' ProcessGuid \"<\" * 'Image\">' Image \"<\" * 'Description\">' Description \"<\" * 'CurrentDirectory\">' CurrentDirectory \"<\" * 'User\">' User \"<\" * 'LogonGuid\">' LogonGuid \"<\" * 'ParentProcessGuid\">' ParentProcessGuid \"<\" * 'ParentImage\">' ParentImage \"<\" * 'ParentCommandLine\">' ParentCommandLine \"<\" * 'ParentUser\">' ParentUser \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, User, ParentImage, ParentProcessGuid, ParentCommandLine, ParentUser, Image, ProcessGuid, CommandLine, Description\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects connections which may indicate that device is infected with cryptominer.\n Topic: Ubiquiti UniFi"}, {"role": "assistant", "content": "let susp_dst_ports = dynamic(['14433', '14444', '3333', '3334', '3335', '3336', '4444', '45560', '45700', '5555', '5556', '6666', '7777', '8788', '8888', '8899', '9999', '10034']);\nUbiquitiAuditEvent\n| where ipv4_is_private(SrcIpAddr)\n| where ipv4_is_private(DstIpAddr) == 'False'\n| where DstPortNumber in (susp_dst_ports)  or (DnsQuery contains 'pool' and DnsQuery contains 'xmr')\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches rare network protocols.\n Topic: Digital Guardian Data Loss Prevention"}, {"role": "assistant", "content": "DigitalGuardianDLPEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(NetworkApplicationProtocol)\n| summarize count() by SrcIpAddr, SrcUserName\n| order by count_ asc\n| top 10 by count_\n| extend AccountCustomEntity = SrcUserName, IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies SolarWinds SUNBURST and SUPERNOVA backdoor file hash IOCs in DeviceFileEvents\nReferences:\n- https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html\n- https://gist.github.com/olafhartong/71ffdd4cab4b6acd5cbcd1a0691ff82f\n Topic: Microsoft Defender XDR"}, {"role": "assistant", "content": "let SunburstMD5=dynamic([\"b91ce2fa41029f6955bff20079468448\",\"02af7cec58b9a5da1c542b5a32151ba1\",\"2c4a910a1299cdae2a4e55988a2f102e\",\"846e27a652a5e1bfbd0ddd38a16dc865\",\"4f2eb62fa529c0283b28d05ddd311fae\"]);\nlet SupernovaMD5=\"56ceb6d0011d87b6e4d7023d7ef85676\";\nDeviceFileEvents\n| where MD5 in(SunburstMD5) or MD5 in(SupernovaMD5)\n| extend HashAlgorithm = \"MD5\"\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when email contains suspicious attachment (file type).\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let lbtime = 10m;\nlet disallowed_ext = dynamic(['ps1', 'exe', 'vbs', 'js', 'scr']);\nProofpointPOD\n| where TimeGenerated > ago(lbtime)\n| where EventType == 'message'\n| where NetworkDirection == 'inbound'\n| where FilterDisposition !in ('reject', 'discard')\n| extend attachedExt = todynamic(MsgParts)[0]['detectedExt']\n| where tolower(attachedExt) in (disallowed_ext)\n| project SrcUserUpn, AccountCustomEntity = parse_json(DstUserUpn)[0], attachedExt\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for successful user logins from different countries within 3 hours.\n To use this analytics rule, make sure you have deployed the [ASIM normalization parsers](https://aka.ms/ASimAuthentication)\n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = ago(3h);\nlet threshold = 2;\nimAuthentication\n| where TimeGenerated > timeframe\n| where EventType == 'Logon'\n    and EventResult == 'Success'\n| where isnotempty(SrcGeoCountry)\n| summarize\n    StartTime        = min(TimeGenerated)\n    , EndTime        = max(TimeGenerated)\n    , Vendors        = make_set(EventVendor, 128)\n    , Products       = make_set(EventProduct, 128)\n    , NumOfCountries = dcount(SrcGeoCountry)\n    , Countries      = make_set(SrcGeoCountry, 128)\n    by TargetUserId, TargetUsername, TargetUserType\n| where NumOfCountries >= threshold\n| where TargetUserType !in (\"Application\", \"Service\", \"System\", \"Other\", \"Machine\", \"ServicePrincipal\")\n| extend\n  Name = iif(\n      TargetUsername contains \"@\"\n          , tostring(split(TargetUsername, '@', 0)[0])\n          , TargetUsername\n      ),\n  UPNSuffix = iif(\n      TargetUsername contains \"@\"\n      , tostring(split(TargetUsername, '@', 1)[0])\n      , \"\"\n  )\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects usage of msbuild tool as LOLBin.\n Topic: CyberArkEPM"}, {"role": "assistant", "content": "CyberArkEPM\n| where EventSubType != 'AttackAttempt'\n| where ActingProcessName endswith @'msbuild.exe'\n| where ActingProcessCommandLine has_any ('xml', 'csproj', 'vcxproj', 'vbproj', 'fsproj')\n| extend AccountCustomEntity = ActorUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Encoding malicious software is a technique used to obfuscate files from detection.\nThe first CommandLine component is looking for Python decoding base64.\nThe second CommandLine component is looking for Bash/sh command line base64 decoding.\nThe third one is looking for Ruby decoding base64.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| project TimeGenerated, Computer, AccountName = SubjectUserName, AccountNTDomain = SubjectDomainName, FileName = Process, CommandLine, ParentProcessName, SubjectAccount\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| where CommandLine contains \".decode('base64')\"\n        or CommandLine contains \"base64 --decode\"\n        or CommandLine contains \".decode64(\"\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies external users added to Teams where the users domain is not one previously seen in Teams data.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = totimespan((endtime - starttime) * 7);\n// OfficeActivity Known Organizations\nlet known_orgs_office = (\n    OfficeActivity\n    | where TimeGenerated between(ago(lookback)..starttime)\n    | where OfficeWorkload =~ \"MicrosoftTeams\"\n    | where Operation =~ \"MemberAdded\" or Operation =~ \"TeamsSessionStarted\"\n    | extend UPN = iif(Operation == \"MemberAdded\", tostring(Members[0].UPN), UserId)\n    | extend Organization = tostring(split(split(UPN, \"_\")[1], \"#\")[0])\n    | where isnotempty(Organization)\n    | summarize by Organization\n);\n// OfficeActivity Query for New Organizations\nlet OfficeEvents = OfficeActivity\n    | where TimeGenerated between(starttime..endtime)\n    | where OfficeWorkload =~ \"MicrosoftTeams\"\n    | where Operation =~ \"MemberAdded\"\n    | extend UPN = tostring(parse_json(Members)[0].UPN)\n    | extend Organization = tostring(split(split(UPN, \"_\")[1], \"#\")[0])\n    | where isnotempty(Organization)\n    | where Organization !in (known_orgs_office)\n    | extend AccountName = tostring(split(UPN, \"@\")[0]), AccountUPNSuffix = tostring(split(UPN, \"@\")[1])\n    | extend Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix;\n// EnrichedMicrosoft365AuditLogs Known Organizations\nlet known_orgs_enriched = (\n    EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated between(ago(lookback)..starttime)\n    | where Workload == \"MicrosoftTeams\"\n    | where Operation in (\"MemberAdded\", \"TeamsSessionStarted\")\n    | extend Members = parse_json(tostring(AdditionalProperties.Members))\n    | extend UPN = iif(Operation == \"MemberAdded\", tostring(Members[0].UPN), UserId)\n    | extend Organization = tostring(split(split(UPN, \"_\")[1], \"#\")[0])\n    | where isnotempty(Organization)\n    | summarize by Organization\n);\n// EnrichedMicrosoft365AuditLogs Query for New Organizations\nlet EnrichedEvents = EnrichedMicrosoft365AuditLogs\n    | where TimeGenerated between(starttime..endtime)\n    | where Workload == \"MicrosoftTeams\"\n    | where Operation == \"MemberAdded\"\n    | extend Members = parse_json(tostring(AdditionalProperties.Members))\n    | extend UPN = tostring(Members[0].UPN)\n    | extend Organization = tostring(split(split(UPN, \"_\")[1], \"#\")[0])\n    | where isnotempty(Organization)\n    | where Organization !in (known_orgs_enriched)\n    | extend AccountName = tostring(split(UPN, \"@\")[0]), AccountUPNSuffix = tostring(split(UPN, \"@\")[1])\n    | extend Account_0_Name = AccountName, Account_0_UPNSuffix = AccountUPNSuffix;\n// Combine Office and Enriched Logs\nlet CombinedEvents = OfficeEvents\n    | union EnrichedEvents\n    | summarize arg_min(TimeGenerated, *) by Organization, UPN;\n// Final Output\nCombinedEvents\n    | project Organization, UPN, AccountName, AccountUPNSuffix\n    | order by Organization asc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query looks for Microsoft Defender AV detections related to  Europium actor. \nIn Microsoft Sentinel the SecurityAlerts table includes only the Device Name of the affected device, this query joins the DeviceInfo table to clearly connect other information such as Device group, ip, etc. This would allow the Microsoft Sentinel analyst to have more context related to the alert, if available.\n Reference: https://www.microsoft.com/security/blog/2022/09/08/microsoft-investigates-iranian-attacks-against-the-albanian-government \n Topic: Detections"}, {"role": "assistant", "content": "let Europium_threats = dynamic([\"TrojanDropper:ASP/WebShell!MSR\", \"Trojan:Win32/BatRunGoXml\", \"DoS:Win64/WprJooblash\", \"Ransom:Win32/Eagle!MSR\", \"Trojan:Win32/Debitom.A\"]);\nDeviceInfo\n| extend DeviceName = tolower(DeviceName)\n| join kind=inner ( SecurityAlert\n| where ProviderName == \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| extend ThreatFamilyName = tostring(parse_json(ExtendedProperties).ThreatFamilyName)\n| where ThreatName in~ (Europium_threats) or ThreatFamilyName in~ (Europium_threats)\n| extend CompromisedEntity = tolower(CompromisedEntity)\n) on $left.DeviceName == $right.CompromisedEntity\n| summarize by DisplayName, ThreatName, ThreatFamilyName, PublicIP, AlertSeverity, Description, tostring(LoggedOnUsers), DeviceId, TenantId, bin(TimeGenerated, 1d), CompromisedEntity, tostring(LoggedOnUsers), ProductName, Entities\n| extend HostName = tostring(split(CompromisedEntity, \".\")[0]), DomainIndex = toint(indexof(CompromisedEntity, '.'))\n| extend HostNameDomain = iff(CompromisedEntity != -1, substring(CompromisedEntity, DomainIndex + 1), CompromisedEntity)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies threats which got successfully delivered to Inbox/Junk folder.\n Topic: Microsoft Defender XDR"}, {"role": "assistant", "content": "EmailEvents\n| where isnotempty(ThreatTypes) and DeliveryLocation in~ (\"Inbox/folder\",\"Junk folder\")\n| extend Name = tostring(split(SenderFromAddress, '@', 0)[0]), UPNSuffix = tostring(split(SenderFromAddress, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = SenderIPv4\n| extend MailBox_0_MailboxPrimaryAddress = RecipientEmailAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query detects potential lateral movement within a network by identifying when an RDP connection (EventID 4624, LogonType 10) is made to an initial system, followed by a subsequent RDP connection from that system to another, using the same account within a 60-minute window.\n To reduce false positives, it excludes scenarios where the same account has made 5 or more connections to the same set of computers in the previous 7 days. This approach focuses on highlighting unusual RDP behaviour that suggests lateral movement, which is often associated with attacker tactics during a network breach.\n Topic: Detections"}, {"role": "assistant", "content": "let endtime = 1d;\n// Function to resolve hostname to IP address using DNS logs or a lookup table (example syntax)\nlet rdpConnections =\n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4624 and LogonType == 10\n// Labeling the first RDP connection time, computer and ip\n| extend\nFirstHop = bin(TimeGenerated, 1m),\nFirstComputer = toupper(Computer),\nFirstRemoteIPAddress = IpAddress,\nAccount = tolower(Account)\n),\n(\nWindowsEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4624 and EventData has (\"10\")\n| extend LogonType = tostring(EventData.LogonType)\n| where LogonType == 10 // Labeling the first RDP connection time, computer and ip\n| extend Account = strcat(tostring(EventData.TargetDomainName), \"\", tostring(EventData.TargetUserName))\n| extend IpAddress = tostring(EventData.IpAddress)\n| extend\nFirstHop = bin(TimeGenerated, 1m),\nFirstComputer = toupper(Computer),\nFirstRemoteIPAddress = IpAddress,\nAccount = tolower(Account)\n))\n| join kind=inner (\n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4624 and LogonType == 10\n// Labeling the second RDP connection time, computer and ip\n| extend\nSecondHop = bin(TimeGenerated, 1m),\nSecondComputer = toupper(Computer),\nSecondRemoteIPAddress = IpAddress,\nAccount = tolower(Account)\n),\n(\nWindowsEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4624 and EventData has (\"10\")\n| extend LogonType = toint(EventData.LogonType)\n| where LogonType == 10 // Labeling the second RDP connection time, computer and ip\n| extend Account = strcat(tostring(EventData.TargetDomainName), \"\", tostring(EventData.TargetUserName))\n| extend IpAddress = tostring(EventData.IpAddress)\n| extend\nSecondHop = bin(TimeGenerated, 1m),\nSecondComputer = toupper(Computer),\nSecondRemoteIPAddress = IpAddress,\nAccount = tolower(Account)\n))\n)\non Account\n| distinct\nAccount,\nFirstHop,\nFirstComputer,\nFirstRemoteIPAddress,\nSecondHop,\nSecondComputer,\nSecondRemoteIPAddress,\nAccountType,\nActivity,\nLogonTypeName,\nProcessName;\n// Resolve hostnames to IP addresses device network Ip's\nlet listOfFirstComputer = rdpConnections | distinct FirstComputer;\nlet listOfSecondComputer = rdpConnections | distinct SecondComputer;\nlet resolvedIPs =\nDeviceNetworkInfo\n| where TimeGenerated >= ago(endtime)\n| where isnotempty(ConnectedNetworks) and NetworkAdapterStatus == \"Up\"\n| extend ClientIP = tostring(parse_json(IPAddresses[0]).IPAddress)\n| where isnotempty(ClientIP)\n| where DeviceName in~ (listOfFirstComputer) or DeviceName in~ (listOfSecondComputer)\n| summarize arg_max(TimeGenerated, ClientIP) by Computer= DeviceName\n| project Computer=toupper(Computer), ResolvedIP = ClientIP;\n// Join resolved IPs with the RDP connections\nrdpConnections\n| join kind=inner (resolvedIPs) on $left.FirstComputer == $right.Computer\n| join kind=inner (resolvedIPs) on $left.SecondComputer == $right.Computer\n// | where ResolvedIP != ResolvedIP1\n| distinct\nAccount,\nFirstHop,\nFirstComputer,\nFirstComputerIP = ResolvedIP,\nFirstRemoteIPAddress,\nSecondHop,\nSecondComputer,\nSecondComputerIP = ResolvedIP1,\nSecondRemoteIPAddress,\nAccountType,\nActivity,\nLogonTypeName,\nProcessName\n// Ensure the first connection is before the second connection\n// Identify only RDP to another computer from within the first RDP connection by only choosing matches where the Computer names do not match\n// Ensure the IPAddresses do not match by excluding connections from the same computers with first hop RDP connections to multiple computers\n| where FirstComputer != SecondComputer\nand FirstRemoteIPAddress != SecondRemoteIPAddress\nand SecondHop > FirstHop\n// Ensure the second hop occurs within 30 minutes of the first hop\n| where SecondHop <= FirstHop + 30m\n| where SecondRemoteIPAddress == FirstComputerIP\n| summarize FirstHopFirstSeen = min(FirstHop), FirstHopLastSeen = max(FirstHop)\nby\nAccount,\nFirstComputer,\nFirstComputerIP,\nFirstRemoteIPAddress,\nSecondHop,\nSecondComputer,\nSecondComputerIP,\nSecondRemoteIPAddress,\nAccountType,\nActivity,\nLogonTypeName,\nProcessName\n| extend\nAccountName = tostring(split(Account, @\"\")[1]),\nAccountNTDomain = tostring(split(Account, @\"\")[0])\n| extend\nHostName1 = tostring(split(FirstComputer, \".\")[0]),\nDomainIndex = toint(indexof(FirstComputer, '.'))\n| extend HostNameDomain1 = iff(DomainIndex != -1, substring(FirstComputer, DomainIndex + 1), FirstComputer)\n| extend\nHostName2 = tostring(split(SecondComputer, \".\")[0]),\nDomainIndex = toint(indexof(SecondComputer, '.'))\n| extend HostNameDomain2 = iff(DomainIndex != -1, substring(SecondComputer, DomainIndex + 1), SecondComputer)\n| project-away DomainIndex\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query shows critical event severity\n Topic: OracleWebLogicServer"}, {"role": "assistant", "content": "OracleWebLogicServerEvent\n| where TimeGenerated > ago(24h)\n| where isnotempty(EventSeverity)\n| where EventSeverity has_any (\"CRITICAL\", 'ALERT', 'EMERGENCY')\n| extend UrlCustomEntity = UrlOriginal, AccountCustomEntity = SrcUserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query finds AD applications with EWS permissions to read user mailboxes. Threat actors could misuse these for persistent mailbox access. Ensure these permissions are legitimately granted and necessary.\n Topic: Cloud Identity Threat Protection Essentials"}, {"role": "assistant", "content": "AuditLogs\n| where Category =~ \"ApplicationManagement\"\n| where OperationName has \"Add app role assignment to service principal\"\n| extend UA = tostring(AdditionalDetails[0].value)\n| mv-expand TargetResources\n| extend ModifiedProps = TargetResources.modifiedProperties\n| mv-expand ModifiedProps\n| where ModifiedProps.newValue has \"Use Exchange Web Services with full access to all mailboxes\"\n| extend Action = ModifiedProps.newValue\n| extend User = tolower(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName))\n| join kind=inner AuditLogs on CorrelationId\n| mv-expand TargetResources1\n| mv-expand TargetResources1.modifiedProperties\n| project-reorder TargetResources1_modifiedProperties\n| extend displayName_ = tostring(TargetResources1_modifiedProperties.displayName)\n| extend AppId = iff(tostring(TargetResources1_modifiedProperties.displayName) =~ \"ServicePrincipal.AppId\", tostring(TargetResources1_modifiedProperties.newValue), \"\")\n| extend AppName = iff(tostring(TargetResources1_modifiedProperties.displayName) =~ \"ServicePrincipal.DisplayName\", tostring(TargetResources1_modifiedProperties.newValue), \"\")\n| summarize make_set(AppName, 100), make_set(AppId, 100) by TimeGenerated, ActivityDisplayName, UA, User, Result, OperationName, tostring(InitiatedBy), bin(TimeGenerated, 1d), tostring(Action)\n| where tostring(set_AppId) != '[\"\"]'\n| project-reorder TimeGenerated, User, set_AppName\n| join kind=leftouter \n  (SecurityAlert\n    | where ProviderName =~ \"IPC\"\n    | extend User = tolower(tostring(parse_json(ExtendedProperties).[\"User Account\"]))\n    | summarize count_AlertName = count() by bin(TimeGenerated, 1d), User\n  ) on TimeGenerated, User\n| extend NumberofAADAlerts = iif(isnotempty(count_AlertName), count_AlertName, 0)\n| sort by NumberofAADAlerts desc\n| extend AppName = tostring(set_AppName[1])\n| extend AppID = tostring(set_AppId[1])\n| project-away set_AppName, set_AppId\n| project-reorder TimeGenerated, ActivityDisplayName, Action, User, NumberofAADAlerts, AppName, AppID\n| extend timestamp = TimeGenerated, UserName = tostring(split(User, '@', 0)[0]), UserUPNSuffix = tostring(split(User, '@', 1)[0])\n| extend Account_0_Name = UserName\n| extend Account_0_UPNSuffix = UserUPNSuffix\n| extend CloudApplication_0_AppId = AppID\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The policy detects the creation of new AWS roles with administrative privileges. The policy configuration allows limiting the policy to specific accounts. Topic: Authomize"}, {"role": "assistant", "content": "Authomize_v2_CL\n| where ingestion_time() >= ago(30m)\n| extend EventID = id_s, Policy = policy_name_s, Severity = severity_s,Description = description_s,Recommendation = recommendation_s,URL = url_s,Tactics = tactics_s  \n| where Policy has \"AWS role with admin privileges\"\n| project  EventID, Policy, Severity, Description, Recommendation, URL, Category, Tactics"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule identifies Web Sessions for which the source IP address is a known IoC. This rule uses the [Advanced Security Information Model (ASIM)](https://aka.ms/AboutASIM) and supports any web session source that complies with ASIM.\n Topic: Threat Intelligence"}, {"role": "assistant", "content": "let HAS_ANY_MAX = 10000;\nlet dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet IP_TI = ThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  // As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\n  // Taking the first non-empty value based on potential IOC match availability\n  | extend TI_ipEntity = coalesce(NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, \"NO_IP\")\n  // Picking up only IOC's that contain the entities we want\n  | where TI_ipEntity != \"NO_IP\"\n  // Exclude local addresses, using the ipv4_is_private operator\n  | where ipv4_is_private(TI_ipEntity) == false and TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\nlet IP_TI_list = toscalar(IP_TI\n  | summarize NIoCs = dcount(TI_ipEntity), IoCs = make_set(TI_ipEntity)\n  | project IoCs = iff(NIoCs > HAS_ANY_MAX, dynamic([]), IoCs));\nIP_TI\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind = innerunique (\n    _Im_WebSession (starttime = ago(dt_lookBack), srcipaddr_has_any_prefix = IP_TI_list)\n    | where isnotempty(SrcIpAddr)\n    // renaming time column so it is clear the log this came from\n    | extend imNWS_TimeGenerated = TimeGenerated\n  )\n  on $left.TI_ipEntity == $right.SrcIpAddr\n| where imNWS_TimeGenerated < ExpirationDateTime\n| summarize imNWS_TimeGenerated = arg_max(imNWS_TimeGenerated, *) by IndicatorId, DstIpAddr\n| project imNWS_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore,\n  TI_ipEntity, Dvc, SrcIpAddr, DstIpAddr, Url, Type\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for Flare Leaked Credentials\n Topic: Flare"}, {"role": "assistant", "content": "Firework_CL\n| where notempty(data_new_leaks_s) and source_s != 'stealer_logs_samples'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query searches for your services by regulating the access of third-party integrated apps. \n Only allow access to necessary apps that support robust security controls. \n Third-party applications are not created by Microsoft, so there is a possibility they could be used for malicious purposes like exfiltrating data from your tenancy.\n Attackers can maintain persistent access to your services through these integrated apps, without relying on compromised accounts.\n Topic: SenservaPro"}, {"role": "assistant", "content": "SenservaPro_CL\n| where ControlName_s == 'AzureSecureScoreIntegratedApps'\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting queries identifies files uploaded to SharePoint via a Teams chat and\nsummarizes users and IP addresses that have accessed these files. This allows for \nidentification of anomolous file sharing patterns.\n Topic: Microsoft 365"}, {"role": "assistant", "content": "OfficeActivity \n| where RecordType =~ \"SharePointFileOperation\"\n| where Operation =~ \"FileUploaded\" \n| where UserId != \"app@sharepoint\"\n| where SourceRelativeUrl has \"Microsoft Teams Chat Files\" \n| join kind= leftouter ( \n   OfficeActivity \n    | where RecordType =~ \"SharePointFileOperation\"\n    | where Operation =~ \"FileDownloaded\" or Operation =~ \"FileAccessed\" \n    | where UserId != \"app@sharepoint\"\n    | where SourceRelativeUrl has \"Microsoft Teams Chat Files\" \n) on OfficeObjectId \n| extend userBag = bag_pack(UserId1, ClientIP1) \n| summarize make_set(UserId1, 10000), make_bag(userBag, 10000) by TimeGenerated, UserId, OfficeObjectId, SourceFileName \n| extend NumberUsers = array_length(bag_keys(bag_userBag))\n| project timestamp=TimeGenerated, UserId, FileLocation=OfficeObjectId, FileName=SourceFileName, AccessedBy=bag_userBag, NumberOfUsersAccessed=NumberUsers\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n| extend Account_0_Name = AccountName\n| extend Account_0_UPNSuffix = AccountUPNSuffix \n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query detects exploitation attempts for CVE-2021-44228 involving log4j vulnerability by looking for connections to default LDAP ports.\n Topic: Apache Log4j Vulnerability Detection"}, {"role": "assistant", "content": "let Port = dynamic(['389', '1389']); \n(union isfuzzy=true\n(DeviceNetworkEvents\n| where InitiatingProcessFileName has_any (\"javaw.exe\",\"java.exe\")\n| where ActionType has \"ConnectionSuccess\"\n| where RemotePort in ('389', '1389')\n| where InitiatingProcessCommandLine has_any ('curl', 'wget')\n| where RemoteIPType =~ 'Public'\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by ActionType, DestinationIP = RemoteIP, RemoteUrl, DestinationPort = RemotePort, SourceIP = LocalIP, Type, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath,  InitiatingProcessParentFileName, ProcessName = InitiatingProcessFileName, Computer = DeviceName\n),\n(VMConnection\n| where ProcessName has_any (\"javaw\",\"java\")\n| where DestinationPort in ('389', '1389')\n| where ipv4_is_private(DestinationIp) == false\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by TimeGenerated, SourceIP = SourceIp , DestinationIP = DestinationIp, DestinationPort,  BytesReceived, BytesSent, ProcessName, Computer\n)\n)\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend Host_0_HostName = HostName\n| extend Host_0_DnsDomain = DnsDomain\n| extend IP_0_Address = DestinationIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This will alert when an admin or app owner account adds a new credential to an Application or Service Principal where a verify KeyCredential was already present for the app.\nIf a threat actor obtains access to an account with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.\nAdditional information on OAuth Credential Grants can be found in RFC 6749 Section 4.4 or https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n Topic: Microsoft Entra ID"}, {"role": "assistant", "content": "AuditLogs\n| where OperationName has_any (\"Add service principal\", \"Certificates and secrets management\") // captures \"Add service principal\", \"Add service principal credentials\", and \"Update application - Certificates and secrets management\" events\n| where Result =~ \"success\"\n| where tostring(InitiatedBy.user.userPrincipalName) has \"@\" or tostring(InitiatedBy.app.displayName) has \"@\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"Application\"\n      | extend targetDisplayName = tostring(TargetResource.displayName),\n               targetId = tostring(TargetResource.id),\n               targetType = tostring(TargetResource.type),\n               keyEvents = TargetResource.modifiedProperties\n  )\n| mv-apply Property = keyEvents on \n  (\n      where Property.displayName =~ \"KeyDescription\"\n      | extend new_value_set = parse_json(tostring(Property.newValue)),\n               old_value_set = parse_json(tostring(Property.oldValue))\n  )\n| where old_value_set != \"[]\"\n| extend diff = set_difference(new_value_set, old_value_set)\n| where isnotempty(diff)\n| parse diff with * \"KeyIdentifier=\" keyIdentifier:string \",KeyType=\" keyType:string \",KeyUsage=\" keyUsage:string \",DisplayName=\" keyDisplayName:string \"]\" *\n| where keyUsage =~ \"Verify\"\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend UserAgent = tostring(AdditionalDetail.value)\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n// The below line is currently commented out but Microsoft Sentinel users can modify this query to show only Application or only Service Principal events in their environment\n//| where targetType =~ \"Application\" // or targetType =~ \"ServicePrincipal\"\n| project-away diff, new_value_set, old_value_set\n| project-reorder TimeGenerated, OperationName, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIpAddress, UserAgent, targetDisplayName, targetId, targetType, keyDisplayName, keyType, keyUsage, keyIdentifier, CorrelationId, TenantId\n| extend Name = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Hunting for suspicious file types in attachments.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "ProofpointPOD\n| where EventType == 'message'\n| where NetworkDirection == 'inbound'\n| extend attachedFileType = todynamic(MsgParts)[0]['detectedExt']\n| summarize count() by tostring(attachedFileType)\n| sort by count_"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query identifies users who created new package feed to Azure DevOps pipelines, having no prior history of feed creation, suggesting possible unauthorized activity and requiring verification.\n Topic: AzureDevOpsAuditing"}, {"role": "assistant", "content": "let alert_threshold = 0;\nAzureDevOpsAuditing\n| where OperationName matches regex \"Artifacts.Feed.(Org|Project).Create\"\n| extend FeedName = tostring(Data.FeedName)\n| extend FeedId = tostring(Data.FeedId)\n| join kind = leftouter (\nSecurityAlert\n| where ProviderName == \"IPC\"\n| extend AadUserId = tostring(parse_json(Entities)[0].AadUserId)\n| summarize Alerts=count() by AadUserId) on $left.ActorUserId == $right.AadUserId\n| extend Alerts = iif(isempty(Alerts), 0, Alerts)\n| project-reorder TimeGenerated, Details, ActorUPN, IpAddress, UserAgent\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when weak TLS ciphers are used.\n Topic: Proofpoint On demand(POD) Email Security"}, {"role": "assistant", "content": "let lbtime = 1h;\nlet tls_ciphers = dynamic(['RC4-SHA', 'DES-CBC3-SHA']);\nProofpointPOD\n| where EventType == 'message'\n| where TlsCipher in (tls_ciphers)\n| extend IPCustomEntity = SrcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detects attempts to manipulate audit policies using auditpol command.\nThis technique was seen in relation to Solorigate attack but the results can indicate potential malicious activity used in different attacks.\nThe process name in each data source is commented out as an adversary could rename it. It is advisable to keep process name commented but if the results show unrelated false positives, users may want to uncomment it.\nRefer to auditpol syntax: https://docs.microsoft.com/windows-server/administration/windows-commands/auditpol  \nRefer to our M365 blog for details on use during the Solorigate attack:\nhttps://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/\n Topic: Detections"}, {"role": "assistant", "content": "let timeframe = 1d;\nlet AccountAllowList = dynamic(['SYSTEM']);\nlet SubCategoryList = dynamic([\"Logoff\", \"Account Lockout\", \"User Account Management\", \"Authorization Policy Change\"]); // Add any Category in the list to be allowed or disallowed\nlet tokens = dynamic([\"clear\", \"remove\", \"success:disable\",\"failure:disable\"]); \n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(timeframe)\n//| where Process =~ \"auditpol.exe\" \n| where CommandLine has_any (tokens)\n| where AccountType !~ \"Machine\" and Account !in~ (AccountAllowList)\n| parse CommandLine with * \"/subcategory:\" subcategorytoken\n| extend SubCategory = tostring(split(subcategorytoken, \"\\\"\")[1]) , Toggle =  tostring(split(subcategorytoken, \"\\\"\")[2])\n| where SubCategory in~ (SubCategoryList) //use in~ for inclusion or !in~ for exclusion\n| where Toggle !in~ (\"/failure:disable\", \" /success:enable /failure:disable\") // use this filter if required to exclude certain toggles\n| project TimeGenerated, Computer, Account, SubjectDomainName, SubjectUserName, Process, ParentProcessName, CommandLine, SubCategory, Toggle\n| extend timestamp = TimeGenerated, AccountName = SubjectUserName, AccountDomain = SubjectDomainName, DeviceName = Computer\n),\n(\nDeviceProcessEvents\n| where TimeGenerated >= ago(timeframe)\n// | where InitiatingProcessFileName =~ \"auditpol.exe\" \n| where InitiatingProcessCommandLine has_any (tokens)\n| where AccountName !in~ (AccountAllowList)\n| parse InitiatingProcessCommandLine with * \"/subcategory:\" subcategorytoken\n| extend SubCategory = tostring(split(subcategorytoken, \"\\\"\")[1]) , Toggle =  tostring(split(subcategorytoken, \"\\\"\")[2])\n| where SubCategory in~ (SubCategoryList) //use in~ for inclusion or !in~ for exclusion\n| where Toggle !in~ (\"/failure:disable\", \" /success:enable /failure:disable\") // use this filter if required to exclude certain toggles\n| project TimeGenerated, DeviceName, AccountName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessFileName, InitiatingProcessParentFileName,  InitiatingProcessCommandLine, SubCategory, Toggle\n| extend timestamp = TimeGenerated, AccountName = InitiatingProcessAccountName, AccountDomain = InitiatingProcessAccountDomain\n),\n(\nEvent\n| where TimeGenerated > ago(timeframe)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n// | where OriginalFileName =~ \"auditpol.exe\"\n| where CommandLine has_any (tokens)\n| where User !in~ (AccountAllowList)\n| parse CommandLine with * \"/subcategory:\" subcategorytoken\n| extend SubCategory = tostring(split(subcategorytoken, \"\\\"\")[1]) , Toggle =  tostring(split(subcategorytoken, \"\\\"\")[2])\n| where SubCategory in~ (SubCategoryList) //use in~ for inclusion or !in~ for exclusion\n| where Toggle !in~ (\"/failure:disable\", \" /success:enable /failure:disable\") // use this filter if required to exclude certain toggles\n| project TimeGenerated, Computer, User, Process, ParentImage, CommandLine, SubCategory, Toggle\n| extend timestamp = TimeGenerated, AccountName = tostring(split(User, @'\\')[1]), AccountUPNSuffix = tostring(split(User, @'\\')[0]), DeviceName = Computer\n)\n)\n| extend Account = strcat(AccountDomain, \"\\\\\", AccountName)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Generates an incident when malware is detected by Radiflows iSID.\n Topic: Radiflow"}, {"role": "assistant", "content": "RadiflowEvent\n| where DeviceProduct =~ 'iSID'\n| where EventClassID in (57, 58, 59, 60, 176, 178, 181)\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "42Crunch API protection against Kiterunner enumeration\n Topic: 42Crunch API Protection"}, {"role": "assistant", "content": "let discoveryRecords = apifirewall_log_1_CL\n| where TimeGenerated >= ago(5m) \n| project-away Non_blocking_mode_b, Source_Port_d, Destination_Port_d, Query_s, API_ID_g, Request_Header_s, Response_Header_s, Errors_s, Type, UUID_g \n| where Status_d == 404 and Error_Message_s startswith \"path not defined in OAS\";\nlet discoveryCnt = (toscalar(discoveryRecords | count));\nlet recCount = iff((discoveryCnt > 500), 1, 0);\ndiscoveryRecords | top recCount by Timestamp_t desc\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Triggers Incidents using detection data assembled by Red Canary. Topic: Red Canary"}, {"role": "assistant", "content": "RedCanaryDetections_CL\n| extend    process_ioc_array = todynamic(process_iocs_s),\n            child_process_ioc_array = todynamic(child_process_iocs_s),\n            cross_process_ioc_array = todynamic(cross_process_iocs_s),\n            file_mod_ioc_array = todynamic(file_modification_iocs_s),\n            identities_array = todynamic(identities_s)\n| extend    entities = array_concat(process_ioc_array, child_process_ioc_array, cross_process_ioc_array, file_mod_ioc_array, identities_array)\n| mv-expand entities\n| evaluate  bag_unpack(entities)\n| extend    file_hash_array = todynamic(column_ifexists('file_hashes', '[]'))\n| mv-expand file_hash_array\n| evaluate  bag_unpack(file_hash_array, 'file_hash_')\n| project   detection_id_s = column_ifexists('detection_id_s', ''),\n            detection_url_s = column_ifexists('detection_url_s', ''),\n            detection_headline_s = column_ifexists('detection_headline_s', ''),\n            detection_details_s = column_ifexists('detection_details_s', ''),\n            detection_severity_s = column_ifexists('detection_severity_s', ''),\n            host_name_s = column_ifexists('host_name_s', ''),\n            host_full_name_s = column_ifexists('host_full_name_s', ''),\n            host_os_family_s = column_ifexists('host_os_family_s', ''),\n            host_os_version_s = column_ifexists('host_os_version_s', ''),\n            tactics_s = column_ifexists('tactics_s', ''),\n            process_id = column_ifexists('process_id', ''),\n            process_command_line = column_ifexists('process_command_line', ''),\n            process_creation_time_utc = column_ifexists('process_creation_time_utc', ''),\n            file_hash_algorithm = column_ifexists('file_hash_algorithm', ''),\n            file_hash_value = column_ifexists('file_hash_value', ''),\n            file_directory = column_ifexists('file_directory', ''),\n            file_name = column_ifexists('file_name', ''),\n            user_name = column_ifexists('user_name', ''),\n            user_uid = column_ifexists('user_uid', '')\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for rarely used privileged users.\n Topic: Snowflake"}, {"role": "assistant", "content": "Snowflake\n| where TimeGenerated > ago(30d)\n| where QUERY_TYPE_s =~ 'SELECT'\n| summarize roles = makeset(ROLE_NAME_s) by TargetUsername\n| join(Snowflake\n      | where TimeGenerated > ago(30d)\n      | where EventType =~ 'LOGIN'\n      | summarize last_login_t = max(TimeGenerated) by TargetUsername) on TargetUsername\n| project-away TargetUsername1\n| where roles has_any ('SECURITYADMIN', 'SYSADMIN', 'ACCOUNTADMIN')\n| where last_login_t < ago(20d)\n| extend AccountCustomEntity = TargetUsername\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection looks the prevention of crash dumps being created. This can be used to limit reporting by malware, look for suspicious processes setting this registry key.\n Topic: Windows Security Events"}, {"role": "assistant", "content": "SecurityEvent\n  | where EventID == 4657\n  | parse ObjectName with \"\\\\REGISTRY\\\\\" KeyPrefix \"\\\\\" RegistryKey\n  | project-reorder RegistryKey\n  | where RegistryKey has \"SYSTEM\\\\CurrentControlSet\\\\Control\\\\CrashControl\"\n  | where ObjectValueName =~ \"CrashDumpEnabled\"\n  | extend  RegistryValueData = iff (OperationType == \"%%1906\", OldValue, NewValue)\n  | where RegistryValueData == 0\n  | extend NTDomain = tostring(split(Account,'\\\\',0)[0]), Name = tostring(split(Account,'\\\\',1)[0])\n  | extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n  | extend Account_0_Name = Name\n  | extend Account_0_NTDomain = NTDomain\n  | extend Host_0_HostName = HostName\n  | extend Host_0_DnsDomain = DnsDomain\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The number of critical attack paths has increased over the past 7 days.\n Topic: BloodHound Enterprise"}, {"role": "assistant", "content": "BloodHoundLogs_CL\n| where data_type == \"finding_export\"\n| where created_at > ago (7d)\n| summarize min_critical_risk_count = min(finding_count), arg_max(created_at, current_critical_risk_count = finding_count, domain_name) by domain_name\n| extend  difference = current_critical_risk_count - min_critical_risk_count\n| where difference > 0"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "AWS ECR Image scan detected critical or high-severity vulnerabilities in your container image.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "AWSCloudTrail\n| where EventName == \"DescribeImageScanFindings\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend repoName = tostring(parse_json(ResponseElements).repositoryName)\n| extend imageId = tostring(parse_json(ResponseElements).imageId.imageDigest)\n| extend Critical = toint(parse_json(ResponseElements).imageScanFindings.findingSeverityCounts.CRITICAL)\n| extend High = toint(parse_json(ResponseElements).imageScanFindings.findingSeverityCounts.HIGH)\n| where Critical > 0 or High > 0\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| extend timestamp = TimeGenerated\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "The analytic rule is intended to detect when a file is blocked by Votiro Sanitization Engine due to a specific policy, and notify the appropriate parties so that they can take appropriate action. The alert message will state that a file with a specific name and hash value was blocked by Votiro Sanatization Engine due to a specific policy name, and that more details can be found at a specific incident URL.\n Topic: Votiro"}, {"role": "assistant", "content": "let Votiro_view  = view () { VotiroEvents | where sanitizationResult has \"Blocked\" and passwordProtected == \"false\" and from =~ \"null\" | extend FileWithConnectorDetails = strcat_delim(' ', fileName, 'with the hash', SrcFileSHA256, 'that was sent from connector', connectorName) | summarize count() by fileName, SrcFileSHA256, FileWithConnectorDetails, policyName, tostring(incidentURL), sanitizationResult, LogSeverity | extend FileHashAlgo = \"SHA256\", FileHashValue = SrcFileSHA256};Votiro_view"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "\"Creates Sentinel incidents for critical/high Theom risks, associated with ruleId TRIS0026 (Theom has observed financial data in a data store that is publicly exposed. As per this requirement, use this information to apply data access control lists or access permissions to secure your data)\"\n Topic: Theom"}, {"role": "assistant", "content": "TheomAlerts_CL\n  | where customProps_RuleId_s == \"TRIS0026\" and (priority_s == \"P1\" or priority_s == \"P2\")\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection will identify network requests in HTTP proxy data that contains Base64 encoded IP addresses. After identifying candidates the query joins with DeviceNetworkEvents to idnetify any machine within the network using that IP address. Alerts indicate that the IP address of a machine within your network was seen with its IP address base64 encoded in an outbound web request. This method of egressing the IP was seen used in POLONIUMs RunningRAT tool, however the detection is generic.\n Topic: Detections"}, {"role": "assistant", "content": "// Extracts plaintext IPv4 addresses\nlet ipv4_plaintext_extraction_regex = @\"((?:(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.)){3}(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1,3})\";\n// Identified base64 encoded IPv4 addresses\nlet ipv4_encoded_identification_regex = @\"\\=([a-zA-Z0-9\\/\\+]*(?:(?:MC|Au|wL|MS|Eu|xL|Mi|Iu|yL|My|Mu|zL|NC|Qu|0L|NS|Uu|1L|Ni|Yu|2L|Ny|cu|3L|OC|gu|4L|OS|ku|5L){1}[a-zA-Z0-9\\/\\+]{2,4}){3}[a-zA-Z0-9\\/\\+\\=]*)\";\n// Extractes IPv4 addresses as hex values\nlet ipv4_decoded_hex_extract = @\"((?:(?:61|62|63|64|65|66|67|68|69|6a|6b|6c|6d|6e|6f|70|71|72|73|74|75|76|77|78|79|7a|41|42|43|44|45|46|47|48|49|4a|4b|4c|4d|4e|4f|50|51|52|53|54|55|56|57|58|59|5a|2f|2b|3d),){7,15})\";\nCommonSecurityLog\n| where isnotempty(RequestURL)\n// Identify requests with encoded IPv4 addresses\n| where RequestURL matches regex ipv4_encoded_identification_regex\n| project TimeGenerated, RequestURL\n// Extract IP candidates in their base64 encoded format, significantly reducing the dataset\n| extend extracted_encoded_ip_candidate = extract_all(ipv4_encoded_identification_regex, RequestURL)\n// We could have more than one candidate, expand them out\n| mv-expand extracted_encoded_ip_candidate to typeof(string)\n| summarize Start=min(TimeGenerated), End=max(TimeGenerated), make_set(RequestURL) by extracted_encoded_ip_candidate\n// Pad if we need to\n| extend extracted_encoded_ip_candidate = iff(strlen(extracted_encoded_ip_candidate) % 2 == 0, extracted_encoded_ip_candidate, strcat(extracted_encoded_ip_candidate, \"=\"))\n// Now decode the candidate to a long array, we cannot go straight to string as it cannot handle non-UTF8, we need to strip that first\n| extend extracted_encoded_ip_candidate = tostring(base64_decode_toarray(extracted_encoded_ip_candidate))\n// Extract the IP candidates from the array\n| extend hex_extracted = extract_all(ipv4_decoded_hex_extract, extracted_encoded_ip_candidate)\n// Expand, it's still possible that we might have more than 1 IP\n| mv-expand hex_extracted\n// Now we should have a clean string. We need to put it back into a dynamic array to convert back to a string.\n| extend hex_extracted = trim_end(\",\", tostring(hex_extracted))\n| extend hex_extracted = strcat(\"[\",hex_extracted,\"]\")\n| extend hex_extracted = todynamic(hex_extracted)\n| extend extracted_encoded_ip_candidate = todynamic(extracted_encoded_ip_candidate)\n// Convert the array back into a string\n| extend decoded_ip_candidate = make_string(hex_extracted)\n| summarize by decoded_ip_candidate, tostring(set_RequestURL), Start, End\n// Now the IP candidates will be in plaintext, extract the IPs using a regex\n| extend ipmatch = extract_all(ipv4_plaintext_extraction_regex, decoded_ip_candidate)\n// If it's not an IP, throw it out\n| where isnotnull(ipmatch)\n| mv-expand ipmatch to typeof(string)\n// Join with DeviceNetworkEvents to find instances where an IP of a machine in our MDE estate sent it's IP in a base64 encoded string\n| join (\n    DeviceNetworkEvents\n    | summarize make_set(DeviceId), make_set(DeviceName) by RemoteIP\n) on $left.ipmatch == $right.RemoteIP\n| project Start, End, IPmatch=ipmatch, RequestURL=set_RequestURL, DeviceNames=set_DeviceName, DeviceIds=set_DeviceId, RemoteIP\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Look for successful logons from known VPS provider network ranges with suspicious token-based logon patterns. This is not an exhaustive list of VPS provider ranges, but it covers some of the most prevalent providers observed.\n Topic: SecurityThreatEssentialSolution"}, {"role": "assistant", "content": "let IP_Data = (externaldata(network:string)\n[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/VPS_Networks.csv\"] with (format=\"csv\"));\nSigninLogs\n| where ResultType == 0\n| extend additionalDetails = tostring(Status.additionalDetails)\n| evaluate ipv4_lookup(IP_Data, IPAddress, network, return_unmatched = false)\n| summarize make_set(additionalDetails,100), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by IPAddress, UserPrincipalName\n// Uncomment the remaining lines to only see logons from VPS providers with token only logons.\n//| where array_length(set_additionalDetails) == 2\n//| where (set_additionalDetails[1] =~ \"MFA requirement satisfied by claim in the token\" and set_additionalDetails[0] =~ \"MFA requirement satisfied by claim provided by external provider\") or (set_additionalDetails[0] =~ \"MFA requirement satisfied by claim in the token\" and set_additionalDetails[1] =~ \"MFA requirement satisfied by claim provided by external provider\")\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = IPAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures related to user accounts issues.\n Topic: Tenable App"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.yaml parser into the workspace\n// Retrieve the parser here: https://aka.ms/sentinel-TenableApp-afad-parser\n// Then, create the Kusto Function with alias afad_parser\nlet SeverityTable=datatable(Severity:string,Level:int) [\n\"low\", 1,\n\"medium\", 2,\n\"high\", 3,\n\"critical\", 4\n];\nlet codeNameList = datatable(Codename:string)[\"C-ACCOUNTS-DANG-SID-HISTORY\", \"C-PRE-WIN2000-ACCESS-MEMBERS\", \"C-PASSWORD-DONT-EXPIRE\", \"C-SLEEPING-ACCOUNTS\", \"C-DANG-PRIMGROUPID\", \"C-PASSWORD-NOT-REQUIRED\", \"C-USER-PASSWORD\"];\nafad_parser\n| where MessageType == 0 and Codename in~ (codeNameList)\n| lookup kind=leftouter SeverityTable on Severity\n| order by Level\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies IPs with failed attempts to sign in to one or more disabled accounts signed in successfully to another account.\nTo use this analytics rule, make sure you have deployed the [ASIM normalization parsers](https://aka.ms/ASimAuthentication)\n Topic: Detections"}, {"role": "assistant", "content": "imAuthentication\n| where EventResult =='Failure'\n| where EventResultDetails == 'User disabled'\n| summarize StartTime=min(EventStartTime), EndTime=max(EventEndTime), disabledAccountLoginAttempts = count()\n      , disabledAccountsTargeted = dcount(TargetUsername), disabledAccountSet = make_set(TargetUsername)\n      , applicationsTargeted = dcount(TargetAppName)\n      , applicationSet = make_set(TargetAppName) \n      by SrcDvcIpAddr, Type\n| order by disabledAccountLoginAttempts desc\n| join kind=leftouter \n    (\n    // Consider these IPs suspicious - and alert any related  successful sign-ins\n    imAuthentication\n    | where EventResult=='Success'\n    | summarize successfulAccountSigninCount = dcount(TargetUsername), successfulAccountSigninSet = makeset(TargetUsername, 15) by SrcDvcIpAddr, Type\n    // Assume IPs associated with sign-ins from 100+ distinct user accounts are safe\n    | where successfulAccountSigninCount < 100\n    )\n    on SrcDvcIpAddr\n| where isnotempty(successfulAccountSigninCount)\n| project StartTime, EndTime, SrcDvcIpAddr, disabledAccountLoginAttempts, disabledAccountsTargeted, disabledAccountSet, applicationSet, \nsuccessfulAccountSigninCount, successfulAccountSigninSet, Type\n| order by disabledAccountLoginAttempts\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Query searches for blocked or contained applications.\n Topic: McAfee ePolicy Orchestrator"}, {"role": "assistant", "content": "let lbtime = 24h;\nMcAfeeEPOEvent\n| where TimeGenerated > ago(lbtime)\n| where EventId in ('18002', '37275')\n| extend Reason = case(EventId == '18002', \"Application blocked\",\n                      \"Application contained\")\n| project DvcIpAddr, DstFileName\n| extend IPCustomEntity = DvcIpAddr\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This hunting query identifies a user that add/invite a member to the organization for the first time. This technique can be leveraged by attackers to add stealth account access to the organization.\n Topic: GitHub"}, {"role": "assistant", "content": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet LearningPeriod = 7d;\nlet EndLearningTime = starttime - LearningPeriod;\nlet GitHubOrgMemberLogs = (GitHubAuditData\n| where Action == \"org.invite_member\" or Action == \"org.update_member\" or Action == \"org.add_member\" or Action == \"repo.add_member\" or Action == \"team.add_member\");\nGitHubOrgMemberLogs\n| where TimeGenerated between (EndLearningTime..starttime)\n| distinct Actor\n| join kind=rightanti (\n  GitHubOrgMemberLogs\n  | where TimeGenerated between (starttime..endtime)\n  | distinct Actor\n) on Actor\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Suspicious S3 bucket activity indicating ransomware was detected.\nAn attacker might download all the objects in a compromised S3 bucket, encrypt them with his own key, then upload them back to the same bucket, overwriting the existing ones.\n Topic: Amazon Web Services"}, {"role": "assistant", "content": "let timeframe = 1h;\nlet lookback = 2h;\n// The attacker downloads the object(s) from the compromised bucket\nlet GetObject = AWSCloudTrail\n| where TimeGenerated >= ago(lookback)\n| where EventName == \"GetObject\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend bucketName = tostring(parse_json(RequestParameters).bucketName), keyName = tostring(parse_json(RequestParameters).key)\n| project-rename StartTime = TimeGenerated;\n// Then, the attacker overwrites the same object(s) but encrypted with his own key\nlet PutObject = AWSCloudTrail\n| where TimeGenerated >= ago(timeframe)\n| where EventName == \"PutObject\" and isempty(ErrorCode) and isempty(ErrorMessage)\n| extend bucketName = tostring(parse_json(RequestParameters).bucketName), keyName = tostring(parse_json(RequestParameters).key)\n| extend kmsId = tostring(parse_json(RequestParameters).[\"x-amz-server-side-encryption-aws-kms-key-id\"])\n| where tostring(kmsId) !has tostring(RecipientAccountId) and kmsId <> \"\";\nPutObject\n| join kind=inner \n(\n   GetObject\n)\non $left.bucketName == $right.bucketName, $left.keyName == $right.keyName\n| where TimeGenerated > StartTime\n| extend UserIdentityArn = iif(isempty(UserIdentityArn), tostring(parse_json(Resources)[0].ARN), UserIdentityArn)\n| extend UserName = tostring(split(UserIdentityArn, '/')[-1])\n| extend AccountName = case( UserIdentityPrincipalid == \"Anonymous\", \"Anonymous\", isempty(UserIdentityUserName), UserName, UserIdentityUserName)\n| extend AccountName = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 0)[0]), AccountName),\n  AccountUPNSuffix = iif(AccountName contains \"@\", tostring(split(AccountName, '@', 1)[0]), \"\")\n| extend timestamp = StartTime\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Identifies set of Microsoft Sentinel Workbooks administrative operational detection queries for hunting activites\n Topic: Azure Activity"}, {"role": "assistant", "content": "let opValues = dynamic([\"microsoft.insights/workbooks/write\", \"microsoft.insights/workbooks/delete\"]);\n// Microsoft Sentinel Workbook Create / Update / Delete\nAzureActivity\n| where Category =~ \"Administrative\"\n| where OperationNameValue in~ (opValues)\n| where ActivitySubstatusValue in~ (\"Created\", \"OK\")\n| sort by TimeGenerated desc\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = CallerIpAddress\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This rule creates Microsoft Sentinel Incidents based on Darktrace AI Analyst Incidents, fetched every 5 minutes.\n Topic: Darktrace"}, {"role": "assistant", "content": "darktrace_model_alerts_CL \n| where dtProduct_s ==\"AI Analyst\"\n| project-rename  EventStartTime=startTime_s, EventEndTime = endTime_s, NetworkRuleName=title_s, DtCurrentGroup=externalId_g, ThreatCategory=dtProduct_s, ThreatRiskLevel=score_d, SrcHostname=hostname_s, SrcIpAddr=deviceIP_s, DtURL=url_s, DtSummary=summary_s, DtGroupScore=groupScore_d, DtGroupCategory=groupCategory_s, DtSrcDeviceName=bestDeviceName_s, DtIndentifier=identifier_s, ActivityID=activityId_s, DtGroupingID=groupingId_s, DtGroupByActivity=groupByActivity_b, DtSummaryFirstSentence=summaryFirstSentence_s, DtNewEvent=newEvent_b, DtCGLegacy=currentGroup_s, DtGroupPreviousGroups=groupPreviousGroups_s, DtTime=time_s, DtSeverity=Severity, DtLongitude=longitude_d, DtLatitude=latitude_d  \n| extend EventVendor = \"Darktrace\", EventProduct = \"Darktrace DETECT\", DtSentinelCategory=DtGroupCategory\n| extend DtSentinelCategory = case (DtGroupCategory == \"compliance\", \"Low\", \n                                    DtGroupCategory == \"suspicious\", \"Medium\",\n                                    \"High\") //compliance -> low, suspcious -> medium, critical -> high\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects when a machine is removed from protection.\n Topic: ZeroNetworks"}, {"role": "assistant", "content": "ZNSegmentAudit\n| where AuditTypeId == 4\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This detection flags the occurrences of external user accounts that are added to a Team and then removed within one hour.\n Topic: Global Secure Access"}, {"role": "assistant", "content": "let TeamsAddDelOffice = (Op:string){\n  OfficeActivity\n  | where OfficeWorkload =~ \"MicrosoftTeams\"\n  | where Operation == Op\n  | where Members has (\"#EXT#\")\n  | mv-expand Members\n  | extend UPN = tostring(Members.UPN)\n  | where UPN has (\"#EXT#\")\n  | project TimeGenerated, Operation, UPN, UserId, TeamName, ClientIP\n};\nlet TeamsAddDelEnriched = (Op:string){\n  EnrichedMicrosoft365AuditLogs\n  | where Workload =~ \"MicrosoftTeams\"\n  | where Operation == Op\n  | where tostring(AdditionalProperties.Members) has (\"#EXT#\")\n  | mv-expand Members = parse_json(tostring(AdditionalProperties.Members))\n  | extend UPN = tostring(Members.UPN)\n  | where UPN has (\"#EXT#\")\n  | project TimeGenerated, Operation, UPN, UserId, TeamName = tostring(parse_json(tostring(AdditionalProperties)).TeamName), ClientIP = SourceIp\n};\nlet TeamsAddOffice = TeamsAddDelOffice(\"MemberAdded\")\n  | project TimeAdded = TimeGenerated, Operation, MemberAdded = UPN, UserWhoAdded = UserId, TeamName, ClientIP;\nlet TeamsDelOffice = TeamsAddDelOffice(\"MemberRemoved\")\n  | project TimeDeleted = TimeGenerated, Operation, MemberRemoved = UPN, UserWhoDeleted = UserId, TeamName, ClientIP;\nlet TeamsAddEnriched = TeamsAddDelEnriched(\"MemberAdded\")\n  | project TimeAdded = TimeGenerated, Operation, MemberAdded = UPN, UserWhoAdded = UserId, TeamName, ClientIP;\nlet TeamsDelEnriched = TeamsAddDelEnriched(\"MemberRemoved\")\n  | project TimeDeleted = TimeGenerated, Operation, MemberRemoved = UPN, UserWhoDeleted = UserId, TeamName, ClientIP;\nlet TeamsAdd = TeamsAddOffice\n  | union TeamsAddEnriched\n  | project TimeAdded, Operation, MemberAdded, UserWhoAdded, TeamName, ClientIP;\nlet TeamsDel = TeamsDelOffice\n  | union TeamsDelEnriched\n  | project TimeDeleted, Operation, MemberRemoved, UserWhoDeleted, TeamName, ClientIP;\nTeamsAdd\n| join kind=inner (TeamsDel) on $left.MemberAdded == $right.MemberRemoved\n| where TimeDeleted > TimeAdded\n| project TimeAdded, TimeDeleted, MemberAdded_Removed = MemberAdded, UserWhoAdded, UserWhoDeleted, TeamName, ClientIP\n| extend MemberAdded_RemovedAccountName = tostring(split(MemberAdded_Removed, \"@\")[0]), MemberAdded_RemovedAccountUPNSuffix = tostring(split(MemberAdded_Removed, \"@\")[1])\n| extend UserWhoAddedAccountName = tostring(split(UserWhoAdded, \"@\")[0]), UserWhoAddedAccountUPNSuffix = tostring(split(UserWhoAdded, \"@\")[1])\n| extend UserWhoDeletedAccountName = tostring(split(UserWhoDeleted, \"@\")[0]), UserWhoDeletedAccountUPNSuffix = tostring(split(UserWhoDeleted, \"@\")[1])\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Searches for triggered Indicators of Exposures related to privileged accounts issues.\n Topic: TenableAD"}, {"role": "assistant", "content": "// For the query to work properly, make sure you have imported the afad_parser.kql parser into the workspace\n// Retrieve the parser here: https://raw.githubusercontent.com/tenable/Azure-Sentinel/Tenable.ad-connector/Solutions/TenableAD/Parsers/afad_parser.kql\n// Then, create the Kusto Function with alias afad_parser\nlet SeverityTable=datatable(Severity:string,Level:int) [\n\"low\", 1,\n\"medium\", 2,\n\"high\", 3,\n\"critical\", 4\n];\nlet codeNameList = datatable(Codename:string)[\"C-PRIV-ACCOUNTS-SPN\", \"C-NATIVE-ADM-GROUP-MEMBERS\", \"C-KRBTGT-PASSWORD\", \"C-PROTECTED-USERS-GROUP-UNUSED\", \"C-ADMINCOUNT-ACCOUNT-PROPS\", \"C-ADM-ACC-USAGE\", \"C-LAPS-UNSECURE-CONFIG\", \"C-DISABLED-ACCOUNTS-PRIV-GROUPS\"];\nafad_parser\n| where MessageType == 0 and Codename in~ (codeNameList)\n| lookup kind=leftouter SeverityTable on Severity\n| order by Level\n| extend HostName = tostring(split(Host, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Host, '.'), 1, -1), '.'))\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Detects alerts with maximum risk score value.\n Topic: PaloAltoPrismaCloud"}, {"role": "assistant", "content": "PaloAltoPrismaCloud\n| where Reason =~ 'NEW_ALERT'\n| where Status =~ 'open'\n| where RiskDetailRiskScoreScore == RiskDetailRiskScoreMaxScore\n| extend AccountCustomEntity = UserName\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Dev-0530 actors are known to encrypt the contents of the victims device as well as renaming the file extensions. This query looks for the creation of files with .h0lyenc extension or presence of ransom note.\n Topic: Detections"}, {"role": "assistant", "content": "union isfuzzy=true\n    (DeviceFileEvents\n    | where ActionType == \"FileCreated\"\n    | where FileName endswith \".h0lyenc\" or FolderPath == \"C:\\\\FOR_DECRYPT.html\"\n    | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated)\n        by\n        AccountName = InitiatingProcessAccountName, AccountDomain = InitiatingProcessAccountDomain,\n        DeviceName,\n        Type,\n        InitiatingProcessId,\n        FileName,\n        FolderPath,\n        EventType = ActionType,\n        Commandline = InitiatingProcessCommandLine,\n        InitiatingProcessFileName,\n        InitiatingProcessSHA256,\n        FileHashCustomEntity = SHA256,\n        AlgorithmCustomEntity = \"SHA256\"\n    | extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n    | extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n    ),\n    (imFileEvent\n    | where EventType == \"FileCreated\"\n    | where TargetFilePath endswith \".h0lyenc\" or TargetFilePath == \"C:\\\\FOR_DECRYPT.html\"\n    | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated)\n        by\n        ActorUsername,\n        DvcHostname,\n        DvcDomain,\n        DvcId,\n        Type,\n        EventType,\n        FileHashCustomEntity = TargetFileSHA256,\n        Hash,\n        TargetFilePath,\n        Commandline = ActingProcessCommandLine,\n        AlgorithmCustomEntity = \"SHA256\"\n    | extend AccountName = tostring(split(ActorUsername, @'\\')[1]), AccountDomain = tostring(split(ActorUsername, @'\\')[0])\n    | extend HostName = DvcHostname, HostNameDomain = DvcDomain\n    | extend DeviceName = strcat(DvcHostname, \".\", DvcDomain )\n    )\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "Shows all users tagged as terminated employees in the Terminated Employees watchlist that had activities after their termination date.\n Topic: UEBA Essentials"}, {"role": "assistant", "content": "//Consider creating the watchlist named \"TerminatedEmployees\" having column \"User Principal Name\" with details of terminated employees\n//If you already have watch list with diffrent name then consider modifying the query\n_GetWatchlist('TerminatedEmployees') \n| join kind=innerunique (BehaviorAnalytics) \n  on $left.['User Principal Name'] == $right.UserPrincipalName\n| where TimeGenerated > todatetime(['Termination date'])\n| extend AadUserId = UsersInsights.AccountObjectID\n| extend Account_0_AadUserId = AadUserId\n"}]}
{"messages": [{"role": "system", "content": "You are an expert in creating Kusto Query Language (KQL) queries. You are given a description and you will output the KQL query"}, {"role": "user", "content": "This query aims to detect instances of successful AWS console login events followed by multiple failed app logons alerts generated by Microsoft Cloud App Security or password spray alerts generated by Defender Products.\n Specifically, it focuses on scenarios where the successful login takes place within a 60-minute timeframe of the high-severity alert. \n The login is considered relevant if it originates from an IP address associated with potential attackers.\n Topic: Multi Cloud Attack Coverage Essentials - Resource Abuse"}, {"role": "assistant", "content": "SecurityAlert \n// Filtering alerts based on Microsoft product names and Relevent alert names\n  | where ProductName in ( \"Microsoft Cloud App Security\",\"Azure Active Directory Identity Protection\")\n  |where AlertName in (\"Multiple failed user log on attempts to an app\",\"Password Spray\")\n// Parsing and extending the 'Entities' column as JSON objects\n  | extend Entities = parse_json(Entities) \n// Exploring IP entities within the alert entities\n  | mv-apply Entity = Entities on \n      ( \n      where Entity.Type == 'ip' \n      | extend EntityIp = tostring(Entity.Address) \n      ) \n// Exploring account entities within the alert entities\n  | mv-apply Entity = Entities on \n      ( \n      where Entity.Type == 'account' \n      | extend AccountObjectId = tostring(Entity.AadUserId)\n      )\n// Filtering out alerts with missing IP or account information\n  | where isnotempty(EntityIp) and isnotempty(AccountObjectId)\n// Summarizing relevant fields for further analysis\n  | summarize \n      by \n      AlertName,\n      ProductName,\n      ProviderName,\n      AlertSeverity,\n      EntityIp,\n      Tactics,\n      Techniques,\n      AlertTime= bin(TimeGenerated, 1min),\n      AccountObjectId,\n      AlertTimeGenerated=TimeGenerated\n// Joining with IdentityInfo to obtain additional account details\n  | join kind=inner (\n      IdentityInfo\n      | where TimeGenerated >= ago(1d)\n      | distinct AccountObjectId, AccountUPN=tolower(AccountUPN)\n      )\n      on AccountObjectId \n      |extend Name = tostring(split(AccountUPN,'@')[0]), UPNSuffix =tostring(split(AccountUPN,'@')[1])\n// Joining with AWSCloudTrail data to correlate AWS console logins\n  | join kind=inner (\n      AWSCloudTrail\n      | where EventName == \"ConsoleLogin\"\n      | extend CTUPN= tolower(tostring(tolower(split(UserIdentityArn, \"/\", 2)[0])))\n      | extend ActionType= tostring(parse_json(ResponseElements).ConsoleLogin)  \n      | where ActionType == \"Success\"\n      | extend AWSTime= bin(TimeGenerated, 1min)\n      | project\n          EventName,\n          EventSource,\n          EventTypeName,\n          RecipientAccountId,\n          ResponseElements,\n          SessionMfaAuthenticated,\n          SourceIpAddress,\n          TimeGenerated,\n          UserAgent,\n          UserIdentityArn,\n          UserIdentityType,\n          CTUPN,\n          AWSTime,\n          UserIdentityUserName\n      )\n      on $left.EntityIp == $right.SourceIpAddress \n// Filtering login event after the Alert generation time\n  | where AlertTimeGenerated between ((AWSTime - 1h)..(AWSTime + 1h))\n// Calculating the time difference between alert generation and AWS login\n  | extend timediff = datetime_diff('minute', AlertTimeGenerated, TimeGenerated) \n// Filtering alerts with a time difference of up to 60 minutes\n  | where timediff <= 60\n"}]}
